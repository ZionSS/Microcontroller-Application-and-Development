
767_SPI_ILI9341_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fe8  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00026044  080091e8  080091e8  000191e8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802f22c  0802f22c  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  0802f22c  0802f22c  0003f22c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802f234  0802f234  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802f234  0802f234  0003f234  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802f238  0802f238  0003f238  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0802f23c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000017c  200001e0  0802f41c  000401e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000035c  0802f41c  0004035c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000134a8  00000000  00000000  0004020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000307b  00000000  00000000  000536b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001200  00000000  00000000  00056738  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00057938  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a88c  00000000  00000000  000589c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016dc0  00000000  00000000  0008324c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff97d  00000000  00000000  0009a00c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00199989  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005948  00000000  00000000  001999dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	080091d0 	.word	0x080091d0

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	080091d0 	.word	0x080091d0

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b08e      	sub	sp, #56	; 0x38
 80005f8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
 8000602:	605a      	str	r2, [r3, #4]
 8000604:	609a      	str	r2, [r3, #8]
 8000606:	60da      	str	r2, [r3, #12]
 8000608:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800060a:	4b8d      	ldr	r3, [pc, #564]	; (8000840 <MX_GPIO_Init+0x24c>)
 800060c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060e:	4a8c      	ldr	r2, [pc, #560]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000610:	f043 0310 	orr.w	r3, r3, #16
 8000614:	6313      	str	r3, [r2, #48]	; 0x30
 8000616:	4b8a      	ldr	r3, [pc, #552]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	f003 0310 	and.w	r3, r3, #16
 800061e:	623b      	str	r3, [r7, #32]
 8000620:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000622:	4b87      	ldr	r3, [pc, #540]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a86      	ldr	r2, [pc, #536]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b84      	ldr	r3, [pc, #528]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	61fb      	str	r3, [r7, #28]
 8000638:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800063a:	4b81      	ldr	r3, [pc, #516]	; (8000840 <MX_GPIO_Init+0x24c>)
 800063c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063e:	4a80      	ldr	r2, [pc, #512]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000640:	f043 0320 	orr.w	r3, r3, #32
 8000644:	6313      	str	r3, [r2, #48]	; 0x30
 8000646:	4b7e      	ldr	r3, [pc, #504]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064a:	f003 0320 	and.w	r3, r3, #32
 800064e:	61bb      	str	r3, [r7, #24]
 8000650:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000652:	4b7b      	ldr	r3, [pc, #492]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a7a      	ldr	r2, [pc, #488]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000658:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b78      	ldr	r3, [pc, #480]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800066a:	4b75      	ldr	r3, [pc, #468]	; (8000840 <MX_GPIO_Init+0x24c>)
 800066c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066e:	4a74      	ldr	r2, [pc, #464]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000670:	f043 0301 	orr.w	r3, r3, #1
 8000674:	6313      	str	r3, [r2, #48]	; 0x30
 8000676:	4b72      	ldr	r3, [pc, #456]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	f003 0301 	and.w	r3, r3, #1
 800067e:	613b      	str	r3, [r7, #16]
 8000680:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000682:	4b6f      	ldr	r3, [pc, #444]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a6e      	ldr	r2, [pc, #440]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b6c      	ldr	r3, [pc, #432]	; (8000840 <MX_GPIO_Init+0x24c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	60fb      	str	r3, [r7, #12]
 8000698:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800069a:	4b69      	ldr	r3, [pc, #420]	; (8000840 <MX_GPIO_Init+0x24c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a68      	ldr	r2, [pc, #416]	; (8000840 <MX_GPIO_Init+0x24c>)
 80006a0:	f043 0308 	orr.w	r3, r3, #8
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b66      	ldr	r3, [pc, #408]	; (8000840 <MX_GPIO_Init+0x24c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0308 	and.w	r3, r3, #8
 80006ae:	60bb      	str	r3, [r7, #8]
 80006b0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006b2:	4b63      	ldr	r3, [pc, #396]	; (8000840 <MX_GPIO_Init+0x24c>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a62      	ldr	r2, [pc, #392]	; (8000840 <MX_GPIO_Init+0x24c>)
 80006b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b60      	ldr	r3, [pc, #384]	; (8000840 <MX_GPIO_Init+0x24c>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 80006ca:	2200      	movs	r2, #0
 80006cc:	2168      	movs	r1, #104	; 0x68
 80006ce:	485d      	ldr	r0, [pc, #372]	; (8000844 <MX_GPIO_Init+0x250>)
 80006d0:	f003 f9fa 	bl	8003ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80006d4:	2200      	movs	r2, #0
 80006d6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80006da:	485b      	ldr	r0, [pc, #364]	; (8000848 <MX_GPIO_Init+0x254>)
 80006dc:	f003 f9f4 	bl	8003ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80006e0:	2200      	movs	r2, #0
 80006e2:	2140      	movs	r1, #64	; 0x40
 80006e4:	4859      	ldr	r0, [pc, #356]	; (800084c <MX_GPIO_Init+0x258>)
 80006e6:	f003 f9ef 	bl	8003ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 80006ea:	2200      	movs	r2, #0
 80006ec:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 80006f0:	4857      	ldr	r0, [pc, #348]	; (8000850 <MX_GPIO_Init+0x25c>)
 80006f2:	f003 f9e9 	bl	8003ac8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 80006f6:	2314      	movs	r3, #20
 80006f8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80006fa:	2300      	movs	r3, #0
 80006fc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000702:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000706:	4619      	mov	r1, r3
 8000708:	484e      	ldr	r0, [pc, #312]	; (8000844 <MX_GPIO_Init+0x250>)
 800070a:	f003 f819 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800070e:	2368      	movs	r3, #104	; 0x68
 8000710:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000712:	2301      	movs	r3, #1
 8000714:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000722:	4619      	mov	r1, r3
 8000724:	4847      	ldr	r0, [pc, #284]	; (8000844 <MX_GPIO_Init+0x250>)
 8000726:	f003 f80b 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 800072a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800072e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000730:	2300      	movs	r3, #0
 8000732:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000734:	2300      	movs	r3, #0
 8000736:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 8000738:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800073c:	4619      	mov	r1, r3
 800073e:	4844      	ldr	r0, [pc, #272]	; (8000850 <MX_GPIO_Init+0x25c>)
 8000740:	f002 fffe 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000744:	2332      	movs	r3, #50	; 0x32
 8000746:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000748:	2302      	movs	r3, #2
 800074a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074c:	2300      	movs	r3, #0
 800074e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000750:	2303      	movs	r3, #3
 8000752:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000754:	230b      	movs	r3, #11
 8000756:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000758:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800075c:	4619      	mov	r1, r3
 800075e:	483c      	ldr	r0, [pc, #240]	; (8000850 <MX_GPIO_Init+0x25c>)
 8000760:	f002 ffee 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000764:	2386      	movs	r3, #134	; 0x86
 8000766:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000774:	230b      	movs	r3, #11
 8000776:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000778:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800077c:	4619      	mov	r1, r3
 800077e:	4835      	ldr	r0, [pc, #212]	; (8000854 <MX_GPIO_Init+0x260>)
 8000780:	f002 ffde 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000788:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800078a:	2302      	movs	r3, #2
 800078c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078e:	2300      	movs	r3, #0
 8000790:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000792:	2303      	movs	r3, #3
 8000794:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000796:	230b      	movs	r3, #11
 8000798:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800079a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800079e:	4619      	mov	r1, r3
 80007a0:	4829      	ldr	r0, [pc, #164]	; (8000848 <MX_GPIO_Init+0x254>)
 80007a2:	f002 ffcd 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 80007a6:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 80007aa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007ac:	2301      	movs	r3, #1
 80007ae:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007b4:	2300      	movs	r3, #0
 80007b6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007bc:	4619      	mov	r1, r3
 80007be:	4822      	ldr	r0, [pc, #136]	; (8000848 <MX_GPIO_Init+0x254>)
 80007c0:	f002 ffbe 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80007c4:	2340      	movs	r3, #64	; 0x40
 80007c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	2301      	movs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80007d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d8:	4619      	mov	r1, r3
 80007da:	481c      	ldr	r0, [pc, #112]	; (800084c <MX_GPIO_Init+0x258>)
 80007dc:	f002 ffb0 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80007e0:	2380      	movs	r3, #128	; 0x80
 80007e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e8:	2300      	movs	r3, #0
 80007ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80007ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f0:	4619      	mov	r1, r3
 80007f2:	4816      	ldr	r0, [pc, #88]	; (800084c <MX_GPIO_Init+0x258>)
 80007f4:	f002 ffa4 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 80007f8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80007fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007fe:	2301      	movs	r3, #1
 8000800:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000802:	2300      	movs	r3, #0
 8000804:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000806:	2303      	movs	r3, #3
 8000808:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800080a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800080e:	4619      	mov	r1, r3
 8000810:	480f      	ldr	r0, [pc, #60]	; (8000850 <MX_GPIO_Init+0x25c>)
 8000812:	f002 ff95 	bl	8003740 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000816:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800081c:	2302      	movs	r3, #2
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000824:	2303      	movs	r3, #3
 8000826:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000828:	230b      	movs	r3, #11
 800082a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4806      	ldr	r0, [pc, #24]	; (800084c <MX_GPIO_Init+0x258>)
 8000834:	f002 ff84 	bl	8003740 <HAL_GPIO_Init>

}
 8000838:	bf00      	nop
 800083a:	3738      	adds	r7, #56	; 0x38
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40021000 	.word	0x40021000
 8000848:	40020400 	.word	0x40020400
 800084c:	40021800 	.word	0x40021800
 8000850:	40020800 	.word	0x40020800
 8000854:	40020000 	.word	0x40020000

08000858 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800085c:	f3bf 8f4f 	dsb	sy
}
 8000860:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000862:	f3bf 8f6f 	isb	sy
}
 8000866:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000868:	4b0d      	ldr	r3, [pc, #52]	; (80008a0 <SCB_EnableICache+0x48>)
 800086a:	2200      	movs	r2, #0
 800086c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000870:	f3bf 8f4f 	dsb	sy
}
 8000874:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000876:	f3bf 8f6f 	isb	sy
}
 800087a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800087c:	4b08      	ldr	r3, [pc, #32]	; (80008a0 <SCB_EnableICache+0x48>)
 800087e:	695b      	ldr	r3, [r3, #20]
 8000880:	4a07      	ldr	r2, [pc, #28]	; (80008a0 <SCB_EnableICache+0x48>)
 8000882:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000886:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000888:	f3bf 8f4f 	dsb	sy
}
 800088c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800088e:	f3bf 8f6f 	isb	sy
}
 8000892:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000894:	bf00      	nop
 8000896:	46bd      	mov	sp, r7
 8000898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089c:	4770      	bx	lr
 800089e:	bf00      	nop
 80008a0:	e000ed00 	.word	0xe000ed00

080008a4 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b085      	sub	sp, #20
 80008a8:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <SCB_EnableDCache+0x84>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80008b2:	f3bf 8f4f 	dsb	sy
}
 80008b6:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 80008b8:	4b1b      	ldr	r3, [pc, #108]	; (8000928 <SCB_EnableDCache+0x84>)
 80008ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80008be:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	0b5b      	lsrs	r3, r3, #13
 80008c4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 80008c8:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	08db      	lsrs	r3, r3, #3
 80008ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80008d2:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	015a      	lsls	r2, r3, #5
 80008d8:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 80008dc:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 80008de:	68ba      	ldr	r2, [r7, #8]
 80008e0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80008e2:	4911      	ldr	r1, [pc, #68]	; (8000928 <SCB_EnableDCache+0x84>)
 80008e4:	4313      	orrs	r3, r2
 80008e6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	1e5a      	subs	r2, r3, #1
 80008ee:	60ba      	str	r2, [r7, #8]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d1ef      	bne.n	80008d4 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 80008f4:	68fb      	ldr	r3, [r7, #12]
 80008f6:	1e5a      	subs	r2, r3, #1
 80008f8:	60fa      	str	r2, [r7, #12]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d1e5      	bne.n	80008ca <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 80008fe:	f3bf 8f4f 	dsb	sy
}
 8000902:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000904:	4b08      	ldr	r3, [pc, #32]	; (8000928 <SCB_EnableDCache+0x84>)
 8000906:	695b      	ldr	r3, [r3, #20]
 8000908:	4a07      	ldr	r2, [pc, #28]	; (8000928 <SCB_EnableDCache+0x84>)
 800090a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800090e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000910:	f3bf 8f4f 	dsb	sy
}
 8000914:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000916:	f3bf 8f6f 	isb	sy
}
 800091a:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800091c:	bf00      	nop
 800091e:	3714      	adds	r7, #20
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr
 8000928:	e000ed00 	.word	0xe000ed00
 800092c:	00000000 	.word	0x00000000

08000930 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000930:	b590      	push	{r4, r7, lr}
 8000932:	b0c7      	sub	sp, #284	; 0x11c
 8000934:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000936:	f7ff ff8f 	bl	8000858 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800093a:	f7ff ffb3 	bl	80008a4 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800093e:	f002 fd89 	bl	8003454 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000942:	f000 ff73 	bl	800182c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000946:	f7ff fe55 	bl	80005f4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800094a:	f001 fa5b 	bl	8001e04 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 800094e:	f001 f83d 	bl	80019cc <MX_SPI5_Init>
  MX_TIM1_Init();
 8000952:	f001 f9e3 	bl	8001d1c <MX_TIM1_Init>
  MX_RNG_Init();
 8000956:	f001 f805 	bl	8001964 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 800095a:	f002 f8b5 	bl	8002ac8 <ILI9341_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  //----------------------------------------------------------PERFORMANCE TEST
	  		ILI9341_Fill_Screen(WHITE);
 800095e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000962:	f002 fa5d 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000966:	2001      	movs	r0, #1
 8000968:	f002 f850 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("FPS TEST, 40 loop 2 screens", 10, 10, BLACK, 1, WHITE);
 800096c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	2301      	movs	r3, #1
 8000974:	9300      	str	r3, [sp, #0]
 8000976:	2300      	movs	r3, #0
 8000978:	220a      	movs	r2, #10
 800097a:	210a      	movs	r1, #10
 800097c:	4890      	ldr	r0, [pc, #576]	; (8000bc0 <main+0x290>)
 800097e:	f001 fd95 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000982:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000986:	f002 fdd1 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800098a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800098e:	f002 fa47 	bl	8002e20 <ILI9341_Fill_Screen>

	  		uint32_t Timer_Counter = 0;
 8000992:	2300      	movs	r3, #0
 8000994:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  		for(uint32_t j = 0; j < 2; j++)
 8000998:	2300      	movs	r3, #0
 800099a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800099e:	e02a      	b.n	80009f6 <main+0xc6>
	  		{
	  			HAL_TIM_Base_Start(&htim1);
 80009a0:	4888      	ldr	r0, [pc, #544]	; (8000bc4 <main+0x294>)
 80009a2:	f004 fe67 	bl	8005674 <HAL_TIM_Base_Start>
	  			for(uint16_t i = 0; i < 10; i++)
 80009a6:	2300      	movs	r3, #0
 80009a8:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 80009ac:	e00b      	b.n	80009c6 <main+0x96>
	  			{
	  				ILI9341_Fill_Screen(WHITE);
 80009ae:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80009b2:	f002 fa35 	bl	8002e20 <ILI9341_Fill_Screen>
	  				ILI9341_Fill_Screen(BLACK);
 80009b6:	2000      	movs	r0, #0
 80009b8:	f002 fa32 	bl	8002e20 <ILI9341_Fill_Screen>
	  			for(uint16_t i = 0; i < 10; i++)
 80009bc:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80009c0:	3301      	adds	r3, #1
 80009c2:	f8a7 3106 	strh.w	r3, [r7, #262]	; 0x106
 80009c6:	f8b7 3106 	ldrh.w	r3, [r7, #262]	; 0x106
 80009ca:	2b09      	cmp	r3, #9
 80009cc:	d9ef      	bls.n	80009ae <main+0x7e>
	  			}

	  			//20.000 per second!
	  			HAL_TIM_Base_Stop(&htim1);
 80009ce:	487d      	ldr	r0, [pc, #500]	; (8000bc4 <main+0x294>)
 80009d0:	f004 fec0 	bl	8005754 <HAL_TIM_Base_Stop>
	  			Timer_Counter += __HAL_TIM_GET_COUNTER(&htim1);
 80009d4:	4b7b      	ldr	r3, [pc, #492]	; (8000bc4 <main+0x294>)
 80009d6:	681b      	ldr	r3, [r3, #0]
 80009d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009da:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80009de:	4413      	add	r3, r2
 80009e0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
	  			__HAL_TIM_SET_COUNTER(&htim1, 0);
 80009e4:	4b77      	ldr	r3, [pc, #476]	; (8000bc4 <main+0x294>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	2200      	movs	r2, #0
 80009ea:	625a      	str	r2, [r3, #36]	; 0x24
	  		for(uint32_t j = 0; j < 2; j++)
 80009ec:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009f0:	3301      	adds	r3, #1
 80009f2:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80009f6:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d9d0      	bls.n	80009a0 <main+0x70>
	  		}
	  		Timer_Counter /= 2;
 80009fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a02:	085b      	lsrs	r3, r3, #1
 8000a04:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

	  		char counter_buff[30];
	  		ILI9341_Fill_Screen(WHITE);
 8000a08:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000a0c:	f002 fa08 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000a10:	2001      	movs	r0, #1
 8000a12:	f001 fffb 	bl	8002a0c <ILI9341_Set_Rotation>
	  		sprintf(counter_buff, "Timer counter value: %ld", Timer_Counter*2);
 8000a16:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a1a:	005a      	lsls	r2, r3, #1
 8000a1c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000a20:	4969      	ldr	r1, [pc, #420]	; (8000bc8 <main+0x298>)
 8000a22:	4618      	mov	r0, r3
 8000a24:	f006 f9da 	bl	8006ddc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 10, BLACK, 1, WHITE);
 8000a28:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a2c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a30:	9301      	str	r3, [sp, #4]
 8000a32:	2301      	movs	r3, #1
 8000a34:	9300      	str	r3, [sp, #0]
 8000a36:	2300      	movs	r3, #0
 8000a38:	220a      	movs	r2, #10
 8000a3a:	210a      	movs	r1, #10
 8000a3c:	f001 fd36 	bl	80024ac <ILI9341_Draw_Text>

	  		double seconds_passed = 2*((float)Timer_Counter / 20000);
 8000a40:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a44:	ee07 3a90 	vmov	s15, r3
 8000a48:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000a4c:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8000bcc <main+0x29c>
 8000a50:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a54:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000a58:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000a5c:	ed87 7b36 	vstr	d7, [r7, #216]	; 0xd8
	  		sprintf(counter_buff, "Time: %.3f Sec", seconds_passed);
 8000a60:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a64:	e9d7 2336 	ldrd	r2, r3, [r7, #216]	; 0xd8
 8000a68:	4959      	ldr	r1, [pc, #356]	; (8000bd0 <main+0x2a0>)
 8000a6a:	f006 f9b7 	bl	8006ddc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 30, BLACK, 2, WHITE);
 8000a6e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000a72:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a76:	9301      	str	r3, [sp, #4]
 8000a78:	2302      	movs	r3, #2
 8000a7a:	9300      	str	r3, [sp, #0]
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	221e      	movs	r2, #30
 8000a80:	210a      	movs	r1, #10
 8000a82:	f001 fd13 	bl	80024ac <ILI9341_Draw_Text>

	  		double timer_float = 20/(((float)Timer_Counter)/20000);	//Frames per sec
 8000a86:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000a8a:	ee07 3a90 	vmov	s15, r3
 8000a8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a92:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8000bcc <main+0x29c>
 8000a96:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000a9a:	eef3 6a04 	vmov.f32	s13, #52	; 0x41a00000  20.0
 8000a9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000aa2:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000aa6:	ed87 7b34 	vstr	d7, [r7, #208]	; 0xd0

	  		sprintf(counter_buff, "FPS:  %.2f", timer_float);
 8000aaa:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000aae:	e9d7 2334 	ldrd	r2, r3, [r7, #208]	; 0xd0
 8000ab2:	4948      	ldr	r1, [pc, #288]	; (8000bd4 <main+0x2a4>)
 8000ab4:	f006 f992 	bl	8006ddc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 50, BLACK, 2, WHITE);
 8000ab8:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000abc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000ac0:	9301      	str	r3, [sp, #4]
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	2232      	movs	r2, #50	; 0x32
 8000aca:	210a      	movs	r1, #10
 8000acc:	f001 fcee 	bl	80024ac <ILI9341_Draw_Text>
	  		double MB_PS = timer_float*240*320*2/1000000;
 8000ad0:	ed97 7b34 	vldr	d7, [r7, #208]	; 0xd0
 8000ad4:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000ba0 <main+0x270>
 8000ad8:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000adc:	ed9f 6b32 	vldr	d6, [pc, #200]	; 8000ba8 <main+0x278>
 8000ae0:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000ae4:	ee37 6b07 	vadd.f64	d6, d7, d7
 8000ae8:	ed9f 5b31 	vldr	d5, [pc, #196]	; 8000bb0 <main+0x280>
 8000aec:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000af0:	ed87 7b32 	vstr	d7, [r7, #200]	; 0xc8
	  		sprintf(counter_buff, "MB/S: %.2f", MB_PS);
 8000af4:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000af8:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 8000afc:	4936      	ldr	r1, [pc, #216]	; (8000bd8 <main+0x2a8>)
 8000afe:	f006 f96d 	bl	8006ddc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 70, BLACK, 2, WHITE);
 8000b02:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000b06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b0a:	9301      	str	r3, [sp, #4]
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	9300      	str	r3, [sp, #0]
 8000b10:	2300      	movs	r3, #0
 8000b12:	2246      	movs	r2, #70	; 0x46
 8000b14:	210a      	movs	r1, #10
 8000b16:	f001 fcc9 	bl	80024ac <ILI9341_Draw_Text>
	  		double SPI_utilized_percentage = (MB_PS/(6.25 ))*100;		//50mbits / 8 bits
 8000b1a:	ed97 6b32 	vldr	d6, [r7, #200]	; 0xc8
 8000b1e:	eeb1 5b09 	vmov.f64	d5, #25	; 0x40c80000  6.250
 8000b22:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8000b26:	ed9f 6b24 	vldr	d6, [pc, #144]	; 8000bb8 <main+0x288>
 8000b2a:	ee27 7b06 	vmul.f64	d7, d7, d6
 8000b2e:	ed87 7b30 	vstr	d7, [r7, #192]	; 0xc0
	  		sprintf(counter_buff, "SPI Utilized: %.2f", SPI_utilized_percentage);
 8000b32:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000b36:	e9d7 2330 	ldrd	r2, r3, [r7, #192]	; 0xc0
 8000b3a:	4928      	ldr	r1, [pc, #160]	; (8000bdc <main+0x2ac>)
 8000b3c:	f006 f94e 	bl	8006ddc <siprintf>
	  		ILI9341_Draw_Text(counter_buff, 10, 90, BLACK, 2, WHITE);
 8000b40:	f107 0050 	add.w	r0, r7, #80	; 0x50
 8000b44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b48:	9301      	str	r3, [sp, #4]
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	9300      	str	r3, [sp, #0]
 8000b4e:	2300      	movs	r3, #0
 8000b50:	225a      	movs	r2, #90	; 0x5a
 8000b52:	210a      	movs	r1, #10
 8000b54:	f001 fcaa 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(10000);
 8000b58:	f242 7010 	movw	r0, #10000	; 0x2710
 8000b5c:	f002 fce6 	bl	800352c <HAL_Delay>
	  		static uint16_t y = 0;

	  		char Temp_Buffer_text[40];

	  //----------------------------------------------------------COUNTING MULTIPLE SEGMENTS
	  		ILI9341_Fill_Screen(WHITE);
 8000b60:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b64:	f002 f95c 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f001 ff4f 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting multiple segments at once", 10, 10, BLACK, 1, WHITE);
 8000b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b72:	9301      	str	r3, [sp, #4]
 8000b74:	2301      	movs	r3, #1
 8000b76:	9300      	str	r3, [sp, #0]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	220a      	movs	r2, #10
 8000b7c:	210a      	movs	r1, #10
 8000b7e:	4818      	ldr	r0, [pc, #96]	; (8000be0 <main+0x2b0>)
 8000b80:	f001 fc94 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000b84:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000b88:	f002 fcd0 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000b8c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b90:	f002 f946 	bl	8002e20 <ILI9341_Fill_Screen>


	  		for(uint16_t i = 0; i <= 10; i++)
 8000b94:	2300      	movs	r3, #0
 8000b96:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8000b9a:	e0ab      	b.n	8000cf4 <main+0x3c4>
 8000b9c:	f3af 8000 	nop.w
 8000ba0:	00000000 	.word	0x00000000
 8000ba4:	406e0000 	.word	0x406e0000
 8000ba8:	00000000 	.word	0x00000000
 8000bac:	40740000 	.word	0x40740000
 8000bb0:	00000000 	.word	0x00000000
 8000bb4:	412e8480 	.word	0x412e8480
 8000bb8:	00000000 	.word	0x00000000
 8000bbc:	40590000 	.word	0x40590000
 8000bc0:	080091e8 	.word	0x080091e8
 8000bc4:	20000278 	.word	0x20000278
 8000bc8:	08009204 	.word	0x08009204
 8000bcc:	469c4000 	.word	0x469c4000
 8000bd0:	08009220 	.word	0x08009220
 8000bd4:	08009230 	.word	0x08009230
 8000bd8:	0800923c 	.word	0x0800923c
 8000bdc:	08009248 	.word	0x08009248
 8000be0:	0800925c 	.word	0x0800925c
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000be4:	f8b7 2104 	ldrh.w	r2, [r7, #260]	; 0x104
 8000be8:	1d3b      	adds	r3, r7, #4
 8000bea:	49d9      	ldr	r1, [pc, #868]	; (8000f50 <main+0x620>)
 8000bec:	4618      	mov	r0, r3
 8000bee:	f006 f8f5 	bl	8006ddc <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 2, WHITE);
 8000bf2:	1d38      	adds	r0, r7, #4
 8000bf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000bf8:	9301      	str	r3, [sp, #4]
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	2300      	movs	r3, #0
 8000c00:	220a      	movs	r2, #10
 8000c02:	210a      	movs	r1, #10
 8000c04:	f001 fc52 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 30, BLUE, 2, WHITE);
 8000c08:	1d38      	adds	r0, r7, #4
 8000c0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c0e:	9301      	str	r3, [sp, #4]
 8000c10:	2302      	movs	r3, #2
 8000c12:	9300      	str	r3, [sp, #0]
 8000c14:	231f      	movs	r3, #31
 8000c16:	221e      	movs	r2, #30
 8000c18:	210a      	movs	r1, #10
 8000c1a:	f001 fc47 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 50, RED, 2, WHITE);
 8000c1e:	1d38      	adds	r0, r7, #4
 8000c20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c24:	9301      	str	r3, [sp, #4]
 8000c26:	2302      	movs	r3, #2
 8000c28:	9300      	str	r3, [sp, #0]
 8000c2a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c2e:	2232      	movs	r2, #50	; 0x32
 8000c30:	210a      	movs	r1, #10
 8000c32:	f001 fc3b 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 70, GREEN, 2, WHITE);
 8000c36:	1d38      	adds	r0, r7, #4
 8000c38:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c3c:	9301      	str	r3, [sp, #4]
 8000c3e:	2302      	movs	r3, #2
 8000c40:	9300      	str	r3, [sp, #0]
 8000c42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000c46:	2246      	movs	r2, #70	; 0x46
 8000c48:	210a      	movs	r1, #10
 8000c4a:	f001 fc2f 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 90, BLACK, 2, WHITE);
 8000c4e:	1d38      	adds	r0, r7, #4
 8000c50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c54:	9301      	str	r3, [sp, #4]
 8000c56:	2302      	movs	r3, #2
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	225a      	movs	r2, #90	; 0x5a
 8000c5e:	210a      	movs	r1, #10
 8000c60:	f001 fc24 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 110, BLUE, 2, WHITE);
 8000c64:	1d38      	adds	r0, r7, #4
 8000c66:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c6a:	9301      	str	r3, [sp, #4]
 8000c6c:	2302      	movs	r3, #2
 8000c6e:	9300      	str	r3, [sp, #0]
 8000c70:	231f      	movs	r3, #31
 8000c72:	226e      	movs	r2, #110	; 0x6e
 8000c74:	210a      	movs	r1, #10
 8000c76:	f001 fc19 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 130, RED, 2, WHITE);
 8000c7a:	1d38      	adds	r0, r7, #4
 8000c7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c80:	9301      	str	r3, [sp, #4]
 8000c82:	2302      	movs	r3, #2
 8000c84:	9300      	str	r3, [sp, #0]
 8000c86:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000c8a:	2282      	movs	r2, #130	; 0x82
 8000c8c:	210a      	movs	r1, #10
 8000c8e:	f001 fc0d 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 150, GREEN, 2, WHITE);
 8000c92:	1d38      	adds	r0, r7, #4
 8000c94:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000c98:	9301      	str	r3, [sp, #4]
 8000c9a:	2302      	movs	r3, #2
 8000c9c:	9300      	str	r3, [sp, #0]
 8000c9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000ca2:	2296      	movs	r2, #150	; 0x96
 8000ca4:	210a      	movs	r1, #10
 8000ca6:	f001 fc01 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 170, WHITE, 2, BLACK);
 8000caa:	1d38      	adds	r0, r7, #4
 8000cac:	2300      	movs	r3, #0
 8000cae:	9301      	str	r3, [sp, #4]
 8000cb0:	2302      	movs	r3, #2
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000cb8:	22aa      	movs	r2, #170	; 0xaa
 8000cba:	210a      	movs	r1, #10
 8000cbc:	f001 fbf6 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 190, BLUE, 2, BLACK);
 8000cc0:	1d38      	adds	r0, r7, #4
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	9301      	str	r3, [sp, #4]
 8000cc6:	2302      	movs	r3, #2
 8000cc8:	9300      	str	r3, [sp, #0]
 8000cca:	231f      	movs	r3, #31
 8000ccc:	22be      	movs	r2, #190	; 0xbe
 8000cce:	210a      	movs	r1, #10
 8000cd0:	f001 fbec 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 210, RED, 2, BLACK);
 8000cd4:	1d38      	adds	r0, r7, #4
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	9301      	str	r3, [sp, #4]
 8000cda:	2302      	movs	r3, #2
 8000cdc:	9300      	str	r3, [sp, #0]
 8000cde:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ce2:	22d2      	movs	r2, #210	; 0xd2
 8000ce4:	210a      	movs	r1, #10
 8000ce6:	f001 fbe1 	bl	80024ac <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 10; i++)
 8000cea:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8000cee:	3301      	adds	r3, #1
 8000cf0:	f8a7 3104 	strh.w	r3, [r7, #260]	; 0x104
 8000cf4:	f8b7 3104 	ldrh.w	r3, [r7, #260]	; 0x104
 8000cf8:	2b0a      	cmp	r3, #10
 8000cfa:	f67f af73 	bls.w	8000be4 <main+0x2b4>
	  		}

	  		HAL_Delay(1000);
 8000cfe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d02:	f002 fc13 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------COUNTING SINGLE SEGMENT
	  		ILI9341_Fill_Screen(WHITE);
 8000d06:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d0a:	f002 f889 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000d0e:	2001      	movs	r0, #1
 8000d10:	f001 fe7c 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Counting single segment", 10, 10, BLACK, 1, WHITE);
 8000d14:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d18:	9301      	str	r3, [sp, #4]
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	9300      	str	r3, [sp, #0]
 8000d1e:	2300      	movs	r3, #0
 8000d20:	220a      	movs	r2, #10
 8000d22:	210a      	movs	r1, #10
 8000d24:	488b      	ldr	r0, [pc, #556]	; (8000f54 <main+0x624>)
 8000d26:	f001 fbc1 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000d2a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000d2e:	f002 fbfd 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000d32:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d36:	f002 f873 	bl	8002e20 <ILI9341_Fill_Screen>

	  		for(uint16_t i = 0; i <= 100; i++)
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 8000d40:	e016      	b.n	8000d70 <main+0x440>
	  		{
	  		sprintf(Temp_Buffer_text, "Counting: %d", i);
 8000d42:	f8b7 2102 	ldrh.w	r2, [r7, #258]	; 0x102
 8000d46:	1d3b      	adds	r3, r7, #4
 8000d48:	4981      	ldr	r1, [pc, #516]	; (8000f50 <main+0x620>)
 8000d4a:	4618      	mov	r0, r3
 8000d4c:	f006 f846 	bl	8006ddc <siprintf>
	  		ILI9341_Draw_Text(Temp_Buffer_text, 10, 10, BLACK, 3, WHITE);
 8000d50:	1d38      	adds	r0, r7, #4
 8000d52:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d56:	9301      	str	r3, [sp, #4]
 8000d58:	2303      	movs	r3, #3
 8000d5a:	9300      	str	r3, [sp, #0]
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	220a      	movs	r2, #10
 8000d60:	210a      	movs	r1, #10
 8000d62:	f001 fba3 	bl	80024ac <ILI9341_Draw_Text>
	  		for(uint16_t i = 0; i <= 100; i++)
 8000d66:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000d6a:	3301      	adds	r3, #1
 8000d6c:	f8a7 3102 	strh.w	r3, [r7, #258]	; 0x102
 8000d70:	f8b7 3102 	ldrh.w	r3, [r7, #258]	; 0x102
 8000d74:	2b64      	cmp	r3, #100	; 0x64
 8000d76:	d9e4      	bls.n	8000d42 <main+0x412>
	  		}

	  		HAL_Delay(1000);
 8000d78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000d7c:	f002 fbd6 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------ALIGNMENT TEST
	  		ILI9341_Fill_Screen(WHITE);
 8000d80:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000d84:	f002 f84c 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000d88:	2001      	movs	r0, #1
 8000d8a:	f001 fe3f 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Rectangle alignment check", 10, 10, BLACK, 1, WHITE);
 8000d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000d92:	9301      	str	r3, [sp, #4]
 8000d94:	2301      	movs	r3, #1
 8000d96:	9300      	str	r3, [sp, #0]
 8000d98:	2300      	movs	r3, #0
 8000d9a:	220a      	movs	r2, #10
 8000d9c:	210a      	movs	r1, #10
 8000d9e:	486e      	ldr	r0, [pc, #440]	; (8000f58 <main+0x628>)
 8000da0:	f001 fb84 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000da4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000da8:	f002 fbc0 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000dac:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000db0:	f002 f836 	bl	8002e20 <ILI9341_Fill_Screen>

	  		ILI9341_Draw_Hollow_Rectangle_Coord(50, 50, 100, 100, BLACK);
 8000db4:	2300      	movs	r3, #0
 8000db6:	9300      	str	r3, [sp, #0]
 8000db8:	2364      	movs	r3, #100	; 0x64
 8000dba:	2264      	movs	r2, #100	; 0x64
 8000dbc:	2132      	movs	r1, #50	; 0x32
 8000dbe:	2032      	movs	r0, #50	; 0x32
 8000dc0:	f001 f9fb 	bl	80021ba <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		ILI9341_Draw_Filled_Rectangle_Coord(20, 20, 50, 50, BLACK);
 8000dc4:	2300      	movs	r3, #0
 8000dc6:	9300      	str	r3, [sp, #0]
 8000dc8:	2332      	movs	r3, #50	; 0x32
 8000dca:	2232      	movs	r2, #50	; 0x32
 8000dcc:	2114      	movs	r1, #20
 8000dce:	2014      	movs	r0, #20
 8000dd0:	f001 fa74 	bl	80022bc <ILI9341_Draw_Filled_Rectangle_Coord>
	  		ILI9341_Draw_Hollow_Rectangle_Coord(10, 10, 19, 19, BLACK);
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	9300      	str	r3, [sp, #0]
 8000dd8:	2313      	movs	r3, #19
 8000dda:	2213      	movs	r2, #19
 8000ddc:	210a      	movs	r1, #10
 8000dde:	200a      	movs	r0, #10
 8000de0:	f001 f9eb 	bl	80021ba <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		HAL_Delay(1000);
 8000de4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000de8:	f002 fba0 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------LINES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000dec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000df0:	f002 f816 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000df4:	2001      	movs	r0, #1
 8000df6:	f001 fe09 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dfe:	9301      	str	r3, [sp, #4]
 8000e00:	2301      	movs	r3, #1
 8000e02:	9300      	str	r3, [sp, #0]
 8000e04:	2300      	movs	r3, #0
 8000e06:	220a      	movs	r2, #10
 8000e08:	210a      	movs	r1, #10
 8000e0a:	4854      	ldr	r0, [pc, #336]	; (8000f5c <main+0x62c>)
 8000e0c:	f001 fb4e 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Horizontal and Vertical lines", 10, 20, BLACK, 1, WHITE);
 8000e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e14:	9301      	str	r3, [sp, #4]
 8000e16:	2301      	movs	r3, #1
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	2214      	movs	r2, #20
 8000e1e:	210a      	movs	r1, #10
 8000e20:	484f      	ldr	r0, [pc, #316]	; (8000f60 <main+0x630>)
 8000e22:	f001 fb43 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000e26:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000e2a:	f002 fb7f 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000e2e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000e32:	f001 fff5 	bl	8002e20 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 30000; i++)
 8000e36:	2300      	movs	r3, #0
 8000e38:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000e3c:	e054      	b.n	8000ee8 <main+0x5b8>
	  		{
	  			uint32_t random_num = 0;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	67bb      	str	r3, [r7, #120]	; 0x78
	  			uint16_t xr = 0;
 8000e42:	2300      	movs	r3, #0
 8000e44:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			uint16_t yr = 0;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			uint16_t radiusr = 0;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			uint16_t colourr = 0;
 8000e54:	2300      	movs	r3, #0
 8000e56:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e5a:	4842      	ldr	r0, [pc, #264]	; (8000f64 <main+0x634>)
 8000e5c:	f004 f823 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000e60:	67b8      	str	r0, [r7, #120]	; 0x78
	  			xr = random_num;
 8000e62:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e64:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e68:	483e      	ldr	r0, [pc, #248]	; (8000f64 <main+0x634>)
 8000e6a:	f004 f81c 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000e6e:	67b8      	str	r0, [r7, #120]	; 0x78
	  			yr = random_num;
 8000e70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e72:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e76:	483b      	ldr	r0, [pc, #236]	; (8000f64 <main+0x634>)
 8000e78:	f004 f815 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000e7c:	67b8      	str	r0, [r7, #120]	; 0x78
	  			radiusr = random_num;
 8000e7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e80:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000e84:	4837      	ldr	r0, [pc, #220]	; (8000f64 <main+0x634>)
 8000e86:	f004 f80e 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000e8a:	67b8      	str	r0, [r7, #120]	; 0x78
	  			colourr = random_num;
 8000e8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8000e8e:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70

	  			xr &= 0x01FF;
 8000e92:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8000e96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e9a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
	  			yr &= 0x01FF;
 8000e9e:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8000ea2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ea6:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
	  			radiusr &= 0x001F;
 8000eaa:	f8b7 3072 	ldrh.w	r3, [r7, #114]	; 0x72
 8000eae:	f003 031f 	and.w	r3, r3, #31
 8000eb2:	f8a7 3072 	strh.w	r3, [r7, #114]	; 0x72
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Horizontal_Line(xr, yr, radiusr, colourr);
 8000eb6:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000eba:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000ebe:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8000ec2:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 8000ec6:	f002 f907 	bl	80030d8 <ILI9341_Draw_Horizontal_Line>
	  			ILI9341_Draw_Vertical_Line(xr, yr, radiusr, colourr);
 8000eca:	f8b7 3070 	ldrh.w	r3, [r7, #112]	; 0x70
 8000ece:	f8b7 2072 	ldrh.w	r2, [r7, #114]	; 0x72
 8000ed2:	f8b7 1074 	ldrh.w	r1, [r7, #116]	; 0x74
 8000ed6:	f8b7 0076 	ldrh.w	r0, [r7, #118]	; 0x76
 8000eda:	f002 f941 	bl	8003160 <ILI9341_Draw_Vertical_Line>
	  		for(uint32_t i = 0; i < 30000; i++)
 8000ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000ee2:	3301      	adds	r3, #1
 8000ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8000ee8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8000eec:	f247 522f 	movw	r2, #29999	; 0x752f
 8000ef0:	4293      	cmp	r3, r2
 8000ef2:	d9a4      	bls.n	8000e3e <main+0x50e>
	  		}

	  		HAL_Delay(1000);
 8000ef4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000ef8:	f002 fb18 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------HOLLOW CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8000efc:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f00:	f001 ff8e 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f001 fd81 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8000f0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f0e:	9301      	str	r3, [sp, #4]
 8000f10:	2301      	movs	r3, #1
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	2300      	movs	r3, #0
 8000f16:	220a      	movs	r2, #10
 8000f18:	210a      	movs	r1, #10
 8000f1a:	4810      	ldr	r0, [pc, #64]	; (8000f5c <main+0x62c>)
 8000f1c:	f001 fac6 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Circles", 10, 20, BLACK, 1, WHITE);
 8000f20:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f24:	9301      	str	r3, [sp, #4]
 8000f26:	2301      	movs	r3, #1
 8000f28:	9300      	str	r3, [sp, #0]
 8000f2a:	2300      	movs	r3, #0
 8000f2c:	2214      	movs	r2, #20
 8000f2e:	210a      	movs	r1, #10
 8000f30:	480d      	ldr	r0, [pc, #52]	; (8000f68 <main+0x638>)
 8000f32:	f001 fabb 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8000f36:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000f3a:	f002 faf7 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 8000f3e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000f42:	f001 ff6d 	bl	8002e20 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 3000; i++)
 8000f46:	2300      	movs	r3, #0
 8000f48:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8000f4c:	e064      	b.n	8001018 <main+0x6e8>
 8000f4e:	bf00      	nop
 8000f50:	08009280 	.word	0x08009280
 8000f54:	08009290 	.word	0x08009290
 8000f58:	080092a8 	.word	0x080092a8
 8000f5c:	080092c4 	.word	0x080092c4
 8000f60:	080092e0 	.word	0x080092e0
 8000f64:	20000200 	.word	0x20000200
 8000f68:	08009300 	.word	0x08009300
	  		{
	  			uint32_t random_num = 0;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	  			uint16_t xr = 0;
 8000f72:	2300      	movs	r3, #0
 8000f74:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			uint16_t yr = 0;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			uint16_t radiusr = 0;
 8000f7e:	2300      	movs	r3, #0
 8000f80:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			uint16_t colourr = 0;
 8000f84:	2300      	movs	r3, #0
 8000f86:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f8a:	48cb      	ldr	r0, [pc, #812]	; (80012b8 <main+0x988>)
 8000f8c:	f003 ff8b 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000f90:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			xr = random_num;
 8000f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000f98:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000f9c:	48c6      	ldr	r0, [pc, #792]	; (80012b8 <main+0x988>)
 8000f9e:	f003 ff82 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000fa2:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			yr = random_num;
 8000fa6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000faa:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fae:	48c2      	ldr	r0, [pc, #776]	; (80012b8 <main+0x988>)
 8000fb0:	f003 ff79 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000fb4:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			radiusr = random_num;
 8000fb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fbc:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8000fc0:	48bd      	ldr	r0, [pc, #756]	; (80012b8 <main+0x988>)
 8000fc2:	f003 ff70 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8000fc6:	f8c7 0084 	str.w	r0, [r7, #132]	; 0x84
	  			colourr = random_num;
 8000fca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8000fce:	f8a7 307c 	strh.w	r3, [r7, #124]	; 0x7c

	  			xr &= 0x01FF;
 8000fd2:	f8b7 3082 	ldrh.w	r3, [r7, #130]	; 0x82
 8000fd6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fda:	f8a7 3082 	strh.w	r3, [r7, #130]	; 0x82
	  			yr &= 0x01FF;
 8000fde:	f8b7 3080 	ldrh.w	r3, [r7, #128]	; 0x80
 8000fe2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fe6:	f8a7 3080 	strh.w	r3, [r7, #128]	; 0x80
	  			radiusr &= 0x001F;
 8000fea:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000fee:	f003 031f 	and.w	r3, r3, #31
 8000ff2:	f8a7 307e 	strh.w	r3, [r7, #126]	; 0x7e
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Circle(xr, yr, radiusr*2, colourr);
 8000ff6:	f8b7 307e 	ldrh.w	r3, [r7, #126]	; 0x7e
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	b29a      	uxth	r2, r3
 8000ffe:	f8b7 307c 	ldrh.w	r3, [r7, #124]	; 0x7c
 8001002:	f8b7 1080 	ldrh.w	r1, [r7, #128]	; 0x80
 8001006:	f8b7 0082 	ldrh.w	r0, [r7, #130]	; 0x82
 800100a:	f000 ff98 	bl	8001f3e <ILI9341_Draw_Hollow_Circle>
	  		for(uint32_t i = 0; i < 3000; i++)
 800100e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001012:	3301      	adds	r3, #1
 8001014:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001018:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800101c:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001020:	4293      	cmp	r3, r2
 8001022:	d9a3      	bls.n	8000f6c <main+0x63c>
	  		}
	  		HAL_Delay(1000);
 8001024:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001028:	f002 fa80 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------FILLED CIRCLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800102c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001030:	f001 fef6 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001034:	2001      	movs	r0, #1
 8001036:	f001 fce9 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800103a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	2301      	movs	r3, #1
 8001042:	9300      	str	r3, [sp, #0]
 8001044:	2300      	movs	r3, #0
 8001046:	220a      	movs	r2, #10
 8001048:	210a      	movs	r1, #10
 800104a:	489c      	ldr	r0, [pc, #624]	; (80012bc <main+0x98c>)
 800104c:	f001 fa2e 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Circles", 10, 20, BLACK, 1, WHITE);
 8001050:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001054:	9301      	str	r3, [sp, #4]
 8001056:	2301      	movs	r3, #1
 8001058:	9300      	str	r3, [sp, #0]
 800105a:	2300      	movs	r3, #0
 800105c:	2214      	movs	r2, #20
 800105e:	210a      	movs	r1, #10
 8001060:	4897      	ldr	r0, [pc, #604]	; (80012c0 <main+0x990>)
 8001062:	f001 fa23 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001066:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800106a:	f002 fa5f 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800106e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001072:	f001 fed5 	bl	8002e20 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 1000; i++)
 8001076:	2300      	movs	r3, #0
 8001078:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800107c:	e055      	b.n	800112a <main+0x7fa>
	  		{
	  			uint32_t random_num = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
	  			uint16_t xr = 0;
 8001084:	2300      	movs	r3, #0
 8001086:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			uint16_t yr = 0;
 800108a:	2300      	movs	r3, #0
 800108c:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			uint16_t radiusr = 0;
 8001090:	2300      	movs	r3, #0
 8001092:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			uint16_t colourr = 0;
 8001096:	2300      	movs	r3, #0
 8001098:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800109c:	4886      	ldr	r0, [pc, #536]	; (80012b8 <main+0x988>)
 800109e:	f003 ff02 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80010a2:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			xr = random_num;
 80010a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010aa:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80010ae:	4882      	ldr	r0, [pc, #520]	; (80012b8 <main+0x988>)
 80010b0:	f003 fef9 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80010b4:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			yr = random_num;
 80010b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010bc:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80010c0:	487d      	ldr	r0, [pc, #500]	; (80012b8 <main+0x988>)
 80010c2:	f003 fef0 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80010c6:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			radiusr = random_num;
 80010ca:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010ce:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80010d2:	4879      	ldr	r0, [pc, #484]	; (80012b8 <main+0x988>)
 80010d4:	f003 fee7 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80010d8:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90
	  			colourr = random_num;
 80010dc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80010e0:	f8a7 3088 	strh.w	r3, [r7, #136]	; 0x88

	  			xr &= 0x01FF;
 80010e4:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80010e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010ec:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
	  			yr &= 0x01FF;
 80010f0:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 80010f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80010f8:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
	  			radiusr &= 0x001F;
 80010fc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8001100:	f003 031f 	and.w	r3, r3, #31
 8001104:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Filled_Circle(xr, yr, radiusr/2, colourr);
 8001108:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 800110c:	085b      	lsrs	r3, r3, #1
 800110e:	b29a      	uxth	r2, r3
 8001110:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8001114:	f8b7 108c 	ldrh.w	r1, [r7, #140]	; 0x8c
 8001118:	f8b7 008e 	ldrh.w	r0, [r7, #142]	; 0x8e
 800111c:	f000 ffc5 	bl	80020aa <ILI9341_Draw_Filled_Circle>
	  		for(uint32_t i = 0; i < 1000; i++)
 8001120:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001124:	3301      	adds	r3, #1
 8001126:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800112a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800112e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001132:	d3a4      	bcc.n	800107e <main+0x74e>
	  		}
	  		HAL_Delay(1000);
 8001134:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001138:	f002 f9f8 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------HOLLOW RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 800113c:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001140:	f001 fe6e 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001144:	2001      	movs	r0, #1
 8001146:	f001 fc61 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 800114a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800114e:	9301      	str	r3, [sp, #4]
 8001150:	2301      	movs	r3, #1
 8001152:	9300      	str	r3, [sp, #0]
 8001154:	2300      	movs	r3, #0
 8001156:	220a      	movs	r2, #10
 8001158:	210a      	movs	r1, #10
 800115a:	4858      	ldr	r0, [pc, #352]	; (80012bc <main+0x98c>)
 800115c:	f001 f9a6 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Rectangles", 10, 20, BLACK, 1, WHITE);
 8001160:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001164:	9301      	str	r3, [sp, #4]
 8001166:	2301      	movs	r3, #1
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	2300      	movs	r3, #0
 800116c:	2214      	movs	r2, #20
 800116e:	210a      	movs	r1, #10
 8001170:	4854      	ldr	r0, [pc, #336]	; (80012c4 <main+0x994>)
 8001172:	f001 f99b 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 8001176:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800117a:	f002 f9d7 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 800117e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001182:	f001 fe4d 	bl	8002e20 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 8001186:	2300      	movs	r3, #0
 8001188:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800118c:	e060      	b.n	8001250 <main+0x920>
	  		{
	  			uint32_t random_num = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	  			uint16_t xr = 0;
 8001194:	2300      	movs	r3, #0
 8001196:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			uint16_t yr = 0;
 800119a:	2300      	movs	r3, #0
 800119c:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			uint16_t radiusr = 0;
 80011a0:	2300      	movs	r3, #0
 80011a2:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			uint16_t colourr = 0;
 80011a6:	2300      	movs	r3, #0
 80011a8:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011ac:	4842      	ldr	r0, [pc, #264]	; (80012b8 <main+0x988>)
 80011ae:	f003 fe7a 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80011b2:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			xr = random_num;
 80011b6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011ba:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011be:	483e      	ldr	r0, [pc, #248]	; (80012b8 <main+0x988>)
 80011c0:	f003 fe71 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80011c4:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			yr = random_num;
 80011c8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011cc:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011d0:	4839      	ldr	r0, [pc, #228]	; (80012b8 <main+0x988>)
 80011d2:	f003 fe68 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80011d6:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			radiusr = random_num;
 80011da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011de:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80011e2:	4835      	ldr	r0, [pc, #212]	; (80012b8 <main+0x988>)
 80011e4:	f003 fe5f 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80011e8:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	  			colourr = random_num;
 80011ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80011f0:	f8a7 3094 	strh.w	r3, [r7, #148]	; 0x94

	  			xr &= 0x01FF;
 80011f4:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 80011f8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011fc:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
	  			yr &= 0x01FF;
 8001200:	f8b7 3098 	ldrh.w	r3, [r7, #152]	; 0x98
 8001204:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001208:	f8a7 3098 	strh.w	r3, [r7, #152]	; 0x98
	  			radiusr &= 0x001F;
 800120c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001210:	f003 031f 	and.w	r3, r3, #31
 8001214:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Hollow_Rectangle_Coord(xr, yr, xr+radiusr, yr+radiusr, colourr);
 8001218:	f8b7 209a 	ldrh.w	r2, [r7, #154]	; 0x9a
 800121c:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 8001220:	4413      	add	r3, r2
 8001222:	b29c      	uxth	r4, r3
 8001224:	f8b7 2098 	ldrh.w	r2, [r7, #152]	; 0x98
 8001228:	f8b7 3096 	ldrh.w	r3, [r7, #150]	; 0x96
 800122c:	4413      	add	r3, r2
 800122e:	b29a      	uxth	r2, r3
 8001230:	f8b7 1098 	ldrh.w	r1, [r7, #152]	; 0x98
 8001234:	f8b7 009a 	ldrh.w	r0, [r7, #154]	; 0x9a
 8001238:	f8b7 3094 	ldrh.w	r3, [r7, #148]	; 0x94
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	4613      	mov	r3, r2
 8001240:	4622      	mov	r2, r4
 8001242:	f000 ffba 	bl	80021ba <ILI9341_Draw_Hollow_Rectangle_Coord>
	  		for(uint32_t i = 0; i < 20000; i++)
 8001246:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800124a:	3301      	adds	r3, #1
 800124c:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8001250:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8001254:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001258:	4293      	cmp	r3, r2
 800125a:	d998      	bls.n	800118e <main+0x85e>
	  		}
	  		HAL_Delay(1000);
 800125c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001260:	f002 f964 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------FILLED RECTANGLES EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 8001264:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001268:	f001 fdda 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800126c:	2001      	movs	r0, #1
 800126e:	f001 fbcd 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Randomly placed and sized", 10, 10, BLACK, 1, WHITE);
 8001272:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001276:	9301      	str	r3, [sp, #4]
 8001278:	2301      	movs	r3, #1
 800127a:	9300      	str	r3, [sp, #0]
 800127c:	2300      	movs	r3, #0
 800127e:	220a      	movs	r2, #10
 8001280:	210a      	movs	r1, #10
 8001282:	480e      	ldr	r0, [pc, #56]	; (80012bc <main+0x98c>)
 8001284:	f001 f912 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Filled Rectangles", 10, 20, BLACK, 1, WHITE);
 8001288:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800128c:	9301      	str	r3, [sp, #4]
 800128e:	2301      	movs	r3, #1
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2300      	movs	r3, #0
 8001294:	2214      	movs	r2, #20
 8001296:	210a      	movs	r1, #10
 8001298:	480b      	ldr	r0, [pc, #44]	; (80012c8 <main+0x998>)
 800129a:	f001 f907 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 800129e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80012a2:	f002 f943 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80012a6:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80012aa:	f001 fdb9 	bl	8002e20 <ILI9341_Fill_Screen>

	  		for(uint32_t i = 0; i < 20000; i++)
 80012ae:	2300      	movs	r3, #0
 80012b0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80012b4:	e062      	b.n	800137c <main+0xa4c>
 80012b6:	bf00      	nop
 80012b8:	20000200 	.word	0x20000200
 80012bc:	080092c4 	.word	0x080092c4
 80012c0:	08009308 	.word	0x08009308
 80012c4:	08009318 	.word	0x08009318
 80012c8:	08009324 	.word	0x08009324
	  		{
	  			uint32_t random_num = 0;
 80012cc:	2300      	movs	r3, #0
 80012ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	  			uint16_t xr = 0;
 80012d2:	2300      	movs	r3, #0
 80012d4:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			uint16_t yr = 0;
 80012d8:	2300      	movs	r3, #0
 80012da:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			uint16_t radiusr = 0;
 80012de:	2300      	movs	r3, #0
 80012e0:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			uint16_t colourr = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012ea:	48b9      	ldr	r0, [pc, #740]	; (80015d0 <main+0xca0>)
 80012ec:	f003 fddb 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 80012f0:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			xr = random_num;
 80012f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80012f8:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 80012fc:	48b4      	ldr	r0, [pc, #720]	; (80015d0 <main+0xca0>)
 80012fe:	f003 fdd2 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8001302:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			yr = random_num;
 8001306:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800130a:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800130e:	48b0      	ldr	r0, [pc, #704]	; (80015d0 <main+0xca0>)
 8001310:	f003 fdc9 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8001314:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			radiusr = random_num;
 8001318:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800131c:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001320:	48ab      	ldr	r0, [pc, #684]	; (80015d0 <main+0xca0>)
 8001322:	f003 fdc0 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8001326:	f8c7 00a8 	str.w	r0, [r7, #168]	; 0xa8
	  			colourr = random_num;
 800132a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800132e:	f8a7 30a0 	strh.w	r3, [r7, #160]	; 0xa0

	  			xr &= 0x01FF;
 8001332:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 8001336:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800133a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
	  			yr &= 0x01FF;
 800133e:	f8b7 30a4 	ldrh.w	r3, [r7, #164]	; 0xa4
 8001342:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001346:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
	  			radiusr &= 0x001F;
 800134a:	f8b7 30a2 	ldrh.w	r3, [r7, #162]	; 0xa2
 800134e:	f003 031f 	and.w	r3, r3, #31
 8001352:	f8a7 30a2 	strh.w	r3, [r7, #162]	; 0xa2
	  			//ili9341_drawpixel(xr, yr, WHITE);
	  			ILI9341_Draw_Rectangle(xr, yr, radiusr, radiusr, colourr);
 8001356:	f8b7 40a2 	ldrh.w	r4, [r7, #162]	; 0xa2
 800135a:	f8b7 20a2 	ldrh.w	r2, [r7, #162]	; 0xa2
 800135e:	f8b7 10a4 	ldrh.w	r1, [r7, #164]	; 0xa4
 8001362:	f8b7 00a6 	ldrh.w	r0, [r7, #166]	; 0xa6
 8001366:	f8b7 30a0 	ldrh.w	r3, [r7, #160]	; 0xa0
 800136a:	9300      	str	r3, [sp, #0]
 800136c:	4623      	mov	r3, r4
 800136e:	f001 fe57 	bl	8003020 <ILI9341_Draw_Rectangle>
	  		for(uint32_t i = 0; i < 20000; i++)
 8001372:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001376:	3301      	adds	r3, #1
 8001378:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800137c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8001380:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001384:	4293      	cmp	r3, r2
 8001386:	d9a1      	bls.n	80012cc <main+0x99c>
	  		}
	  		HAL_Delay(1000);
 8001388:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800138c:	f002 f8ce 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE

	  		ILI9341_Fill_Screen(WHITE);
 8001390:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001394:	f001 fd44 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001398:	2001      	movs	r0, #1
 800139a:	f001 fb37 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Slow draw by selecting", 10, 10, BLACK, 1, WHITE);
 800139e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013a2:	9301      	str	r3, [sp, #4]
 80013a4:	2301      	movs	r3, #1
 80013a6:	9300      	str	r3, [sp, #0]
 80013a8:	2300      	movs	r3, #0
 80013aa:	220a      	movs	r2, #10
 80013ac:	210a      	movs	r1, #10
 80013ae:	4889      	ldr	r0, [pc, #548]	; (80015d4 <main+0xca4>)
 80013b0:	f001 f87c 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("and adressing pixels", 10, 20, BLACK, 1, WHITE);
 80013b4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80013b8:	9301      	str	r3, [sp, #4]
 80013ba:	2301      	movs	r3, #1
 80013bc:	9300      	str	r3, [sp, #0]
 80013be:	2300      	movs	r3, #0
 80013c0:	2214      	movs	r2, #20
 80013c2:	210a      	movs	r1, #10
 80013c4:	4884      	ldr	r0, [pc, #528]	; (80015d8 <main+0xca8>)
 80013c6:	f001 f871 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80013ca:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80013ce:	f002 f8ad 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80013d2:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80013d6:	f001 fd23 	bl	8002e20 <ILI9341_Fill_Screen>


	  		x = 0;
 80013da:	4b80      	ldr	r3, [pc, #512]	; (80015dc <main+0xcac>)
 80013dc:	2200      	movs	r2, #0
 80013de:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 80013e0:	4b7f      	ldr	r3, [pc, #508]	; (80015e0 <main+0xcb0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 80013e6:	e026      	b.n	8001436 <main+0xb06>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(x % 2)
 80013e8:	4b7c      	ldr	r3, [pc, #496]	; (80015dc <main+0xcac>)
 80013ea:	881b      	ldrh	r3, [r3, #0]
 80013ec:	f003 0301 	and.w	r3, r3, #1
 80013f0:	b29b      	uxth	r3, r3
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d007      	beq.n	8001406 <main+0xad6>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 80013f6:	4b79      	ldr	r3, [pc, #484]	; (80015dc <main+0xcac>)
 80013f8:	881b      	ldrh	r3, [r3, #0]
 80013fa:	4a79      	ldr	r2, [pc, #484]	; (80015e0 <main+0xcb0>)
 80013fc:	8811      	ldrh	r1, [r2, #0]
 80013fe:	2200      	movs	r2, #0
 8001400:	4618      	mov	r0, r3
 8001402:	f001 fd33 	bl	8002e6c <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 8001406:	4b75      	ldr	r3, [pc, #468]	; (80015dc <main+0xcac>)
 8001408:	881b      	ldrh	r3, [r3, #0]
 800140a:	3301      	adds	r3, #1
 800140c:	b29a      	uxth	r2, r3
 800140e:	4b73      	ldr	r3, [pc, #460]	; (80015dc <main+0xcac>)
 8001410:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 8001412:	4b72      	ldr	r3, [pc, #456]	; (80015dc <main+0xcac>)
 8001414:	881b      	ldrh	r3, [r3, #0]
 8001416:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800141a:	d203      	bcs.n	8001424 <main+0xaf4>
 800141c:	4b70      	ldr	r3, [pc, #448]	; (80015e0 <main+0xcb0>)
 800141e:	881b      	ldrh	r3, [r3, #0]
 8001420:	2bef      	cmp	r3, #239	; 0xef
 8001422:	d9e1      	bls.n	80013e8 <main+0xab8>
	  		}

	  			y++;
 8001424:	4b6e      	ldr	r3, [pc, #440]	; (80015e0 <main+0xcb0>)
 8001426:	881b      	ldrh	r3, [r3, #0]
 8001428:	3301      	adds	r3, #1
 800142a:	b29a      	uxth	r2, r3
 800142c:	4b6c      	ldr	r3, [pc, #432]	; (80015e0 <main+0xcb0>)
 800142e:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 8001430:	4b6a      	ldr	r3, [pc, #424]	; (80015dc <main+0xcac>)
 8001432:	2200      	movs	r2, #0
 8001434:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 8001436:	4b6a      	ldr	r3, [pc, #424]	; (80015e0 <main+0xcb0>)
 8001438:	881b      	ldrh	r3, [r3, #0]
 800143a:	2bef      	cmp	r3, #239	; 0xef
 800143c:	d9e9      	bls.n	8001412 <main+0xae2>
	  		}

	  		x = 0;
 800143e:	4b67      	ldr	r3, [pc, #412]	; (80015dc <main+0xcac>)
 8001440:	2200      	movs	r2, #0
 8001442:	801a      	strh	r2, [r3, #0]
	  		y = 0;
 8001444:	4b66      	ldr	r3, [pc, #408]	; (80015e0 <main+0xcb0>)
 8001446:	2200      	movs	r2, #0
 8001448:	801a      	strh	r2, [r3, #0]


	  		while (y < 240)
 800144a:	e026      	b.n	800149a <main+0xb6a>
	  		{
	  		while ((x < 320) && (y < 240))
	  		{

	  			if(y % 2)
 800144c:	4b64      	ldr	r3, [pc, #400]	; (80015e0 <main+0xcb0>)
 800144e:	881b      	ldrh	r3, [r3, #0]
 8001450:	f003 0301 	and.w	r3, r3, #1
 8001454:	b29b      	uxth	r3, r3
 8001456:	2b00      	cmp	r3, #0
 8001458:	d007      	beq.n	800146a <main+0xb3a>
	  			{
	  				ILI9341_Draw_Pixel(x, y, BLACK);
 800145a:	4b60      	ldr	r3, [pc, #384]	; (80015dc <main+0xcac>)
 800145c:	881b      	ldrh	r3, [r3, #0]
 800145e:	4a60      	ldr	r2, [pc, #384]	; (80015e0 <main+0xcb0>)
 8001460:	8811      	ldrh	r1, [r2, #0]
 8001462:	2200      	movs	r2, #0
 8001464:	4618      	mov	r0, r3
 8001466:	f001 fd01 	bl	8002e6c <ILI9341_Draw_Pixel>
	  			}

	  			x++;
 800146a:	4b5c      	ldr	r3, [pc, #368]	; (80015dc <main+0xcac>)
 800146c:	881b      	ldrh	r3, [r3, #0]
 800146e:	3301      	adds	r3, #1
 8001470:	b29a      	uxth	r2, r3
 8001472:	4b5a      	ldr	r3, [pc, #360]	; (80015dc <main+0xcac>)
 8001474:	801a      	strh	r2, [r3, #0]
	  		while ((x < 320) && (y < 240))
 8001476:	4b59      	ldr	r3, [pc, #356]	; (80015dc <main+0xcac>)
 8001478:	881b      	ldrh	r3, [r3, #0]
 800147a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800147e:	d203      	bcs.n	8001488 <main+0xb58>
 8001480:	4b57      	ldr	r3, [pc, #348]	; (80015e0 <main+0xcb0>)
 8001482:	881b      	ldrh	r3, [r3, #0]
 8001484:	2bef      	cmp	r3, #239	; 0xef
 8001486:	d9e1      	bls.n	800144c <main+0xb1c>
	  		}

	  			y++;
 8001488:	4b55      	ldr	r3, [pc, #340]	; (80015e0 <main+0xcb0>)
 800148a:	881b      	ldrh	r3, [r3, #0]
 800148c:	3301      	adds	r3, #1
 800148e:	b29a      	uxth	r2, r3
 8001490:	4b53      	ldr	r3, [pc, #332]	; (80015e0 <main+0xcb0>)
 8001492:	801a      	strh	r2, [r3, #0]
	  			x = 0;
 8001494:	4b51      	ldr	r3, [pc, #324]	; (80015dc <main+0xcac>)
 8001496:	2200      	movs	r2, #0
 8001498:	801a      	strh	r2, [r3, #0]
	  		while (y < 240)
 800149a:	4b51      	ldr	r3, [pc, #324]	; (80015e0 <main+0xcb0>)
 800149c:	881b      	ldrh	r3, [r3, #0]
 800149e:	2bef      	cmp	r3, #239	; 0xef
 80014a0:	d9e9      	bls.n	8001476 <main+0xb46>
	  		}
	  		HAL_Delay(2000);
 80014a2:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014a6:	f002 f841 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------INDIVIDUAL PIXEL EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 80014aa:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014ae:	f001 fcb7 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80014b2:	2001      	movs	r0, #1
 80014b4:	f001 faaa 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Random position and colour", 10, 10, BLACK, 1, WHITE);
 80014b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014bc:	9301      	str	r3, [sp, #4]
 80014be:	2301      	movs	r3, #1
 80014c0:	9300      	str	r3, [sp, #0]
 80014c2:	2300      	movs	r3, #0
 80014c4:	220a      	movs	r2, #10
 80014c6:	210a      	movs	r1, #10
 80014c8:	4846      	ldr	r0, [pc, #280]	; (80015e4 <main+0xcb4>)
 80014ca:	f000 ffef 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("500000 pixels", 10, 20, BLACK, 1, WHITE);
 80014ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80014d2:	9301      	str	r3, [sp, #4]
 80014d4:	2301      	movs	r3, #1
 80014d6:	9300      	str	r3, [sp, #0]
 80014d8:	2300      	movs	r3, #0
 80014da:	2214      	movs	r2, #20
 80014dc:	210a      	movs	r1, #10
 80014de:	4842      	ldr	r0, [pc, #264]	; (80015e8 <main+0xcb8>)
 80014e0:	f000 ffe4 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80014e4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80014e8:	f002 f820 	bl	800352c <HAL_Delay>
	  		ILI9341_Fill_Screen(WHITE);
 80014ec:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80014f0:	f001 fc96 	bl	8002e20 <ILI9341_Fill_Screen>


	  		for(uint32_t i = 0; i < 500000; i++)
 80014f4:	2300      	movs	r3, #0
 80014f6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80014fa:	e03a      	b.n	8001572 <main+0xc42>
	  		{
	  			uint32_t random_num = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
	  			uint16_t xr = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			uint16_t yr = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 800150e:	4830      	ldr	r0, [pc, #192]	; (80015d0 <main+0xca0>)
 8001510:	f003 fcc9 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8001514:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  			xr = random_num;
 8001518:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800151c:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			random_num = HAL_RNG_GetRandomNumber(&hrng);
 8001520:	482b      	ldr	r0, [pc, #172]	; (80015d0 <main+0xca0>)
 8001522:	f003 fcc0 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8001526:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
	  			yr = random_num;
 800152a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800152e:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			uint16_t color = HAL_RNG_GetRandomNumber(&hrng);
 8001532:	4827      	ldr	r0, [pc, #156]	; (80015d0 <main+0xca0>)
 8001534:	f003 fcb7 	bl	8004ea6 <HAL_RNG_GetRandomNumber>
 8001538:	4603      	mov	r3, r0
 800153a:	f8a7 30ae 	strh.w	r3, [r7, #174]	; 0xae

	  			xr &= 0x01FF;
 800153e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001542:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001546:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
	  			yr &= 0x01FF;
 800154a:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	; 0xb0
 800154e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001552:	f8a7 30b0 	strh.w	r3, [r7, #176]	; 0xb0
	  			ILI9341_Draw_Pixel(xr, yr, color);
 8001556:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	; 0xae
 800155a:	f8b7 10b0 	ldrh.w	r1, [r7, #176]	; 0xb0
 800155e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 8001562:	4618      	mov	r0, r3
 8001564:	f001 fc82 	bl	8002e6c <ILI9341_Draw_Pixel>
	  		for(uint32_t i = 0; i < 500000; i++)
 8001568:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800156c:	3301      	adds	r3, #1
 800156e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001572:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8001576:	4a1d      	ldr	r2, [pc, #116]	; (80015ec <main+0xcbc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d9bf      	bls.n	80014fc <main+0xbcc>
	  		}
	  		HAL_Delay(2000);
 800157c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001580:	f001 ffd4 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------565 COLOUR EXAMPLE, Grayscale
	  		ILI9341_Fill_Screen(WHITE);
 8001584:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001588:	f001 fc4a 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800158c:	2001      	movs	r0, #1
 800158e:	f001 fa3d 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Colour gradient", 10, 10, BLACK, 1, WHITE);
 8001592:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001596:	9301      	str	r3, [sp, #4]
 8001598:	2301      	movs	r3, #1
 800159a:	9300      	str	r3, [sp, #0]
 800159c:	2300      	movs	r3, #0
 800159e:	220a      	movs	r2, #10
 80015a0:	210a      	movs	r1, #10
 80015a2:	4813      	ldr	r0, [pc, #76]	; (80015f0 <main+0xcc0>)
 80015a4:	f000 ff82 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Grayscale", 10, 20, BLACK, 1, WHITE);
 80015a8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015ac:	9301      	str	r3, [sp, #4]
 80015ae:	2301      	movs	r3, #1
 80015b0:	9300      	str	r3, [sp, #0]
 80015b2:	2300      	movs	r3, #0
 80015b4:	2214      	movs	r2, #20
 80015b6:	210a      	movs	r1, #10
 80015b8:	480e      	ldr	r0, [pc, #56]	; (80015f4 <main+0xcc4>)
 80015ba:	f000 ff77 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80015be:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80015c2:	f001 ffb3 	bl	800352c <HAL_Delay>


	  		for(uint16_t i = 0; i <= (320); i++)
 80015c6:	2300      	movs	r3, #0
 80015c8:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 80015cc:	e05a      	b.n	8001684 <main+0xd54>
 80015ce:	bf00      	nop
 80015d0:	20000200 	.word	0x20000200
 80015d4:	08009338 	.word	0x08009338
 80015d8:	08009350 	.word	0x08009350
 80015dc:	200001fc 	.word	0x200001fc
 80015e0:	200001fe 	.word	0x200001fe
 80015e4:	08009368 	.word	0x08009368
 80015e8:	08009384 	.word	0x08009384
 80015ec:	0007a11f 	.word	0x0007a11f
 80015f0:	08009394 	.word	0x08009394
 80015f4:	080093a4 	.word	0x080093a4
	  		{
	  			uint16_t Red = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			uint16_t Green = 0;
 80015fe:	2300      	movs	r3, #0
 8001600:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			uint16_t Blue = 0;
 8001604:	2300      	movs	r3, #0
 8001606:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba

	  			Red = i/(10);
 800160a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 800160e:	4a7d      	ldr	r2, [pc, #500]	; (8001804 <main+0xed4>)
 8001610:	fba2 2303 	umull	r2, r3, r2, r3
 8001614:	08db      	lsrs	r3, r3, #3
 8001616:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			Red <<= 11;
 800161a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800161e:	02db      	lsls	r3, r3, #11
 8001620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
	  			Green = i/(5);
 8001624:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001628:	4a76      	ldr	r2, [pc, #472]	; (8001804 <main+0xed4>)
 800162a:	fba2 2303 	umull	r2, r3, r2, r3
 800162e:	089b      	lsrs	r3, r3, #2
 8001630:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			Green <<= 5;
 8001634:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001638:	015b      	lsls	r3, r3, #5
 800163a:	f8a7 30bc 	strh.w	r3, [r7, #188]	; 0xbc
	  			Blue = i/(10);
 800163e:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001642:	4a70      	ldr	r2, [pc, #448]	; (8001804 <main+0xed4>)
 8001644:	fba2 2303 	umull	r2, r3, r2, r3
 8001648:	08db      	lsrs	r3, r3, #3
 800164a:	f8a7 30ba 	strh.w	r3, [r7, #186]	; 0xba



	  			uint16_t RGB_color = Red + Green + Blue;
 800164e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8001652:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	; 0xbc
 8001656:	4413      	add	r3, r2
 8001658:	b29a      	uxth	r2, r3
 800165a:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	; 0xba
 800165e:	4413      	add	r3, r2
 8001660:	f8a7 30b8 	strh.w	r3, [r7, #184]	; 0xb8
	  			ILI9341_Draw_Rectangle(i, x, 1, 240, RGB_color);
 8001664:	4b68      	ldr	r3, [pc, #416]	; (8001808 <main+0xed8>)
 8001666:	8819      	ldrh	r1, [r3, #0]
 8001668:	f8b7 00e6 	ldrh.w	r0, [r7, #230]	; 0xe6
 800166c:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	; 0xb8
 8001670:	9300      	str	r3, [sp, #0]
 8001672:	23f0      	movs	r3, #240	; 0xf0
 8001674:	2201      	movs	r2, #1
 8001676:	f001 fcd3 	bl	8003020 <ILI9341_Draw_Rectangle>
	  		for(uint16_t i = 0; i <= (320); i++)
 800167a:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 800167e:	3301      	adds	r3, #1
 8001680:	f8a7 30e6 	strh.w	r3, [r7, #230]	; 0xe6
 8001684:	f8b7 30e6 	ldrh.w	r3, [r7, #230]	; 0xe6
 8001688:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800168c:	d9b4      	bls.n	80015f8 <main+0xcc8>

	  		}
	  		HAL_Delay(2000);
 800168e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001692:	f001 ff4b 	bl	800352c <HAL_Delay>

	  //----------------------------------------------------------IMAGE EXAMPLE, Snow Tiger
	  		ILI9341_Fill_Screen(WHITE);
 8001696:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800169a:	f001 fbc1 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800169e:	2001      	movs	r0, #1
 80016a0:	f001 f9b4 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("RGB Picture", 10, 10, BLACK, 1, WHITE);
 80016a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016a8:	9301      	str	r3, [sp, #4]
 80016aa:	2301      	movs	r3, #1
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	2300      	movs	r3, #0
 80016b0:	220a      	movs	r2, #10
 80016b2:	210a      	movs	r1, #10
 80016b4:	4855      	ldr	r0, [pc, #340]	; (800180c <main+0xedc>)
 80016b6:	f000 fef9 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("TIGER", 10, 20, BLACK, 1, WHITE);
 80016ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	2301      	movs	r3, #1
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2300      	movs	r3, #0
 80016c6:	2214      	movs	r2, #20
 80016c8:	210a      	movs	r1, #10
 80016ca:	4851      	ldr	r0, [pc, #324]	; (8001810 <main+0xee0>)
 80016cc:	f000 feee 	bl	80024ac <ILI9341_Draw_Text>
	  		HAL_Delay(2000);
 80016d0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80016d4:	f001 ff2a 	bl	800352c <HAL_Delay>
	  		ILI9341_Draw_Image((const char*)snow_tiger, SCREEN_VERTICAL_2);
 80016d8:	2102      	movs	r1, #2
 80016da:	484e      	ldr	r0, [pc, #312]	; (8001814 <main+0xee4>)
 80016dc:	f000 ff16 	bl	800250c <ILI9341_Draw_Image>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80016e0:	2000      	movs	r0, #0
 80016e2:	f001 f993 	bl	8002a0c <ILI9341_Set_Rotation>
	  		HAL_Delay(5000);
 80016e6:	f241 3088 	movw	r0, #5000	; 0x1388
 80016ea:	f001 ff1f 	bl	800352c <HAL_Delay>


	  //----------------------------------------------------------TOUCHSCREEN EXAMPLE
	  		ILI9341_Fill_Screen(WHITE);
 80016ee:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80016f2:	f001 fb95 	bl	8002e20 <ILI9341_Fill_Screen>
	  		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 80016f6:	2001      	movs	r0, #1
 80016f8:	f001 f988 	bl	8002a0c <ILI9341_Set_Rotation>
	  		ILI9341_Draw_Text("Touchscreen", 10, 10, BLACK, 2, WHITE);
 80016fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001700:	9301      	str	r3, [sp, #4]
 8001702:	2302      	movs	r3, #2
 8001704:	9300      	str	r3, [sp, #0]
 8001706:	2300      	movs	r3, #0
 8001708:	220a      	movs	r2, #10
 800170a:	210a      	movs	r1, #10
 800170c:	4842      	ldr	r0, [pc, #264]	; (8001818 <main+0xee8>)
 800170e:	f000 fecd 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text("Touch to draw", 10, 30, BLACK, 2, WHITE);
 8001712:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001716:	9301      	str	r3, [sp, #4]
 8001718:	2302      	movs	r3, #2
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	2300      	movs	r3, #0
 800171e:	221e      	movs	r2, #30
 8001720:	210a      	movs	r1, #10
 8001722:	483e      	ldr	r0, [pc, #248]	; (800181c <main+0xeec>)
 8001724:	f000 fec2 	bl	80024ac <ILI9341_Draw_Text>
	  		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8001728:	2000      	movs	r0, #0
 800172a:	f001 f96f 	bl	8002a0c <ILI9341_Set_Rotation>


	  		while(1)
	  		{
	  			HAL_Delay(20);
 800172e:	2014      	movs	r0, #20
 8001730:	f001 fefc 	bl	800352c <HAL_Delay>

	  			if(TP_Touchpad_Pressed())
 8001734:	f001 fe7e 	bl	8003434 <TP_Touchpad_Pressed>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d05a      	beq.n	80017f4 <main+0xec4>
	          {

	  					uint16_t x_pos = 0;
 800173e:	2300      	movs	r3, #0
 8001740:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  					uint16_t y_pos = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2


	  					HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 800174a:	2201      	movs	r2, #1
 800174c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8001750:	4833      	ldr	r0, [pc, #204]	; (8001820 <main+0xef0>)
 8001752:	f002 f9b9 	bl	8003ac8 <HAL_GPIO_WritePin>

	            uint16_t position_array[2];

	  					if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001756:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800175a:	4618      	mov	r0, r3
 800175c:	f001 fda8 	bl	80032b0 <TP_Read_Coordinates>
 8001760:	4603      	mov	r3, r0
 8001762:	2b01      	cmp	r3, #1
 8001764:	d13d      	bne.n	80017e2 <main+0xeb2>
	  					{
	  					x_pos = position_array[0];
 8001766:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800176a:	f8a7 30e4 	strh.w	r3, [r7, #228]	; 0xe4
	  					y_pos = position_array[1];
 800176e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8001772:	f8a7 30e2 	strh.w	r3, [r7, #226]	; 0xe2
	  					ILI9341_Draw_Filled_Circle(x_pos, y_pos, 2, BLACK);
 8001776:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 800177a:	f8b7 00e4 	ldrh.w	r0, [r7, #228]	; 0xe4
 800177e:	2300      	movs	r3, #0
 8001780:	2202      	movs	r2, #2
 8001782:	f000 fc92 	bl	80020aa <ILI9341_Draw_Filled_Circle>

	  					ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8001786:	2001      	movs	r0, #1
 8001788:	f001 f940 	bl	8002a0c <ILI9341_Set_Rotation>
	  					char counter_buff[30];
	  					sprintf(counter_buff, "POS X: %.3d", x_pos);
 800178c:	f8b7 20e4 	ldrh.w	r2, [r7, #228]	; 0xe4
 8001790:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001794:	4923      	ldr	r1, [pc, #140]	; (8001824 <main+0xef4>)
 8001796:	4618      	mov	r0, r3
 8001798:	f005 fb20 	bl	8006ddc <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 80, BLACK, 2, WHITE);
 800179c:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80017a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a4:	9301      	str	r3, [sp, #4]
 80017a6:	2302      	movs	r3, #2
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2300      	movs	r3, #0
 80017ac:	2250      	movs	r2, #80	; 0x50
 80017ae:	210a      	movs	r1, #10
 80017b0:	f000 fe7c 	bl	80024ac <ILI9341_Draw_Text>
	  					sprintf(counter_buff, "POS Y: %.3d", y_pos);
 80017b4:	f8b7 20e2 	ldrh.w	r2, [r7, #226]	; 0xe2
 80017b8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80017bc:	491a      	ldr	r1, [pc, #104]	; (8001828 <main+0xef8>)
 80017be:	4618      	mov	r0, r3
 80017c0:	f005 fb0c 	bl	8006ddc <siprintf>
	  					ILI9341_Draw_Text(counter_buff, 10, 120, BLACK, 2, WHITE);
 80017c4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80017c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017cc:	9301      	str	r3, [sp, #4]
 80017ce:	2302      	movs	r3, #2
 80017d0:	9300      	str	r3, [sp, #0]
 80017d2:	2300      	movs	r3, #0
 80017d4:	2278      	movs	r2, #120	; 0x78
 80017d6:	210a      	movs	r1, #10
 80017d8:	f000 fe68 	bl	80024ac <ILI9341_Draw_Text>
	  					ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80017dc:	2000      	movs	r0, #0
 80017de:	f001 f915 	bl	8002a0c <ILI9341_Set_Rotation>
	  					}

	  					ILI9341_Draw_Pixel(x_pos, y_pos, BLACK);
 80017e2:	f8b7 10e2 	ldrh.w	r1, [r7, #226]	; 0xe2
 80017e6:	f8b7 30e4 	ldrh.w	r3, [r7, #228]	; 0xe4
 80017ea:	2200      	movs	r2, #0
 80017ec:	4618      	mov	r0, r3
 80017ee:	f001 fb3d 	bl	8002e6c <ILI9341_Draw_Pixel>
 80017f2:	e79c      	b.n	800172e <main+0xdfe>

	          }
	  			else
	  			{
	  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80017f4:	2200      	movs	r2, #0
 80017f6:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80017fa:	4809      	ldr	r0, [pc, #36]	; (8001820 <main+0xef0>)
 80017fc:	f002 f964 	bl	8003ac8 <HAL_GPIO_WritePin>
	  			HAL_Delay(20);
 8001800:	e795      	b.n	800172e <main+0xdfe>
 8001802:	bf00      	nop
 8001804:	cccccccd 	.word	0xcccccccd
 8001808:	200001fc 	.word	0x200001fc
 800180c:	080093b0 	.word	0x080093b0
 8001810:	080093bc 	.word	0x080093bc
 8001814:	080093f8 	.word	0x080093f8
 8001818:	080093c4 	.word	0x080093c4
 800181c:	080093d0 	.word	0x080093d0
 8001820:	40020400 	.word	0x40020400
 8001824:	080093e0 	.word	0x080093e0
 8001828:	080093ec 	.word	0x080093ec

0800182c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	b0b8      	sub	sp, #224	; 0xe0
 8001830:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001832:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8001836:	2234      	movs	r2, #52	; 0x34
 8001838:	2100      	movs	r1, #0
 800183a:	4618      	mov	r0, r3
 800183c:	f004 fe84 	bl	8006548 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001840:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]
 800184e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001850:	f107 0308 	add.w	r3, r7, #8
 8001854:	2290      	movs	r2, #144	; 0x90
 8001856:	2100      	movs	r1, #0
 8001858:	4618      	mov	r0, r3
 800185a:	f004 fe75 	bl	8006548 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800185e:	f002 f94d 	bl	8003afc <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	4b3b      	ldr	r3, [pc, #236]	; (8001950 <SystemClock_Config+0x124>)
 8001864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001866:	4a3a      	ldr	r2, [pc, #232]	; (8001950 <SystemClock_Config+0x124>)
 8001868:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800186c:	6413      	str	r3, [r2, #64]	; 0x40
 800186e:	4b38      	ldr	r3, [pc, #224]	; (8001950 <SystemClock_Config+0x124>)
 8001870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001876:	607b      	str	r3, [r7, #4]
 8001878:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800187a:	4b36      	ldr	r3, [pc, #216]	; (8001954 <SystemClock_Config+0x128>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a35      	ldr	r2, [pc, #212]	; (8001954 <SystemClock_Config+0x128>)
 8001880:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001884:	6013      	str	r3, [r2, #0]
 8001886:	4b33      	ldr	r3, [pc, #204]	; (8001954 <SystemClock_Config+0x128>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800188e:	603b      	str	r3, [r7, #0]
 8001890:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001892:	2301      	movs	r3, #1
 8001894:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001898:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800189c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018a0:	2302      	movs	r3, #2
 80018a2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018a6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018aa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018ae:	2304      	movs	r3, #4
 80018b0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 80018b4:	23c8      	movs	r3, #200	; 0xc8
 80018b6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80018c0:	2309      	movs	r3, #9
 80018c2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80018c6:	2302      	movs	r3, #2
 80018c8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018cc:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80018d0:	4618      	mov	r0, r3
 80018d2:	f002 f973 	bl	8003bbc <HAL_RCC_OscConfig>
 80018d6:	4603      	mov	r3, r0
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80018dc:	f000 f83e 	bl	800195c <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80018e0:	f002 f91c 	bl	8003b1c <HAL_PWREx_EnableOverDrive>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80018ea:	f000 f837 	bl	800195c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018ee:	230f      	movs	r3, #15
 80018f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f4:	2302      	movs	r3, #2
 80018f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001900:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001904:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001908:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800190c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001910:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001914:	2106      	movs	r1, #6
 8001916:	4618      	mov	r0, r3
 8001918:	f002 fbfe 	bl	8004118 <HAL_RCC_ClockConfig>
 800191c:	4603      	mov	r3, r0
 800191e:	2b00      	cmp	r3, #0
 8001920:	d001      	beq.n	8001926 <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001922:	f000 f81b 	bl	800195c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <SystemClock_Config+0x12c>)
 8001928:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800192a:	2300      	movs	r3, #0
 800192c:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800192e:	2300      	movs	r3, #0
 8001930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001934:	f107 0308 	add.w	r3, r7, #8
 8001938:	4618      	mov	r0, r3
 800193a:	f002 fe13 	bl	8004564 <HAL_RCCEx_PeriphCLKConfig>
 800193e:	4603      	mov	r3, r0
 8001940:	2b00      	cmp	r3, #0
 8001942:	d001      	beq.n	8001948 <SystemClock_Config+0x11c>
  {
    Error_Handler();
 8001944:	f000 f80a 	bl	800195c <Error_Handler>
  }
}
 8001948:	bf00      	nop
 800194a:	37e0      	adds	r7, #224	; 0xe0
 800194c:	46bd      	mov	sp, r7
 800194e:	bd80      	pop	{r7, pc}
 8001950:	40023800 	.word	0x40023800
 8001954:	40007000 	.word	0x40007000
 8001958:	00200100 	.word	0x00200100

0800195c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001960:	e7fe      	b.n	8001960 <Error_Handler+0x4>
	...

08001964 <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <MX_RNG_Init+0x20>)
 800196a:	4a07      	ldr	r2, [pc, #28]	; (8001988 <MX_RNG_Init+0x24>)
 800196c:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 800196e:	4805      	ldr	r0, [pc, #20]	; (8001984 <MX_RNG_Init+0x20>)
 8001970:	f003 fa20 	bl	8004db4 <HAL_RNG_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 800197a:	f7ff ffef 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 800197e:	bf00      	nop
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20000200 	.word	0x20000200
 8001988:	50060800 	.word	0x50060800

0800198c <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 800198c:	b480      	push	{r7}
 800198e:	b085      	sub	sp, #20
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0a      	ldr	r2, [pc, #40]	; (80019c4 <HAL_RNG_MspInit+0x38>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d10b      	bne.n	80019b6 <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800199e:	4b0a      	ldr	r3, [pc, #40]	; (80019c8 <HAL_RNG_MspInit+0x3c>)
 80019a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019a2:	4a09      	ldr	r2, [pc, #36]	; (80019c8 <HAL_RNG_MspInit+0x3c>)
 80019a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80019a8:	6353      	str	r3, [r2, #52]	; 0x34
 80019aa:	4b07      	ldr	r3, [pc, #28]	; (80019c8 <HAL_RNG_MspInit+0x3c>)
 80019ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80019b2:	60fb      	str	r3, [r7, #12]
 80019b4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80019b6:	bf00      	nop
 80019b8:	3714      	adds	r7, #20
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr
 80019c2:	bf00      	nop
 80019c4:	50060800 	.word	0x50060800
 80019c8:	40023800 	.word	0x40023800

080019cc <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80019d0:	4b1b      	ldr	r3, [pc, #108]	; (8001a40 <MX_SPI5_Init+0x74>)
 80019d2:	4a1c      	ldr	r2, [pc, #112]	; (8001a44 <MX_SPI5_Init+0x78>)
 80019d4:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80019d6:	4b1a      	ldr	r3, [pc, #104]	; (8001a40 <MX_SPI5_Init+0x74>)
 80019d8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019dc:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80019de:	4b18      	ldr	r3, [pc, #96]	; (8001a40 <MX_SPI5_Init+0x74>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80019e4:	4b16      	ldr	r3, [pc, #88]	; (8001a40 <MX_SPI5_Init+0x74>)
 80019e6:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80019ea:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80019ec:	4b14      	ldr	r3, [pc, #80]	; (8001a40 <MX_SPI5_Init+0x74>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80019f2:	4b13      	ldr	r3, [pc, #76]	; (8001a40 <MX_SPI5_Init+0x74>)
 80019f4:	2200      	movs	r2, #0
 80019f6:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80019f8:	4b11      	ldr	r3, [pc, #68]	; (8001a40 <MX_SPI5_Init+0x74>)
 80019fa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80019fe:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001a00:	4b0f      	ldr	r3, [pc, #60]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a06:	4b0e      	ldr	r3, [pc, #56]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a0c:	4b0c      	ldr	r3, [pc, #48]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a0e:	2200      	movs	r2, #0
 8001a10:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001a18:	4b09      	ldr	r3, [pc, #36]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a1a:	2207      	movs	r2, #7
 8001a1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001a2a:	4805      	ldr	r0, [pc, #20]	; (8001a40 <MX_SPI5_Init+0x74>)
 8001a2c:	f003 fa50 	bl	8004ed0 <HAL_SPI_Init>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d001      	beq.n	8001a3a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001a36:	f7ff ff91 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001a3a:	bf00      	nop
 8001a3c:	bd80      	pop	{r7, pc}
 8001a3e:	bf00      	nop
 8001a40:	20000210 	.word	0x20000210
 8001a44:	40015000 	.word	0x40015000

08001a48 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b08a      	sub	sp, #40	; 0x28
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a50:	f107 0314 	add.w	r3, r7, #20
 8001a54:	2200      	movs	r2, #0
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	605a      	str	r2, [r3, #4]
 8001a5a:	609a      	str	r2, [r3, #8]
 8001a5c:	60da      	str	r2, [r3, #12]
 8001a5e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a17      	ldr	r2, [pc, #92]	; (8001ac4 <HAL_SPI_MspInit+0x7c>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d128      	bne.n	8001abc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001a6a:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_SPI_MspInit+0x80>)
 8001a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a6e:	4a16      	ldr	r2, [pc, #88]	; (8001ac8 <HAL_SPI_MspInit+0x80>)
 8001a70:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001a74:	6453      	str	r3, [r2, #68]	; 0x44
 8001a76:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_SPI_MspInit+0x80>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a7e:	613b      	str	r3, [r7, #16]
 8001a80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a82:	4b11      	ldr	r3, [pc, #68]	; (8001ac8 <HAL_SPI_MspInit+0x80>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a86:	4a10      	ldr	r2, [pc, #64]	; (8001ac8 <HAL_SPI_MspInit+0x80>)
 8001a88:	f043 0320 	orr.w	r3, r3, #32
 8001a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a8e:	4b0e      	ldr	r3, [pc, #56]	; (8001ac8 <HAL_SPI_MspInit+0x80>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a92:	f003 0320 	and.w	r3, r3, #32
 8001a96:	60fb      	str	r3, [r7, #12]
 8001a98:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8001a9a:	f44f 7360 	mov.w	r3, #896	; 0x380
 8001a9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa0:	2302      	movs	r3, #2
 8001aa2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001aac:	2305      	movs	r3, #5
 8001aae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ab0:	f107 0314 	add.w	r3, r7, #20
 8001ab4:	4619      	mov	r1, r3
 8001ab6:	4805      	ldr	r0, [pc, #20]	; (8001acc <HAL_SPI_MspInit+0x84>)
 8001ab8:	f001 fe42 	bl	8003740 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001abc:	bf00      	nop
 8001abe:	3728      	adds	r7, #40	; 0x28
 8001ac0:	46bd      	mov	sp, r7
 8001ac2:	bd80      	pop	{r7, pc}
 8001ac4:	40015000 	.word	0x40015000
 8001ac8:	40023800 	.word	0x40023800
 8001acc:	40021400 	.word	0x40021400

08001ad0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001ad6:	4b0f      	ldr	r3, [pc, #60]	; (8001b14 <HAL_MspInit+0x44>)
 8001ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ada:	4a0e      	ldr	r2, [pc, #56]	; (8001b14 <HAL_MspInit+0x44>)
 8001adc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ae0:	6413      	str	r3, [r2, #64]	; 0x40
 8001ae2:	4b0c      	ldr	r3, [pc, #48]	; (8001b14 <HAL_MspInit+0x44>)
 8001ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aea:	607b      	str	r3, [r7, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_MspInit+0x44>)
 8001af0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_MspInit+0x44>)
 8001af4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001af8:	6453      	str	r3, [r2, #68]	; 0x44
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_MspInit+0x44>)
 8001afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001afe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b02:	603b      	str	r3, [r7, #0]
 8001b04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b1c:	f001 fce6 	bl	80034ec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b20:	bf00      	nop
 8001b22:	bd80      	pop	{r7, pc}

08001b24 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001b24:	b480      	push	{r7}
 8001b26:	af00      	add	r7, sp, #0
	return 1;
 8001b28:	2301      	movs	r3, #1
}
 8001b2a:	4618      	mov	r0, r3
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr

08001b34 <_kill>:

int _kill(int pid, int sig)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b082      	sub	sp, #8
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
 8001b3c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001b3e:	f004 fcd9 	bl	80064f4 <__errno>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2216      	movs	r2, #22
 8001b46:	601a      	str	r2, [r3, #0]
	return -1;
 8001b48:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}

08001b54 <_exit>:

void _exit (int status)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b082      	sub	sp, #8
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b60:	6878      	ldr	r0, [r7, #4]
 8001b62:	f7ff ffe7 	bl	8001b34 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001b66:	e7fe      	b.n	8001b66 <_exit+0x12>

08001b68 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
 8001b78:	e00a      	b.n	8001b90 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001b7a:	f3af 8000 	nop.w
 8001b7e:	4601      	mov	r1, r0
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	1c5a      	adds	r2, r3, #1
 8001b84:	60ba      	str	r2, [r7, #8]
 8001b86:	b2ca      	uxtb	r2, r1
 8001b88:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	3301      	adds	r3, #1
 8001b8e:	617b      	str	r3, [r7, #20]
 8001b90:	697a      	ldr	r2, [r7, #20]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	429a      	cmp	r2, r3
 8001b96:	dbf0      	blt.n	8001b7a <_read+0x12>
	}

return len;
 8001b98:	687b      	ldr	r3, [r7, #4]
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3718      	adds	r7, #24
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}

08001ba2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ba2:	b580      	push	{r7, lr}
 8001ba4:	b086      	sub	sp, #24
 8001ba6:	af00      	add	r7, sp, #0
 8001ba8:	60f8      	str	r0, [r7, #12]
 8001baa:	60b9      	str	r1, [r7, #8]
 8001bac:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bae:	2300      	movs	r3, #0
 8001bb0:	617b      	str	r3, [r7, #20]
 8001bb2:	e009      	b.n	8001bc8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001bb4:	68bb      	ldr	r3, [r7, #8]
 8001bb6:	1c5a      	adds	r2, r3, #1
 8001bb8:	60ba      	str	r2, [r7, #8]
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bc2:	697b      	ldr	r3, [r7, #20]
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	617b      	str	r3, [r7, #20]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	dbf1      	blt.n	8001bb4 <_write+0x12>
	}
	return len;
 8001bd0:	687b      	ldr	r3, [r7, #4]
}
 8001bd2:	4618      	mov	r0, r3
 8001bd4:	3718      	adds	r7, #24
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bd80      	pop	{r7, pc}

08001bda <_close>:

int _close(int file)
{
 8001bda:	b480      	push	{r7}
 8001bdc:	b083      	sub	sp, #12
 8001bde:	af00      	add	r7, sp, #0
 8001be0:	6078      	str	r0, [r7, #4]
	return -1;
 8001be2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be6:	4618      	mov	r0, r3
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf0:	4770      	bx	lr

08001bf2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001bf2:	b480      	push	{r7}
 8001bf4:	b083      	sub	sp, #12
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
 8001bfa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c02:	605a      	str	r2, [r3, #4]
	return 0;
 8001c04:	2300      	movs	r3, #0
}
 8001c06:	4618      	mov	r0, r3
 8001c08:	370c      	adds	r7, #12
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c10:	4770      	bx	lr

08001c12 <_isatty>:

int _isatty(int file)
{
 8001c12:	b480      	push	{r7}
 8001c14:	b083      	sub	sp, #12
 8001c16:	af00      	add	r7, sp, #0
 8001c18:	6078      	str	r0, [r7, #4]
	return 1;
 8001c1a:	2301      	movs	r3, #1
}
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	370c      	adds	r7, #12
 8001c20:	46bd      	mov	sp, r7
 8001c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c26:	4770      	bx	lr

08001c28 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001c28:	b480      	push	{r7}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	60b9      	str	r1, [r7, #8]
 8001c32:	607a      	str	r2, [r7, #4]
	return 0;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	3714      	adds	r7, #20
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
	...

08001c44 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b086      	sub	sp, #24
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001c4c:	4a14      	ldr	r2, [pc, #80]	; (8001ca0 <_sbrk+0x5c>)
 8001c4e:	4b15      	ldr	r3, [pc, #84]	; (8001ca4 <_sbrk+0x60>)
 8001c50:	1ad3      	subs	r3, r2, r3
 8001c52:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c58:	4b13      	ldr	r3, [pc, #76]	; (8001ca8 <_sbrk+0x64>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d102      	bne.n	8001c66 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001c60:	4b11      	ldr	r3, [pc, #68]	; (8001ca8 <_sbrk+0x64>)
 8001c62:	4a12      	ldr	r2, [pc, #72]	; (8001cac <_sbrk+0x68>)
 8001c64:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c66:	4b10      	ldr	r3, [pc, #64]	; (8001ca8 <_sbrk+0x64>)
 8001c68:	681a      	ldr	r2, [r3, #0]
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	693a      	ldr	r2, [r7, #16]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d207      	bcs.n	8001c84 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001c74:	f004 fc3e 	bl	80064f4 <__errno>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	220c      	movs	r2, #12
 8001c7c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8001c82:	e009      	b.n	8001c98 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001c84:	4b08      	ldr	r3, [pc, #32]	; (8001ca8 <_sbrk+0x64>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001c8a:	4b07      	ldr	r3, [pc, #28]	; (8001ca8 <_sbrk+0x64>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4413      	add	r3, r2
 8001c92:	4a05      	ldr	r2, [pc, #20]	; (8001ca8 <_sbrk+0x64>)
 8001c94:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001c96:	68fb      	ldr	r3, [r7, #12]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3718      	adds	r7, #24
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20080000 	.word	0x20080000
 8001ca4:	00000400 	.word	0x00000400
 8001ca8:	20000274 	.word	0x20000274
 8001cac:	20000360 	.word	0x20000360

08001cb0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <SystemInit+0x5c>)
 8001cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cba:	4a14      	ldr	r2, [pc, #80]	; (8001d0c <SystemInit+0x5c>)
 8001cbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001cc0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8001cc4:	4b12      	ldr	r3, [pc, #72]	; (8001d10 <SystemInit+0x60>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a11      	ldr	r2, [pc, #68]	; (8001d10 <SystemInit+0x60>)
 8001cca:	f043 0301 	orr.w	r3, r3, #1
 8001cce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001cd0:	4b0f      	ldr	r3, [pc, #60]	; (8001d10 <SystemInit+0x60>)
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8001cd6:	4b0e      	ldr	r3, [pc, #56]	; (8001d10 <SystemInit+0x60>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	490d      	ldr	r1, [pc, #52]	; (8001d10 <SystemInit+0x60>)
 8001cdc:	4b0d      	ldr	r3, [pc, #52]	; (8001d14 <SystemInit+0x64>)
 8001cde:	4013      	ands	r3, r2
 8001ce0:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8001ce2:	4b0b      	ldr	r3, [pc, #44]	; (8001d10 <SystemInit+0x60>)
 8001ce4:	4a0c      	ldr	r2, [pc, #48]	; (8001d18 <SystemInit+0x68>)
 8001ce6:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001ce8:	4b09      	ldr	r3, [pc, #36]	; (8001d10 <SystemInit+0x60>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4a08      	ldr	r2, [pc, #32]	; (8001d10 <SystemInit+0x60>)
 8001cee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cf2:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001cf4:	4b06      	ldr	r3, [pc, #24]	; (8001d10 <SystemInit+0x60>)
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001cfa:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <SystemInit+0x5c>)
 8001cfc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001d00:	609a      	str	r2, [r3, #8]
#endif
}
 8001d02:	bf00      	nop
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr
 8001d0c:	e000ed00 	.word	0xe000ed00
 8001d10:	40023800 	.word	0x40023800
 8001d14:	fef6ffff 	.word	0xfef6ffff
 8001d18:	24003010 	.word	0x24003010

08001d1c <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b088      	sub	sp, #32
 8001d20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d22:	f107 0310 	add.w	r3, r7, #16
 8001d26:	2200      	movs	r2, #0
 8001d28:	601a      	str	r2, [r3, #0]
 8001d2a:	605a      	str	r2, [r3, #4]
 8001d2c:	609a      	str	r2, [r3, #8]
 8001d2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d30:	1d3b      	adds	r3, r7, #4
 8001d32:	2200      	movs	r2, #0
 8001d34:	601a      	str	r2, [r3, #0]
 8001d36:	605a      	str	r2, [r3, #4]
 8001d38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d3a:	4b20      	ldr	r3, [pc, #128]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d3c:	4a20      	ldr	r2, [pc, #128]	; (8001dc0 <MX_TIM1_Init+0xa4>)
 8001d3e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001d40:	4b1e      	ldr	r3, [pc, #120]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d42:	f242 720f 	movw	r2, #9999	; 0x270f
 8001d46:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d48:	4b1c      	ldr	r3, [pc, #112]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001d4e:	4b1b      	ldr	r3, [pc, #108]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001d54:	4b19      	ldr	r3, [pc, #100]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d56:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d5a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d5c:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d62:	4b16      	ldr	r3, [pc, #88]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d64:	2200      	movs	r2, #0
 8001d66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d68:	4814      	ldr	r0, [pc, #80]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d6a:	f003 fc2b 	bl	80055c4 <HAL_TIM_Base_Init>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8001d74:	f7ff fdf2 	bl	800195c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d7e:	f107 0310 	add.w	r3, r7, #16
 8001d82:	4619      	mov	r1, r3
 8001d84:	480d      	ldr	r0, [pc, #52]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001d86:	f003 fd0d 	bl	80057a4 <HAL_TIM_ConfigClockSource>
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8001d90:	f7ff fde4 	bl	800195c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001da0:	1d3b      	adds	r3, r7, #4
 8001da2:	4619      	mov	r1, r3
 8001da4:	4805      	ldr	r0, [pc, #20]	; (8001dbc <MX_TIM1_Init+0xa0>)
 8001da6:	f003 fefd 	bl	8005ba4 <HAL_TIMEx_MasterConfigSynchronization>
 8001daa:	4603      	mov	r3, r0
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d001      	beq.n	8001db4 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001db0:	f7ff fdd4 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001db4:	bf00      	nop
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000278 	.word	0x20000278
 8001dc0:	40010000 	.word	0x40010000

08001dc4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a0a      	ldr	r2, [pc, #40]	; (8001dfc <HAL_TIM_Base_MspInit+0x38>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d10b      	bne.n	8001dee <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001dd6:	4b0a      	ldr	r3, [pc, #40]	; (8001e00 <HAL_TIM_Base_MspInit+0x3c>)
 8001dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dda:	4a09      	ldr	r2, [pc, #36]	; (8001e00 <HAL_TIM_Base_MspInit+0x3c>)
 8001ddc:	f043 0301 	orr.w	r3, r3, #1
 8001de0:	6453      	str	r3, [r2, #68]	; 0x44
 8001de2:	4b07      	ldr	r3, [pc, #28]	; (8001e00 <HAL_TIM_Base_MspInit+0x3c>)
 8001de4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	60fb      	str	r3, [r7, #12]
 8001dec:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001dee:	bf00      	nop
 8001df0:	3714      	adds	r7, #20
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
 8001dfa:	bf00      	nop
 8001dfc:	40010000 	.word	0x40010000
 8001e00:	40023800 	.word	0x40023800

08001e04 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e08:	4b14      	ldr	r3, [pc, #80]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e0a:	4a15      	ldr	r2, [pc, #84]	; (8001e60 <MX_USART3_UART_Init+0x5c>)
 8001e0c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e0e:	4b13      	ldr	r3, [pc, #76]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e10:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e14:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e16:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e1c:	4b0f      	ldr	r3, [pc, #60]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e2a:	220c      	movs	r2, #12
 8001e2c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_USART3_UART_Init+0x58>)
 8001e48:	f003 ff3a 	bl	8005cc0 <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e52:	f7ff fd83 	bl	800195c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200002c4 	.word	0x200002c4
 8001e60:	40004800 	.word	0x40004800

08001e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a17      	ldr	r2, [pc, #92]	; (8001ee0 <HAL_UART_MspInit+0x7c>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d128      	bne.n	8001ed8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001e86:	4b17      	ldr	r3, [pc, #92]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	4a16      	ldr	r2, [pc, #88]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001e8c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e90:	6413      	str	r3, [r2, #64]	; 0x40
 8001e92:	4b14      	ldr	r3, [pc, #80]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001e9e:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a10      	ldr	r2, [pc, #64]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001ea4:	f043 0308 	orr.w	r3, r3, #8
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <HAL_UART_MspInit+0x80>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0308 	and.w	r3, r3, #8
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001eb6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001eba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ebc:	2302      	movs	r3, #2
 8001ebe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ec8:	2307      	movs	r3, #7
 8001eca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ecc:	f107 0314 	add.w	r3, r7, #20
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4805      	ldr	r0, [pc, #20]	; (8001ee8 <HAL_UART_MspInit+0x84>)
 8001ed4:	f001 fc34 	bl	8003740 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3728      	adds	r7, #40	; 0x28
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	40004800 	.word	0x40004800
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40020c00 	.word	0x40020c00

08001eec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001eec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001f24 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001ef0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001ef2:	e003      	b.n	8001efc <LoopCopyDataInit>

08001ef4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001ef4:	4b0c      	ldr	r3, [pc, #48]	; (8001f28 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001ef6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001ef8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001efa:	3104      	adds	r1, #4

08001efc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001efc:	480b      	ldr	r0, [pc, #44]	; (8001f2c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001f00:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001f02:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001f04:	d3f6      	bcc.n	8001ef4 <CopyDataInit>
  ldr  r2, =_sbss
 8001f06:	4a0b      	ldr	r2, [pc, #44]	; (8001f34 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001f08:	e002      	b.n	8001f10 <LoopFillZerobss>

08001f0a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001f0a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001f0c:	f842 3b04 	str.w	r3, [r2], #4

08001f10 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001f12:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001f14:	d3f9      	bcc.n	8001f0a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001f16:	f7ff fecb 	bl	8001cb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f1a:	f004 faf1 	bl	8006500 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f1e:	f7fe fd07 	bl	8000930 <main>
  bx  lr    
 8001f22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001f24:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001f28:	0802f23c 	.word	0x0802f23c
  ldr  r0, =_sdata
 8001f2c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001f30:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001f34:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001f38:	2000035c 	.word	0x2000035c

08001f3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001f3c:	e7fe      	b.n	8001f3c <ADC_IRQHandler>

08001f3e <ILI9341_Draw_Hollow_Circle>:
#include "5x5_font.h"
#include "spi.h"

/*Draw hollow circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Hollow_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001f3e:	b590      	push	{r4, r7, lr}
 8001f40:	b089      	sub	sp, #36	; 0x24
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	4604      	mov	r4, r0
 8001f46:	4608      	mov	r0, r1
 8001f48:	4611      	mov	r1, r2
 8001f4a:	461a      	mov	r2, r3
 8001f4c:	4623      	mov	r3, r4
 8001f4e:	80fb      	strh	r3, [r7, #6]
 8001f50:	4603      	mov	r3, r0
 8001f52:	80bb      	strh	r3, [r7, #4]
 8001f54:	460b      	mov	r3, r1
 8001f56:	807b      	strh	r3, [r7, #2]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	803b      	strh	r3, [r7, #0]
	int x = Radius-1;
 8001f5c:	887b      	ldrh	r3, [r7, #2]
 8001f5e:	3b01      	subs	r3, #1
 8001f60:	61fb      	str	r3, [r7, #28]
    int y = 0;
 8001f62:	2300      	movs	r3, #0
 8001f64:	61bb      	str	r3, [r7, #24]
    int dx = 1;
 8001f66:	2301      	movs	r3, #1
 8001f68:	617b      	str	r3, [r7, #20]
    int dy = 1;
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	613b      	str	r3, [r7, #16]
    int err = dx - (Radius << 1);
 8001f6e:	887b      	ldrh	r3, [r7, #2]
 8001f70:	005b      	lsls	r3, r3, #1
 8001f72:	697a      	ldr	r2, [r7, #20]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	60fb      	str	r3, [r7, #12]

    while (x >= y)
 8001f78:	e08d      	b.n	8002096 <ILI9341_Draw_Hollow_Circle+0x158>
    {
        ILI9341_Draw_Pixel(X + x, Y + y, Colour);
 8001f7a:	69fb      	ldr	r3, [r7, #28]
 8001f7c:	b29a      	uxth	r2, r3
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	4413      	add	r3, r2
 8001f82:	b298      	uxth	r0, r3
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	b29a      	uxth	r2, r3
 8001f88:	88bb      	ldrh	r3, [r7, #4]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b29b      	uxth	r3, r3
 8001f8e:	883a      	ldrh	r2, [r7, #0]
 8001f90:	4619      	mov	r1, r3
 8001f92:	f000 ff6b 	bl	8002e6c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y + x, Colour);
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	b29a      	uxth	r2, r3
 8001f9a:	88fb      	ldrh	r3, [r7, #6]
 8001f9c:	4413      	add	r3, r2
 8001f9e:	b298      	uxth	r0, r3
 8001fa0:	69fb      	ldr	r3, [r7, #28]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	88bb      	ldrh	r3, [r7, #4]
 8001fa6:	4413      	add	r3, r2
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	883a      	ldrh	r2, [r7, #0]
 8001fac:	4619      	mov	r1, r3
 8001fae:	f000 ff5d 	bl	8002e6c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y + x, Colour);
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	88fa      	ldrh	r2, [r7, #6]
 8001fb8:	1ad3      	subs	r3, r2, r3
 8001fba:	b298      	uxth	r0, r3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	b29a      	uxth	r2, r3
 8001fc0:	88bb      	ldrh	r3, [r7, #4]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	b29b      	uxth	r3, r3
 8001fc6:	883a      	ldrh	r2, [r7, #0]
 8001fc8:	4619      	mov	r1, r3
 8001fca:	f000 ff4f 	bl	8002e6c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y + y, Colour);
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	88fa      	ldrh	r2, [r7, #6]
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	b298      	uxth	r0, r3
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	b29a      	uxth	r2, r3
 8001fdc:	88bb      	ldrh	r3, [r7, #4]
 8001fde:	4413      	add	r3, r2
 8001fe0:	b29b      	uxth	r3, r3
 8001fe2:	883a      	ldrh	r2, [r7, #0]
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f000 ff41 	bl	8002e6c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - x, Y - y, Colour);
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	b29b      	uxth	r3, r3
 8001fee:	88fa      	ldrh	r2, [r7, #6]
 8001ff0:	1ad3      	subs	r3, r2, r3
 8001ff2:	b298      	uxth	r0, r3
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	88ba      	ldrh	r2, [r7, #4]
 8001ffa:	1ad3      	subs	r3, r2, r3
 8001ffc:	b29b      	uxth	r3, r3
 8001ffe:	883a      	ldrh	r2, [r7, #0]
 8002000:	4619      	mov	r1, r3
 8002002:	f000 ff33 	bl	8002e6c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X - y, Y - x, Colour);
 8002006:	69bb      	ldr	r3, [r7, #24]
 8002008:	b29b      	uxth	r3, r3
 800200a:	88fa      	ldrh	r2, [r7, #6]
 800200c:	1ad3      	subs	r3, r2, r3
 800200e:	b298      	uxth	r0, r3
 8002010:	69fb      	ldr	r3, [r7, #28]
 8002012:	b29b      	uxth	r3, r3
 8002014:	88ba      	ldrh	r2, [r7, #4]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	b29b      	uxth	r3, r3
 800201a:	883a      	ldrh	r2, [r7, #0]
 800201c:	4619      	mov	r1, r3
 800201e:	f000 ff25 	bl	8002e6c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + y, Y - x, Colour);
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	b29a      	uxth	r2, r3
 8002026:	88fb      	ldrh	r3, [r7, #6]
 8002028:	4413      	add	r3, r2
 800202a:	b298      	uxth	r0, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	b29b      	uxth	r3, r3
 8002030:	88ba      	ldrh	r2, [r7, #4]
 8002032:	1ad3      	subs	r3, r2, r3
 8002034:	b29b      	uxth	r3, r3
 8002036:	883a      	ldrh	r2, [r7, #0]
 8002038:	4619      	mov	r1, r3
 800203a:	f000 ff17 	bl	8002e6c <ILI9341_Draw_Pixel>
        ILI9341_Draw_Pixel(X + x, Y - y, Colour);
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	b29a      	uxth	r2, r3
 8002042:	88fb      	ldrh	r3, [r7, #6]
 8002044:	4413      	add	r3, r2
 8002046:	b298      	uxth	r0, r3
 8002048:	69bb      	ldr	r3, [r7, #24]
 800204a:	b29b      	uxth	r3, r3
 800204c:	88ba      	ldrh	r2, [r7, #4]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	b29b      	uxth	r3, r3
 8002052:	883a      	ldrh	r2, [r7, #0]
 8002054:	4619      	mov	r1, r3
 8002056:	f000 ff09 	bl	8002e6c <ILI9341_Draw_Pixel>

        if (err <= 0)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	dc09      	bgt.n	8002074 <ILI9341_Draw_Hollow_Circle+0x136>
        {
            y++;
 8002060:	69bb      	ldr	r3, [r7, #24]
 8002062:	3301      	adds	r3, #1
 8002064:	61bb      	str	r3, [r7, #24]
            err += dy;
 8002066:	68fa      	ldr	r2, [r7, #12]
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
            dy += 2;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	3302      	adds	r3, #2
 8002072:	613b      	str	r3, [r7, #16]
        }
        if (err > 0)
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2b00      	cmp	r3, #0
 8002078:	dd0d      	ble.n	8002096 <ILI9341_Draw_Hollow_Circle+0x158>
        {
            x--;
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	3b01      	subs	r3, #1
 800207e:	61fb      	str	r3, [r7, #28]
            dx += 2;
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	3302      	adds	r3, #2
 8002084:	617b      	str	r3, [r7, #20]
            err += (-Radius << 1) + dx;
 8002086:	887b      	ldrh	r3, [r7, #2]
 8002088:	425b      	negs	r3, r3
 800208a:	005a      	lsls	r2, r3, #1
 800208c:	697b      	ldr	r3, [r7, #20]
 800208e:	4413      	add	r3, r2
 8002090:	68fa      	ldr	r2, [r7, #12]
 8002092:	4413      	add	r3, r2
 8002094:	60fb      	str	r3, [r7, #12]
    while (x >= y)
 8002096:	69fa      	ldr	r2, [r7, #28]
 8002098:	69bb      	ldr	r3, [r7, #24]
 800209a:	429a      	cmp	r2, r3
 800209c:	f6bf af6d 	bge.w	8001f7a <ILI9341_Draw_Hollow_Circle+0x3c>
        }
    }
}
 80020a0:	bf00      	nop
 80020a2:	bf00      	nop
 80020a4:	3724      	adds	r7, #36	; 0x24
 80020a6:	46bd      	mov	sp, r7
 80020a8:	bd90      	pop	{r4, r7, pc}

080020aa <ILI9341_Draw_Filled_Circle>:

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 80020aa:	b590      	push	{r4, r7, lr}
 80020ac:	b08b      	sub	sp, #44	; 0x2c
 80020ae:	af00      	add	r7, sp, #0
 80020b0:	4604      	mov	r4, r0
 80020b2:	4608      	mov	r0, r1
 80020b4:	4611      	mov	r1, r2
 80020b6:	461a      	mov	r2, r3
 80020b8:	4623      	mov	r3, r4
 80020ba:	80fb      	strh	r3, [r7, #6]
 80020bc:	4603      	mov	r3, r0
 80020be:	80bb      	strh	r3, [r7, #4]
 80020c0:	460b      	mov	r3, r1
 80020c2:	807b      	strh	r3, [r7, #2]
 80020c4:	4613      	mov	r3, r2
 80020c6:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 80020c8:	887b      	ldrh	r3, [r7, #2]
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 80020cc:	2300      	movs	r3, #0
 80020ce:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 80020d0:	887b      	ldrh	r3, [r7, #2]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	f1c3 0301 	rsb	r3, r3, #1
 80020d8:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 80020de:	2300      	movs	r3, #0
 80020e0:	617b      	str	r3, [r7, #20]

    while (x >= y)
 80020e2:	e061      	b.n	80021a8 <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 80020e4:	88fa      	ldrh	r2, [r7, #6]
 80020e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020e8:	1ad3      	subs	r3, r2, r3
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	e018      	b.n	8002120 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	b298      	uxth	r0, r3
 80020f2:	6a3b      	ldr	r3, [r7, #32]
 80020f4:	b29a      	uxth	r2, r3
 80020f6:	88bb      	ldrh	r3, [r7, #4]
 80020f8:	4413      	add	r3, r2
 80020fa:	b29b      	uxth	r3, r3
 80020fc:	883a      	ldrh	r2, [r7, #0]
 80020fe:	4619      	mov	r1, r3
 8002100:	f000 feb4 	bl	8002e6c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	b298      	uxth	r0, r3
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	b29b      	uxth	r3, r3
 800210c:	88ba      	ldrh	r2, [r7, #4]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	b29b      	uxth	r3, r3
 8002112:	883a      	ldrh	r2, [r7, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	f000 fea9 	bl	8002e6c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 800211a:	693b      	ldr	r3, [r7, #16]
 800211c:	3301      	adds	r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	88fa      	ldrh	r2, [r7, #6]
 8002122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002124:	4413      	add	r3, r2
 8002126:	693a      	ldr	r2, [r7, #16]
 8002128:	429a      	cmp	r2, r3
 800212a:	dde0      	ble.n	80020ee <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 800212c:	88fa      	ldrh	r2, [r7, #6]
 800212e:	6a3b      	ldr	r3, [r7, #32]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	60fb      	str	r3, [r7, #12]
 8002134:	e018      	b.n	8002168 <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	b298      	uxth	r0, r3
 800213a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800213c:	b29a      	uxth	r2, r3
 800213e:	88bb      	ldrh	r3, [r7, #4]
 8002140:	4413      	add	r3, r2
 8002142:	b29b      	uxth	r3, r3
 8002144:	883a      	ldrh	r2, [r7, #0]
 8002146:	4619      	mov	r1, r3
 8002148:	f000 fe90 	bl	8002e6c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	b298      	uxth	r0, r3
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	b29b      	uxth	r3, r3
 8002154:	88ba      	ldrh	r2, [r7, #4]
 8002156:	1ad3      	subs	r3, r2, r3
 8002158:	b29b      	uxth	r3, r3
 800215a:	883a      	ldrh	r2, [r7, #0]
 800215c:	4619      	mov	r1, r3
 800215e:	f000 fe85 	bl	8002e6c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	3301      	adds	r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	88fa      	ldrh	r2, [r7, #6]
 800216a:	6a3b      	ldr	r3, [r7, #32]
 800216c:	4413      	add	r3, r2
 800216e:	68fa      	ldr	r2, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	dde0      	ble.n	8002136 <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8002174:	6a3b      	ldr	r3, [r7, #32]
 8002176:	3301      	adds	r3, #1
 8002178:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	69bb      	ldr	r3, [r7, #24]
 800217e:	4413      	add	r3, r2
 8002180:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	3302      	adds	r3, #2
 8002186:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	005a      	lsls	r2, r3, #1
 800218c:	69fb      	ldr	r3, [r7, #28]
 800218e:	4413      	add	r3, r2
 8002190:	2b00      	cmp	r3, #0
 8002192:	dd09      	ble.n	80021a8 <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8002194:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002196:	3b01      	subs	r3, #1
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 800219a:	697a      	ldr	r2, [r7, #20]
 800219c:	69fb      	ldr	r3, [r7, #28]
 800219e:	4413      	add	r3, r2
 80021a0:	617b      	str	r3, [r7, #20]
            xChange += 2;
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	3302      	adds	r3, #2
 80021a6:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	429a      	cmp	r2, r3
 80021ae:	da99      	bge.n	80020e4 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 80021b0:	bf00      	nop
 80021b2:	bf00      	nop
 80021b4:	372c      	adds	r7, #44	; 0x2c
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd90      	pop	{r4, r7, pc}

080021ba <ILI9341_Draw_Hollow_Rectangle_Coord>:

/*Draw a hollow rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Hollow_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80021ba:	b590      	push	{r4, r7, lr}
 80021bc:	b087      	sub	sp, #28
 80021be:	af00      	add	r7, sp, #0
 80021c0:	4604      	mov	r4, r0
 80021c2:	4608      	mov	r0, r1
 80021c4:	4611      	mov	r1, r2
 80021c6:	461a      	mov	r2, r3
 80021c8:	4623      	mov	r3, r4
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	4603      	mov	r3, r0
 80021ce:	80bb      	strh	r3, [r7, #4]
 80021d0:	460b      	mov	r3, r1
 80021d2:	807b      	strh	r3, [r7, #2]
 80021d4:	4613      	mov	r3, r2
 80021d6:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80021d8:	2300      	movs	r3, #0
 80021da:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80021e4:	2300      	movs	r3, #0
 80021e6:	74bb      	strb	r3, [r7, #18]
	float 		Calc_Negative = 0;
 80021e8:	f04f 0300 	mov.w	r3, #0
 80021ec:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = X1 - X0;
 80021ee:	887a      	ldrh	r2, [r7, #2]
 80021f0:	88fb      	ldrh	r3, [r7, #6]
 80021f2:	1ad3      	subs	r3, r2, r3
 80021f4:	ee07 3a90 	vmov	s15, r3
 80021f8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80021fc:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_X = 1;
 8002200:	edd7 7a03 	vldr	s15, [r7, #12]
 8002204:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002208:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220c:	d501      	bpl.n	8002212 <ILI9341_Draw_Hollow_Rectangle_Coord+0x58>
 800220e:	2301      	movs	r3, #1
 8002210:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002212:	f04f 0300 	mov.w	r3, #0
 8002216:	60fb      	str	r3, [r7, #12]
	
	Calc_Negative = Y1 - Y0;
 8002218:	883a      	ldrh	r2, [r7, #0]
 800221a:	88bb      	ldrh	r3, [r7, #4]
 800221c:	1ad3      	subs	r3, r2, r3
 800221e:	ee07 3a90 	vmov	s15, r3
 8002222:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002226:	edc7 7a03 	vstr	s15, [r7, #12]
	if(Calc_Negative < 0) Negative_Y = 1;
 800222a:	edd7 7a03 	vldr	s15, [r7, #12]
 800222e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002232:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002236:	d501      	bpl.n	800223c <ILI9341_Draw_Hollow_Rectangle_Coord+0x82>
 8002238:	2301      	movs	r3, #1
 800223a:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800223c:	7cfb      	ldrb	r3, [r7, #19]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d104      	bne.n	800224c <ILI9341_Draw_Hollow_Rectangle_Coord+0x92>
	{
		X_length = X1 - X0;		
 8002242:	887a      	ldrh	r2, [r7, #2]
 8002244:	88fb      	ldrh	r3, [r7, #6]
 8002246:	1ad3      	subs	r3, r2, r3
 8002248:	82fb      	strh	r3, [r7, #22]
 800224a:	e003      	b.n	8002254 <ILI9341_Draw_Hollow_Rectangle_Coord+0x9a>
	}
	else
	{
		X_length = X0 - X1;		
 800224c:	88fa      	ldrh	r2, [r7, #6]
 800224e:	887b      	ldrh	r3, [r7, #2]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	82fb      	strh	r3, [r7, #22]
	}
	ILI9341_Draw_Horizontal_Line(X0, Y0, X_length, Colour);
 8002254:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002256:	8afa      	ldrh	r2, [r7, #22]
 8002258:	88b9      	ldrh	r1, [r7, #4]
 800225a:	88f8      	ldrh	r0, [r7, #6]
 800225c:	f000 ff3c 	bl	80030d8 <ILI9341_Draw_Horizontal_Line>
	ILI9341_Draw_Horizontal_Line(X0, Y1, X_length, Colour);
 8002260:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002262:	8afa      	ldrh	r2, [r7, #22]
 8002264:	8839      	ldrh	r1, [r7, #0]
 8002266:	88f8      	ldrh	r0, [r7, #6]
 8002268:	f000 ff36 	bl	80030d8 <ILI9341_Draw_Horizontal_Line>
	
	
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 800226c:	7cbb      	ldrb	r3, [r7, #18]
 800226e:	2b00      	cmp	r3, #0
 8002270:	d104      	bne.n	800227c <ILI9341_Draw_Hollow_Rectangle_Coord+0xc2>
	{
		Y_length = Y1 - Y0;		
 8002272:	883a      	ldrh	r2, [r7, #0]
 8002274:	88bb      	ldrh	r3, [r7, #4]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	82bb      	strh	r3, [r7, #20]
 800227a:	e003      	b.n	8002284 <ILI9341_Draw_Hollow_Rectangle_Coord+0xca>
	}
	else
	{
		Y_length = Y0 - Y1;		
 800227c:	88ba      	ldrh	r2, [r7, #4]
 800227e:	883b      	ldrh	r3, [r7, #0]
 8002280:	1ad3      	subs	r3, r2, r3
 8002282:	82bb      	strh	r3, [r7, #20]
	}
	ILI9341_Draw_Vertical_Line(X0, Y0, Y_length, Colour);
 8002284:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002286:	8aba      	ldrh	r2, [r7, #20]
 8002288:	88b9      	ldrh	r1, [r7, #4]
 800228a:	88f8      	ldrh	r0, [r7, #6]
 800228c:	f000 ff68 	bl	8003160 <ILI9341_Draw_Vertical_Line>
	ILI9341_Draw_Vertical_Line(X1, Y0, Y_length, Colour);
 8002290:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002292:	8aba      	ldrh	r2, [r7, #20]
 8002294:	88b9      	ldrh	r1, [r7, #4]
 8002296:	8878      	ldrh	r0, [r7, #2]
 8002298:	f000 ff62 	bl	8003160 <ILI9341_Draw_Vertical_Line>
	
	if((X_length > 0)||(Y_length > 0)) 
 800229c:	8afb      	ldrh	r3, [r7, #22]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d102      	bne.n	80022a8 <ILI9341_Draw_Hollow_Rectangle_Coord+0xee>
 80022a2:	8abb      	ldrh	r3, [r7, #20]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d005      	beq.n	80022b4 <ILI9341_Draw_Hollow_Rectangle_Coord+0xfa>
	{
		ILI9341_Draw_Pixel(X1, Y1, Colour);
 80022a8:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80022aa:	8839      	ldrh	r1, [r7, #0]
 80022ac:	887b      	ldrh	r3, [r7, #2]
 80022ae:	4618      	mov	r0, r3
 80022b0:	f000 fddc 	bl	8002e6c <ILI9341_Draw_Pixel>
	}
	
}
 80022b4:	bf00      	nop
 80022b6:	371c      	adds	r7, #28
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd90      	pop	{r4, r7, pc}

080022bc <ILI9341_Draw_Filled_Rectangle_Coord>:

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 80022bc:	b590      	push	{r4, r7, lr}
 80022be:	b089      	sub	sp, #36	; 0x24
 80022c0:	af02      	add	r7, sp, #8
 80022c2:	4604      	mov	r4, r0
 80022c4:	4608      	mov	r0, r1
 80022c6:	4611      	mov	r1, r2
 80022c8:	461a      	mov	r2, r3
 80022ca:	4623      	mov	r3, r4
 80022cc:	80fb      	strh	r3, [r7, #6]
 80022ce:	4603      	mov	r3, r0
 80022d0:	80bb      	strh	r3, [r7, #4]
 80022d2:	460b      	mov	r3, r1
 80022d4:	807b      	strh	r3, [r7, #2]
 80022d6:	4613      	mov	r3, r2
 80022d8:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 80022da:	2300      	movs	r3, #0
 80022dc:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 80022de:	2300      	movs	r3, #0
 80022e0:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 80022e2:	2300      	movs	r3, #0
 80022e4:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 80022e6:	2300      	movs	r3, #0
 80022e8:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 80022ea:	2300      	movs	r3, #0
 80022ec:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 80022ee:	2300      	movs	r3, #0
 80022f0:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 80022f2:	2300      	movs	r3, #0
 80022f4:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 80022f6:	887a      	ldrh	r2, [r7, #2]
 80022f8:	88fb      	ldrh	r3, [r7, #6]
 80022fa:	1ad3      	subs	r3, r2, r3
 80022fc:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b00      	cmp	r3, #0
 8002302:	da01      	bge.n	8002308 <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8002304:	2301      	movs	r3, #1
 8002306:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8002308:	2300      	movs	r3, #0
 800230a:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 800230c:	883a      	ldrh	r2, [r7, #0]
 800230e:	88bb      	ldrh	r3, [r7, #4]
 8002310:	1ad3      	subs	r3, r2, r3
 8002312:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8002314:	68bb      	ldr	r3, [r7, #8]
 8002316:	2b00      	cmp	r3, #0
 8002318:	da01      	bge.n	800231e <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 800231a:	2301      	movs	r3, #1
 800231c:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	2b00      	cmp	r3, #0
 8002322:	d106      	bne.n	8002332 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8002324:	887a      	ldrh	r2, [r7, #2]
 8002326:	88fb      	ldrh	r3, [r7, #6]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 800232c:	88fb      	ldrh	r3, [r7, #6]
 800232e:	823b      	strh	r3, [r7, #16]
 8002330:	e005      	b.n	800233e <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8002332:	88fa      	ldrh	r2, [r7, #6]
 8002334:	887b      	ldrh	r3, [r7, #2]
 8002336:	1ad3      	subs	r3, r2, r3
 8002338:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 800233a:	887b      	ldrh	r3, [r7, #2]
 800233c:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 800233e:	7cbb      	ldrb	r3, [r7, #18]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d106      	bne.n	8002352 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8002344:	883a      	ldrh	r2, [r7, #0]
 8002346:	88bb      	ldrh	r3, [r7, #4]
 8002348:	1ad3      	subs	r3, r2, r3
 800234a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 800234c:	88bb      	ldrh	r3, [r7, #4]
 800234e:	81fb      	strh	r3, [r7, #14]
 8002350:	e005      	b.n	800235e <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8002352:	88ba      	ldrh	r2, [r7, #4]
 8002354:	883b      	ldrh	r3, [r7, #0]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 800235a:	883b      	ldrh	r3, [r7, #0]
 800235c:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 800235e:	8abc      	ldrh	r4, [r7, #20]
 8002360:	8afa      	ldrh	r2, [r7, #22]
 8002362:	89f9      	ldrh	r1, [r7, #14]
 8002364:	8a38      	ldrh	r0, [r7, #16]
 8002366:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	4623      	mov	r3, r4
 800236c:	f000 fe58 	bl	8003020 <ILI9341_Draw_Rectangle>
}
 8002370:	bf00      	nop
 8002372:	371c      	adds	r7, #28
 8002374:	46bd      	mov	sp, r7
 8002376:	bd90      	pop	{r4, r7, pc}

08002378 <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b089      	sub	sp, #36	; 0x24
 800237c:	af02      	add	r7, sp, #8
 800237e:	4604      	mov	r4, r0
 8002380:	4608      	mov	r0, r1
 8002382:	4611      	mov	r1, r2
 8002384:	461a      	mov	r2, r3
 8002386:	4623      	mov	r3, r4
 8002388:	71fb      	strb	r3, [r7, #7]
 800238a:	4603      	mov	r3, r0
 800238c:	71bb      	strb	r3, [r7, #6]
 800238e:	460b      	mov	r3, r1
 8002390:	717b      	strb	r3, [r7, #5]
 8002392:	4613      	mov	r3, r2
 8002394:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8002396:	79fb      	ldrb	r3, [r7, #7]
 8002398:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 800239a:	7dfb      	ldrb	r3, [r7, #23]
 800239c:	2b1f      	cmp	r3, #31
 800239e:	d802      	bhi.n	80023a6 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	71fb      	strb	r3, [r7, #7]
 80023a4:	e002      	b.n	80023ac <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 80023a6:	7dfb      	ldrb	r3, [r7, #23]
 80023a8:	3b20      	subs	r3, #32
 80023aa:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023ac:	2300      	movs	r3, #0
 80023ae:	753b      	strb	r3, [r7, #20]
 80023b0:	e012      	b.n	80023d8 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 80023b2:	7dfa      	ldrb	r2, [r7, #23]
 80023b4:	7d38      	ldrb	r0, [r7, #20]
 80023b6:	7d39      	ldrb	r1, [r7, #20]
 80023b8:	4c3b      	ldr	r4, [pc, #236]	; (80024a8 <ILI9341_Draw_Char+0x130>)
 80023ba:	4613      	mov	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4413      	add	r3, r2
 80023c0:	005b      	lsls	r3, r3, #1
 80023c2:	4423      	add	r3, r4
 80023c4:	4403      	add	r3, r0
 80023c6:	781a      	ldrb	r2, [r3, #0]
 80023c8:	f101 0318 	add.w	r3, r1, #24
 80023cc:	443b      	add	r3, r7
 80023ce:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 80023d2:	7d3b      	ldrb	r3, [r7, #20]
 80023d4:	3301      	adds	r3, #1
 80023d6:	753b      	strb	r3, [r7, #20]
 80023d8:	7d3b      	ldrb	r3, [r7, #20]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d9e9      	bls.n	80023b2 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 80023de:	79bb      	ldrb	r3, [r7, #6]
 80023e0:	b298      	uxth	r0, r3
 80023e2:	797b      	ldrb	r3, [r7, #5]
 80023e4:	b299      	uxth	r1, r3
 80023e6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023e8:	461a      	mov	r2, r3
 80023ea:	0052      	lsls	r2, r2, #1
 80023ec:	4413      	add	r3, r2
 80023ee:	005b      	lsls	r3, r3, #1
 80023f0:	b29a      	uxth	r2, r3
 80023f2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80023f4:	00db      	lsls	r3, r3, #3
 80023f6:	b29c      	uxth	r4, r3
 80023f8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80023fa:	9300      	str	r3, [sp, #0]
 80023fc:	4623      	mov	r3, r4
 80023fe:	f000 fe0f 	bl	8003020 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002402:	2300      	movs	r3, #0
 8002404:	757b      	strb	r3, [r7, #21]
 8002406:	e047      	b.n	8002498 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002408:	2300      	movs	r3, #0
 800240a:	75bb      	strb	r3, [r7, #22]
 800240c:	e03e      	b.n	800248c <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 800240e:	7d7b      	ldrb	r3, [r7, #21]
 8002410:	3318      	adds	r3, #24
 8002412:	443b      	add	r3, r7
 8002414:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8002418:	461a      	mov	r2, r3
 800241a:	7dbb      	ldrb	r3, [r7, #22]
 800241c:	fa42 f303 	asr.w	r3, r2, r3
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	2b00      	cmp	r3, #0
 8002426:	d02e      	beq.n	8002486 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8002428:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800242a:	2b01      	cmp	r3, #1
 800242c:	d110      	bne.n	8002450 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 800242e:	79bb      	ldrb	r3, [r7, #6]
 8002430:	b29a      	uxth	r2, r3
 8002432:	7d7b      	ldrb	r3, [r7, #21]
 8002434:	b29b      	uxth	r3, r3
 8002436:	4413      	add	r3, r2
 8002438:	b298      	uxth	r0, r3
 800243a:	797b      	ldrb	r3, [r7, #5]
 800243c:	b29a      	uxth	r2, r3
 800243e:	7dbb      	ldrb	r3, [r7, #22]
 8002440:	b29b      	uxth	r3, r3
 8002442:	4413      	add	r3, r2
 8002444:	b29b      	uxth	r3, r3
 8002446:	887a      	ldrh	r2, [r7, #2]
 8002448:	4619      	mov	r1, r3
 800244a:	f000 fd0f 	bl	8002e6c <ILI9341_Draw_Pixel>
 800244e:	e01a      	b.n	8002486 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8002450:	79bb      	ldrb	r3, [r7, #6]
 8002452:	b29a      	uxth	r2, r3
 8002454:	7d7b      	ldrb	r3, [r7, #21]
 8002456:	b29b      	uxth	r3, r3
 8002458:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800245a:	fb11 f303 	smulbb	r3, r1, r3
 800245e:	b29b      	uxth	r3, r3
 8002460:	4413      	add	r3, r2
 8002462:	b298      	uxth	r0, r3
 8002464:	797b      	ldrb	r3, [r7, #5]
 8002466:	b29a      	uxth	r2, r3
 8002468:	7dbb      	ldrb	r3, [r7, #22]
 800246a:	b29b      	uxth	r3, r3
 800246c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 800246e:	fb11 f303 	smulbb	r3, r1, r3
 8002472:	b29b      	uxth	r3, r3
 8002474:	4413      	add	r3, r2
 8002476:	b299      	uxth	r1, r3
 8002478:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 800247a:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800247c:	887b      	ldrh	r3, [r7, #2]
 800247e:	9300      	str	r3, [sp, #0]
 8002480:	4623      	mov	r3, r4
 8002482:	f000 fdcd 	bl	8003020 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8002486:	7dbb      	ldrb	r3, [r7, #22]
 8002488:	3301      	adds	r3, #1
 800248a:	75bb      	strb	r3, [r7, #22]
 800248c:	7dbb      	ldrb	r3, [r7, #22]
 800248e:	2b07      	cmp	r3, #7
 8002490:	d9bd      	bls.n	800240e <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8002492:	7d7b      	ldrb	r3, [r7, #21]
 8002494:	3301      	adds	r3, #1
 8002496:	757b      	strb	r3, [r7, #21]
 8002498:	7d7b      	ldrb	r3, [r7, #21]
 800249a:	2b05      	cmp	r3, #5
 800249c:	d9b4      	bls.n	8002408 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 800249e:	bf00      	nop
 80024a0:	bf00      	nop
 80024a2:	371c      	adds	r7, #28
 80024a4:	46bd      	mov	sp, r7
 80024a6:	bd90      	pop	{r4, r7, pc}
 80024a8:	0802ec10 	.word	0x0802ec10

080024ac <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 80024ac:	b590      	push	{r4, r7, lr}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af02      	add	r7, sp, #8
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	4608      	mov	r0, r1
 80024b6:	4611      	mov	r1, r2
 80024b8:	461a      	mov	r2, r3
 80024ba:	4603      	mov	r3, r0
 80024bc:	70fb      	strb	r3, [r7, #3]
 80024be:	460b      	mov	r3, r1
 80024c0:	70bb      	strb	r3, [r7, #2]
 80024c2:	4613      	mov	r3, r2
 80024c4:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 80024c6:	e017      	b.n	80024f8 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	1c5a      	adds	r2, r3, #1
 80024cc:	607a      	str	r2, [r7, #4]
 80024ce:	7818      	ldrb	r0, [r3, #0]
 80024d0:	883c      	ldrh	r4, [r7, #0]
 80024d2:	78ba      	ldrb	r2, [r7, #2]
 80024d4:	78f9      	ldrb	r1, [r7, #3]
 80024d6:	8bbb      	ldrh	r3, [r7, #28]
 80024d8:	9301      	str	r3, [sp, #4]
 80024da:	8b3b      	ldrh	r3, [r7, #24]
 80024dc:	9300      	str	r3, [sp, #0]
 80024de:	4623      	mov	r3, r4
 80024e0:	f7ff ff4a 	bl	8002378 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 80024e4:	8b3b      	ldrh	r3, [r7, #24]
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	461a      	mov	r2, r3
 80024ea:	0052      	lsls	r2, r2, #1
 80024ec:	4413      	add	r3, r2
 80024ee:	005b      	lsls	r3, r3, #1
 80024f0:	b2da      	uxtb	r2, r3
 80024f2:	78fb      	ldrb	r3, [r7, #3]
 80024f4:	4413      	add	r3, r2
 80024f6:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	781b      	ldrb	r3, [r3, #0]
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d1e3      	bne.n	80024c8 <ILI9341_Draw_Text+0x1c>
    }
}
 8002500:	bf00      	nop
 8002502:	bf00      	nop
 8002504:	370c      	adds	r7, #12
 8002506:	46bd      	mov	sp, r7
 8002508:	bd90      	pop	{r4, r7, pc}
	...

0800250c <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002512:	af00      	add	r7, sp, #0
 8002514:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002518:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800251c:	6018      	str	r0, [r3, #0]
 800251e:	460a      	mov	r2, r1
 8002520:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002524:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002528:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 800252a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800252e:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002532:	781b      	ldrb	r3, [r3, #0]
 8002534:	2b01      	cmp	r3, #1
 8002536:	d15e      	bne.n	80025f6 <ILI9341_Draw_Image+0xea>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8002538:	2001      	movs	r0, #1
 800253a:	f000 fa67 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 800253e:	23f0      	movs	r3, #240	; 0xf0
 8002540:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002544:	2100      	movs	r1, #0
 8002546:	2000      	movs	r0, #0
 8002548:	f000 f9f6 	bl	8002938 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800254c:	2201      	movs	r2, #1
 800254e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002552:	48c4      	ldr	r0, [pc, #784]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002554:	f001 fab8 	bl	8003ac8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002558:	2200      	movs	r2, #0
 800255a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800255e:	48c1      	ldr	r0, [pc, #772]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002560:	f001 fab2 	bl	8003ac8 <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8002564:	2300      	movs	r3, #0
 8002566:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800256a:	2300      	movs	r3, #0
 800256c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002570:	e035      	b.n	80025de <ILI9341_Draw_Image+0xd2>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002572:	2300      	movs	r3, #0
 8002574:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8002578:	e019      	b.n	80025ae <ILI9341_Draw_Image+0xa2>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800257a:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 800257e:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002582:	4413      	add	r3, r2
 8002584:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002588:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800258c:	6812      	ldr	r2, [r2, #0]
 800258e:	4413      	add	r3, r2
 8002590:	7819      	ldrb	r1, [r3, #0]
 8002592:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002596:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800259a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 800259e:	4413      	add	r3, r2
 80025a0:	460a      	mov	r2, r1
 80025a2:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80025a4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80025a8:	3301      	adds	r3, #1
 80025aa:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80025ae:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80025b2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025b6:	d3e0      	bcc.n	800257a <ILI9341_Draw_Image+0x6e>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80025b8:	f107 010c 	add.w	r1, r7, #12
 80025bc:	230a      	movs	r3, #10
 80025be:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80025c2:	48a9      	ldr	r0, [pc, #676]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 80025c4:	f002 fd2f 	bl	8005026 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80025c8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80025cc:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80025d0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80025d4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80025d8:	3301      	adds	r3, #1
 80025da:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80025de:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80025e2:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80025e6:	d9c4      	bls.n	8002572 <ILI9341_Draw_Image+0x66>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80025e8:	2201      	movs	r2, #1
 80025ea:	f44f 7180 	mov.w	r1, #256	; 0x100
 80025ee:	489d      	ldr	r0, [pc, #628]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80025f0:	f001 fa6a 	bl	8003ac8 <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 80025f4:	e130      	b.n	8002858 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 80025f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80025fa:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	2b03      	cmp	r3, #3
 8002602:	d15e      	bne.n	80026c2 <ILI9341_Draw_Image+0x1b6>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002604:	2003      	movs	r0, #3
 8002606:	f000 fa01 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 800260a:	23f0      	movs	r3, #240	; 0xf0
 800260c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002610:	2100      	movs	r1, #0
 8002612:	2000      	movs	r0, #0
 8002614:	f000 f990 	bl	8002938 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002618:	2201      	movs	r2, #1
 800261a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800261e:	4891      	ldr	r0, [pc, #580]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002620:	f001 fa52 	bl	8003ac8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002624:	2200      	movs	r2, #0
 8002626:	f44f 7180 	mov.w	r1, #256	; 0x100
 800262a:	488e      	ldr	r0, [pc, #568]	; (8002864 <ILI9341_Draw_Image+0x358>)
 800262c:	f001 fa4c 	bl	8003ac8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002636:	2300      	movs	r3, #0
 8002638:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800263c:	e035      	b.n	80026aa <ILI9341_Draw_Image+0x19e>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800263e:	2300      	movs	r3, #0
 8002640:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002644:	e019      	b.n	800267a <ILI9341_Draw_Image+0x16e>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002646:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800264a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800264e:	4413      	add	r3, r2
 8002650:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002654:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002658:	6812      	ldr	r2, [r2, #0]
 800265a:	4413      	add	r3, r2
 800265c:	7819      	ldrb	r1, [r3, #0]
 800265e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002662:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002666:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800266a:	4413      	add	r3, r2
 800266c:	460a      	mov	r2, r1
 800266e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002670:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002674:	3301      	adds	r3, #1
 8002676:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800267a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800267e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002682:	d3e0      	bcc.n	8002646 <ILI9341_Draw_Image+0x13a>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002684:	f107 010c 	add.w	r1, r7, #12
 8002688:	230a      	movs	r3, #10
 800268a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800268e:	4876      	ldr	r0, [pc, #472]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 8002690:	f002 fcc9 	bl	8005026 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002694:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8002698:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 800269c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80026a0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80026a4:	3301      	adds	r3, #1
 80026a6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80026aa:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80026ae:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80026b2:	d9c4      	bls.n	800263e <ILI9341_Draw_Image+0x132>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80026b4:	2201      	movs	r2, #1
 80026b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026ba:	486a      	ldr	r0, [pc, #424]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80026bc:	f001 fa04 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 80026c0:	e0ca      	b.n	8002858 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_2)
 80026c2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80026c6:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d15e      	bne.n	800278e <ILI9341_Draw_Image+0x282>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 80026d0:	2002      	movs	r0, #2
 80026d2:	f000 f99b 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 80026d6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80026da:	22f0      	movs	r2, #240	; 0xf0
 80026dc:	2100      	movs	r1, #0
 80026de:	2000      	movs	r0, #0
 80026e0:	f000 f92a 	bl	8002938 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80026e4:	2201      	movs	r2, #1
 80026e6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80026ea:	485e      	ldr	r0, [pc, #376]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80026ec:	f001 f9ec 	bl	8003ac8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80026f0:	2200      	movs	r2, #0
 80026f2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026f6:	485b      	ldr	r0, [pc, #364]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80026f8:	f001 f9e6 	bl	8003ac8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80026fc:	2300      	movs	r3, #0
 80026fe:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002702:	2300      	movs	r3, #0
 8002704:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002708:	e035      	b.n	8002776 <ILI9341_Draw_Image+0x26a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800270a:	2300      	movs	r3, #0
 800270c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002710:	e019      	b.n	8002746 <ILI9341_Draw_Image+0x23a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002712:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002716:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800271a:	4413      	add	r3, r2
 800271c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002720:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002724:	6812      	ldr	r2, [r2, #0]
 8002726:	4413      	add	r3, r2
 8002728:	7819      	ldrb	r1, [r3, #0]
 800272a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800272e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002732:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002736:	4413      	add	r3, r2
 8002738:	460a      	mov	r2, r1
 800273a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800273c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002740:	3301      	adds	r3, #1
 8002742:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002746:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800274a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800274e:	d3e0      	bcc.n	8002712 <ILI9341_Draw_Image+0x206>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002750:	f107 010c 	add.w	r1, r7, #12
 8002754:	230a      	movs	r3, #10
 8002756:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800275a:	4843      	ldr	r0, [pc, #268]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 800275c:	f002 fc63 	bl	8005026 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002760:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002764:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002768:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800276c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002770:	3301      	adds	r3, #1
 8002772:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002776:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800277a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800277e:	d9c4      	bls.n	800270a <ILI9341_Draw_Image+0x1fe>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002780:	2201      	movs	r2, #1
 8002782:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002786:	4837      	ldr	r0, [pc, #220]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002788:	f001 f99e 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 800278c:	e064      	b.n	8002858 <ILI9341_Draw_Image+0x34c>
	else if(Orientation == SCREEN_VERTICAL_1)
 800278e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002792:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d15d      	bne.n	8002858 <ILI9341_Draw_Image+0x34c>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 800279c:	2000      	movs	r0, #0
 800279e:	f000 f935 	bl	8002a0c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 80027a2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80027a6:	22f0      	movs	r2, #240	; 0xf0
 80027a8:	2100      	movs	r1, #0
 80027aa:	2000      	movs	r0, #0
 80027ac:	f000 f8c4 	bl	8002938 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80027b0:	2201      	movs	r2, #1
 80027b2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80027b6:	482b      	ldr	r0, [pc, #172]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80027b8:	f001 f986 	bl	8003ac8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80027bc:	2200      	movs	r2, #0
 80027be:	f44f 7180 	mov.w	r1, #256	; 0x100
 80027c2:	4828      	ldr	r0, [pc, #160]	; (8002864 <ILI9341_Draw_Image+0x358>)
 80027c4:	f001 f980 	bl	8003ac8 <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80027c8:	2300      	movs	r3, #0
 80027ca:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80027ce:	2300      	movs	r3, #0
 80027d0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80027d4:	e035      	b.n	8002842 <ILI9341_Draw_Image+0x336>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80027d6:	2300      	movs	r3, #0
 80027d8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80027dc:	e019      	b.n	8002812 <ILI9341_Draw_Image+0x306>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80027de:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80027e2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80027e6:	4413      	add	r3, r2
 80027e8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80027ec:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 80027f0:	6812      	ldr	r2, [r2, #0]
 80027f2:	4413      	add	r3, r2
 80027f4:	7819      	ldrb	r1, [r3, #0]
 80027f6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80027fa:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80027fe:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002802:	4413      	add	r3, r2
 8002804:	460a      	mov	r2, r1
 8002806:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002808:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800280c:	3301      	adds	r3, #1
 800280e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002812:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002816:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800281a:	d3e0      	bcc.n	80027de <ILI9341_Draw_Image+0x2d2>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 800281c:	f107 010c 	add.w	r1, r7, #12
 8002820:	230a      	movs	r3, #10
 8002822:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002826:	4810      	ldr	r0, [pc, #64]	; (8002868 <ILI9341_Draw_Image+0x35c>)
 8002828:	f002 fbfd 	bl	8005026 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 800282c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002830:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002834:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002838:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800283c:	3301      	adds	r3, #1
 800283e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002842:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002846:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800284a:	d9c4      	bls.n	80027d6 <ILI9341_Draw_Image+0x2ca>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800284c:	2201      	movs	r2, #1
 800284e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002852:	4804      	ldr	r0, [pc, #16]	; (8002864 <ILI9341_Draw_Image+0x358>)
 8002854:	f001 f938 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 8002858:	bf00      	nop
 800285a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	40020800 	.word	0x40020800
 8002868:	20000210 	.word	0x20000210

0800286c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002870:	f7ff f8ac 	bl	80019cc <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002874:	f7fd febe 	bl	80005f4 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002878:	2200      	movs	r2, #0
 800287a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800287e:	4802      	ldr	r0, [pc, #8]	; (8002888 <ILI9341_SPI_Init+0x1c>)
 8002880:	f001 f922 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 8002884:	bf00      	nop
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40020800 	.word	0x40020800

0800288c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800288c:	b580      	push	{r7, lr}
 800288e:	b082      	sub	sp, #8
 8002890:	af00      	add	r7, sp, #0
 8002892:	4603      	mov	r3, r0
 8002894:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8002896:	1df9      	adds	r1, r7, #7
 8002898:	2301      	movs	r3, #1
 800289a:	2201      	movs	r2, #1
 800289c:	4803      	ldr	r0, [pc, #12]	; (80028ac <ILI9341_SPI_Send+0x20>)
 800289e:	f002 fbc2 	bl	8005026 <HAL_SPI_Transmit>
}
 80028a2:	bf00      	nop
 80028a4:	3708      	adds	r7, #8
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	20000210 	.word	0x20000210

080028b0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	4603      	mov	r3, r0
 80028b8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80028ba:	2200      	movs	r2, #0
 80028bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028c0:	480b      	ldr	r0, [pc, #44]	; (80028f0 <ILI9341_Write_Command+0x40>)
 80028c2:	f001 f901 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80028c6:	2200      	movs	r2, #0
 80028c8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80028cc:	4808      	ldr	r0, [pc, #32]	; (80028f0 <ILI9341_Write_Command+0x40>)
 80028ce:	f001 f8fb 	bl	8003ac8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80028d2:	79fb      	ldrb	r3, [r7, #7]
 80028d4:	4618      	mov	r0, r3
 80028d6:	f7ff ffd9 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80028da:	2201      	movs	r2, #1
 80028dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80028e0:	4803      	ldr	r0, [pc, #12]	; (80028f0 <ILI9341_Write_Command+0x40>)
 80028e2:	f001 f8f1 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 80028e6:	bf00      	nop
 80028e8:	3708      	adds	r7, #8
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	40020800 	.word	0x40020800

080028f4 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 80028f4:	b580      	push	{r7, lr}
 80028f6:	b082      	sub	sp, #8
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80028fe:	2201      	movs	r2, #1
 8002900:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002904:	480b      	ldr	r0, [pc, #44]	; (8002934 <ILI9341_Write_Data+0x40>)
 8002906:	f001 f8df 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800290a:	2200      	movs	r2, #0
 800290c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002910:	4808      	ldr	r0, [pc, #32]	; (8002934 <ILI9341_Write_Data+0x40>)
 8002912:	f001 f8d9 	bl	8003ac8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	4618      	mov	r0, r3
 800291a:	f7ff ffb7 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800291e:	2201      	movs	r2, #1
 8002920:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002924:	4803      	ldr	r0, [pc, #12]	; (8002934 <ILI9341_Write_Data+0x40>)
 8002926:	f001 f8cf 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}
 8002932:	bf00      	nop
 8002934:	40020800 	.word	0x40020800

08002938 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002938:	b590      	push	{r4, r7, lr}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	4604      	mov	r4, r0
 8002940:	4608      	mov	r0, r1
 8002942:	4611      	mov	r1, r2
 8002944:	461a      	mov	r2, r3
 8002946:	4623      	mov	r3, r4
 8002948:	80fb      	strh	r3, [r7, #6]
 800294a:	4603      	mov	r3, r0
 800294c:	80bb      	strh	r3, [r7, #4]
 800294e:	460b      	mov	r3, r1
 8002950:	807b      	strh	r3, [r7, #2]
 8002952:	4613      	mov	r3, r2
 8002954:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002956:	202a      	movs	r0, #42	; 0x2a
 8002958:	f7ff ffaa 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800295c:	88fb      	ldrh	r3, [r7, #6]
 800295e:	0a1b      	lsrs	r3, r3, #8
 8002960:	b29b      	uxth	r3, r3
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	f7ff ffc5 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800296a:	88fb      	ldrh	r3, [r7, #6]
 800296c:	b2db      	uxtb	r3, r3
 800296e:	4618      	mov	r0, r3
 8002970:	f7ff ffc0 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002974:	887b      	ldrh	r3, [r7, #2]
 8002976:	0a1b      	lsrs	r3, r3, #8
 8002978:	b29b      	uxth	r3, r3
 800297a:	b2db      	uxtb	r3, r3
 800297c:	4618      	mov	r0, r3
 800297e:	f7ff ffb9 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002982:	887b      	ldrh	r3, [r7, #2]
 8002984:	b2db      	uxtb	r3, r3
 8002986:	4618      	mov	r0, r3
 8002988:	f7ff ffb4 	bl	80028f4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800298c:	202b      	movs	r0, #43	; 0x2b
 800298e:	f7ff ff8f 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8002992:	88bb      	ldrh	r3, [r7, #4]
 8002994:	0a1b      	lsrs	r3, r3, #8
 8002996:	b29b      	uxth	r3, r3
 8002998:	b2db      	uxtb	r3, r3
 800299a:	4618      	mov	r0, r3
 800299c:	f7ff ffaa 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80029a0:	88bb      	ldrh	r3, [r7, #4]
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff ffa5 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80029aa:	883b      	ldrh	r3, [r7, #0]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	b2db      	uxtb	r3, r3
 80029b2:	4618      	mov	r0, r3
 80029b4:	f7ff ff9e 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80029b8:	883b      	ldrh	r3, [r7, #0]
 80029ba:	b2db      	uxtb	r3, r3
 80029bc:	4618      	mov	r0, r3
 80029be:	f7ff ff99 	bl	80028f4 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80029c2:	202c      	movs	r0, #44	; 0x2c
 80029c4:	f7ff ff74 	bl	80028b0 <ILI9341_Write_Command>
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	bd90      	pop	{r4, r7, pc}

080029d0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029da:	480b      	ldr	r0, [pc, #44]	; (8002a08 <ILI9341_Reset+0x38>)
 80029dc:	f001 f874 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029e0:	20c8      	movs	r0, #200	; 0xc8
 80029e2:	f000 fda3 	bl	800352c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029e6:	2200      	movs	r2, #0
 80029e8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029ec:	4806      	ldr	r0, [pc, #24]	; (8002a08 <ILI9341_Reset+0x38>)
 80029ee:	f001 f86b 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_Delay(200);
 80029f2:	20c8      	movs	r0, #200	; 0xc8
 80029f4:	f000 fd9a 	bl	800352c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 80029f8:	2201      	movs	r2, #1
 80029fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80029fe:	4802      	ldr	r0, [pc, #8]	; (8002a08 <ILI9341_Reset+0x38>)
 8002a00:	f001 f862 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 8002a04:	bf00      	nop
 8002a06:	bd80      	pop	{r7, pc}
 8002a08:	40020800 	.word	0x40020800

08002a0c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b084      	sub	sp, #16
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	4603      	mov	r3, r0
 8002a14:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002a16:	79fb      	ldrb	r3, [r7, #7]
 8002a18:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8002a1a:	2036      	movs	r0, #54	; 0x36
 8002a1c:	f7ff ff48 	bl	80028b0 <ILI9341_Write_Command>
HAL_Delay(1);
 8002a20:	2001      	movs	r0, #1
 8002a22:	f000 fd83 	bl	800352c <HAL_Delay>
	
switch(screen_rotation) 
 8002a26:	7bfb      	ldrb	r3, [r7, #15]
 8002a28:	2b03      	cmp	r3, #3
 8002a2a:	d837      	bhi.n	8002a9c <ILI9341_Set_Rotation+0x90>
 8002a2c:	a201      	add	r2, pc, #4	; (adr r2, 8002a34 <ILI9341_Set_Rotation+0x28>)
 8002a2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a32:	bf00      	nop
 8002a34:	08002a45 	.word	0x08002a45
 8002a38:	08002a5b 	.word	0x08002a5b
 8002a3c:	08002a71 	.word	0x08002a71
 8002a40:	08002a87 	.word	0x08002a87
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002a44:	2048      	movs	r0, #72	; 0x48
 8002a46:	f7ff ff55 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a4c:	22f0      	movs	r2, #240	; 0xf0
 8002a4e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a50:	4b16      	ldr	r3, [pc, #88]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a52:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a56:	801a      	strh	r2, [r3, #0]
			break;
 8002a58:	e021      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8002a5a:	2028      	movs	r0, #40	; 0x28
 8002a5c:	f7ff ff4a 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a62:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a66:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a68:	4b10      	ldr	r3, [pc, #64]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a6a:	22f0      	movs	r2, #240	; 0xf0
 8002a6c:	801a      	strh	r2, [r3, #0]
			break;
 8002a6e:	e016      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002a70:	2088      	movs	r0, #136	; 0x88
 8002a72:	f7ff ff3f 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002a76:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a78:	22f0      	movs	r2, #240	; 0xf0
 8002a7a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002a7c:	4b0b      	ldr	r3, [pc, #44]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a7e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a82:	801a      	strh	r2, [r3, #0]
			break;
 8002a84:	e00b      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002a86:	20e8      	movs	r0, #232	; 0xe8
 8002a88:	f7ff ff34 	bl	80028f4 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002a8c:	4b06      	ldr	r3, [pc, #24]	; (8002aa8 <ILI9341_Set_Rotation+0x9c>)
 8002a8e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002a92:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002a94:	4b05      	ldr	r3, [pc, #20]	; (8002aac <ILI9341_Set_Rotation+0xa0>)
 8002a96:	22f0      	movs	r2, #240	; 0xf0
 8002a98:	801a      	strh	r2, [r3, #0]
			break;
 8002a9a:	e000      	b.n	8002a9e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8002a9c:	bf00      	nop
	}
}
 8002a9e:	bf00      	nop
 8002aa0:	3710      	adds	r7, #16
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	bd80      	pop	{r7, pc}
 8002aa6:	bf00      	nop
 8002aa8:	20000006 	.word	0x20000006
 8002aac:	20000004 	.word	0x20000004

08002ab0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 8002ab4:	2201      	movs	r2, #1
 8002ab6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002aba:	4802      	ldr	r0, [pc, #8]	; (8002ac4 <ILI9341_Enable+0x14>)
 8002abc:	f001 f804 	bl	8003ac8 <HAL_GPIO_WritePin>
}
 8002ac0:	bf00      	nop
 8002ac2:	bd80      	pop	{r7, pc}
 8002ac4:	40020800 	.word	0x40020800

08002ac8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	af00      	add	r7, sp, #0

ILI9341_Enable();
 8002acc:	f7ff fff0 	bl	8002ab0 <ILI9341_Enable>
ILI9341_SPI_Init();
 8002ad0:	f7ff fecc 	bl	800286c <ILI9341_SPI_Init>
ILI9341_Reset();
 8002ad4:	f7ff ff7c 	bl	80029d0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 8002ad8:	2001      	movs	r0, #1
 8002ada:	f7ff fee9 	bl	80028b0 <ILI9341_Write_Command>
HAL_Delay(1000);
 8002ade:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002ae2:	f000 fd23 	bl	800352c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 8002ae6:	20cb      	movs	r0, #203	; 0xcb
 8002ae8:	f7ff fee2 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 8002aec:	2039      	movs	r0, #57	; 0x39
 8002aee:	f7ff ff01 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002af2:	202c      	movs	r0, #44	; 0x2c
 8002af4:	f7ff fefe 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002af8:	2000      	movs	r0, #0
 8002afa:	f7ff fefb 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 8002afe:	2034      	movs	r0, #52	; 0x34
 8002b00:	f7ff fef8 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002b04:	2002      	movs	r0, #2
 8002b06:	f7ff fef5 	bl	80028f4 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 8002b0a:	20cf      	movs	r0, #207	; 0xcf
 8002b0c:	f7ff fed0 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b10:	2000      	movs	r0, #0
 8002b12:	f7ff feef 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002b16:	20c1      	movs	r0, #193	; 0xc1
 8002b18:	f7ff feec 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 8002b1c:	2030      	movs	r0, #48	; 0x30
 8002b1e:	f7ff fee9 	bl	80028f4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002b22:	20e8      	movs	r0, #232	; 0xe8
 8002b24:	f7ff fec4 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002b28:	2085      	movs	r0, #133	; 0x85
 8002b2a:	f7ff fee3 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b2e:	2000      	movs	r0, #0
 8002b30:	f7ff fee0 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002b34:	2078      	movs	r0, #120	; 0x78
 8002b36:	f7ff fedd 	bl	80028f4 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 8002b3a:	20ea      	movs	r0, #234	; 0xea
 8002b3c:	f7ff feb8 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002b40:	2000      	movs	r0, #0
 8002b42:	f7ff fed7 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f7ff fed4 	bl	80028f4 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 8002b4c:	20ed      	movs	r0, #237	; 0xed
 8002b4e:	f7ff feaf 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002b52:	2064      	movs	r0, #100	; 0x64
 8002b54:	f7ff fece 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002b58:	2003      	movs	r0, #3
 8002b5a:	f7ff fecb 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 8002b5e:	2012      	movs	r0, #18
 8002b60:	f7ff fec8 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002b64:	2081      	movs	r0, #129	; 0x81
 8002b66:	f7ff fec5 	bl	80028f4 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 8002b6a:	20f7      	movs	r0, #247	; 0xf7
 8002b6c:	f7ff fea0 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002b70:	2020      	movs	r0, #32
 8002b72:	f7ff febf 	bl	80028f4 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002b76:	20c0      	movs	r0, #192	; 0xc0
 8002b78:	f7ff fe9a 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 8002b7c:	2023      	movs	r0, #35	; 0x23
 8002b7e:	f7ff feb9 	bl	80028f4 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002b82:	20c1      	movs	r0, #193	; 0xc1
 8002b84:	f7ff fe94 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002b88:	2010      	movs	r0, #16
 8002b8a:	f7ff feb3 	bl	80028f4 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 8002b8e:	20c5      	movs	r0, #197	; 0xc5
 8002b90:	f7ff fe8e 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 8002b94:	203e      	movs	r0, #62	; 0x3e
 8002b96:	f7ff fead 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 8002b9a:	2028      	movs	r0, #40	; 0x28
 8002b9c:	f7ff feaa 	bl	80028f4 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 8002ba0:	20c7      	movs	r0, #199	; 0xc7
 8002ba2:	f7ff fe85 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 8002ba6:	2086      	movs	r0, #134	; 0x86
 8002ba8:	f7ff fea4 	bl	80028f4 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 8002bac:	2036      	movs	r0, #54	; 0x36
 8002bae:	f7ff fe7f 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 8002bb2:	2048      	movs	r0, #72	; 0x48
 8002bb4:	f7ff fe9e 	bl	80028f4 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 8002bb8:	203a      	movs	r0, #58	; 0x3a
 8002bba:	f7ff fe79 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 8002bbe:	2055      	movs	r0, #85	; 0x55
 8002bc0:	f7ff fe98 	bl	80028f4 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 8002bc4:	20b1      	movs	r0, #177	; 0xb1
 8002bc6:	f7ff fe73 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002bca:	2000      	movs	r0, #0
 8002bcc:	f7ff fe92 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 8002bd0:	2018      	movs	r0, #24
 8002bd2:	f7ff fe8f 	bl	80028f4 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 8002bd6:	20b6      	movs	r0, #182	; 0xb6
 8002bd8:	f7ff fe6a 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 8002bdc:	2008      	movs	r0, #8
 8002bde:	f7ff fe89 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 8002be2:	2082      	movs	r0, #130	; 0x82
 8002be4:	f7ff fe86 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 8002be8:	2027      	movs	r0, #39	; 0x27
 8002bea:	f7ff fe83 	bl	80028f4 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 8002bee:	20f2      	movs	r0, #242	; 0xf2
 8002bf0:	f7ff fe5e 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002bf4:	2000      	movs	r0, #0
 8002bf6:	f7ff fe7d 	bl	80028f4 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 8002bfa:	2026      	movs	r0, #38	; 0x26
 8002bfc:	f7ff fe58 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002c00:	2001      	movs	r0, #1
 8002c02:	f7ff fe77 	bl	80028f4 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002c06:	20e0      	movs	r0, #224	; 0xe0
 8002c08:	f7ff fe52 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 8002c0c:	200f      	movs	r0, #15
 8002c0e:	f7ff fe71 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c12:	2031      	movs	r0, #49	; 0x31
 8002c14:	f7ff fe6e 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002c18:	202b      	movs	r0, #43	; 0x2b
 8002c1a:	f7ff fe6b 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002c1e:	200c      	movs	r0, #12
 8002c20:	f7ff fe68 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c24:	200e      	movs	r0, #14
 8002c26:	f7ff fe65 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002c2a:	2008      	movs	r0, #8
 8002c2c:	f7ff fe62 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002c30:	204e      	movs	r0, #78	; 0x4e
 8002c32:	f7ff fe5f 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002c36:	20f1      	movs	r0, #241	; 0xf1
 8002c38:	f7ff fe5c 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 8002c3c:	2037      	movs	r0, #55	; 0x37
 8002c3e:	f7ff fe59 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c42:	2007      	movs	r0, #7
 8002c44:	f7ff fe56 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002c48:	2010      	movs	r0, #16
 8002c4a:	f7ff fe53 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c4e:	2003      	movs	r0, #3
 8002c50:	f7ff fe50 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c54:	200e      	movs	r0, #14
 8002c56:	f7ff fe4d 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 8002c5a:	2009      	movs	r0, #9
 8002c5c:	f7ff fe4a 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002c60:	2000      	movs	r0, #0
 8002c62:	f7ff fe47 	bl	80028f4 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002c66:	20e1      	movs	r0, #225	; 0xe1
 8002c68:	f7ff fe22 	bl	80028b0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002c6c:	2000      	movs	r0, #0
 8002c6e:	f7ff fe41 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002c72:	200e      	movs	r0, #14
 8002c74:	f7ff fe3e 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002c78:	2014      	movs	r0, #20
 8002c7a:	f7ff fe3b 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002c7e:	2003      	movs	r0, #3
 8002c80:	f7ff fe38 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002c84:	2011      	movs	r0, #17
 8002c86:	f7ff fe35 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002c8a:	2007      	movs	r0, #7
 8002c8c:	f7ff fe32 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002c90:	2031      	movs	r0, #49	; 0x31
 8002c92:	f7ff fe2f 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002c96:	20c1      	movs	r0, #193	; 0xc1
 8002c98:	f7ff fe2c 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 8002c9c:	2048      	movs	r0, #72	; 0x48
 8002c9e:	f7ff fe29 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 8002ca2:	2008      	movs	r0, #8
 8002ca4:	f7ff fe26 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002ca8:	200f      	movs	r0, #15
 8002caa:	f7ff fe23 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 8002cae:	200c      	movs	r0, #12
 8002cb0:	f7ff fe20 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002cb4:	2031      	movs	r0, #49	; 0x31
 8002cb6:	f7ff fe1d 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 8002cba:	2036      	movs	r0, #54	; 0x36
 8002cbc:	f7ff fe1a 	bl	80028f4 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 8002cc0:	200f      	movs	r0, #15
 8002cc2:	f7ff fe17 	bl	80028f4 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 8002cc6:	2011      	movs	r0, #17
 8002cc8:	f7ff fdf2 	bl	80028b0 <ILI9341_Write_Command>
HAL_Delay(120);
 8002ccc:	2078      	movs	r0, #120	; 0x78
 8002cce:	f000 fc2d 	bl	800352c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 8002cd2:	2029      	movs	r0, #41	; 0x29
 8002cd4:	f7ff fdec 	bl	80028b0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8002cd8:	2000      	movs	r0, #0
 8002cda:	f7ff fe97 	bl	8002a0c <ILI9341_Set_Rotation>
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
	...

08002ce4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8002ce4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ce8:	b08d      	sub	sp, #52	; 0x34
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	4603      	mov	r3, r0
 8002cee:	6039      	str	r1, [r7, #0]
 8002cf0:	80fb      	strh	r3, [r7, #6]
 8002cf2:	466b      	mov	r3, sp
 8002cf4:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	005b      	lsls	r3, r3, #1
 8002cfe:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002d02:	d202      	bcs.n	8002d0a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	627b      	str	r3, [r7, #36]	; 0x24
 8002d08:	e002      	b.n	8002d10 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8002d0a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002d0e:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002d10:	2201      	movs	r2, #1
 8002d12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d16:	4840      	ldr	r0, [pc, #256]	; (8002e18 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d18:	f000 fed6 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002d22:	483d      	ldr	r0, [pc, #244]	; (8002e18 <ILI9341_Draw_Colour_Burst+0x134>)
 8002d24:	f000 fed0 	bl	8003ac8 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002d28:	88fb      	ldrh	r3, [r7, #6]
 8002d2a:	0a1b      	lsrs	r3, r3, #8
 8002d2c:	b29b      	uxth	r3, r3
 8002d2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002d32:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d34:	460b      	mov	r3, r1
 8002d36:	3b01      	subs	r3, #1
 8002d38:	61fb      	str	r3, [r7, #28]
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	4688      	mov	r8, r1
 8002d3e:	4699      	mov	r9, r3
 8002d40:	f04f 0200 	mov.w	r2, #0
 8002d44:	f04f 0300 	mov.w	r3, #0
 8002d48:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d4c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d50:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d54:	2300      	movs	r3, #0
 8002d56:	460c      	mov	r4, r1
 8002d58:	461d      	mov	r5, r3
 8002d5a:	f04f 0200 	mov.w	r2, #0
 8002d5e:	f04f 0300 	mov.w	r3, #0
 8002d62:	00eb      	lsls	r3, r5, #3
 8002d64:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002d68:	00e2      	lsls	r2, r4, #3
 8002d6a:	1dcb      	adds	r3, r1, #7
 8002d6c:	08db      	lsrs	r3, r3, #3
 8002d6e:	00db      	lsls	r3, r3, #3
 8002d70:	ebad 0d03 	sub.w	sp, sp, r3
 8002d74:	466b      	mov	r3, sp
 8002d76:	3300      	adds	r3, #0
 8002d78:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d7e:	e00e      	b.n	8002d9e <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002d80:	69ba      	ldr	r2, [r7, #24]
 8002d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d84:	4413      	add	r3, r2
 8002d86:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8002d8a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8002d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d8e:	3301      	adds	r3, #1
 8002d90:	88fa      	ldrh	r2, [r7, #6]
 8002d92:	b2d1      	uxtb	r1, r2
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8002d98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d9a:	3302      	adds	r3, #2
 8002d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d9e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002da2:	429a      	cmp	r2, r3
 8002da4:	d3ec      	bcc.n	8002d80 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8002dac:	697a      	ldr	r2, [r7, #20]
 8002dae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002db0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002db4:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dba:	fbb3 f2f2 	udiv	r2, r3, r2
 8002dbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dc0:	fb01 f202 	mul.w	r2, r1, r2
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8002dc8:	693b      	ldr	r3, [r7, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d010      	beq.n	8002df0 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002dce:	2300      	movs	r3, #0
 8002dd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002dd2:	e009      	b.n	8002de8 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8002dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd6:	b29a      	uxth	r2, r3
 8002dd8:	230a      	movs	r3, #10
 8002dda:	69b9      	ldr	r1, [r7, #24]
 8002ddc:	480f      	ldr	r0, [pc, #60]	; (8002e1c <ILI9341_Draw_Colour_Burst+0x138>)
 8002dde:	f002 f922 	bl	8005026 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8002de2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002de4:	3301      	adds	r3, #1
 8002de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002de8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002dea:	693b      	ldr	r3, [r7, #16]
 8002dec:	429a      	cmp	r2, r3
 8002dee:	d3f1      	bcc.n	8002dd4 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	b29a      	uxth	r2, r3
 8002df4:	230a      	movs	r3, #10
 8002df6:	69b9      	ldr	r1, [r7, #24]
 8002df8:	4808      	ldr	r0, [pc, #32]	; (8002e1c <ILI9341_Draw_Colour_Burst+0x138>)
 8002dfa:	f002 f914 	bl	8005026 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002e04:	4804      	ldr	r0, [pc, #16]	; (8002e18 <ILI9341_Draw_Colour_Burst+0x134>)
 8002e06:	f000 fe5f 	bl	8003ac8 <HAL_GPIO_WritePin>
 8002e0a:	46b5      	mov	sp, r6
}
 8002e0c:	bf00      	nop
 8002e0e:	3734      	adds	r7, #52	; 0x34
 8002e10:	46bd      	mov	sp, r7
 8002e12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002e16:	bf00      	nop
 8002e18:	40020800 	.word	0x40020800
 8002e1c:	20000210 	.word	0x20000210

08002e20 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	4603      	mov	r3, r0
 8002e28:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <ILI9341_Fill_Screen+0x44>)
 8002e2c:	881b      	ldrh	r3, [r3, #0]
 8002e2e:	b29a      	uxth	r2, r3
 8002e30:	4b0d      	ldr	r3, [pc, #52]	; (8002e68 <ILI9341_Fill_Screen+0x48>)
 8002e32:	881b      	ldrh	r3, [r3, #0]
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	2100      	movs	r1, #0
 8002e38:	2000      	movs	r0, #0
 8002e3a:	f7ff fd7d 	bl	8002938 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8002e3e:	4b09      	ldr	r3, [pc, #36]	; (8002e64 <ILI9341_Fill_Screen+0x44>)
 8002e40:	881b      	ldrh	r3, [r3, #0]
 8002e42:	b29b      	uxth	r3, r3
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b08      	ldr	r3, [pc, #32]	; (8002e68 <ILI9341_Fill_Screen+0x48>)
 8002e48:	881b      	ldrh	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	fb02 f303 	mul.w	r3, r2, r3
 8002e50:	461a      	mov	r2, r3
 8002e52:	88fb      	ldrh	r3, [r7, #6]
 8002e54:	4611      	mov	r1, r2
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7ff ff44 	bl	8002ce4 <ILI9341_Draw_Colour_Burst>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	20000006 	.word	0x20000006
 8002e68:	20000004 	.word	0x20000004

08002e6c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b086      	sub	sp, #24
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	80fb      	strh	r3, [r7, #6]
 8002e76:	460b      	mov	r3, r1
 8002e78:	80bb      	strh	r3, [r7, #4]
 8002e7a:	4613      	mov	r3, r2
 8002e7c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002e7e:	4b64      	ldr	r3, [pc, #400]	; (8003010 <ILI9341_Draw_Pixel+0x1a4>)
 8002e80:	881b      	ldrh	r3, [r3, #0]
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	88fa      	ldrh	r2, [r7, #6]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	f080 80be 	bcs.w	8003008 <ILI9341_Draw_Pixel+0x19c>
 8002e8c:	4b61      	ldr	r3, [pc, #388]	; (8003014 <ILI9341_Draw_Pixel+0x1a8>)
 8002e8e:	881b      	ldrh	r3, [r3, #0]
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	88ba      	ldrh	r2, [r7, #4]
 8002e94:	429a      	cmp	r2, r3
 8002e96:	f080 80b7 	bcs.w	8003008 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ea0:	485d      	ldr	r0, [pc, #372]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002ea2:	f000 fe11 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eac:	485a      	ldr	r0, [pc, #360]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002eae:	f000 fe0b 	bl	8003ac8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002eb2:	202a      	movs	r0, #42	; 0x2a
 8002eb4:	f7ff fcea 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002eb8:	2201      	movs	r2, #1
 8002eba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ebe:	4856      	ldr	r0, [pc, #344]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002ec0:	f000 fe02 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002ec4:	2201      	movs	r2, #1
 8002ec6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002eca:	4853      	ldr	r0, [pc, #332]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002ecc:	f000 fdfc 	bl	8003ac8 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ed6:	4850      	ldr	r0, [pc, #320]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002ed8:	f000 fdf6 	bl	8003ac8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002edc:	88fb      	ldrh	r3, [r7, #6]
 8002ede:	0a1b      	lsrs	r3, r3, #8
 8002ee0:	b29b      	uxth	r3, r3
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	753b      	strb	r3, [r7, #20]
 8002ee6:	88fb      	ldrh	r3, [r7, #6]
 8002ee8:	b2db      	uxtb	r3, r3
 8002eea:	757b      	strb	r3, [r7, #21]
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	3301      	adds	r3, #1
 8002ef0:	121b      	asrs	r3, r3, #8
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	75bb      	strb	r3, [r7, #22]
 8002ef6:	88fb      	ldrh	r3, [r7, #6]
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	3301      	adds	r3, #1
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002f00:	f107 0114 	add.w	r1, r7, #20
 8002f04:	2301      	movs	r3, #1
 8002f06:	2204      	movs	r2, #4
 8002f08:	4844      	ldr	r0, [pc, #272]	; (800301c <ILI9341_Draw_Pixel+0x1b0>)
 8002f0a:	f002 f88c 	bl	8005026 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f0e:	2201      	movs	r2, #1
 8002f10:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f14:	4840      	ldr	r0, [pc, #256]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002f16:	f000 fdd7 	bl	8003ac8 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f20:	483d      	ldr	r0, [pc, #244]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002f22:	f000 fdd1 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002f26:	2200      	movs	r2, #0
 8002f28:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f2c:	483a      	ldr	r0, [pc, #232]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002f2e:	f000 fdcb 	bl	8003ac8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002f32:	202b      	movs	r0, #43	; 0x2b
 8002f34:	f7ff fcaa 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002f38:	2201      	movs	r2, #1
 8002f3a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f3e:	4836      	ldr	r0, [pc, #216]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002f40:	f000 fdc2 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002f44:	2201      	movs	r2, #1
 8002f46:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f4a:	4833      	ldr	r0, [pc, #204]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002f4c:	f000 fdbc 	bl	8003ac8 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002f50:	2200      	movs	r2, #0
 8002f52:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f56:	4830      	ldr	r0, [pc, #192]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002f58:	f000 fdb6 	bl	8003ac8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002f5c:	88bb      	ldrh	r3, [r7, #4]
 8002f5e:	0a1b      	lsrs	r3, r3, #8
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	b2db      	uxtb	r3, r3
 8002f64:	743b      	strb	r3, [r7, #16]
 8002f66:	88bb      	ldrh	r3, [r7, #4]
 8002f68:	b2db      	uxtb	r3, r3
 8002f6a:	747b      	strb	r3, [r7, #17]
 8002f6c:	88bb      	ldrh	r3, [r7, #4]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	121b      	asrs	r3, r3, #8
 8002f72:	b2db      	uxtb	r3, r3
 8002f74:	74bb      	strb	r3, [r7, #18]
 8002f76:	88bb      	ldrh	r3, [r7, #4]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	3301      	adds	r3, #1
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002f80:	f107 0110 	add.w	r1, r7, #16
 8002f84:	2301      	movs	r3, #1
 8002f86:	2204      	movs	r2, #4
 8002f88:	4824      	ldr	r0, [pc, #144]	; (800301c <ILI9341_Draw_Pixel+0x1b0>)
 8002f8a:	f002 f84c 	bl	8005026 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002f8e:	2201      	movs	r2, #1
 8002f90:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f94:	4820      	ldr	r0, [pc, #128]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002f96:	f000 fd97 	bl	8003ac8 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fa0:	481d      	ldr	r0, [pc, #116]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002fa2:	f000 fd91 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fac:	481a      	ldr	r0, [pc, #104]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002fae:	f000 fd8b 	bl	8003ac8 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002fb2:	202c      	movs	r0, #44	; 0x2c
 8002fb4:	f7ff fc6a 	bl	800288c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002fb8:	2201      	movs	r2, #1
 8002fba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002fbe:	4816      	ldr	r0, [pc, #88]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002fc0:	f000 fd82 	bl	8003ac8 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fca:	4813      	ldr	r0, [pc, #76]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002fcc:	f000 fd7c 	bl	8003ac8 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002fd6:	4810      	ldr	r0, [pc, #64]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8002fd8:	f000 fd76 	bl	8003ac8 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002fdc:	887b      	ldrh	r3, [r7, #2]
 8002fde:	0a1b      	lsrs	r3, r3, #8
 8002fe0:	b29b      	uxth	r3, r3
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	733b      	strb	r3, [r7, #12]
 8002fe6:	887b      	ldrh	r3, [r7, #2]
 8002fe8:	b2db      	uxtb	r3, r3
 8002fea:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002fec:	f107 010c 	add.w	r1, r7, #12
 8002ff0:	2301      	movs	r3, #1
 8002ff2:	2202      	movs	r2, #2
 8002ff4:	4809      	ldr	r0, [pc, #36]	; (800301c <ILI9341_Draw_Pixel+0x1b0>)
 8002ff6:	f002 f816 	bl	8005026 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002ffa:	2201      	movs	r2, #1
 8002ffc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003000:	4805      	ldr	r0, [pc, #20]	; (8003018 <ILI9341_Draw_Pixel+0x1ac>)
 8003002:	f000 fd61 	bl	8003ac8 <HAL_GPIO_WritePin>
 8003006:	e000      	b.n	800300a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8003008:	bf00      	nop
	
}
 800300a:	3718      	adds	r7, #24
 800300c:	46bd      	mov	sp, r7
 800300e:	bd80      	pop	{r7, pc}
 8003010:	20000006 	.word	0x20000006
 8003014:	20000004 	.word	0x20000004
 8003018:	40020800 	.word	0x40020800
 800301c:	20000210 	.word	0x20000210

08003020 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8003020:	b590      	push	{r4, r7, lr}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
 8003026:	4604      	mov	r4, r0
 8003028:	4608      	mov	r0, r1
 800302a:	4611      	mov	r1, r2
 800302c:	461a      	mov	r2, r3
 800302e:	4623      	mov	r3, r4
 8003030:	80fb      	strh	r3, [r7, #6]
 8003032:	4603      	mov	r3, r0
 8003034:	80bb      	strh	r3, [r7, #4]
 8003036:	460b      	mov	r3, r1
 8003038:	807b      	strh	r3, [r7, #2]
 800303a:	4613      	mov	r3, r2
 800303c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800303e:	4b24      	ldr	r3, [pc, #144]	; (80030d0 <ILI9341_Draw_Rectangle+0xb0>)
 8003040:	881b      	ldrh	r3, [r3, #0]
 8003042:	b29b      	uxth	r3, r3
 8003044:	88fa      	ldrh	r2, [r7, #6]
 8003046:	429a      	cmp	r2, r3
 8003048:	d23d      	bcs.n	80030c6 <ILI9341_Draw_Rectangle+0xa6>
 800304a:	4b22      	ldr	r3, [pc, #136]	; (80030d4 <ILI9341_Draw_Rectangle+0xb4>)
 800304c:	881b      	ldrh	r3, [r3, #0]
 800304e:	b29b      	uxth	r3, r3
 8003050:	88ba      	ldrh	r2, [r7, #4]
 8003052:	429a      	cmp	r2, r3
 8003054:	d237      	bcs.n	80030c6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8003056:	88fa      	ldrh	r2, [r7, #6]
 8003058:	887b      	ldrh	r3, [r7, #2]
 800305a:	4413      	add	r3, r2
 800305c:	4a1c      	ldr	r2, [pc, #112]	; (80030d0 <ILI9341_Draw_Rectangle+0xb0>)
 800305e:	8812      	ldrh	r2, [r2, #0]
 8003060:	b292      	uxth	r2, r2
 8003062:	4293      	cmp	r3, r2
 8003064:	dd05      	ble.n	8003072 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8003066:	4b1a      	ldr	r3, [pc, #104]	; (80030d0 <ILI9341_Draw_Rectangle+0xb0>)
 8003068:	881b      	ldrh	r3, [r3, #0]
 800306a:	b29a      	uxth	r2, r3
 800306c:	88fb      	ldrh	r3, [r7, #6]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8003072:	88ba      	ldrh	r2, [r7, #4]
 8003074:	883b      	ldrh	r3, [r7, #0]
 8003076:	4413      	add	r3, r2
 8003078:	4a16      	ldr	r2, [pc, #88]	; (80030d4 <ILI9341_Draw_Rectangle+0xb4>)
 800307a:	8812      	ldrh	r2, [r2, #0]
 800307c:	b292      	uxth	r2, r2
 800307e:	4293      	cmp	r3, r2
 8003080:	dd05      	ble.n	800308e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8003082:	4b14      	ldr	r3, [pc, #80]	; (80030d4 <ILI9341_Draw_Rectangle+0xb4>)
 8003084:	881b      	ldrh	r3, [r3, #0]
 8003086:	b29a      	uxth	r2, r3
 8003088:	88bb      	ldrh	r3, [r7, #4]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 800308e:	88fa      	ldrh	r2, [r7, #6]
 8003090:	887b      	ldrh	r3, [r7, #2]
 8003092:	4413      	add	r3, r2
 8003094:	b29b      	uxth	r3, r3
 8003096:	3b01      	subs	r3, #1
 8003098:	b29c      	uxth	r4, r3
 800309a:	88ba      	ldrh	r2, [r7, #4]
 800309c:	883b      	ldrh	r3, [r7, #0]
 800309e:	4413      	add	r3, r2
 80030a0:	b29b      	uxth	r3, r3
 80030a2:	3b01      	subs	r3, #1
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	88b9      	ldrh	r1, [r7, #4]
 80030a8:	88f8      	ldrh	r0, [r7, #6]
 80030aa:	4622      	mov	r2, r4
 80030ac:	f7ff fc44 	bl	8002938 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 80030b0:	883b      	ldrh	r3, [r7, #0]
 80030b2:	887a      	ldrh	r2, [r7, #2]
 80030b4:	fb02 f303 	mul.w	r3, r2, r3
 80030b8:	461a      	mov	r2, r3
 80030ba:	8b3b      	ldrh	r3, [r7, #24]
 80030bc:	4611      	mov	r1, r2
 80030be:	4618      	mov	r0, r3
 80030c0:	f7ff fe10 	bl	8002ce4 <ILI9341_Draw_Colour_Burst>
 80030c4:	e000      	b.n	80030c8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80030c6:	bf00      	nop
}
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	bd90      	pop	{r4, r7, pc}
 80030ce:	bf00      	nop
 80030d0:	20000006 	.word	0x20000006
 80030d4:	20000004 	.word	0x20000004

080030d8 <ILI9341_Draw_Horizontal_Line>:

//DRAW LINE FROM X,Y LOCATION to X+Width,Y LOCATION
void ILI9341_Draw_Horizontal_Line(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Colour)
{
 80030d8:	b590      	push	{r4, r7, lr}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	4604      	mov	r4, r0
 80030e0:	4608      	mov	r0, r1
 80030e2:	4611      	mov	r1, r2
 80030e4:	461a      	mov	r2, r3
 80030e6:	4623      	mov	r3, r4
 80030e8:	80fb      	strh	r3, [r7, #6]
 80030ea:	4603      	mov	r3, r0
 80030ec:	80bb      	strh	r3, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	807b      	strh	r3, [r7, #2]
 80030f2:	4613      	mov	r3, r2
 80030f4:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80030f6:	4b18      	ldr	r3, [pc, #96]	; (8003158 <ILI9341_Draw_Horizontal_Line+0x80>)
 80030f8:	881b      	ldrh	r3, [r3, #0]
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	88fa      	ldrh	r2, [r7, #6]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d225      	bcs.n	800314e <ILI9341_Draw_Horizontal_Line+0x76>
 8003102:	4b16      	ldr	r3, [pc, #88]	; (800315c <ILI9341_Draw_Horizontal_Line+0x84>)
 8003104:	881b      	ldrh	r3, [r3, #0]
 8003106:	b29b      	uxth	r3, r3
 8003108:	88ba      	ldrh	r2, [r7, #4]
 800310a:	429a      	cmp	r2, r3
 800310c:	d21f      	bcs.n	800314e <ILI9341_Draw_Horizontal_Line+0x76>
if((X+Width-1)>=LCD_WIDTH)
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	887b      	ldrh	r3, [r7, #2]
 8003112:	4413      	add	r3, r2
 8003114:	4a10      	ldr	r2, [pc, #64]	; (8003158 <ILI9341_Draw_Horizontal_Line+0x80>)
 8003116:	8812      	ldrh	r2, [r2, #0]
 8003118:	b292      	uxth	r2, r2
 800311a:	4293      	cmp	r3, r2
 800311c:	dd05      	ble.n	800312a <ILI9341_Draw_Horizontal_Line+0x52>
	{
		Width=LCD_WIDTH-X;
 800311e:	4b0e      	ldr	r3, [pc, #56]	; (8003158 <ILI9341_Draw_Horizontal_Line+0x80>)
 8003120:	881b      	ldrh	r3, [r3, #0]
 8003122:	b29a      	uxth	r2, r3
 8003124:	88fb      	ldrh	r3, [r7, #6]
 8003126:	1ad3      	subs	r3, r2, r3
 8003128:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y);
 800312a:	88fa      	ldrh	r2, [r7, #6]
 800312c:	887b      	ldrh	r3, [r7, #2]
 800312e:	4413      	add	r3, r2
 8003130:	b29b      	uxth	r3, r3
 8003132:	3b01      	subs	r3, #1
 8003134:	b29a      	uxth	r2, r3
 8003136:	88bb      	ldrh	r3, [r7, #4]
 8003138:	88b9      	ldrh	r1, [r7, #4]
 800313a:	88f8      	ldrh	r0, [r7, #6]
 800313c:	f7ff fbfc 	bl	8002938 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Width);
 8003140:	887a      	ldrh	r2, [r7, #2]
 8003142:	883b      	ldrh	r3, [r7, #0]
 8003144:	4611      	mov	r1, r2
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fdcc 	bl	8002ce4 <ILI9341_Draw_Colour_Burst>
 800314c:	e000      	b.n	8003150 <ILI9341_Draw_Horizontal_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800314e:	bf00      	nop
}
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}
 8003156:	bf00      	nop
 8003158:	20000006 	.word	0x20000006
 800315c:	20000004 	.word	0x20000004

08003160 <ILI9341_Draw_Vertical_Line>:

//DRAW LINE FROM X,Y LOCATION to X,Y+Height LOCATION
void ILI9341_Draw_Vertical_Line(uint16_t X, uint16_t Y, uint16_t Height, uint16_t Colour)
{
 8003160:	b590      	push	{r4, r7, lr}
 8003162:	b083      	sub	sp, #12
 8003164:	af00      	add	r7, sp, #0
 8003166:	4604      	mov	r4, r0
 8003168:	4608      	mov	r0, r1
 800316a:	4611      	mov	r1, r2
 800316c:	461a      	mov	r2, r3
 800316e:	4623      	mov	r3, r4
 8003170:	80fb      	strh	r3, [r7, #6]
 8003172:	4603      	mov	r3, r0
 8003174:	80bb      	strh	r3, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	807b      	strh	r3, [r7, #2]
 800317a:	4613      	mov	r3, r2
 800317c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800317e:	4b18      	ldr	r3, [pc, #96]	; (80031e0 <ILI9341_Draw_Vertical_Line+0x80>)
 8003180:	881b      	ldrh	r3, [r3, #0]
 8003182:	b29b      	uxth	r3, r3
 8003184:	88fa      	ldrh	r2, [r7, #6]
 8003186:	429a      	cmp	r2, r3
 8003188:	d225      	bcs.n	80031d6 <ILI9341_Draw_Vertical_Line+0x76>
 800318a:	4b16      	ldr	r3, [pc, #88]	; (80031e4 <ILI9341_Draw_Vertical_Line+0x84>)
 800318c:	881b      	ldrh	r3, [r3, #0]
 800318e:	b29b      	uxth	r3, r3
 8003190:	88ba      	ldrh	r2, [r7, #4]
 8003192:	429a      	cmp	r2, r3
 8003194:	d21f      	bcs.n	80031d6 <ILI9341_Draw_Vertical_Line+0x76>
if((Y+Height-1)>=LCD_HEIGHT)
 8003196:	88ba      	ldrh	r2, [r7, #4]
 8003198:	887b      	ldrh	r3, [r7, #2]
 800319a:	4413      	add	r3, r2
 800319c:	4a11      	ldr	r2, [pc, #68]	; (80031e4 <ILI9341_Draw_Vertical_Line+0x84>)
 800319e:	8812      	ldrh	r2, [r2, #0]
 80031a0:	b292      	uxth	r2, r2
 80031a2:	4293      	cmp	r3, r2
 80031a4:	dd05      	ble.n	80031b2 <ILI9341_Draw_Vertical_Line+0x52>
	{
		Height=LCD_HEIGHT-Y;
 80031a6:	4b0f      	ldr	r3, [pc, #60]	; (80031e4 <ILI9341_Draw_Vertical_Line+0x84>)
 80031a8:	881b      	ldrh	r3, [r3, #0]
 80031aa:	b29a      	uxth	r2, r3
 80031ac:	88bb      	ldrh	r3, [r7, #4]
 80031ae:	1ad3      	subs	r3, r2, r3
 80031b0:	807b      	strh	r3, [r7, #2]
	}
ILI9341_Set_Address(X, Y, X, Y+Height-1);
 80031b2:	88ba      	ldrh	r2, [r7, #4]
 80031b4:	887b      	ldrh	r3, [r7, #2]
 80031b6:	4413      	add	r3, r2
 80031b8:	b29b      	uxth	r3, r3
 80031ba:	3b01      	subs	r3, #1
 80031bc:	b29b      	uxth	r3, r3
 80031be:	88fa      	ldrh	r2, [r7, #6]
 80031c0:	88b9      	ldrh	r1, [r7, #4]
 80031c2:	88f8      	ldrh	r0, [r7, #6]
 80031c4:	f7ff fbb8 	bl	8002938 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height);
 80031c8:	887a      	ldrh	r2, [r7, #2]
 80031ca:	883b      	ldrh	r3, [r7, #0]
 80031cc:	4611      	mov	r1, r2
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7ff fd88 	bl	8002ce4 <ILI9341_Draw_Colour_Burst>
 80031d4:	e000      	b.n	80031d8 <ILI9341_Draw_Vertical_Line+0x78>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 80031d6:	bf00      	nop
}
 80031d8:	370c      	adds	r7, #12
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd90      	pop	{r4, r7, pc}
 80031de:	bf00      	nop
 80031e0:	20000006 	.word	0x20000006
 80031e4:	20000004 	.word	0x20000004

080031e8 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 80031ee:	2310      	movs	r3, #16
 80031f0:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 80031f6:	e019      	b.n	800322c <TP_Read+0x44>
    {
        value <<= 1;
 80031f8:	88bb      	ldrh	r3, [r7, #4]
 80031fa:	005b      	lsls	r3, r3, #1
 80031fc:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 80031fe:	2201      	movs	r2, #1
 8003200:	2108      	movs	r1, #8
 8003202:	480e      	ldr	r0, [pc, #56]	; (800323c <TP_Read+0x54>)
 8003204:	f000 fc60 	bl	8003ac8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8003208:	2200      	movs	r2, #0
 800320a:	2108      	movs	r1, #8
 800320c:	480b      	ldr	r0, [pc, #44]	; (800323c <TP_Read+0x54>)
 800320e:	f000 fc5b 	bl	8003ac8 <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8003212:	2110      	movs	r1, #16
 8003214:	4809      	ldr	r0, [pc, #36]	; (800323c <TP_Read+0x54>)
 8003216:	f000 fc3f 	bl	8003a98 <HAL_GPIO_ReadPin>
 800321a:	4603      	mov	r3, r0
 800321c:	2b00      	cmp	r3, #0
 800321e:	d002      	beq.n	8003226 <TP_Read+0x3e>
        {
            value++;
 8003220:	88bb      	ldrh	r3, [r7, #4]
 8003222:	3301      	adds	r3, #1
 8003224:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8003226:	79fb      	ldrb	r3, [r7, #7]
 8003228:	3b01      	subs	r3, #1
 800322a:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 800322c:	79fb      	ldrb	r3, [r7, #7]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1e2      	bne.n	80031f8 <TP_Read+0x10>
    };

    return value;
 8003232:	88bb      	ldrh	r3, [r7, #4]
}
 8003234:	4618      	mov	r0, r3
 8003236:	3708      	adds	r7, #8
 8003238:	46bd      	mov	sp, r7
 800323a:	bd80      	pop	{r7, pc}
 800323c:	40021000 	.word	0x40021000

08003240 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b084      	sub	sp, #16
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 800324a:	2308      	movs	r3, #8
 800324c:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 800324e:	2200      	movs	r2, #0
 8003250:	2108      	movs	r1, #8
 8003252:	4815      	ldr	r0, [pc, #84]	; (80032a8 <TP_Write+0x68>)
 8003254:	f000 fc38 	bl	8003ac8 <HAL_GPIO_WritePin>
	
    while(i > 0)
 8003258:	e01e      	b.n	8003298 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	da05      	bge.n	800326e <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8003262:	2201      	movs	r2, #1
 8003264:	2120      	movs	r1, #32
 8003266:	4810      	ldr	r0, [pc, #64]	; (80032a8 <TP_Write+0x68>)
 8003268:	f000 fc2e 	bl	8003ac8 <HAL_GPIO_WritePin>
 800326c:	e004      	b.n	8003278 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 800326e:	2200      	movs	r2, #0
 8003270:	2120      	movs	r1, #32
 8003272:	480d      	ldr	r0, [pc, #52]	; (80032a8 <TP_Write+0x68>)
 8003274:	f000 fc28 	bl	8003ac8 <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8003278:	79fb      	ldrb	r3, [r7, #7]
 800327a:	005b      	lsls	r3, r3, #1
 800327c:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 800327e:	2201      	movs	r2, #1
 8003280:	2108      	movs	r1, #8
 8003282:	4809      	ldr	r0, [pc, #36]	; (80032a8 <TP_Write+0x68>)
 8003284:	f000 fc20 	bl	8003ac8 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8003288:	2200      	movs	r2, #0
 800328a:	2108      	movs	r1, #8
 800328c:	4806      	ldr	r0, [pc, #24]	; (80032a8 <TP_Write+0x68>)
 800328e:	f000 fc1b 	bl	8003ac8 <HAL_GPIO_WritePin>
        i--;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
 8003294:	3b01      	subs	r3, #1
 8003296:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8003298:	7bfb      	ldrb	r3, [r7, #15]
 800329a:	2b00      	cmp	r3, #0
 800329c:	d1dd      	bne.n	800325a <TP_Write+0x1a>
    };
}
 800329e:	bf00      	nop
 80032a0:	bf00      	nop
 80032a2:	3710      	adds	r7, #16
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	00000000 	.word	0x00000000

080032b0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b08a      	sub	sp, #40	; 0x28
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 80032b8:	2201      	movs	r2, #1
 80032ba:	2108      	movs	r1, #8
 80032bc:	485a      	ldr	r0, [pc, #360]	; (8003428 <TP_Read_Coordinates+0x178>)
 80032be:	f000 fc03 	bl	8003ac8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 80032c2:	2201      	movs	r2, #1
 80032c4:	2120      	movs	r1, #32
 80032c6:	4858      	ldr	r0, [pc, #352]	; (8003428 <TP_Read_Coordinates+0x178>)
 80032c8:	f000 fbfe 	bl	8003ac8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 80032cc:	2201      	movs	r2, #1
 80032ce:	2140      	movs	r1, #64	; 0x40
 80032d0:	4855      	ldr	r0, [pc, #340]	; (8003428 <TP_Read_Coordinates+0x178>)
 80032d2:	f000 fbf9 	bl	8003ac8 <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 80032d6:	2300      	movs	r3, #0
 80032d8:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 80032da:	2300      	movs	r3, #0
 80032dc:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 80032e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80032e6:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 80032e8:	2300      	movs	r3, #0
 80032ea:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 80032ec:	2200      	movs	r2, #0
 80032ee:	2140      	movs	r1, #64	; 0x40
 80032f0:	484d      	ldr	r0, [pc, #308]	; (8003428 <TP_Read_Coordinates+0x178>)
 80032f2:	f000 fbe9 	bl	8003ac8 <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 80032f6:	e023      	b.n	8003340 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 80032f8:	2090      	movs	r0, #144	; 0x90
 80032fa:	f7ff ffa1 	bl	8003240 <TP_Write>

				rawy = TP_Read();	
 80032fe:	f7ff ff73 	bl	80031e8 <TP_Read>
 8003302:	4603      	mov	r3, r0
 8003304:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8003306:	89fb      	ldrh	r3, [r7, #14]
 8003308:	6a3a      	ldr	r2, [r7, #32]
 800330a:	4413      	add	r3, r2
 800330c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 800330e:	89fb      	ldrh	r3, [r7, #14]
 8003310:	69ba      	ldr	r2, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8003316:	20d0      	movs	r0, #208	; 0xd0
 8003318:	f7ff ff92 	bl	8003240 <TP_Write>
        rawx = TP_Read();
 800331c:	f7ff ff64 	bl	80031e8 <TP_Read>
 8003320:	4603      	mov	r3, r0
 8003322:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8003324:	89bb      	ldrh	r3, [r7, #12]
 8003326:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003328:	4413      	add	r3, r2
 800332a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 800332c:	89bb      	ldrh	r3, [r7, #12]
 800332e:	69fa      	ldr	r2, [r7, #28]
 8003330:	4413      	add	r3, r2
 8003332:	61fb      	str	r3, [r7, #28]
        samples--;
 8003334:	697b      	ldr	r3, [r7, #20]
 8003336:	3b01      	subs	r3, #1
 8003338:	617b      	str	r3, [r7, #20]
				counted_samples++;
 800333a:	693b      	ldr	r3, [r7, #16]
 800333c:	3301      	adds	r3, #1
 800333e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8003340:	697b      	ldr	r3, [r7, #20]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d006      	beq.n	8003354 <TP_Read_Coordinates+0xa4>
 8003346:	2104      	movs	r1, #4
 8003348:	4837      	ldr	r0, [pc, #220]	; (8003428 <TP_Read_Coordinates+0x178>)
 800334a:	f000 fba5 	bl	8003a98 <HAL_GPIO_ReadPin>
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	d0d1      	beq.n	80032f8 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8003354:	2201      	movs	r2, #1
 8003356:	2140      	movs	r1, #64	; 0x40
 8003358:	4833      	ldr	r0, [pc, #204]	; (8003428 <TP_Read_Coordinates+0x178>)
 800335a:	f000 fbb5 	bl	8003ac8 <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003364:	d14d      	bne.n	8003402 <TP_Read_Coordinates+0x152>
 8003366:	2104      	movs	r1, #4
 8003368:	482f      	ldr	r0, [pc, #188]	; (8003428 <TP_Read_Coordinates+0x178>)
 800336a:	f000 fb95 	bl	8003a98 <HAL_GPIO_ReadPin>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d146      	bne.n	8003402 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8003374:	69fa      	ldr	r2, [r7, #28]
 8003376:	693b      	ldr	r3, [r7, #16]
 8003378:	fbb2 f3f3 	udiv	r3, r2, r3
 800337c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 800337e:	69ba      	ldr	r2, [r7, #24]
 8003380:	693b      	ldr	r3, [r7, #16]
 8003382:	fbb2 f3f3 	udiv	r3, r2, r3
 8003386:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8003388:	69fb      	ldr	r3, [r7, #28]
 800338a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8003390:	89bb      	ldrh	r3, [r7, #12]
 8003392:	425b      	negs	r3, r3
 8003394:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8003396:	89fb      	ldrh	r3, [r7, #14]
 8003398:	425b      	negs	r3, r3
 800339a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 800339c:	89ba      	ldrh	r2, [r7, #12]
 800339e:	4b23      	ldr	r3, [pc, #140]	; (800342c <TP_Read_Coordinates+0x17c>)
 80033a0:	fba3 1302 	umull	r1, r3, r3, r2
 80033a4:	1ad2      	subs	r2, r2, r3
 80033a6:	0852      	lsrs	r2, r2, #1
 80033a8:	4413      	add	r3, r2
 80033aa:	0a1b      	lsrs	r3, r3, #8
 80033ac:	b29b      	uxth	r3, r3
 80033ae:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 80033b2:	ee07 3a90 	vmov	s15, r3
 80033b6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033ba:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8003420 <TP_Read_Coordinates+0x170>
 80033be:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033c2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033c6:	ee17 3a90 	vmov	r3, s15
 80033ca:	b29a      	uxth	r2, r3
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 80033d0:	89fb      	ldrh	r3, [r7, #14]
 80033d2:	4a17      	ldr	r2, [pc, #92]	; (8003430 <TP_Read_Coordinates+0x180>)
 80033d4:	fba2 2303 	umull	r2, r3, r2, r3
 80033d8:	09db      	lsrs	r3, r3, #7
 80033da:	b29b      	uxth	r3, r3
 80033dc:	3b0f      	subs	r3, #15
 80033de:	ee07 3a90 	vmov	s15, r3
 80033e2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80033e6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8003420 <TP_Read_Coordinates+0x170>
 80033ea:	ee27 7b06 	vmul.f64	d7, d7, d6
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	3302      	adds	r3, #2
 80033f2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80033f6:	ee17 2a90 	vmov	r2, s15
 80033fa:	b292      	uxth	r2, r2
 80033fc:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 80033fe:	2301      	movs	r3, #1
 8003400:	e007      	b.n	8003412 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	3302      	adds	r3, #2
 800340c:	2200      	movs	r2, #0
 800340e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8003410:	2300      	movs	r3, #0
		}
}
 8003412:	4618      	mov	r0, r3
 8003414:	3728      	adds	r7, #40	; 0x28
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	f3af 8000 	nop.w
 8003420:	28f5c28f 	.word	0x28f5c28f
 8003424:	3ff28f5c 	.word	0x3ff28f5c
 8003428:	40021000 	.word	0x40021000
 800342c:	e01e01e1 	.word	0xe01e01e1
 8003430:	a0a0a0a1 	.word	0xa0a0a0a1

08003434 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8003438:	2104      	movs	r1, #4
 800343a:	4805      	ldr	r0, [pc, #20]	; (8003450 <TP_Touchpad_Pressed+0x1c>)
 800343c:	f000 fb2c 	bl	8003a98 <HAL_GPIO_ReadPin>
 8003440:	4603      	mov	r3, r0
 8003442:	2b00      	cmp	r3, #0
 8003444:	d101      	bne.n	800344a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8003446:	2301      	movs	r3, #1
 8003448:	e000      	b.n	800344c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 800344a:	2300      	movs	r3, #0
	}
}
 800344c:	4618      	mov	r0, r3
 800344e:	bd80      	pop	{r7, pc}
 8003450:	40021000 	.word	0x40021000

08003454 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8003458:	4b0b      	ldr	r3, [pc, #44]	; (8003488 <HAL_Init+0x34>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	4a0a      	ldr	r2, [pc, #40]	; (8003488 <HAL_Init+0x34>)
 800345e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003462:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003464:	4b08      	ldr	r3, [pc, #32]	; (8003488 <HAL_Init+0x34>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	4a07      	ldr	r2, [pc, #28]	; (8003488 <HAL_Init+0x34>)
 800346a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800346e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003470:	2003      	movs	r0, #3
 8003472:	f000 f931 	bl	80036d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003476:	2000      	movs	r0, #0
 8003478:	f000 f808 	bl	800348c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 800347c:	f7fe fb28 	bl	8001ad0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	40023c00 	.word	0x40023c00

0800348c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	b082      	sub	sp, #8
 8003490:	af00      	add	r7, sp, #0
 8003492:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003494:	4b12      	ldr	r3, [pc, #72]	; (80034e0 <HAL_InitTick+0x54>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	4b12      	ldr	r3, [pc, #72]	; (80034e4 <HAL_InitTick+0x58>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	4619      	mov	r1, r3
 800349e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034a2:	fbb3 f3f1 	udiv	r3, r3, r1
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	4618      	mov	r0, r3
 80034ac:	f000 f93b 	bl	8003726 <HAL_SYSTICK_Config>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d001      	beq.n	80034ba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e00e      	b.n	80034d8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2b0f      	cmp	r3, #15
 80034be:	d80a      	bhi.n	80034d6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034c0:	2200      	movs	r2, #0
 80034c2:	6879      	ldr	r1, [r7, #4]
 80034c4:	f04f 30ff 	mov.w	r0, #4294967295
 80034c8:	f000 f911 	bl	80036ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034cc:	4a06      	ldr	r2, [pc, #24]	; (80034e8 <HAL_InitTick+0x5c>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034d2:	2300      	movs	r3, #0
 80034d4:	e000      	b.n	80034d8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3708      	adds	r7, #8
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}
 80034e0:	20000000 	.word	0x20000000
 80034e4:	2000000c 	.word	0x2000000c
 80034e8:	20000008 	.word	0x20000008

080034ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034ec:	b480      	push	{r7}
 80034ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034f0:	4b06      	ldr	r3, [pc, #24]	; (800350c <HAL_IncTick+0x20>)
 80034f2:	781b      	ldrb	r3, [r3, #0]
 80034f4:	461a      	mov	r2, r3
 80034f6:	4b06      	ldr	r3, [pc, #24]	; (8003510 <HAL_IncTick+0x24>)
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	4413      	add	r3, r2
 80034fc:	4a04      	ldr	r2, [pc, #16]	; (8003510 <HAL_IncTick+0x24>)
 80034fe:	6013      	str	r3, [r2, #0]
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
 800350a:	bf00      	nop
 800350c:	2000000c 	.word	0x2000000c
 8003510:	20000348 	.word	0x20000348

08003514 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003514:	b480      	push	{r7}
 8003516:	af00      	add	r7, sp, #0
  return uwTick;
 8003518:	4b03      	ldr	r3, [pc, #12]	; (8003528 <HAL_GetTick+0x14>)
 800351a:	681b      	ldr	r3, [r3, #0]
}
 800351c:	4618      	mov	r0, r3
 800351e:	46bd      	mov	sp, r7
 8003520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003524:	4770      	bx	lr
 8003526:	bf00      	nop
 8003528:	20000348 	.word	0x20000348

0800352c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b084      	sub	sp, #16
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003534:	f7ff ffee 	bl	8003514 <HAL_GetTick>
 8003538:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003544:	d005      	beq.n	8003552 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003546:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <HAL_Delay+0x44>)
 8003548:	781b      	ldrb	r3, [r3, #0]
 800354a:	461a      	mov	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	4413      	add	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003552:	bf00      	nop
 8003554:	f7ff ffde 	bl	8003514 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	429a      	cmp	r2, r3
 8003562:	d8f7      	bhi.n	8003554 <HAL_Delay+0x28>
  {
  }
}
 8003564:	bf00      	nop
 8003566:	bf00      	nop
 8003568:	3710      	adds	r7, #16
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	2000000c 	.word	0x2000000c

08003574 <__NVIC_SetPriorityGrouping>:
{
 8003574:	b480      	push	{r7}
 8003576:	b085      	sub	sp, #20
 8003578:	af00      	add	r7, sp, #0
 800357a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	f003 0307 	and.w	r3, r3, #7
 8003582:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003584:	4b0b      	ldr	r3, [pc, #44]	; (80035b4 <__NVIC_SetPriorityGrouping+0x40>)
 8003586:	68db      	ldr	r3, [r3, #12]
 8003588:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800358a:	68ba      	ldr	r2, [r7, #8]
 800358c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003590:	4013      	ands	r3, r2
 8003592:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800359c:	4b06      	ldr	r3, [pc, #24]	; (80035b8 <__NVIC_SetPriorityGrouping+0x44>)
 800359e:	4313      	orrs	r3, r2
 80035a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80035a2:	4a04      	ldr	r2, [pc, #16]	; (80035b4 <__NVIC_SetPriorityGrouping+0x40>)
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	60d3      	str	r3, [r2, #12]
}
 80035a8:	bf00      	nop
 80035aa:	3714      	adds	r7, #20
 80035ac:	46bd      	mov	sp, r7
 80035ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b2:	4770      	bx	lr
 80035b4:	e000ed00 	.word	0xe000ed00
 80035b8:	05fa0000 	.word	0x05fa0000

080035bc <__NVIC_GetPriorityGrouping>:
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <__NVIC_GetPriorityGrouping+0x18>)
 80035c2:	68db      	ldr	r3, [r3, #12]
 80035c4:	0a1b      	lsrs	r3, r3, #8
 80035c6:	f003 0307 	and.w	r3, r3, #7
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	e000ed00 	.word	0xe000ed00

080035d8 <__NVIC_SetPriority>:
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	4603      	mov	r3, r0
 80035e0:	6039      	str	r1, [r7, #0]
 80035e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	db0a      	blt.n	8003602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	b2da      	uxtb	r2, r3
 80035f0:	490c      	ldr	r1, [pc, #48]	; (8003624 <__NVIC_SetPriority+0x4c>)
 80035f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035f6:	0112      	lsls	r2, r2, #4
 80035f8:	b2d2      	uxtb	r2, r2
 80035fa:	440b      	add	r3, r1
 80035fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003600:	e00a      	b.n	8003618 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	b2da      	uxtb	r2, r3
 8003606:	4908      	ldr	r1, [pc, #32]	; (8003628 <__NVIC_SetPriority+0x50>)
 8003608:	79fb      	ldrb	r3, [r7, #7]
 800360a:	f003 030f 	and.w	r3, r3, #15
 800360e:	3b04      	subs	r3, #4
 8003610:	0112      	lsls	r2, r2, #4
 8003612:	b2d2      	uxtb	r2, r2
 8003614:	440b      	add	r3, r1
 8003616:	761a      	strb	r2, [r3, #24]
}
 8003618:	bf00      	nop
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr
 8003624:	e000e100 	.word	0xe000e100
 8003628:	e000ed00 	.word	0xe000ed00

0800362c <NVIC_EncodePriority>:
{
 800362c:	b480      	push	{r7}
 800362e:	b089      	sub	sp, #36	; 0x24
 8003630:	af00      	add	r7, sp, #0
 8003632:	60f8      	str	r0, [r7, #12]
 8003634:	60b9      	str	r1, [r7, #8]
 8003636:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f003 0307 	and.w	r3, r3, #7
 800363e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003640:	69fb      	ldr	r3, [r7, #28]
 8003642:	f1c3 0307 	rsb	r3, r3, #7
 8003646:	2b04      	cmp	r3, #4
 8003648:	bf28      	it	cs
 800364a:	2304      	movcs	r3, #4
 800364c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	3304      	adds	r3, #4
 8003652:	2b06      	cmp	r3, #6
 8003654:	d902      	bls.n	800365c <NVIC_EncodePriority+0x30>
 8003656:	69fb      	ldr	r3, [r7, #28]
 8003658:	3b03      	subs	r3, #3
 800365a:	e000      	b.n	800365e <NVIC_EncodePriority+0x32>
 800365c:	2300      	movs	r3, #0
 800365e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003660:	f04f 32ff 	mov.w	r2, #4294967295
 8003664:	69bb      	ldr	r3, [r7, #24]
 8003666:	fa02 f303 	lsl.w	r3, r2, r3
 800366a:	43da      	mvns	r2, r3
 800366c:	68bb      	ldr	r3, [r7, #8]
 800366e:	401a      	ands	r2, r3
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003674:	f04f 31ff 	mov.w	r1, #4294967295
 8003678:	697b      	ldr	r3, [r7, #20]
 800367a:	fa01 f303 	lsl.w	r3, r1, r3
 800367e:	43d9      	mvns	r1, r3
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003684:	4313      	orrs	r3, r2
}
 8003686:	4618      	mov	r0, r3
 8003688:	3724      	adds	r7, #36	; 0x24
 800368a:	46bd      	mov	sp, r7
 800368c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003690:	4770      	bx	lr
	...

08003694 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80036a4:	d301      	bcc.n	80036aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80036a6:	2301      	movs	r3, #1
 80036a8:	e00f      	b.n	80036ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80036aa:	4a0a      	ldr	r2, [pc, #40]	; (80036d4 <SysTick_Config+0x40>)
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	3b01      	subs	r3, #1
 80036b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036b2:	210f      	movs	r1, #15
 80036b4:	f04f 30ff 	mov.w	r0, #4294967295
 80036b8:	f7ff ff8e 	bl	80035d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036bc:	4b05      	ldr	r3, [pc, #20]	; (80036d4 <SysTick_Config+0x40>)
 80036be:	2200      	movs	r2, #0
 80036c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036c2:	4b04      	ldr	r3, [pc, #16]	; (80036d4 <SysTick_Config+0x40>)
 80036c4:	2207      	movs	r2, #7
 80036c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}
 80036d2:	bf00      	nop
 80036d4:	e000e010 	.word	0xe000e010

080036d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036d8:	b580      	push	{r7, lr}
 80036da:	b082      	sub	sp, #8
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f7ff ff47 	bl	8003574 <__NVIC_SetPriorityGrouping>
}
 80036e6:	bf00      	nop
 80036e8:	3708      	adds	r7, #8
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}

080036ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036ee:	b580      	push	{r7, lr}
 80036f0:	b086      	sub	sp, #24
 80036f2:	af00      	add	r7, sp, #0
 80036f4:	4603      	mov	r3, r0
 80036f6:	60b9      	str	r1, [r7, #8]
 80036f8:	607a      	str	r2, [r7, #4]
 80036fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80036fc:	2300      	movs	r3, #0
 80036fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003700:	f7ff ff5c 	bl	80035bc <__NVIC_GetPriorityGrouping>
 8003704:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	68b9      	ldr	r1, [r7, #8]
 800370a:	6978      	ldr	r0, [r7, #20]
 800370c:	f7ff ff8e 	bl	800362c <NVIC_EncodePriority>
 8003710:	4602      	mov	r2, r0
 8003712:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003716:	4611      	mov	r1, r2
 8003718:	4618      	mov	r0, r3
 800371a:	f7ff ff5d 	bl	80035d8 <__NVIC_SetPriority>
}
 800371e:	bf00      	nop
 8003720:	3718      	adds	r7, #24
 8003722:	46bd      	mov	sp, r7
 8003724:	bd80      	pop	{r7, pc}

08003726 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003726:	b580      	push	{r7, lr}
 8003728:	b082      	sub	sp, #8
 800372a:	af00      	add	r7, sp, #0
 800372c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800372e:	6878      	ldr	r0, [r7, #4]
 8003730:	f7ff ffb0 	bl	8003694 <SysTick_Config>
 8003734:	4603      	mov	r3, r0
}
 8003736:	4618      	mov	r0, r3
 8003738:	3708      	adds	r7, #8
 800373a:	46bd      	mov	sp, r7
 800373c:	bd80      	pop	{r7, pc}
	...

08003740 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003740:	b480      	push	{r7}
 8003742:	b089      	sub	sp, #36	; 0x24
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
 8003748:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800374a:	2300      	movs	r3, #0
 800374c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800374e:	2300      	movs	r3, #0
 8003750:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003752:	2300      	movs	r3, #0
 8003754:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8003756:	2300      	movs	r3, #0
 8003758:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800375a:	2300      	movs	r3, #0
 800375c:	61fb      	str	r3, [r7, #28]
 800375e:	e175      	b.n	8003a4c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003760:	2201      	movs	r2, #1
 8003762:	69fb      	ldr	r3, [r7, #28]
 8003764:	fa02 f303 	lsl.w	r3, r2, r3
 8003768:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	697a      	ldr	r2, [r7, #20]
 8003770:	4013      	ands	r3, r2
 8003772:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003774:	693a      	ldr	r2, [r7, #16]
 8003776:	697b      	ldr	r3, [r7, #20]
 8003778:	429a      	cmp	r2, r3
 800377a:	f040 8164 	bne.w	8003a46 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	685b      	ldr	r3, [r3, #4]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d00b      	beq.n	800379e <HAL_GPIO_Init+0x5e>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	2b02      	cmp	r3, #2
 800378c:	d007      	beq.n	800379e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003792:	2b11      	cmp	r3, #17
 8003794:	d003      	beq.n	800379e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	2b12      	cmp	r3, #18
 800379c:	d130      	bne.n	8003800 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d4:	2201      	movs	r2, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 0201 	and.w	r2, r3, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003806:	69fb      	ldr	r3, [r7, #28]
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	2203      	movs	r2, #3
 800380c:	fa02 f303 	lsl.w	r3, r2, r3
 8003810:	43db      	mvns	r3, r3
 8003812:	69ba      	ldr	r2, [r7, #24]
 8003814:	4013      	ands	r3, r2
 8003816:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	689a      	ldr	r2, [r3, #8]
 800381c:	69fb      	ldr	r3, [r7, #28]
 800381e:	005b      	lsls	r3, r3, #1
 8003820:	fa02 f303 	lsl.w	r3, r2, r3
 8003824:	69ba      	ldr	r2, [r7, #24]
 8003826:	4313      	orrs	r3, r2
 8003828:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	69ba      	ldr	r2, [r7, #24]
 800382e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b02      	cmp	r3, #2
 8003836:	d003      	beq.n	8003840 <HAL_GPIO_Init+0x100>
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	2b12      	cmp	r3, #18
 800383e:	d123      	bne.n	8003888 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003840:	69fb      	ldr	r3, [r7, #28]
 8003842:	08da      	lsrs	r2, r3, #3
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	3208      	adds	r2, #8
 8003848:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800384c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800384e:	69fb      	ldr	r3, [r7, #28]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	009b      	lsls	r3, r3, #2
 8003856:	220f      	movs	r2, #15
 8003858:	fa02 f303 	lsl.w	r3, r2, r3
 800385c:	43db      	mvns	r3, r3
 800385e:	69ba      	ldr	r2, [r7, #24]
 8003860:	4013      	ands	r3, r2
 8003862:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	69fb      	ldr	r3, [r7, #28]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	009b      	lsls	r3, r3, #2
 8003870:	fa02 f303 	lsl.w	r3, r2, r3
 8003874:	69ba      	ldr	r2, [r7, #24]
 8003876:	4313      	orrs	r3, r2
 8003878:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	08da      	lsrs	r2, r3, #3
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	3208      	adds	r2, #8
 8003882:	69b9      	ldr	r1, [r7, #24]
 8003884:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800388e:	69fb      	ldr	r3, [r7, #28]
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	2203      	movs	r2, #3
 8003894:	fa02 f303 	lsl.w	r3, r2, r3
 8003898:	43db      	mvns	r3, r3
 800389a:	69ba      	ldr	r2, [r7, #24]
 800389c:	4013      	ands	r3, r2
 800389e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f003 0203 	and.w	r2, r3, #3
 80038a8:	69fb      	ldr	r3, [r7, #28]
 80038aa:	005b      	lsls	r3, r3, #1
 80038ac:	fa02 f303 	lsl.w	r3, r2, r3
 80038b0:	69ba      	ldr	r2, [r7, #24]
 80038b2:	4313      	orrs	r3, r2
 80038b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	685b      	ldr	r3, [r3, #4]
 80038c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	f000 80be 	beq.w	8003a46 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038ca:	4b66      	ldr	r3, [pc, #408]	; (8003a64 <HAL_GPIO_Init+0x324>)
 80038cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038ce:	4a65      	ldr	r2, [pc, #404]	; (8003a64 <HAL_GPIO_Init+0x324>)
 80038d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038d4:	6453      	str	r3, [r2, #68]	; 0x44
 80038d6:	4b63      	ldr	r3, [pc, #396]	; (8003a64 <HAL_GPIO_Init+0x324>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038de:	60fb      	str	r3, [r7, #12]
 80038e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80038e2:	4a61      	ldr	r2, [pc, #388]	; (8003a68 <HAL_GPIO_Init+0x328>)
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	089b      	lsrs	r3, r3, #2
 80038e8:	3302      	adds	r3, #2
 80038ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	f003 0303 	and.w	r3, r3, #3
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	220f      	movs	r2, #15
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	69ba      	ldr	r2, [r7, #24]
 8003902:	4013      	ands	r3, r2
 8003904:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a58      	ldr	r2, [pc, #352]	; (8003a6c <HAL_GPIO_Init+0x32c>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d037      	beq.n	800397e <HAL_GPIO_Init+0x23e>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a57      	ldr	r2, [pc, #348]	; (8003a70 <HAL_GPIO_Init+0x330>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d031      	beq.n	800397a <HAL_GPIO_Init+0x23a>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a56      	ldr	r2, [pc, #344]	; (8003a74 <HAL_GPIO_Init+0x334>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d02b      	beq.n	8003976 <HAL_GPIO_Init+0x236>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a55      	ldr	r2, [pc, #340]	; (8003a78 <HAL_GPIO_Init+0x338>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d025      	beq.n	8003972 <HAL_GPIO_Init+0x232>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a54      	ldr	r2, [pc, #336]	; (8003a7c <HAL_GPIO_Init+0x33c>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d01f      	beq.n	800396e <HAL_GPIO_Init+0x22e>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a53      	ldr	r2, [pc, #332]	; (8003a80 <HAL_GPIO_Init+0x340>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d019      	beq.n	800396a <HAL_GPIO_Init+0x22a>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a52      	ldr	r2, [pc, #328]	; (8003a84 <HAL_GPIO_Init+0x344>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d013      	beq.n	8003966 <HAL_GPIO_Init+0x226>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a51      	ldr	r2, [pc, #324]	; (8003a88 <HAL_GPIO_Init+0x348>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d00d      	beq.n	8003962 <HAL_GPIO_Init+0x222>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a50      	ldr	r2, [pc, #320]	; (8003a8c <HAL_GPIO_Init+0x34c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d007      	beq.n	800395e <HAL_GPIO_Init+0x21e>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a4f      	ldr	r2, [pc, #316]	; (8003a90 <HAL_GPIO_Init+0x350>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d101      	bne.n	800395a <HAL_GPIO_Init+0x21a>
 8003956:	2309      	movs	r3, #9
 8003958:	e012      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800395a:	230a      	movs	r3, #10
 800395c:	e010      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800395e:	2308      	movs	r3, #8
 8003960:	e00e      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003962:	2307      	movs	r3, #7
 8003964:	e00c      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003966:	2306      	movs	r3, #6
 8003968:	e00a      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800396a:	2305      	movs	r3, #5
 800396c:	e008      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800396e:	2304      	movs	r3, #4
 8003970:	e006      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003972:	2303      	movs	r3, #3
 8003974:	e004      	b.n	8003980 <HAL_GPIO_Init+0x240>
 8003976:	2302      	movs	r3, #2
 8003978:	e002      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800397a:	2301      	movs	r3, #1
 800397c:	e000      	b.n	8003980 <HAL_GPIO_Init+0x240>
 800397e:	2300      	movs	r3, #0
 8003980:	69fa      	ldr	r2, [r7, #28]
 8003982:	f002 0203 	and.w	r2, r2, #3
 8003986:	0092      	lsls	r2, r2, #2
 8003988:	4093      	lsls	r3, r2
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4313      	orrs	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003990:	4935      	ldr	r1, [pc, #212]	; (8003a68 <HAL_GPIO_Init+0x328>)
 8003992:	69fb      	ldr	r3, [r7, #28]
 8003994:	089b      	lsrs	r3, r3, #2
 8003996:	3302      	adds	r3, #2
 8003998:	69ba      	ldr	r2, [r7, #24]
 800399a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800399e:	4b3d      	ldr	r3, [pc, #244]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	43db      	mvns	r3, r3
 80039a8:	69ba      	ldr	r2, [r7, #24]
 80039aa:	4013      	ands	r3, r2
 80039ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d003      	beq.n	80039c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039c2:	4a34      	ldr	r2, [pc, #208]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039c4:	69bb      	ldr	r3, [r7, #24]
 80039c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039c8:	4b32      	ldr	r3, [pc, #200]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039ce:	693b      	ldr	r3, [r7, #16]
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d003      	beq.n	80039ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	693b      	ldr	r3, [r7, #16]
 80039e8:	4313      	orrs	r3, r2
 80039ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039ec:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039ee:	69bb      	ldr	r3, [r7, #24]
 80039f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039f2:	4b28      	ldr	r3, [pc, #160]	; (8003a94 <HAL_GPIO_Init+0x354>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039f8:	693b      	ldr	r3, [r7, #16]
 80039fa:	43db      	mvns	r3, r3
 80039fc:	69ba      	ldr	r2, [r7, #24]
 80039fe:	4013      	ands	r3, r2
 8003a00:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d003      	beq.n	8003a16 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a16:	4a1f      	ldr	r2, [pc, #124]	; (8003a94 <HAL_GPIO_Init+0x354>)
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a1c:	4b1d      	ldr	r3, [pc, #116]	; (8003a94 <HAL_GPIO_Init+0x354>)
 8003a1e:	68db      	ldr	r3, [r3, #12]
 8003a20:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	43db      	mvns	r3, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4013      	ands	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d003      	beq.n	8003a40 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a38:	69ba      	ldr	r2, [r7, #24]
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a40:	4a14      	ldr	r2, [pc, #80]	; (8003a94 <HAL_GPIO_Init+0x354>)
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	3301      	adds	r3, #1
 8003a4a:	61fb      	str	r3, [r7, #28]
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	2b0f      	cmp	r3, #15
 8003a50:	f67f ae86 	bls.w	8003760 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003a54:	bf00      	nop
 8003a56:	bf00      	nop
 8003a58:	3724      	adds	r7, #36	; 0x24
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40013800 	.word	0x40013800
 8003a6c:	40020000 	.word	0x40020000
 8003a70:	40020400 	.word	0x40020400
 8003a74:	40020800 	.word	0x40020800
 8003a78:	40020c00 	.word	0x40020c00
 8003a7c:	40021000 	.word	0x40021000
 8003a80:	40021400 	.word	0x40021400
 8003a84:	40021800 	.word	0x40021800
 8003a88:	40021c00 	.word	0x40021c00
 8003a8c:	40022000 	.word	0x40022000
 8003a90:	40022400 	.word	0x40022400
 8003a94:	40013c00 	.word	0x40013c00

08003a98 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	887b      	ldrh	r3, [r7, #2]
 8003aaa:	4013      	ands	r3, r2
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d002      	beq.n	8003ab6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	73fb      	strb	r3, [r7, #15]
 8003ab4:	e001      	b.n	8003aba <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aba:	7bfb      	ldrb	r3, [r7, #15]
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3714      	adds	r7, #20
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ad8:	787b      	ldrb	r3, [r7, #1]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003ade:	887a      	ldrh	r2, [r7, #2]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003ae4:	e003      	b.n	8003aee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003ae6:	887b      	ldrh	r3, [r7, #2]
 8003ae8:	041a      	lsls	r2, r3, #16
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	619a      	str	r2, [r3, #24]
}
 8003aee:	bf00      	nop
 8003af0:	370c      	adds	r7, #12
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
	...

08003afc <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003afc:	b480      	push	{r7}
 8003afe:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	4a04      	ldr	r2, [pc, #16]	; (8003b18 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003b06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003b0a:	6013      	str	r3, [r2, #0]
}
 8003b0c:	bf00      	nop
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b14:	4770      	bx	lr
 8003b16:	bf00      	nop
 8003b18:	40007000 	.word	0x40007000

08003b1c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8003b1c:	b580      	push	{r7, lr}
 8003b1e:	b082      	sub	sp, #8
 8003b20:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003b22:	2300      	movs	r3, #0
 8003b24:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003b26:	4b23      	ldr	r3, [pc, #140]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b2a:	4a22      	ldr	r2, [pc, #136]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b30:	6413      	str	r3, [r2, #64]	; 0x40
 8003b32:	4b20      	ldr	r3, [pc, #128]	; (8003bb4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b3a:	603b      	str	r3, [r7, #0]
 8003b3c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003b3e:	4b1e      	ldr	r3, [pc, #120]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	4a1d      	ldr	r2, [pc, #116]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b44:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b48:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b4a:	f7ff fce3 	bl	8003514 <HAL_GetTick>
 8003b4e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b50:	e009      	b.n	8003b66 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b52:	f7ff fcdf 	bl	8003514 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b60:	d901      	bls.n	8003b66 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003b62:	2303      	movs	r3, #3
 8003b64:	e022      	b.n	8003bac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003b66:	4b14      	ldr	r3, [pc, #80]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b68:	685b      	ldr	r3, [r3, #4]
 8003b6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b72:	d1ee      	bne.n	8003b52 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003b74:	4b10      	ldr	r3, [pc, #64]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b7e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003b80:	f7ff fcc8 	bl	8003514 <HAL_GetTick>
 8003b84:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b86:	e009      	b.n	8003b9c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003b88:	f7ff fcc4 	bl	8003514 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003b96:	d901      	bls.n	8003b9c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003b98:	2303      	movs	r3, #3
 8003b9a:	e007      	b.n	8003bac <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003b9c:	4b06      	ldr	r3, [pc, #24]	; (8003bb8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003ba8:	d1ee      	bne.n	8003b88 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8003baa:	2300      	movs	r3, #0
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3708      	adds	r7, #8
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}
 8003bb4:	40023800 	.word	0x40023800
 8003bb8:	40007000 	.word	0x40007000

08003bbc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d101      	bne.n	8003bd2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	e29b      	b.n	800410a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f000 8087 	beq.w	8003cee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003be0:	4b96      	ldr	r3, [pc, #600]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	f003 030c 	and.w	r3, r3, #12
 8003be8:	2b04      	cmp	r3, #4
 8003bea:	d00c      	beq.n	8003c06 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003bec:	4b93      	ldr	r3, [pc, #588]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	f003 030c 	and.w	r3, r3, #12
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	d112      	bne.n	8003c1e <HAL_RCC_OscConfig+0x62>
 8003bf8:	4b90      	ldr	r3, [pc, #576]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c00:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c04:	d10b      	bne.n	8003c1e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c06:	4b8d      	ldr	r3, [pc, #564]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d06c      	beq.n	8003cec <HAL_RCC_OscConfig+0x130>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	685b      	ldr	r3, [r3, #4]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d168      	bne.n	8003cec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e275      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c26:	d106      	bne.n	8003c36 <HAL_RCC_OscConfig+0x7a>
 8003c28:	4b84      	ldr	r3, [pc, #528]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	4a83      	ldr	r2, [pc, #524]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c32:	6013      	str	r3, [r2, #0]
 8003c34:	e02e      	b.n	8003c94 <HAL_RCC_OscConfig+0xd8>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d10c      	bne.n	8003c58 <HAL_RCC_OscConfig+0x9c>
 8003c3e:	4b7f      	ldr	r3, [pc, #508]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a7e      	ldr	r2, [pc, #504]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c48:	6013      	str	r3, [r2, #0]
 8003c4a:	4b7c      	ldr	r3, [pc, #496]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	4a7b      	ldr	r2, [pc, #492]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c50:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c54:	6013      	str	r3, [r2, #0]
 8003c56:	e01d      	b.n	8003c94 <HAL_RCC_OscConfig+0xd8>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	685b      	ldr	r3, [r3, #4]
 8003c5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003c60:	d10c      	bne.n	8003c7c <HAL_RCC_OscConfig+0xc0>
 8003c62:	4b76      	ldr	r3, [pc, #472]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a75      	ldr	r2, [pc, #468]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003c6c:	6013      	str	r3, [r2, #0]
 8003c6e:	4b73      	ldr	r3, [pc, #460]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	4a72      	ldr	r2, [pc, #456]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003c78:	6013      	str	r3, [r2, #0]
 8003c7a:	e00b      	b.n	8003c94 <HAL_RCC_OscConfig+0xd8>
 8003c7c:	4b6f      	ldr	r3, [pc, #444]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	4a6e      	ldr	r2, [pc, #440]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003c86:	6013      	str	r3, [r2, #0]
 8003c88:	4b6c      	ldr	r3, [pc, #432]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	4a6b      	ldr	r2, [pc, #428]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003c8e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003c92:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d013      	beq.n	8003cc4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c9c:	f7ff fc3a 	bl	8003514 <HAL_GetTick>
 8003ca0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ca2:	e008      	b.n	8003cb6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ca4:	f7ff fc36 	bl	8003514 <HAL_GetTick>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	1ad3      	subs	r3, r2, r3
 8003cae:	2b64      	cmp	r3, #100	; 0x64
 8003cb0:	d901      	bls.n	8003cb6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003cb2:	2303      	movs	r3, #3
 8003cb4:	e229      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cb6:	4b61      	ldr	r3, [pc, #388]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d0f0      	beq.n	8003ca4 <HAL_RCC_OscConfig+0xe8>
 8003cc2:	e014      	b.n	8003cee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cc4:	f7ff fc26 	bl	8003514 <HAL_GetTick>
 8003cc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cca:	e008      	b.n	8003cde <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ccc:	f7ff fc22 	bl	8003514 <HAL_GetTick>
 8003cd0:	4602      	mov	r2, r0
 8003cd2:	693b      	ldr	r3, [r7, #16]
 8003cd4:	1ad3      	subs	r3, r2, r3
 8003cd6:	2b64      	cmp	r3, #100	; 0x64
 8003cd8:	d901      	bls.n	8003cde <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8003cda:	2303      	movs	r3, #3
 8003cdc:	e215      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cde:	4b57      	ldr	r3, [pc, #348]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d1f0      	bne.n	8003ccc <HAL_RCC_OscConfig+0x110>
 8003cea:	e000      	b.n	8003cee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0302 	and.w	r3, r3, #2
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d069      	beq.n	8003dce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003cfa:	4b50      	ldr	r3, [pc, #320]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00b      	beq.n	8003d1e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d06:	4b4d      	ldr	r3, [pc, #308]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f003 030c 	and.w	r3, r3, #12
 8003d0e:	2b08      	cmp	r3, #8
 8003d10:	d11c      	bne.n	8003d4c <HAL_RCC_OscConfig+0x190>
 8003d12:	4b4a      	ldr	r3, [pc, #296]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d116      	bne.n	8003d4c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d1e:	4b47      	ldr	r3, [pc, #284]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d005      	beq.n	8003d36 <HAL_RCC_OscConfig+0x17a>
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	68db      	ldr	r3, [r3, #12]
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d001      	beq.n	8003d36 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e1e9      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d36:	4b41      	ldr	r3, [pc, #260]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	691b      	ldr	r3, [r3, #16]
 8003d42:	00db      	lsls	r3, r3, #3
 8003d44:	493d      	ldr	r1, [pc, #244]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d46:	4313      	orrs	r3, r2
 8003d48:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d4a:	e040      	b.n	8003dce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	68db      	ldr	r3, [r3, #12]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d023      	beq.n	8003d9c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d54:	4b39      	ldr	r3, [pc, #228]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4a38      	ldr	r2, [pc, #224]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d5a:	f043 0301 	orr.w	r3, r3, #1
 8003d5e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d60:	f7ff fbd8 	bl	8003514 <HAL_GetTick>
 8003d64:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d66:	e008      	b.n	8003d7a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003d68:	f7ff fbd4 	bl	8003514 <HAL_GetTick>
 8003d6c:	4602      	mov	r2, r0
 8003d6e:	693b      	ldr	r3, [r7, #16]
 8003d70:	1ad3      	subs	r3, r2, r3
 8003d72:	2b02      	cmp	r3, #2
 8003d74:	d901      	bls.n	8003d7a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003d76:	2303      	movs	r3, #3
 8003d78:	e1c7      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d7a:	4b30      	ldr	r3, [pc, #192]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d0f0      	beq.n	8003d68 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d86:	4b2d      	ldr	r3, [pc, #180]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	691b      	ldr	r3, [r3, #16]
 8003d92:	00db      	lsls	r3, r3, #3
 8003d94:	4929      	ldr	r1, [pc, #164]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d96:	4313      	orrs	r3, r2
 8003d98:	600b      	str	r3, [r1, #0]
 8003d9a:	e018      	b.n	8003dce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d9c:	4b27      	ldr	r3, [pc, #156]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	4a26      	ldr	r2, [pc, #152]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003da2:	f023 0301 	bic.w	r3, r3, #1
 8003da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003da8:	f7ff fbb4 	bl	8003514 <HAL_GetTick>
 8003dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dae:	e008      	b.n	8003dc2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003db0:	f7ff fbb0 	bl	8003514 <HAL_GetTick>
 8003db4:	4602      	mov	r2, r0
 8003db6:	693b      	ldr	r3, [r7, #16]
 8003db8:	1ad3      	subs	r3, r2, r3
 8003dba:	2b02      	cmp	r3, #2
 8003dbc:	d901      	bls.n	8003dc2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e1a3      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003dc2:	4b1e      	ldr	r3, [pc, #120]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f003 0302 	and.w	r3, r3, #2
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d1f0      	bne.n	8003db0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0308 	and.w	r3, r3, #8
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d038      	beq.n	8003e4c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	695b      	ldr	r3, [r3, #20]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d019      	beq.n	8003e16 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003de2:	4b16      	ldr	r3, [pc, #88]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003de4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003de6:	4a15      	ldr	r2, [pc, #84]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003de8:	f043 0301 	orr.w	r3, r3, #1
 8003dec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003dee:	f7ff fb91 	bl	8003514 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003df6:	f7ff fb8d 	bl	8003514 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e180      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e08:	4b0c      	ldr	r3, [pc, #48]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003e0a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e0c:	f003 0302 	and.w	r3, r3, #2
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x23a>
 8003e14:	e01a      	b.n	8003e4c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e16:	4b09      	ldr	r3, [pc, #36]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003e18:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e1a:	4a08      	ldr	r2, [pc, #32]	; (8003e3c <HAL_RCC_OscConfig+0x280>)
 8003e1c:	f023 0301 	bic.w	r3, r3, #1
 8003e20:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e22:	f7ff fb77 	bl	8003514 <HAL_GetTick>
 8003e26:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e28:	e00a      	b.n	8003e40 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e2a:	f7ff fb73 	bl	8003514 <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	2b02      	cmp	r3, #2
 8003e36:	d903      	bls.n	8003e40 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e166      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
 8003e3c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e40:	4b92      	ldr	r3, [pc, #584]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003e42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e44:	f003 0302 	and.w	r3, r3, #2
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d1ee      	bne.n	8003e2a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 0304 	and.w	r3, r3, #4
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	f000 80a4 	beq.w	8003fa2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e5a:	4b8c      	ldr	r3, [pc, #560]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003e5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d10d      	bne.n	8003e82 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e66:	4b89      	ldr	r3, [pc, #548]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e6a:	4a88      	ldr	r2, [pc, #544]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003e6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e70:	6413      	str	r3, [r2, #64]	; 0x40
 8003e72:	4b86      	ldr	r3, [pc, #536]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e7a:	60bb      	str	r3, [r7, #8]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003e82:	4b83      	ldr	r3, [pc, #524]	; (8004090 <HAL_RCC_OscConfig+0x4d4>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d118      	bne.n	8003ec0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8003e8e:	4b80      	ldr	r3, [pc, #512]	; (8004090 <HAL_RCC_OscConfig+0x4d4>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a7f      	ldr	r2, [pc, #508]	; (8004090 <HAL_RCC_OscConfig+0x4d4>)
 8003e94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e9a:	f7ff fb3b 	bl	8003514 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003ea0:	e008      	b.n	8003eb4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ea2:	f7ff fb37 	bl	8003514 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	2b64      	cmp	r3, #100	; 0x64
 8003eae:	d901      	bls.n	8003eb4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003eb0:	2303      	movs	r3, #3
 8003eb2:	e12a      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003eb4:	4b76      	ldr	r3, [pc, #472]	; (8004090 <HAL_RCC_OscConfig+0x4d4>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d0f0      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	2b01      	cmp	r3, #1
 8003ec6:	d106      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x31a>
 8003ec8:	4b70      	ldr	r3, [pc, #448]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ecc:	4a6f      	ldr	r2, [pc, #444]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003ece:	f043 0301 	orr.w	r3, r3, #1
 8003ed2:	6713      	str	r3, [r2, #112]	; 0x70
 8003ed4:	e02d      	b.n	8003f32 <HAL_RCC_OscConfig+0x376>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d10c      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x33c>
 8003ede:	4b6b      	ldr	r3, [pc, #428]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ee2:	4a6a      	ldr	r2, [pc, #424]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003ee4:	f023 0301 	bic.w	r3, r3, #1
 8003ee8:	6713      	str	r3, [r2, #112]	; 0x70
 8003eea:	4b68      	ldr	r3, [pc, #416]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eee:	4a67      	ldr	r2, [pc, #412]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003ef0:	f023 0304 	bic.w	r3, r3, #4
 8003ef4:	6713      	str	r3, [r2, #112]	; 0x70
 8003ef6:	e01c      	b.n	8003f32 <HAL_RCC_OscConfig+0x376>
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	2b05      	cmp	r3, #5
 8003efe:	d10c      	bne.n	8003f1a <HAL_RCC_OscConfig+0x35e>
 8003f00:	4b62      	ldr	r3, [pc, #392]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f04:	4a61      	ldr	r2, [pc, #388]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f06:	f043 0304 	orr.w	r3, r3, #4
 8003f0a:	6713      	str	r3, [r2, #112]	; 0x70
 8003f0c:	4b5f      	ldr	r3, [pc, #380]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f10:	4a5e      	ldr	r2, [pc, #376]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f12:	f043 0301 	orr.w	r3, r3, #1
 8003f16:	6713      	str	r3, [r2, #112]	; 0x70
 8003f18:	e00b      	b.n	8003f32 <HAL_RCC_OscConfig+0x376>
 8003f1a:	4b5c      	ldr	r3, [pc, #368]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f1e:	4a5b      	ldr	r2, [pc, #364]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6713      	str	r3, [r2, #112]	; 0x70
 8003f26:	4b59      	ldr	r3, [pc, #356]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f2a:	4a58      	ldr	r2, [pc, #352]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f2c:	f023 0304 	bic.w	r3, r3, #4
 8003f30:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d015      	beq.n	8003f66 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3a:	f7ff faeb 	bl	8003514 <HAL_GetTick>
 8003f3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	e00a      	b.n	8003f58 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7ff fae7 	bl	8003514 <HAL_GetTick>
 8003f46:	4602      	mov	r2, r0
 8003f48:	693b      	ldr	r3, [r7, #16]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f50:	4293      	cmp	r3, r2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e0d8      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f58:	4b4c      	ldr	r3, [pc, #304]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d0ee      	beq.n	8003f42 <HAL_RCC_OscConfig+0x386>
 8003f64:	e014      	b.n	8003f90 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f66:	f7ff fad5 	bl	8003514 <HAL_GetTick>
 8003f6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6c:	e00a      	b.n	8003f84 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f6e:	f7ff fad1 	bl	8003514 <HAL_GetTick>
 8003f72:	4602      	mov	r2, r0
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f7c:	4293      	cmp	r3, r2
 8003f7e:	d901      	bls.n	8003f84 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003f80:	2303      	movs	r3, #3
 8003f82:	e0c2      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f84:	4b41      	ldr	r3, [pc, #260]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f88:	f003 0302 	and.w	r3, r3, #2
 8003f8c:	2b00      	cmp	r3, #0
 8003f8e:	d1ee      	bne.n	8003f6e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003f90:	7dfb      	ldrb	r3, [r7, #23]
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d105      	bne.n	8003fa2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f96:	4b3d      	ldr	r3, [pc, #244]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a3c      	ldr	r2, [pc, #240]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003f9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	f000 80ae 	beq.w	8004108 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fac:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f003 030c 	and.w	r3, r3, #12
 8003fb4:	2b08      	cmp	r3, #8
 8003fb6:	d06d      	beq.n	8004094 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d14b      	bne.n	8004058 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003fc0:	4b32      	ldr	r3, [pc, #200]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4a31      	ldr	r2, [pc, #196]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003fca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003fcc:	f7ff faa2 	bl	8003514 <HAL_GetTick>
 8003fd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003fd4:	f7ff fa9e 	bl	8003514 <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	693b      	ldr	r3, [r7, #16]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e091      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003fe6:	4b29      	ldr	r3, [pc, #164]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d1f0      	bne.n	8003fd4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	69da      	ldr	r2, [r3, #28]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a1b      	ldr	r3, [r3, #32]
 8003ffa:	431a      	orrs	r2, r3
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	019b      	lsls	r3, r3, #6
 8004002:	431a      	orrs	r2, r3
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004008:	085b      	lsrs	r3, r3, #1
 800400a:	3b01      	subs	r3, #1
 800400c:	041b      	lsls	r3, r3, #16
 800400e:	431a      	orrs	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004014:	061b      	lsls	r3, r3, #24
 8004016:	431a      	orrs	r2, r3
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800401c:	071b      	lsls	r3, r3, #28
 800401e:	491b      	ldr	r1, [pc, #108]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8004020:	4313      	orrs	r3, r2
 8004022:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a18      	ldr	r2, [pc, #96]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 800402a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800402e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004030:	f7ff fa70 	bl	8003514 <HAL_GetTick>
 8004034:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004036:	e008      	b.n	800404a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004038:	f7ff fa6c 	bl	8003514 <HAL_GetTick>
 800403c:	4602      	mov	r2, r0
 800403e:	693b      	ldr	r3, [r7, #16]
 8004040:	1ad3      	subs	r3, r2, r3
 8004042:	2b02      	cmp	r3, #2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e05f      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800404a:	4b10      	ldr	r3, [pc, #64]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004052:	2b00      	cmp	r3, #0
 8004054:	d0f0      	beq.n	8004038 <HAL_RCC_OscConfig+0x47c>
 8004056:	e057      	b.n	8004108 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004058:	4b0c      	ldr	r3, [pc, #48]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	4a0b      	ldr	r2, [pc, #44]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 800405e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004062:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004064:	f7ff fa56 	bl	8003514 <HAL_GetTick>
 8004068:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800406a:	e008      	b.n	800407e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406c:	f7ff fa52 	bl	8003514 <HAL_GetTick>
 8004070:	4602      	mov	r2, r0
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	2b02      	cmp	r3, #2
 8004078:	d901      	bls.n	800407e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800407a:	2303      	movs	r3, #3
 800407c:	e045      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800407e:	4b03      	ldr	r3, [pc, #12]	; (800408c <HAL_RCC_OscConfig+0x4d0>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004086:	2b00      	cmp	r3, #0
 8004088:	d1f0      	bne.n	800406c <HAL_RCC_OscConfig+0x4b0>
 800408a:	e03d      	b.n	8004108 <HAL_RCC_OscConfig+0x54c>
 800408c:	40023800 	.word	0x40023800
 8004090:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004094:	4b1f      	ldr	r3, [pc, #124]	; (8004114 <HAL_RCC_OscConfig+0x558>)
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	699b      	ldr	r3, [r3, #24]
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d030      	beq.n	8004104 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ac:	429a      	cmp	r2, r3
 80040ae:	d129      	bne.n	8004104 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d122      	bne.n	8004104 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80040c4:	4013      	ands	r3, r2
 80040c6:	687a      	ldr	r2, [r7, #4]
 80040c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80040ca:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80040cc:	4293      	cmp	r3, r2
 80040ce:	d119      	bne.n	8004104 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040da:	085b      	lsrs	r3, r3, #1
 80040dc:	3b01      	subs	r3, #1
 80040de:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d10f      	bne.n	8004104 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ee:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d107      	bne.n	8004104 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040fe:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004100:	429a      	cmp	r2, r3
 8004102:	d001      	beq.n	8004108 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004104:	2301      	movs	r3, #1
 8004106:	e000      	b.n	800410a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004108:	2300      	movs	r3, #0
}
 800410a:	4618      	mov	r0, r3
 800410c:	3718      	adds	r7, #24
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40023800 	.word	0x40023800

08004118 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004118:	b580      	push	{r7, lr}
 800411a:	b084      	sub	sp, #16
 800411c:	af00      	add	r7, sp, #0
 800411e:	6078      	str	r0, [r7, #4]
 8004120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004122:	2300      	movs	r3, #0
 8004124:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d101      	bne.n	8004130 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	e0d0      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004130:	4b6a      	ldr	r3, [pc, #424]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 030f 	and.w	r3, r3, #15
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d910      	bls.n	8004160 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b67      	ldr	r3, [pc, #412]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	f023 020f 	bic.w	r2, r3, #15
 8004146:	4965      	ldr	r1, [pc, #404]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	4313      	orrs	r3, r2
 800414c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800414e:	4b63      	ldr	r3, [pc, #396]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 030f 	and.w	r3, r3, #15
 8004156:	683a      	ldr	r2, [r7, #0]
 8004158:	429a      	cmp	r2, r3
 800415a:	d001      	beq.n	8004160 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e0b8      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f003 0302 	and.w	r3, r3, #2
 8004168:	2b00      	cmp	r3, #0
 800416a:	d020      	beq.n	80041ae <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0304 	and.w	r3, r3, #4
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004178:	4b59      	ldr	r3, [pc, #356]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	4a58      	ldr	r2, [pc, #352]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 800417e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004182:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f003 0308 	and.w	r3, r3, #8
 800418c:	2b00      	cmp	r3, #0
 800418e:	d005      	beq.n	800419c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004190:	4b53      	ldr	r3, [pc, #332]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004192:	689b      	ldr	r3, [r3, #8]
 8004194:	4a52      	ldr	r2, [pc, #328]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004196:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800419a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800419c:	4b50      	ldr	r3, [pc, #320]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	494d      	ldr	r1, [pc, #308]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f003 0301 	and.w	r3, r3, #1
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d040      	beq.n	800423c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041c2:	4b47      	ldr	r3, [pc, #284]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d115      	bne.n	80041fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e07f      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	2b02      	cmp	r3, #2
 80041d8:	d107      	bne.n	80041ea <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041da:	4b41      	ldr	r3, [pc, #260]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d109      	bne.n	80041fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041e6:	2301      	movs	r3, #1
 80041e8:	e073      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041ea:	4b3d      	ldr	r3, [pc, #244]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f003 0302 	and.w	r3, r3, #2
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d101      	bne.n	80041fa <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80041f6:	2301      	movs	r3, #1
 80041f8:	e06b      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041fa:	4b39      	ldr	r3, [pc, #228]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80041fc:	689b      	ldr	r3, [r3, #8]
 80041fe:	f023 0203 	bic.w	r2, r3, #3
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4936      	ldr	r1, [pc, #216]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004208:	4313      	orrs	r3, r2
 800420a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800420c:	f7ff f982 	bl	8003514 <HAL_GetTick>
 8004210:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	e00a      	b.n	800422a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004214:	f7ff f97e 	bl	8003514 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004222:	4293      	cmp	r3, r2
 8004224:	d901      	bls.n	800422a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004226:	2303      	movs	r3, #3
 8004228:	e053      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800422a:	4b2d      	ldr	r3, [pc, #180]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 800422c:	689b      	ldr	r3, [r3, #8]
 800422e:	f003 020c 	and.w	r2, r3, #12
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	429a      	cmp	r2, r3
 800423a:	d1eb      	bne.n	8004214 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800423c:	4b27      	ldr	r3, [pc, #156]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f003 030f 	and.w	r3, r3, #15
 8004244:	683a      	ldr	r2, [r7, #0]
 8004246:	429a      	cmp	r2, r3
 8004248:	d210      	bcs.n	800426c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800424a:	4b24      	ldr	r3, [pc, #144]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f023 020f 	bic.w	r2, r3, #15
 8004252:	4922      	ldr	r1, [pc, #136]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	4313      	orrs	r3, r2
 8004258:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800425a:	4b20      	ldr	r3, [pc, #128]	; (80042dc <HAL_RCC_ClockConfig+0x1c4>)
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f003 030f 	and.w	r3, r3, #15
 8004262:	683a      	ldr	r2, [r7, #0]
 8004264:	429a      	cmp	r2, r3
 8004266:	d001      	beq.n	800426c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004268:	2301      	movs	r3, #1
 800426a:	e032      	b.n	80042d2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	d008      	beq.n	800428a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004278:	4b19      	ldr	r3, [pc, #100]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	4916      	ldr	r1, [pc, #88]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004286:	4313      	orrs	r3, r2
 8004288:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	f003 0308 	and.w	r3, r3, #8
 8004292:	2b00      	cmp	r3, #0
 8004294:	d009      	beq.n	80042aa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004296:	4b12      	ldr	r3, [pc, #72]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	00db      	lsls	r3, r3, #3
 80042a4:	490e      	ldr	r1, [pc, #56]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042a6:	4313      	orrs	r3, r2
 80042a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80042aa:	f000 f821 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80042ae:	4602      	mov	r2, r0
 80042b0:	4b0b      	ldr	r3, [pc, #44]	; (80042e0 <HAL_RCC_ClockConfig+0x1c8>)
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	091b      	lsrs	r3, r3, #4
 80042b6:	f003 030f 	and.w	r3, r3, #15
 80042ba:	490a      	ldr	r1, [pc, #40]	; (80042e4 <HAL_RCC_ClockConfig+0x1cc>)
 80042bc:	5ccb      	ldrb	r3, [r1, r3]
 80042be:	fa22 f303 	lsr.w	r3, r2, r3
 80042c2:	4a09      	ldr	r2, [pc, #36]	; (80042e8 <HAL_RCC_ClockConfig+0x1d0>)
 80042c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042c6:	4b09      	ldr	r3, [pc, #36]	; (80042ec <HAL_RCC_ClockConfig+0x1d4>)
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f8de 	bl	800348c <HAL_InitTick>

  return HAL_OK;
 80042d0:	2300      	movs	r3, #0
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3710      	adds	r7, #16
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	40023c00 	.word	0x40023c00
 80042e0:	40023800 	.word	0x40023800
 80042e4:	0802ebf8 	.word	0x0802ebf8
 80042e8:	20000000 	.word	0x20000000
 80042ec:	20000008 	.word	0x20000008

080042f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80042f4:	b094      	sub	sp, #80	; 0x50
 80042f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80042f8:	2300      	movs	r3, #0
 80042fa:	647b      	str	r3, [r7, #68]	; 0x44
 80042fc:	2300      	movs	r3, #0
 80042fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004300:	2300      	movs	r3, #0
 8004302:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004304:	2300      	movs	r3, #0
 8004306:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004308:	4b79      	ldr	r3, [pc, #484]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f003 030c 	and.w	r3, r3, #12
 8004310:	2b08      	cmp	r3, #8
 8004312:	d00d      	beq.n	8004330 <HAL_RCC_GetSysClockFreq+0x40>
 8004314:	2b08      	cmp	r3, #8
 8004316:	f200 80e1 	bhi.w	80044dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800431a:	2b00      	cmp	r3, #0
 800431c:	d002      	beq.n	8004324 <HAL_RCC_GetSysClockFreq+0x34>
 800431e:	2b04      	cmp	r3, #4
 8004320:	d003      	beq.n	800432a <HAL_RCC_GetSysClockFreq+0x3a>
 8004322:	e0db      	b.n	80044dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004324:	4b73      	ldr	r3, [pc, #460]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004326:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004328:	e0db      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800432a:	4b73      	ldr	r3, [pc, #460]	; (80044f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800432c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800432e:	e0d8      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004330:	4b6f      	ldr	r3, [pc, #444]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004332:	685b      	ldr	r3, [r3, #4]
 8004334:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004338:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800433a:	4b6d      	ldr	r3, [pc, #436]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800433c:	685b      	ldr	r3, [r3, #4]
 800433e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d063      	beq.n	800440e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004346:	4b6a      	ldr	r3, [pc, #424]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	099b      	lsrs	r3, r3, #6
 800434c:	2200      	movs	r2, #0
 800434e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004350:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004358:	633b      	str	r3, [r7, #48]	; 0x30
 800435a:	2300      	movs	r3, #0
 800435c:	637b      	str	r3, [r7, #52]	; 0x34
 800435e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004362:	4622      	mov	r2, r4
 8004364:	462b      	mov	r3, r5
 8004366:	f04f 0000 	mov.w	r0, #0
 800436a:	f04f 0100 	mov.w	r1, #0
 800436e:	0159      	lsls	r1, r3, #5
 8004370:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004374:	0150      	lsls	r0, r2, #5
 8004376:	4602      	mov	r2, r0
 8004378:	460b      	mov	r3, r1
 800437a:	4621      	mov	r1, r4
 800437c:	1a51      	subs	r1, r2, r1
 800437e:	6139      	str	r1, [r7, #16]
 8004380:	4629      	mov	r1, r5
 8004382:	eb63 0301 	sbc.w	r3, r3, r1
 8004386:	617b      	str	r3, [r7, #20]
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004394:	4659      	mov	r1, fp
 8004396:	018b      	lsls	r3, r1, #6
 8004398:	4651      	mov	r1, sl
 800439a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800439e:	4651      	mov	r1, sl
 80043a0:	018a      	lsls	r2, r1, #6
 80043a2:	4651      	mov	r1, sl
 80043a4:	ebb2 0801 	subs.w	r8, r2, r1
 80043a8:	4659      	mov	r1, fp
 80043aa:	eb63 0901 	sbc.w	r9, r3, r1
 80043ae:	f04f 0200 	mov.w	r2, #0
 80043b2:	f04f 0300 	mov.w	r3, #0
 80043b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80043ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80043be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80043c2:	4690      	mov	r8, r2
 80043c4:	4699      	mov	r9, r3
 80043c6:	4623      	mov	r3, r4
 80043c8:	eb18 0303 	adds.w	r3, r8, r3
 80043cc:	60bb      	str	r3, [r7, #8]
 80043ce:	462b      	mov	r3, r5
 80043d0:	eb49 0303 	adc.w	r3, r9, r3
 80043d4:	60fb      	str	r3, [r7, #12]
 80043d6:	f04f 0200 	mov.w	r2, #0
 80043da:	f04f 0300 	mov.w	r3, #0
 80043de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80043e2:	4629      	mov	r1, r5
 80043e4:	024b      	lsls	r3, r1, #9
 80043e6:	4621      	mov	r1, r4
 80043e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80043ec:	4621      	mov	r1, r4
 80043ee:	024a      	lsls	r2, r1, #9
 80043f0:	4610      	mov	r0, r2
 80043f2:	4619      	mov	r1, r3
 80043f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043f6:	2200      	movs	r2, #0
 80043f8:	62bb      	str	r3, [r7, #40]	; 0x28
 80043fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004400:	f7fb ff76 	bl	80002f0 <__aeabi_uldivmod>
 8004404:	4602      	mov	r2, r0
 8004406:	460b      	mov	r3, r1
 8004408:	4613      	mov	r3, r2
 800440a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800440c:	e058      	b.n	80044c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800440e:	4b38      	ldr	r3, [pc, #224]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	099b      	lsrs	r3, r3, #6
 8004414:	2200      	movs	r2, #0
 8004416:	4618      	mov	r0, r3
 8004418:	4611      	mov	r1, r2
 800441a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800441e:	623b      	str	r3, [r7, #32]
 8004420:	2300      	movs	r3, #0
 8004422:	627b      	str	r3, [r7, #36]	; 0x24
 8004424:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004428:	4642      	mov	r2, r8
 800442a:	464b      	mov	r3, r9
 800442c:	f04f 0000 	mov.w	r0, #0
 8004430:	f04f 0100 	mov.w	r1, #0
 8004434:	0159      	lsls	r1, r3, #5
 8004436:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800443a:	0150      	lsls	r0, r2, #5
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4641      	mov	r1, r8
 8004442:	ebb2 0a01 	subs.w	sl, r2, r1
 8004446:	4649      	mov	r1, r9
 8004448:	eb63 0b01 	sbc.w	fp, r3, r1
 800444c:	f04f 0200 	mov.w	r2, #0
 8004450:	f04f 0300 	mov.w	r3, #0
 8004454:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004458:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800445c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004460:	ebb2 040a 	subs.w	r4, r2, sl
 8004464:	eb63 050b 	sbc.w	r5, r3, fp
 8004468:	f04f 0200 	mov.w	r2, #0
 800446c:	f04f 0300 	mov.w	r3, #0
 8004470:	00eb      	lsls	r3, r5, #3
 8004472:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004476:	00e2      	lsls	r2, r4, #3
 8004478:	4614      	mov	r4, r2
 800447a:	461d      	mov	r5, r3
 800447c:	4643      	mov	r3, r8
 800447e:	18e3      	adds	r3, r4, r3
 8004480:	603b      	str	r3, [r7, #0]
 8004482:	464b      	mov	r3, r9
 8004484:	eb45 0303 	adc.w	r3, r5, r3
 8004488:	607b      	str	r3, [r7, #4]
 800448a:	f04f 0200 	mov.w	r2, #0
 800448e:	f04f 0300 	mov.w	r3, #0
 8004492:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004496:	4629      	mov	r1, r5
 8004498:	028b      	lsls	r3, r1, #10
 800449a:	4621      	mov	r1, r4
 800449c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044a0:	4621      	mov	r1, r4
 80044a2:	028a      	lsls	r2, r1, #10
 80044a4:	4610      	mov	r0, r2
 80044a6:	4619      	mov	r1, r3
 80044a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044aa:	2200      	movs	r2, #0
 80044ac:	61bb      	str	r3, [r7, #24]
 80044ae:	61fa      	str	r2, [r7, #28]
 80044b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044b4:	f7fb ff1c 	bl	80002f0 <__aeabi_uldivmod>
 80044b8:	4602      	mov	r2, r0
 80044ba:	460b      	mov	r3, r1
 80044bc:	4613      	mov	r3, r2
 80044be:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80044c0:	4b0b      	ldr	r3, [pc, #44]	; (80044f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	0c1b      	lsrs	r3, r3, #16
 80044c6:	f003 0303 	and.w	r3, r3, #3
 80044ca:	3301      	adds	r3, #1
 80044cc:	005b      	lsls	r3, r3, #1
 80044ce:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80044d0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80044d2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80044d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044d8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044da:	e002      	b.n	80044e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044dc:	4b05      	ldr	r3, [pc, #20]	; (80044f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80044de:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80044e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3750      	adds	r7, #80	; 0x50
 80044e8:	46bd      	mov	sp, r7
 80044ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044ee:	bf00      	nop
 80044f0:	40023800 	.word	0x40023800
 80044f4:	00f42400 	.word	0x00f42400
 80044f8:	007a1200 	.word	0x007a1200

080044fc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80044fc:	b480      	push	{r7}
 80044fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_RCC_GetHCLKFreq+0x14>)
 8004502:	681b      	ldr	r3, [r3, #0]
}
 8004504:	4618      	mov	r0, r3
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	20000000 	.word	0x20000000

08004514 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004518:	f7ff fff0 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 800451c:	4602      	mov	r2, r0
 800451e:	4b05      	ldr	r3, [pc, #20]	; (8004534 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004520:	689b      	ldr	r3, [r3, #8]
 8004522:	0a9b      	lsrs	r3, r3, #10
 8004524:	f003 0307 	and.w	r3, r3, #7
 8004528:	4903      	ldr	r1, [pc, #12]	; (8004538 <HAL_RCC_GetPCLK1Freq+0x24>)
 800452a:	5ccb      	ldrb	r3, [r1, r3]
 800452c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	bd80      	pop	{r7, pc}
 8004534:	40023800 	.word	0x40023800
 8004538:	0802ec08 	.word	0x0802ec08

0800453c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800453c:	b580      	push	{r7, lr}
 800453e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004540:	f7ff ffdc 	bl	80044fc <HAL_RCC_GetHCLKFreq>
 8004544:	4602      	mov	r2, r0
 8004546:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	0b5b      	lsrs	r3, r3, #13
 800454c:	f003 0307 	and.w	r3, r3, #7
 8004550:	4903      	ldr	r1, [pc, #12]	; (8004560 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004552:	5ccb      	ldrb	r3, [r1, r3]
 8004554:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004558:	4618      	mov	r0, r3
 800455a:	bd80      	pop	{r7, pc}
 800455c:	40023800 	.word	0x40023800
 8004560:	0802ec08 	.word	0x0802ec08

08004564 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004564:	b580      	push	{r7, lr}
 8004566:	b088      	sub	sp, #32
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800456c:	2300      	movs	r3, #0
 800456e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004570:	2300      	movs	r3, #0
 8004572:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004574:	2300      	movs	r3, #0
 8004576:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004578:	2300      	movs	r3, #0
 800457a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800457c:	2300      	movs	r3, #0
 800457e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0301 	and.w	r3, r3, #1
 8004588:	2b00      	cmp	r3, #0
 800458a:	d012      	beq.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800458c:	4b69      	ldr	r3, [pc, #420]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	4a68      	ldr	r2, [pc, #416]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004592:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004596:	6093      	str	r3, [r2, #8]
 8004598:	4b66      	ldr	r3, [pc, #408]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800459a:	689a      	ldr	r2, [r3, #8]
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045a0:	4964      	ldr	r1, [pc, #400]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045a2:	4313      	orrs	r3, r2
 80045a4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d101      	bne.n	80045b2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80045ae:	2301      	movs	r3, #1
 80045b0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d017      	beq.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80045be:	4b5d      	ldr	r3, [pc, #372]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80045c4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045cc:	4959      	ldr	r1, [pc, #356]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045ce:	4313      	orrs	r3, r2
 80045d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045dc:	d101      	bne.n	80045e2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80045de:	2301      	movs	r3, #1
 80045e0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80045ea:	2301      	movs	r3, #1
 80045ec:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d017      	beq.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80045fa:	4b4e      	ldr	r3, [pc, #312]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80045fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004600:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004608:	494a      	ldr	r1, [pc, #296]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800460a:	4313      	orrs	r3, r2
 800460c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004614:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004618:	d101      	bne.n	800461e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800461a:	2301      	movs	r3, #1
 800461c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004622:	2b00      	cmp	r3, #0
 8004624:	d101      	bne.n	800462a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8004626:	2301      	movs	r3, #1
 8004628:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004632:	2b00      	cmp	r3, #0
 8004634:	d001      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8004636:	2301      	movs	r3, #1
 8004638:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0320 	and.w	r3, r3, #32
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 808b 	beq.w	800475e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8004648:	4b3a      	ldr	r3, [pc, #232]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800464c:	4a39      	ldr	r2, [pc, #228]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800464e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004652:	6413      	str	r3, [r2, #64]	; 0x40
 8004654:	4b37      	ldr	r3, [pc, #220]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800465c:	60bb      	str	r3, [r7, #8]
 800465e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8004660:	4b35      	ldr	r3, [pc, #212]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a34      	ldr	r2, [pc, #208]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004666:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800466a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800466c:	f7fe ff52 	bl	8003514 <HAL_GetTick>
 8004670:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004672:	e008      	b.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004674:	f7fe ff4e 	bl	8003514 <HAL_GetTick>
 8004678:	4602      	mov	r2, r0
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	1ad3      	subs	r3, r2, r3
 800467e:	2b64      	cmp	r3, #100	; 0x64
 8004680:	d901      	bls.n	8004686 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e38f      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8004686:	4b2c      	ldr	r3, [pc, #176]	; (8004738 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800468e:	2b00      	cmp	r3, #0
 8004690:	d0f0      	beq.n	8004674 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004692:	4b28      	ldr	r3, [pc, #160]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004694:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004696:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800469a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d035      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046aa:	693a      	ldr	r2, [r7, #16]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d02e      	beq.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80046b0:	4b20      	ldr	r3, [pc, #128]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046b8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80046ba:	4b1e      	ldr	r3, [pc, #120]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046be:	4a1d      	ldr	r2, [pc, #116]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c4:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80046c6:	4b1b      	ldr	r3, [pc, #108]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046ca:	4a1a      	ldr	r2, [pc, #104]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046d0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80046d2:	4a18      	ldr	r2, [pc, #96]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80046d8:	4b16      	ldr	r3, [pc, #88]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80046da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80046dc:	f003 0301 	and.w	r3, r3, #1
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d114      	bne.n	800470e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fe ff16 	bl	8003514 <HAL_GetTick>
 80046e8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80046ea:	e00a      	b.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80046ec:	f7fe ff12 	bl	8003514 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	697b      	ldr	r3, [r7, #20]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	f241 3288 	movw	r2, #5000	; 0x1388
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d901      	bls.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80046fe:	2303      	movs	r3, #3
 8004700:	e351      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004702:	4b0c      	ldr	r3, [pc, #48]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d0ee      	beq.n	80046ec <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004712:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004716:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800471a:	d111      	bne.n	8004740 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800471c:	4b05      	ldr	r3, [pc, #20]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004728:	4b04      	ldr	r3, [pc, #16]	; (800473c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800472a:	400b      	ands	r3, r1
 800472c:	4901      	ldr	r1, [pc, #4]	; (8004734 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
 8004732:	e00b      	b.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8004734:	40023800 	.word	0x40023800
 8004738:	40007000 	.word	0x40007000
 800473c:	0ffffcff 	.word	0x0ffffcff
 8004740:	4bac      	ldr	r3, [pc, #688]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4aab      	ldr	r2, [pc, #684]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004746:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800474a:	6093      	str	r3, [r2, #8]
 800474c:	4ba9      	ldr	r3, [pc, #676]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800474e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004754:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004758:	49a6      	ldr	r1, [pc, #664]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800475a:	4313      	orrs	r3, r2
 800475c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 0310 	and.w	r3, r3, #16
 8004766:	2b00      	cmp	r3, #0
 8004768:	d010      	beq.n	800478c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800476a:	4ba2      	ldr	r3, [pc, #648]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800476c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004770:	4aa0      	ldr	r2, [pc, #640]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004772:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004776:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800477a:	4b9e      	ldr	r3, [pc, #632]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800477c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004784:	499b      	ldr	r1, [pc, #620]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004786:	4313      	orrs	r3, r2
 8004788:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004794:	2b00      	cmp	r3, #0
 8004796:	d00a      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004798:	4b96      	ldr	r3, [pc, #600]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800479a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800479e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80047a6:	4993      	ldr	r1, [pc, #588]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047a8:	4313      	orrs	r3, r2
 80047aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d00a      	beq.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80047ba:	4b8e      	ldr	r3, [pc, #568]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047c0:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80047c8:	498a      	ldr	r1, [pc, #552]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ca:	4313      	orrs	r3, r2
 80047cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d00a      	beq.n	80047f2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80047dc:	4b85      	ldr	r3, [pc, #532]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047e2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ea:	4982      	ldr	r1, [pc, #520]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80047ec:	4313      	orrs	r3, r2
 80047ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d00a      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80047fe:	4b7d      	ldr	r3, [pc, #500]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004800:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004804:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800480c:	4979      	ldr	r1, [pc, #484]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800480e:	4313      	orrs	r3, r2
 8004810:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800481c:	2b00      	cmp	r3, #0
 800481e:	d00a      	beq.n	8004836 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004820:	4b74      	ldr	r3, [pc, #464]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f023 0203 	bic.w	r2, r3, #3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800482e:	4971      	ldr	r1, [pc, #452]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004830:	4313      	orrs	r3, r2
 8004832:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800483e:	2b00      	cmp	r3, #0
 8004840:	d00a      	beq.n	8004858 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004842:	4b6c      	ldr	r3, [pc, #432]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004844:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004848:	f023 020c 	bic.w	r2, r3, #12
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004850:	4968      	ldr	r1, [pc, #416]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004852:	4313      	orrs	r3, r2
 8004854:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00a      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004864:	4b63      	ldr	r3, [pc, #396]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004872:	4960      	ldr	r1, [pc, #384]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004874:	4313      	orrs	r3, r2
 8004876:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004882:	2b00      	cmp	r3, #0
 8004884:	d00a      	beq.n	800489c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004886:	4b5b      	ldr	r3, [pc, #364]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004888:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800488c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004894:	4957      	ldr	r1, [pc, #348]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004896:	4313      	orrs	r3, r2
 8004898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d00a      	beq.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048a8:	4b52      	ldr	r3, [pc, #328]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	494f      	ldr	r1, [pc, #316]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048b8:	4313      	orrs	r3, r2
 80048ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d00a      	beq.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80048ca:	4b4a      	ldr	r3, [pc, #296]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048d0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048d8:	4946      	ldr	r1, [pc, #280]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048da:	4313      	orrs	r3, r2
 80048dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d00a      	beq.n	8004902 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80048ec:	4b41      	ldr	r3, [pc, #260]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fa:	493e      	ldr	r1, [pc, #248]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80048fc:	4313      	orrs	r3, r2
 80048fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00a      	beq.n	8004924 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800490e:	4b39      	ldr	r3, [pc, #228]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004910:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004914:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800491c:	4935      	ldr	r1, [pc, #212]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800491e:	4313      	orrs	r3, r2
 8004920:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d00a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004930:	4b30      	ldr	r3, [pc, #192]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004932:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004936:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800493e:	492d      	ldr	r1, [pc, #180]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004940:	4313      	orrs	r3, r2
 8004942:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800494e:	2b00      	cmp	r3, #0
 8004950:	d011      	beq.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004952:	4b28      	ldr	r3, [pc, #160]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004958:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004960:	4924      	ldr	r1, [pc, #144]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800496c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004970:	d101      	bne.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004972:	2301      	movs	r3, #1
 8004974:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f003 0308 	and.w	r3, r3, #8
 800497e:	2b00      	cmp	r3, #0
 8004980:	d001      	beq.n	8004986 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004982:	2301      	movs	r3, #1
 8004984:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d00a      	beq.n	80049a8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004992:	4b18      	ldr	r3, [pc, #96]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004994:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004998:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049a0:	4914      	ldr	r1, [pc, #80]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d00b      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80049b4:	4b0f      	ldr	r3, [pc, #60]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049ba:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80049c4:	490b      	ldr	r1, [pc, #44]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d00f      	beq.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80049d8:	4b06      	ldr	r3, [pc, #24]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049de:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80049e8:	4902      	ldr	r1, [pc, #8]	; (80049f4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80049ea:	4313      	orrs	r3, r2
 80049ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80049f0:	e002      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80049f2:	bf00      	nop
 80049f4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d00b      	beq.n	8004a1c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004a04:	4b8a      	ldr	r3, [pc, #552]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a06:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a0a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a14:	4986      	ldr	r1, [pc, #536]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a16:	4313      	orrs	r3, r2
 8004a18:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d00b      	beq.n	8004a40 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004a28:	4b81      	ldr	r3, [pc, #516]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a2e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004a38:	497d      	ldr	r1, [pc, #500]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a3a:	4313      	orrs	r3, r2
 8004a3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004a40:	69fb      	ldr	r3, [r7, #28]
 8004a42:	2b01      	cmp	r3, #1
 8004a44:	d006      	beq.n	8004a54 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	f000 80d6 	beq.w	8004c00 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004a54:	4b76      	ldr	r3, [pc, #472]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a75      	ldr	r2, [pc, #468]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a5a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004a5e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004a60:	f7fe fd58 	bl	8003514 <HAL_GetTick>
 8004a64:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a66:	e008      	b.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004a68:	f7fe fd54 	bl	8003514 <HAL_GetTick>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	1ad3      	subs	r3, r2, r3
 8004a72:	2b64      	cmp	r3, #100	; 0x64
 8004a74:	d901      	bls.n	8004a7a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004a76:	2303      	movs	r3, #3
 8004a78:	e195      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004a7a:	4b6d      	ldr	r3, [pc, #436]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d1f0      	bne.n	8004a68 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 0301 	and.w	r3, r3, #1
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d021      	beq.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d11d      	bne.n	8004ad6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004a9a:	4b65      	ldr	r3, [pc, #404]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004a9c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aa0:	0c1b      	lsrs	r3, r3, #16
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004aa8:	4b61      	ldr	r3, [pc, #388]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004aae:	0e1b      	lsrs	r3, r3, #24
 8004ab0:	f003 030f 	and.w	r3, r3, #15
 8004ab4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	019a      	lsls	r2, r3, #6
 8004abc:	693b      	ldr	r3, [r7, #16]
 8004abe:	041b      	lsls	r3, r3, #16
 8004ac0:	431a      	orrs	r2, r3
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	061b      	lsls	r3, r3, #24
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	689b      	ldr	r3, [r3, #8]
 8004acc:	071b      	lsls	r3, r3, #28
 8004ace:	4958      	ldr	r1, [pc, #352]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004aea:	d00a      	beq.n	8004b02 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d02e      	beq.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004afc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b00:	d129      	bne.n	8004b56 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004b02:	4b4b      	ldr	r3, [pc, #300]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b08:	0c1b      	lsrs	r3, r3, #16
 8004b0a:	f003 0303 	and.w	r3, r3, #3
 8004b0e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b10:	4b47      	ldr	r3, [pc, #284]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b12:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b16:	0f1b      	lsrs	r3, r3, #28
 8004b18:	f003 0307 	and.w	r3, r3, #7
 8004b1c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	019a      	lsls	r2, r3, #6
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	041b      	lsls	r3, r3, #16
 8004b28:	431a      	orrs	r2, r3
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	68db      	ldr	r3, [r3, #12]
 8004b2e:	061b      	lsls	r3, r3, #24
 8004b30:	431a      	orrs	r2, r3
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	071b      	lsls	r3, r3, #28
 8004b36:	493e      	ldr	r1, [pc, #248]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b38:	4313      	orrs	r3, r2
 8004b3a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8004b3e:	4b3c      	ldr	r3, [pc, #240]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004b44:	f023 021f 	bic.w	r2, r3, #31
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	3b01      	subs	r3, #1
 8004b4e:	4938      	ldr	r1, [pc, #224]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b50:	4313      	orrs	r3, r2
 8004b52:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d01d      	beq.n	8004b9e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004b62:	4b33      	ldr	r3, [pc, #204]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b64:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b68:	0e1b      	lsrs	r3, r3, #24
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004b70:	4b2f      	ldr	r3, [pc, #188]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b76:	0f1b      	lsrs	r3, r3, #28
 8004b78:	f003 0307 	and.w	r3, r3, #7
 8004b7c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	019a      	lsls	r2, r3, #6
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	041b      	lsls	r3, r3, #16
 8004b8a:	431a      	orrs	r2, r3
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	061b      	lsls	r3, r3, #24
 8004b90:	431a      	orrs	r2, r3
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	071b      	lsls	r3, r3, #28
 8004b96:	4926      	ldr	r1, [pc, #152]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d011      	beq.n	8004bce <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	019a      	lsls	r2, r3, #6
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	041b      	lsls	r3, r3, #16
 8004bb6:	431a      	orrs	r2, r3
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	68db      	ldr	r3, [r3, #12]
 8004bbc:	061b      	lsls	r3, r3, #24
 8004bbe:	431a      	orrs	r2, r3
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	689b      	ldr	r3, [r3, #8]
 8004bc4:	071b      	lsls	r3, r3, #28
 8004bc6:	491a      	ldr	r1, [pc, #104]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bc8:	4313      	orrs	r3, r2
 8004bca:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8004bce:	4b18      	ldr	r3, [pc, #96]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bd4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004bd8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004bda:	f7fe fc9b 	bl	8003514 <HAL_GetTick>
 8004bde:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004be0:	e008      	b.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004be2:	f7fe fc97 	bl	8003514 <HAL_GetTick>
 8004be6:	4602      	mov	r2, r0
 8004be8:	697b      	ldr	r3, [r7, #20]
 8004bea:	1ad3      	subs	r3, r2, r3
 8004bec:	2b64      	cmp	r3, #100	; 0x64
 8004bee:	d901      	bls.n	8004bf4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004bf0:	2303      	movs	r3, #3
 8004bf2:	e0d8      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004bf4:	4b0e      	ldr	r3, [pc, #56]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d0f0      	beq.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	f040 80ce 	bne.w	8004da4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004c08:	4b09      	ldr	r3, [pc, #36]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	4a08      	ldr	r2, [pc, #32]	; (8004c30 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004c0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c14:	f7fe fc7e 	bl	8003514 <HAL_GetTick>
 8004c18:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c1a:	e00b      	b.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004c1c:	f7fe fc7a 	bl	8003514 <HAL_GetTick>
 8004c20:	4602      	mov	r2, r0
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	1ad3      	subs	r3, r2, r3
 8004c26:	2b64      	cmp	r3, #100	; 0x64
 8004c28:	d904      	bls.n	8004c34 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e0bb      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 8004c2e:	bf00      	nop
 8004c30:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004c34:	4b5e      	ldr	r3, [pc, #376]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004c3c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004c40:	d0ec      	beq.n	8004c1c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d003      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d009      	beq.n	8004c6a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d02e      	beq.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d12a      	bne.n	8004cc0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004c6a:	4b51      	ldr	r3, [pc, #324]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c70:	0c1b      	lsrs	r3, r3, #16
 8004c72:	f003 0303 	and.w	r3, r3, #3
 8004c76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004c78:	4b4d      	ldr	r3, [pc, #308]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c7e:	0f1b      	lsrs	r3, r3, #28
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	019a      	lsls	r2, r3, #6
 8004c8c:	693b      	ldr	r3, [r7, #16]
 8004c8e:	041b      	lsls	r3, r3, #16
 8004c90:	431a      	orrs	r2, r3
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	699b      	ldr	r3, [r3, #24]
 8004c96:	061b      	lsls	r3, r3, #24
 8004c98:	431a      	orrs	r2, r3
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	071b      	lsls	r3, r3, #28
 8004c9e:	4944      	ldr	r1, [pc, #272]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca0:	4313      	orrs	r3, r2
 8004ca2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004ca6:	4b42      	ldr	r3, [pc, #264]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004cac:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	021b      	lsls	r3, r3, #8
 8004cb8:	493d      	ldr	r1, [pc, #244]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d022      	beq.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004cd0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004cd4:	d11d      	bne.n	8004d12 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004cd6:	4b36      	ldr	r3, [pc, #216]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cdc:	0e1b      	lsrs	r3, r3, #24
 8004cde:	f003 030f 	and.w	r3, r3, #15
 8004ce2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004ce4:	4b32      	ldr	r3, [pc, #200]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cea:	0f1b      	lsrs	r3, r3, #28
 8004cec:	f003 0307 	and.w	r3, r3, #7
 8004cf0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695b      	ldr	r3, [r3, #20]
 8004cf6:	019a      	lsls	r2, r3, #6
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6a1b      	ldr	r3, [r3, #32]
 8004cfc:	041b      	lsls	r3, r3, #16
 8004cfe:	431a      	orrs	r2, r3
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	061b      	lsls	r3, r3, #24
 8004d04:	431a      	orrs	r2, r3
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	071b      	lsls	r3, r3, #28
 8004d0a:	4929      	ldr	r1, [pc, #164]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f003 0308 	and.w	r3, r3, #8
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d028      	beq.n	8004d70 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004d1e:	4b24      	ldr	r3, [pc, #144]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d24:	0e1b      	lsrs	r3, r3, #24
 8004d26:	f003 030f 	and.w	r3, r3, #15
 8004d2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8004d2c:	4b20      	ldr	r3, [pc, #128]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d32:	0c1b      	lsrs	r3, r3, #16
 8004d34:	f003 0303 	and.w	r3, r3, #3
 8004d38:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	019a      	lsls	r2, r3, #6
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	431a      	orrs	r2, r3
 8004d46:	693b      	ldr	r3, [r7, #16]
 8004d48:	061b      	lsls	r3, r3, #24
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	071b      	lsls	r3, r3, #28
 8004d52:	4917      	ldr	r1, [pc, #92]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d54:	4313      	orrs	r3, r2
 8004d56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8004d5a:	4b15      	ldr	r3, [pc, #84]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004d60:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	4911      	ldr	r1, [pc, #68]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004d70:	4b0f      	ldr	r3, [pc, #60]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	4a0e      	ldr	r2, [pc, #56]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d7a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d7c:	f7fe fbca 	bl	8003514 <HAL_GetTick>
 8004d80:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d82:	e008      	b.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004d84:	f7fe fbc6 	bl	8003514 <HAL_GetTick>
 8004d88:	4602      	mov	r2, r0
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	1ad3      	subs	r3, r2, r3
 8004d8e:	2b64      	cmp	r3, #100	; 0x64
 8004d90:	d901      	bls.n	8004d96 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004d92:	2303      	movs	r3, #3
 8004d94:	e007      	b.n	8004da6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004d96:	4b06      	ldr	r3, [pc, #24]	; (8004db0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d9e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004da2:	d1ef      	bne.n	8004d84 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3720      	adds	r7, #32
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	40023800 	.word	0x40023800

08004db4 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b082      	sub	sp, #8
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d101      	bne.n	8004dc6 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 8004dc2:	2301      	movs	r3, #1
 8004dc4:	e01c      	b.n	8004e00 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	795b      	ldrb	r3, [r3, #5]
 8004dca:	b2db      	uxtb	r3, r3
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d105      	bne.n	8004ddc <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2200      	movs	r2, #0
 8004dd4:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 8004dd6:	6878      	ldr	r0, [r7, #4]
 8004dd8:	f7fc fdd8 	bl	800198c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	681b      	ldr	r3, [r3, #0]
 8004de6:	681a      	ldr	r2, [r3, #0]
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f042 0204 	orr.w	r2, r2, #4
 8004df0:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	2201      	movs	r2, #1
 8004df6:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8004dfe:	2300      	movs	r3, #0
}
 8004e00:	4618      	mov	r0, r3
 8004e02:	3708      	adds	r7, #8
 8004e04:	46bd      	mov	sp, r7
 8004e06:	bd80      	pop	{r7, pc}

08004e08 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b084      	sub	sp, #16
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	6078      	str	r0, [r7, #4]
 8004e10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004e12:	2300      	movs	r3, #0
 8004e14:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	791b      	ldrb	r3, [r3, #4]
 8004e1a:	2b01      	cmp	r3, #1
 8004e1c:	d101      	bne.n	8004e22 <HAL_RNG_GenerateRandomNumber+0x1a>
 8004e1e:	2302      	movs	r3, #2
 8004e20:	e03d      	b.n	8004e9e <HAL_RNG_GenerateRandomNumber+0x96>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2201      	movs	r2, #1
 8004e26:	711a      	strb	r2, [r3, #4]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	795b      	ldrb	r3, [r3, #5]
 8004e2c:	b2db      	uxtb	r3, r3
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d12c      	bne.n	8004e8c <HAL_RNG_GenerateRandomNumber+0x84>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	2202      	movs	r2, #2
 8004e36:	715a      	strb	r2, [r3, #5]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004e38:	f7fe fb6c 	bl	8003514 <HAL_GetTick>
 8004e3c:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e3e:	e011      	b.n	8004e64 <HAL_RNG_GenerateRandomNumber+0x5c>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8004e40:	f7fe fb68 	bl	8003514 <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	2b02      	cmp	r3, #2
 8004e4c:	d90a      	bls.n	8004e64 <HAL_RNG_GenerateRandomNumber+0x5c>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	2201      	movs	r2, #1
 8004e52:	715a      	strb	r2, [r3, #5]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2202      	movs	r2, #2
 8004e58:	609a      	str	r2, [r3, #8]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2200      	movs	r2, #0
 8004e5e:	711a      	strb	r2, [r3, #4]
        return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e01c      	b.n	8004e9e <HAL_RNG_GenerateRandomNumber+0x96>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	685b      	ldr	r3, [r3, #4]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d1e6      	bne.n	8004e40 <HAL_RNG_GenerateRandomNumber+0x38>
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	689a      	ldr	r2, [r3, #8]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	60da      	str	r2, [r3, #12]
    *random32bit = hrng->RandomNumber;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68da      	ldr	r2, [r3, #12]
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	601a      	str	r2, [r3, #0]

    hrng->State = HAL_RNG_STATE_READY;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2201      	movs	r2, #1
 8004e88:	715a      	strb	r2, [r3, #5]
 8004e8a:	e004      	b.n	8004e96 <HAL_RNG_GenerateRandomNumber+0x8e>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	2204      	movs	r2, #4
 8004e90:	609a      	str	r2, [r3, #8]
    status = HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2200      	movs	r2, #0
 8004e9a:	711a      	strb	r2, [r3, #4]

  return status;
 8004e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3710      	adds	r7, #16
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}

08004ea6 <HAL_RNG_GetRandomNumber>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval Random value
  */
uint32_t HAL_RNG_GetRandomNumber(RNG_HandleTypeDef *hrng)
{
 8004ea6:	b580      	push	{r7, lr}
 8004ea8:	b082      	sub	sp, #8
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
  if(HAL_RNG_GenerateRandomNumber(hrng, &(hrng->RandomNumber)) == HAL_OK)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	330c      	adds	r3, #12
 8004eb2:	4619      	mov	r1, r3
 8004eb4:	6878      	ldr	r0, [r7, #4]
 8004eb6:	f7ff ffa7 	bl	8004e08 <HAL_RNG_GenerateRandomNumber>
 8004eba:	4603      	mov	r3, r0
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d102      	bne.n	8004ec6 <HAL_RNG_GetRandomNumber+0x20>
  {
    return hrng->RandomNumber;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	68db      	ldr	r3, [r3, #12]
 8004ec4:	e000      	b.n	8004ec8 <HAL_RNG_GetRandomNumber+0x22>
  }
  else
  {
    return 0U;
 8004ec6:	2300      	movs	r3, #0
  }
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3708      	adds	r7, #8
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	bd80      	pop	{r7, pc}

08004ed0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d101      	bne.n	8004ee2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e09d      	b.n	800501e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d108      	bne.n	8004efc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ef2:	d009      	beq.n	8004f08 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	61da      	str	r2, [r3, #28]
 8004efa:	e005      	b.n	8004f08 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2200      	movs	r2, #0
 8004f06:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f14:	b2db      	uxtb	r3, r3
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d106      	bne.n	8004f28 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fd90 	bl	8001a48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	2202      	movs	r2, #2
 8004f2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004f3e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	68db      	ldr	r3, [r3, #12]
 8004f44:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f48:	d902      	bls.n	8004f50 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	60fb      	str	r3, [r7, #12]
 8004f4e:	e002      	b.n	8004f56 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004f50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f54:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	68db      	ldr	r3, [r3, #12]
 8004f5a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004f5e:	d007      	beq.n	8004f70 <HAL_SPI_Init+0xa0>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	68db      	ldr	r3, [r3, #12]
 8004f64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004f68:	d002      	beq.n	8004f70 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2200      	movs	r2, #0
 8004f6e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	689b      	ldr	r3, [r3, #8]
 8004f7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004f80:	431a      	orrs	r2, r3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	691b      	ldr	r3, [r3, #16]
 8004f86:	f003 0302 	and.w	r3, r3, #2
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	695b      	ldr	r3, [r3, #20]
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	431a      	orrs	r2, r3
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	699b      	ldr	r3, [r3, #24]
 8004f9a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f9e:	431a      	orrs	r2, r3
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	69db      	ldr	r3, [r3, #28]
 8004fa4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a1b      	ldr	r3, [r3, #32]
 8004fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004fb2:	ea42 0103 	orr.w	r1, r2, r3
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	430a      	orrs	r2, r1
 8004fc4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	699b      	ldr	r3, [r3, #24]
 8004fca:	0c1b      	lsrs	r3, r3, #16
 8004fcc:	f003 0204 	and.w	r2, r3, #4
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd4:	f003 0310 	and.w	r3, r3, #16
 8004fd8:	431a      	orrs	r2, r3
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	f003 0308 	and.w	r3, r3, #8
 8004fe2:	431a      	orrs	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68db      	ldr	r3, [r3, #12]
 8004fe8:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004fec:	ea42 0103 	orr.w	r1, r2, r3
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	430a      	orrs	r2, r1
 8004ffc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	69da      	ldr	r2, [r3, #28]
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800500c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800501c:	2300      	movs	r3, #0
}
 800501e:	4618      	mov	r0, r3
 8005020:	3710      	adds	r7, #16
 8005022:	46bd      	mov	sp, r7
 8005024:	bd80      	pop	{r7, pc}

08005026 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005026:	b580      	push	{r7, lr}
 8005028:	b088      	sub	sp, #32
 800502a:	af00      	add	r7, sp, #0
 800502c:	60f8      	str	r0, [r7, #12]
 800502e:	60b9      	str	r1, [r7, #8]
 8005030:	603b      	str	r3, [r7, #0]
 8005032:	4613      	mov	r3, r2
 8005034:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005036:	2300      	movs	r3, #0
 8005038:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005040:	2b01      	cmp	r3, #1
 8005042:	d101      	bne.n	8005048 <HAL_SPI_Transmit+0x22>
 8005044:	2302      	movs	r3, #2
 8005046:	e158      	b.n	80052fa <HAL_SPI_Transmit+0x2d4>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	2201      	movs	r2, #1
 800504c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005050:	f7fe fa60 	bl	8003514 <HAL_GetTick>
 8005054:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005056:	88fb      	ldrh	r3, [r7, #6]
 8005058:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005060:	b2db      	uxtb	r3, r3
 8005062:	2b01      	cmp	r3, #1
 8005064:	d002      	beq.n	800506c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005066:	2302      	movs	r3, #2
 8005068:	77fb      	strb	r3, [r7, #31]
    goto error;
 800506a:	e13d      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d002      	beq.n	8005078 <HAL_SPI_Transmit+0x52>
 8005072:	88fb      	ldrh	r3, [r7, #6]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d102      	bne.n	800507e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	77fb      	strb	r3, [r7, #31]
    goto error;
 800507c:	e134      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2203      	movs	r2, #3
 8005082:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	2200      	movs	r2, #0
 800508a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	88fa      	ldrh	r2, [r7, #6]
 8005096:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	88fa      	ldrh	r2, [r7, #6]
 800509c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	2200      	movs	r2, #0
 80050a8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	2200      	movs	r2, #0
 80050b8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050c8:	d10f      	bne.n	80050ea <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050d8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	681a      	ldr	r2, [r3, #0]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80050e8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050f4:	2b40      	cmp	r3, #64	; 0x40
 80050f6:	d007      	beq.n	8005108 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005106:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005110:	d94b      	bls.n	80051aa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	685b      	ldr	r3, [r3, #4]
 8005116:	2b00      	cmp	r3, #0
 8005118:	d002      	beq.n	8005120 <HAL_SPI_Transmit+0xfa>
 800511a:	8afb      	ldrh	r3, [r7, #22]
 800511c:	2b01      	cmp	r3, #1
 800511e:	d13e      	bne.n	800519e <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005124:	881a      	ldrh	r2, [r3, #0]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005130:	1c9a      	adds	r2, r3, #2
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800513a:	b29b      	uxth	r3, r3
 800513c:	3b01      	subs	r3, #1
 800513e:	b29a      	uxth	r2, r3
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005144:	e02b      	b.n	800519e <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f003 0302 	and.w	r3, r3, #2
 8005150:	2b02      	cmp	r3, #2
 8005152:	d112      	bne.n	800517a <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005158:	881a      	ldrh	r2, [r3, #0]
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005164:	1c9a      	adds	r2, r3, #2
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800516e:	b29b      	uxth	r3, r3
 8005170:	3b01      	subs	r3, #1
 8005172:	b29a      	uxth	r2, r3
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005178:	e011      	b.n	800519e <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800517a:	f7fe f9cb 	bl	8003514 <HAL_GetTick>
 800517e:	4602      	mov	r2, r0
 8005180:	69bb      	ldr	r3, [r7, #24]
 8005182:	1ad3      	subs	r3, r2, r3
 8005184:	683a      	ldr	r2, [r7, #0]
 8005186:	429a      	cmp	r2, r3
 8005188:	d803      	bhi.n	8005192 <HAL_SPI_Transmit+0x16c>
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005190:	d102      	bne.n	8005198 <HAL_SPI_Transmit+0x172>
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005198:	2303      	movs	r3, #3
 800519a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800519c:	e0a4      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d1ce      	bne.n	8005146 <HAL_SPI_Transmit+0x120>
 80051a8:	e07c      	b.n	80052a4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d002      	beq.n	80051b8 <HAL_SPI_Transmit+0x192>
 80051b2:	8afb      	ldrh	r3, [r7, #22]
 80051b4:	2b01      	cmp	r3, #1
 80051b6:	d170      	bne.n	800529a <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051bc:	b29b      	uxth	r3, r3
 80051be:	2b01      	cmp	r3, #1
 80051c0:	d912      	bls.n	80051e8 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	881a      	ldrh	r2, [r3, #0]
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051d2:	1c9a      	adds	r2, r3, #2
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80051dc:	b29b      	uxth	r3, r3
 80051de:	3b02      	subs	r3, #2
 80051e0:	b29a      	uxth	r2, r3
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	87da      	strh	r2, [r3, #62]	; 0x3e
 80051e6:	e058      	b.n	800529a <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	330c      	adds	r3, #12
 80051f2:	7812      	ldrb	r2, [r2, #0]
 80051f4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051fa:	1c5a      	adds	r2, r3, #1
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005204:	b29b      	uxth	r3, r3
 8005206:	3b01      	subs	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800520e:	e044      	b.n	800529a <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	689b      	ldr	r3, [r3, #8]
 8005216:	f003 0302 	and.w	r3, r3, #2
 800521a:	2b02      	cmp	r3, #2
 800521c:	d12b      	bne.n	8005276 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005222:	b29b      	uxth	r3, r3
 8005224:	2b01      	cmp	r3, #1
 8005226:	d912      	bls.n	800524e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800522c:	881a      	ldrh	r2, [r3, #0]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005238:	1c9a      	adds	r2, r3, #2
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005242:	b29b      	uxth	r3, r3
 8005244:	3b02      	subs	r3, #2
 8005246:	b29a      	uxth	r2, r3
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800524c:	e025      	b.n	800529a <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	330c      	adds	r3, #12
 8005258:	7812      	ldrb	r2, [r2, #0]
 800525a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800526a:	b29b      	uxth	r3, r3
 800526c:	3b01      	subs	r3, #1
 800526e:	b29a      	uxth	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005274:	e011      	b.n	800529a <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005276:	f7fe f94d 	bl	8003514 <HAL_GetTick>
 800527a:	4602      	mov	r2, r0
 800527c:	69bb      	ldr	r3, [r7, #24]
 800527e:	1ad3      	subs	r3, r2, r3
 8005280:	683a      	ldr	r2, [r7, #0]
 8005282:	429a      	cmp	r2, r3
 8005284:	d803      	bhi.n	800528e <HAL_SPI_Transmit+0x268>
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	f1b3 3fff 	cmp.w	r3, #4294967295
 800528c:	d102      	bne.n	8005294 <HAL_SPI_Transmit+0x26e>
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d102      	bne.n	800529a <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005294:	2303      	movs	r3, #3
 8005296:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005298:	e026      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d1b5      	bne.n	8005210 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	6839      	ldr	r1, [r7, #0]
 80052a8:	68f8      	ldr	r0, [r7, #12]
 80052aa:	f000 f945 	bl	8005538 <SPI_EndRxTxTransaction>
 80052ae:	4603      	mov	r3, r0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d002      	beq.n	80052ba <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	2220      	movs	r2, #32
 80052b8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	689b      	ldr	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d10a      	bne.n	80052d8 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80052c2:	2300      	movs	r3, #0
 80052c4:	613b      	str	r3, [r7, #16]
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	68db      	ldr	r3, [r3, #12]
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	689b      	ldr	r3, [r3, #8]
 80052d4:	613b      	str	r3, [r7, #16]
 80052d6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d002      	beq.n	80052e6 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	77fb      	strb	r3, [r7, #31]
 80052e4:	e000      	b.n	80052e8 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80052e6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2201      	movs	r2, #1
 80052ec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80052f8:	7ffb      	ldrb	r3, [r7, #31]
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3720      	adds	r7, #32
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
	...

08005304 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b088      	sub	sp, #32
 8005308:	af00      	add	r7, sp, #0
 800530a:	60f8      	str	r0, [r7, #12]
 800530c:	60b9      	str	r1, [r7, #8]
 800530e:	603b      	str	r3, [r7, #0]
 8005310:	4613      	mov	r3, r2
 8005312:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005314:	f7fe f8fe 	bl	8003514 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531c:	1a9b      	subs	r3, r3, r2
 800531e:	683a      	ldr	r2, [r7, #0]
 8005320:	4413      	add	r3, r2
 8005322:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005324:	f7fe f8f6 	bl	8003514 <HAL_GetTick>
 8005328:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800532a:	4b39      	ldr	r3, [pc, #228]	; (8005410 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	015b      	lsls	r3, r3, #5
 8005330:	0d1b      	lsrs	r3, r3, #20
 8005332:	69fa      	ldr	r2, [r7, #28]
 8005334:	fb02 f303 	mul.w	r3, r2, r3
 8005338:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800533a:	e054      	b.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005342:	d050      	beq.n	80053e6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005344:	f7fe f8e6 	bl	8003514 <HAL_GetTick>
 8005348:	4602      	mov	r2, r0
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	1ad3      	subs	r3, r2, r3
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	429a      	cmp	r2, r3
 8005352:	d902      	bls.n	800535a <SPI_WaitFlagStateUntilTimeout+0x56>
 8005354:	69fb      	ldr	r3, [r7, #28]
 8005356:	2b00      	cmp	r3, #0
 8005358:	d13d      	bne.n	80053d6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685a      	ldr	r2, [r3, #4]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005368:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005372:	d111      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	689b      	ldr	r3, [r3, #8]
 8005378:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800537c:	d004      	beq.n	8005388 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	689b      	ldr	r3, [r3, #8]
 8005382:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005386:	d107      	bne.n	8005398 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	681a      	ldr	r2, [r3, #0]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005396:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800539c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80053a0:	d10f      	bne.n	80053c2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681a      	ldr	r2, [r3, #0]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80053b0:	601a      	str	r2, [r3, #0]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	681a      	ldr	r2, [r3, #0]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80053c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	2201      	movs	r2, #1
 80053c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80053d2:	2303      	movs	r3, #3
 80053d4:	e017      	b.n	8005406 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80053d6:	697b      	ldr	r3, [r7, #20]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80053dc:	2300      	movs	r3, #0
 80053de:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	3b01      	subs	r3, #1
 80053e4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	689a      	ldr	r2, [r3, #8]
 80053ec:	68bb      	ldr	r3, [r7, #8]
 80053ee:	4013      	ands	r3, r2
 80053f0:	68ba      	ldr	r2, [r7, #8]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	bf0c      	ite	eq
 80053f6:	2301      	moveq	r3, #1
 80053f8:	2300      	movne	r3, #0
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	461a      	mov	r2, r3
 80053fe:	79fb      	ldrb	r3, [r7, #7]
 8005400:	429a      	cmp	r2, r3
 8005402:	d19b      	bne.n	800533c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005404:	2300      	movs	r3, #0
}
 8005406:	4618      	mov	r0, r3
 8005408:	3720      	adds	r7, #32
 800540a:	46bd      	mov	sp, r7
 800540c:	bd80      	pop	{r7, pc}
 800540e:	bf00      	nop
 8005410:	20000000 	.word	0x20000000

08005414 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b088      	sub	sp, #32
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005422:	f7fe f877 	bl	8003514 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	1a9b      	subs	r3, r3, r2
 800542c:	683a      	ldr	r2, [r7, #0]
 800542e:	4413      	add	r3, r2
 8005430:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005432:	f7fe f86f 	bl	8003514 <HAL_GetTick>
 8005436:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005438:	4b3e      	ldr	r3, [pc, #248]	; (8005534 <SPI_WaitFifoStateUntilTimeout+0x120>)
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	4613      	mov	r3, r2
 800543e:	009b      	lsls	r3, r3, #2
 8005440:	4413      	add	r3, r2
 8005442:	00da      	lsls	r2, r3, #3
 8005444:	1ad3      	subs	r3, r2, r3
 8005446:	0d1b      	lsrs	r3, r3, #20
 8005448:	69fa      	ldr	r2, [r7, #28]
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005450:	e062      	b.n	8005518 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005458:	d109      	bne.n	800546e <SPI_WaitFifoStateUntilTimeout+0x5a>
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d106      	bne.n	800546e <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	330c      	adds	r3, #12
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	b2db      	uxtb	r3, r3
 800546a:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 800546c:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 800546e:	683b      	ldr	r3, [r7, #0]
 8005470:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005474:	d050      	beq.n	8005518 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005476:	f7fe f84d 	bl	8003514 <HAL_GetTick>
 800547a:	4602      	mov	r2, r0
 800547c:	69bb      	ldr	r3, [r7, #24]
 800547e:	1ad3      	subs	r3, r2, r3
 8005480:	69fa      	ldr	r2, [r7, #28]
 8005482:	429a      	cmp	r2, r3
 8005484:	d902      	bls.n	800548c <SPI_WaitFifoStateUntilTimeout+0x78>
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d13d      	bne.n	8005508 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800549a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a4:	d111      	bne.n	80054ca <SPI_WaitFifoStateUntilTimeout+0xb6>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80054ae:	d004      	beq.n	80054ba <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	689b      	ldr	r3, [r3, #8]
 80054b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80054b8:	d107      	bne.n	80054ca <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054c8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d2:	d10f      	bne.n	80054f4 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80054e2:	601a      	str	r2, [r3, #0]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80054f2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	2201      	movs	r2, #1
 80054f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	2200      	movs	r2, #0
 8005500:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e010      	b.n	800552a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005508:	693b      	ldr	r3, [r7, #16]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d101      	bne.n	8005512 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800550e:	2300      	movs	r3, #0
 8005510:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8005512:	693b      	ldr	r3, [r7, #16]
 8005514:	3b01      	subs	r3, #1
 8005516:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	689a      	ldr	r2, [r3, #8]
 800551e:	68bb      	ldr	r3, [r7, #8]
 8005520:	4013      	ands	r3, r2
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	429a      	cmp	r2, r3
 8005526:	d194      	bne.n	8005452 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8005528:	2300      	movs	r3, #0
}
 800552a:	4618      	mov	r0, r3
 800552c:	3720      	adds	r7, #32
 800552e:	46bd      	mov	sp, r7
 8005530:	bd80      	pop	{r7, pc}
 8005532:	bf00      	nop
 8005534:	20000000 	.word	0x20000000

08005538 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af02      	add	r7, sp, #8
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	9300      	str	r3, [sp, #0]
 8005548:	68bb      	ldr	r3, [r7, #8]
 800554a:	2200      	movs	r2, #0
 800554c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7ff ff5f 	bl	8005414 <SPI_WaitFifoStateUntilTimeout>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d007      	beq.n	800556c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005560:	f043 0220 	orr.w	r2, r3, #32
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005568:	2303      	movs	r3, #3
 800556a:	e027      	b.n	80055bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	2200      	movs	r2, #0
 8005574:	2180      	movs	r1, #128	; 0x80
 8005576:	68f8      	ldr	r0, [r7, #12]
 8005578:	f7ff fec4 	bl	8005304 <SPI_WaitFlagStateUntilTimeout>
 800557c:	4603      	mov	r3, r0
 800557e:	2b00      	cmp	r3, #0
 8005580:	d007      	beq.n	8005592 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005586:	f043 0220 	orr.w	r2, r3, #32
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e014      	b.n	80055bc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	9300      	str	r3, [sp, #0]
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	2200      	movs	r2, #0
 800559a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800559e:	68f8      	ldr	r0, [r7, #12]
 80055a0:	f7ff ff38 	bl	8005414 <SPI_WaitFifoStateUntilTimeout>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d007      	beq.n	80055ba <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055ae:	f043 0220 	orr.w	r2, r3, #32
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e000      	b.n	80055bc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80055ba:	2300      	movs	r3, #0
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3710      	adds	r7, #16
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d101      	bne.n	80055d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80055d2:	2301      	movs	r3, #1
 80055d4:	e049      	b.n	800566a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055dc:	b2db      	uxtb	r3, r3
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d106      	bne.n	80055f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f7fc fbea 	bl	8001dc4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2202      	movs	r2, #2
 80055f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	3304      	adds	r3, #4
 8005600:	4619      	mov	r1, r3
 8005602:	4610      	mov	r0, r2
 8005604:	f000 f994 	bl	8005930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	2201      	movs	r2, #1
 800560c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2201      	movs	r2, #1
 8005614:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2201      	movs	r2, #1
 800561c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2201      	movs	r2, #1
 8005624:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2201      	movs	r2, #1
 800562c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2201      	movs	r2, #1
 8005634:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	2201      	movs	r2, #1
 800563c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	2201      	movs	r2, #1
 8005644:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	2201      	movs	r2, #1
 800564c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2201      	movs	r2, #1
 8005654:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2201      	movs	r2, #1
 800565c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005668:	2300      	movs	r3, #0
}
 800566a:	4618      	mov	r0, r3
 800566c:	3708      	adds	r7, #8
 800566e:	46bd      	mov	sp, r7
 8005670:	bd80      	pop	{r7, pc}
	...

08005674 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005674:	b480      	push	{r7}
 8005676:	b085      	sub	sp, #20
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005682:	b2db      	uxtb	r3, r3
 8005684:	2b01      	cmp	r3, #1
 8005686:	d001      	beq.n	800568c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005688:	2301      	movs	r3, #1
 800568a:	e04c      	b.n	8005726 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	2202      	movs	r2, #2
 8005690:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	4a26      	ldr	r2, [pc, #152]	; (8005734 <HAL_TIM_Base_Start+0xc0>)
 800569a:	4293      	cmp	r3, r2
 800569c:	d022      	beq.n	80056e4 <HAL_TIM_Base_Start+0x70>
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056a6:	d01d      	beq.n	80056e4 <HAL_TIM_Base_Start+0x70>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	4a22      	ldr	r2, [pc, #136]	; (8005738 <HAL_TIM_Base_Start+0xc4>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d018      	beq.n	80056e4 <HAL_TIM_Base_Start+0x70>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	4a21      	ldr	r2, [pc, #132]	; (800573c <HAL_TIM_Base_Start+0xc8>)
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d013      	beq.n	80056e4 <HAL_TIM_Base_Start+0x70>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	4a1f      	ldr	r2, [pc, #124]	; (8005740 <HAL_TIM_Base_Start+0xcc>)
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d00e      	beq.n	80056e4 <HAL_TIM_Base_Start+0x70>
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4a1e      	ldr	r2, [pc, #120]	; (8005744 <HAL_TIM_Base_Start+0xd0>)
 80056cc:	4293      	cmp	r3, r2
 80056ce:	d009      	beq.n	80056e4 <HAL_TIM_Base_Start+0x70>
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	4a1c      	ldr	r2, [pc, #112]	; (8005748 <HAL_TIM_Base_Start+0xd4>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d004      	beq.n	80056e4 <HAL_TIM_Base_Start+0x70>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	4a1b      	ldr	r2, [pc, #108]	; (800574c <HAL_TIM_Base_Start+0xd8>)
 80056e0:	4293      	cmp	r3, r2
 80056e2:	d115      	bne.n	8005710 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	689a      	ldr	r2, [r3, #8]
 80056ea:	4b19      	ldr	r3, [pc, #100]	; (8005750 <HAL_TIM_Base_Start+0xdc>)
 80056ec:	4013      	ands	r3, r2
 80056ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d015      	beq.n	8005722 <HAL_TIM_Base_Start+0xae>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80056fc:	d011      	beq.n	8005722 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f042 0201 	orr.w	r2, r2, #1
 800570c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800570e:	e008      	b.n	8005722 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	681a      	ldr	r2, [r3, #0]
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f042 0201 	orr.w	r2, r2, #1
 800571e:	601a      	str	r2, [r3, #0]
 8005720:	e000      	b.n	8005724 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005722:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005724:	2300      	movs	r3, #0
}
 8005726:	4618      	mov	r0, r3
 8005728:	3714      	adds	r7, #20
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
 8005732:	bf00      	nop
 8005734:	40010000 	.word	0x40010000
 8005738:	40000400 	.word	0x40000400
 800573c:	40000800 	.word	0x40000800
 8005740:	40000c00 	.word	0x40000c00
 8005744:	40010400 	.word	0x40010400
 8005748:	40014000 	.word	0x40014000
 800574c:	40001800 	.word	0x40001800
 8005750:	00010007 	.word	0x00010007

08005754 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	6a1a      	ldr	r2, [r3, #32]
 8005762:	f241 1311 	movw	r3, #4369	; 0x1111
 8005766:	4013      	ands	r3, r2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d10f      	bne.n	800578c <HAL_TIM_Base_Stop+0x38>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	6a1a      	ldr	r2, [r3, #32]
 8005772:	f240 4344 	movw	r3, #1092	; 0x444
 8005776:	4013      	ands	r3, r2
 8005778:	2b00      	cmp	r3, #0
 800577a:	d107      	bne.n	800578c <HAL_TIM_Base_Stop+0x38>
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	681a      	ldr	r2, [r3, #0]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f022 0201 	bic.w	r2, r2, #1
 800578a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2201      	movs	r2, #1
 8005790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005794:	2300      	movs	r3, #0
}
 8005796:	4618      	mov	r0, r3
 8005798:	370c      	adds	r7, #12
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
	...

080057a4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057b4:	2b01      	cmp	r3, #1
 80057b6:	d101      	bne.n	80057bc <HAL_TIM_ConfigClockSource+0x18>
 80057b8:	2302      	movs	r3, #2
 80057ba:	e0b3      	b.n	8005924 <HAL_TIM_ConfigClockSource+0x180>
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	4b55      	ldr	r3, [pc, #340]	; (800592c <HAL_TIM_ConfigClockSource+0x188>)
 80057d8:	4013      	ands	r3, r2
 80057da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057dc:	68fb      	ldr	r3, [r7, #12]
 80057de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057e2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	68fa      	ldr	r2, [r7, #12]
 80057ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057f4:	d03e      	beq.n	8005874 <HAL_TIM_ConfigClockSource+0xd0>
 80057f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057fa:	f200 8087 	bhi.w	800590c <HAL_TIM_ConfigClockSource+0x168>
 80057fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005802:	f000 8085 	beq.w	8005910 <HAL_TIM_ConfigClockSource+0x16c>
 8005806:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800580a:	d87f      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x168>
 800580c:	2b70      	cmp	r3, #112	; 0x70
 800580e:	d01a      	beq.n	8005846 <HAL_TIM_ConfigClockSource+0xa2>
 8005810:	2b70      	cmp	r3, #112	; 0x70
 8005812:	d87b      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x168>
 8005814:	2b60      	cmp	r3, #96	; 0x60
 8005816:	d050      	beq.n	80058ba <HAL_TIM_ConfigClockSource+0x116>
 8005818:	2b60      	cmp	r3, #96	; 0x60
 800581a:	d877      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x168>
 800581c:	2b50      	cmp	r3, #80	; 0x50
 800581e:	d03c      	beq.n	800589a <HAL_TIM_ConfigClockSource+0xf6>
 8005820:	2b50      	cmp	r3, #80	; 0x50
 8005822:	d873      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x168>
 8005824:	2b40      	cmp	r3, #64	; 0x40
 8005826:	d058      	beq.n	80058da <HAL_TIM_ConfigClockSource+0x136>
 8005828:	2b40      	cmp	r3, #64	; 0x40
 800582a:	d86f      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x168>
 800582c:	2b30      	cmp	r3, #48	; 0x30
 800582e:	d064      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x156>
 8005830:	2b30      	cmp	r3, #48	; 0x30
 8005832:	d86b      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x168>
 8005834:	2b20      	cmp	r3, #32
 8005836:	d060      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x156>
 8005838:	2b20      	cmp	r3, #32
 800583a:	d867      	bhi.n	800590c <HAL_TIM_ConfigClockSource+0x168>
 800583c:	2b00      	cmp	r3, #0
 800583e:	d05c      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x156>
 8005840:	2b10      	cmp	r3, #16
 8005842:	d05a      	beq.n	80058fa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005844:	e062      	b.n	800590c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	6818      	ldr	r0, [r3, #0]
 800584a:	683b      	ldr	r3, [r7, #0]
 800584c:	6899      	ldr	r1, [r3, #8]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	685a      	ldr	r2, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	f000 f985 	bl	8005b64 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005868:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	68fa      	ldr	r2, [r7, #12]
 8005870:	609a      	str	r2, [r3, #8]
      break;
 8005872:	e04e      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	6818      	ldr	r0, [r3, #0]
 8005878:	683b      	ldr	r3, [r7, #0]
 800587a:	6899      	ldr	r1, [r3, #8]
 800587c:	683b      	ldr	r3, [r7, #0]
 800587e:	685a      	ldr	r2, [r3, #4]
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68db      	ldr	r3, [r3, #12]
 8005884:	f000 f96e 	bl	8005b64 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	689a      	ldr	r2, [r3, #8]
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005896:	609a      	str	r2, [r3, #8]
      break;
 8005898:	e03b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6818      	ldr	r0, [r3, #0]
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	6859      	ldr	r1, [r3, #4]
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	68db      	ldr	r3, [r3, #12]
 80058a6:	461a      	mov	r2, r3
 80058a8:	f000 f8e2 	bl	8005a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	2150      	movs	r1, #80	; 0x50
 80058b2:	4618      	mov	r0, r3
 80058b4:	f000 f93b 	bl	8005b2e <TIM_ITRx_SetConfig>
      break;
 80058b8:	e02b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	6859      	ldr	r1, [r3, #4]
 80058c2:	683b      	ldr	r3, [r7, #0]
 80058c4:	68db      	ldr	r3, [r3, #12]
 80058c6:	461a      	mov	r2, r3
 80058c8:	f000 f901 	bl	8005ace <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2160      	movs	r1, #96	; 0x60
 80058d2:	4618      	mov	r0, r3
 80058d4:	f000 f92b 	bl	8005b2e <TIM_ITRx_SetConfig>
      break;
 80058d8:	e01b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	6818      	ldr	r0, [r3, #0]
 80058de:	683b      	ldr	r3, [r7, #0]
 80058e0:	6859      	ldr	r1, [r3, #4]
 80058e2:	683b      	ldr	r3, [r7, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f000 f8c2 	bl	8005a70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2140      	movs	r1, #64	; 0x40
 80058f2:	4618      	mov	r0, r3
 80058f4:	f000 f91b 	bl	8005b2e <TIM_ITRx_SetConfig>
      break;
 80058f8:	e00b      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681a      	ldr	r2, [r3, #0]
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	4619      	mov	r1, r3
 8005904:	4610      	mov	r0, r2
 8005906:	f000 f912 	bl	8005b2e <TIM_ITRx_SetConfig>
        break;
 800590a:	e002      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800590c:	bf00      	nop
 800590e:	e000      	b.n	8005912 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005910:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005922:	2300      	movs	r3, #0
}
 8005924:	4618      	mov	r0, r3
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	fffeff88 	.word	0xfffeff88

08005930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005930:	b480      	push	{r7}
 8005932:	b085      	sub	sp, #20
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
 8005938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	4a40      	ldr	r2, [pc, #256]	; (8005a44 <TIM_Base_SetConfig+0x114>)
 8005944:	4293      	cmp	r3, r2
 8005946:	d013      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594e:	d00f      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	4a3d      	ldr	r2, [pc, #244]	; (8005a48 <TIM_Base_SetConfig+0x118>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00b      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a3c      	ldr	r2, [pc, #240]	; (8005a4c <TIM_Base_SetConfig+0x11c>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d007      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a3b      	ldr	r2, [pc, #236]	; (8005a50 <TIM_Base_SetConfig+0x120>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d003      	beq.n	8005970 <TIM_Base_SetConfig+0x40>
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	4a3a      	ldr	r2, [pc, #232]	; (8005a54 <TIM_Base_SetConfig+0x124>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d108      	bne.n	8005982 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005976:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	68fa      	ldr	r2, [r7, #12]
 800597e:	4313      	orrs	r3, r2
 8005980:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4a2f      	ldr	r2, [pc, #188]	; (8005a44 <TIM_Base_SetConfig+0x114>)
 8005986:	4293      	cmp	r3, r2
 8005988:	d02b      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005990:	d027      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	4a2c      	ldr	r2, [pc, #176]	; (8005a48 <TIM_Base_SetConfig+0x118>)
 8005996:	4293      	cmp	r3, r2
 8005998:	d023      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	4a2b      	ldr	r2, [pc, #172]	; (8005a4c <TIM_Base_SetConfig+0x11c>)
 800599e:	4293      	cmp	r3, r2
 80059a0:	d01f      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	4a2a      	ldr	r2, [pc, #168]	; (8005a50 <TIM_Base_SetConfig+0x120>)
 80059a6:	4293      	cmp	r3, r2
 80059a8:	d01b      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	4a29      	ldr	r2, [pc, #164]	; (8005a54 <TIM_Base_SetConfig+0x124>)
 80059ae:	4293      	cmp	r3, r2
 80059b0:	d017      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	4a28      	ldr	r2, [pc, #160]	; (8005a58 <TIM_Base_SetConfig+0x128>)
 80059b6:	4293      	cmp	r3, r2
 80059b8:	d013      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	4a27      	ldr	r2, [pc, #156]	; (8005a5c <TIM_Base_SetConfig+0x12c>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	d00f      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	4a26      	ldr	r2, [pc, #152]	; (8005a60 <TIM_Base_SetConfig+0x130>)
 80059c6:	4293      	cmp	r3, r2
 80059c8:	d00b      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	4a25      	ldr	r2, [pc, #148]	; (8005a64 <TIM_Base_SetConfig+0x134>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d007      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a24      	ldr	r2, [pc, #144]	; (8005a68 <TIM_Base_SetConfig+0x138>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_Base_SetConfig+0xb2>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a23      	ldr	r2, [pc, #140]	; (8005a6c <TIM_Base_SetConfig+0x13c>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d108      	bne.n	80059f4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	68fa      	ldr	r2, [r7, #12]
 80059f0:	4313      	orrs	r3, r2
 80059f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	695b      	ldr	r3, [r3, #20]
 80059fe:	4313      	orrs	r3, r2
 8005a00:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	68fa      	ldr	r2, [r7, #12]
 8005a06:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	689a      	ldr	r2, [r3, #8]
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	681a      	ldr	r2, [r3, #0]
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	4a0a      	ldr	r2, [pc, #40]	; (8005a44 <TIM_Base_SetConfig+0x114>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d003      	beq.n	8005a28 <TIM_Base_SetConfig+0xf8>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	4a0c      	ldr	r2, [pc, #48]	; (8005a54 <TIM_Base_SetConfig+0x124>)
 8005a24:	4293      	cmp	r3, r2
 8005a26:	d103      	bne.n	8005a30 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	691a      	ldr	r2, [r3, #16]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	615a      	str	r2, [r3, #20]
}
 8005a36:	bf00      	nop
 8005a38:	3714      	adds	r7, #20
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	40010000 	.word	0x40010000
 8005a48:	40000400 	.word	0x40000400
 8005a4c:	40000800 	.word	0x40000800
 8005a50:	40000c00 	.word	0x40000c00
 8005a54:	40010400 	.word	0x40010400
 8005a58:	40014000 	.word	0x40014000
 8005a5c:	40014400 	.word	0x40014400
 8005a60:	40014800 	.word	0x40014800
 8005a64:	40001800 	.word	0x40001800
 8005a68:	40001c00 	.word	0x40001c00
 8005a6c:	40002000 	.word	0x40002000

08005a70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005a70:	b480      	push	{r7}
 8005a72:	b087      	sub	sp, #28
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	f023 0201 	bic.w	r2, r3, #1
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	011b      	lsls	r3, r3, #4
 8005aa0:	693a      	ldr	r2, [r7, #16]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f023 030a 	bic.w	r3, r3, #10
 8005aac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	4313      	orrs	r3, r2
 8005ab4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	693a      	ldr	r2, [r7, #16]
 8005aba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	697a      	ldr	r2, [r7, #20]
 8005ac0:	621a      	str	r2, [r3, #32]
}
 8005ac2:	bf00      	nop
 8005ac4:	371c      	adds	r7, #28
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005acc:	4770      	bx	lr

08005ace <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ace:	b480      	push	{r7}
 8005ad0:	b087      	sub	sp, #28
 8005ad2:	af00      	add	r7, sp, #0
 8005ad4:	60f8      	str	r0, [r7, #12]
 8005ad6:	60b9      	str	r1, [r7, #8]
 8005ad8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	6a1b      	ldr	r3, [r3, #32]
 8005ade:	f023 0210 	bic.w	r2, r3, #16
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	6a1b      	ldr	r3, [r3, #32]
 8005af0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005af2:	697b      	ldr	r3, [r7, #20]
 8005af4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005af8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	031b      	lsls	r3, r3, #12
 8005afe:	697a      	ldr	r2, [r7, #20]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005b0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005b0c:	68bb      	ldr	r3, [r7, #8]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	693a      	ldr	r2, [r7, #16]
 8005b12:	4313      	orrs	r3, r2
 8005b14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	697a      	ldr	r2, [r7, #20]
 8005b1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	693a      	ldr	r2, [r7, #16]
 8005b20:	621a      	str	r2, [r3, #32]
}
 8005b22:	bf00      	nop
 8005b24:	371c      	adds	r7, #28
 8005b26:	46bd      	mov	sp, r7
 8005b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2c:	4770      	bx	lr

08005b2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005b2e:	b480      	push	{r7}
 8005b30:	b085      	sub	sp, #20
 8005b32:	af00      	add	r7, sp, #0
 8005b34:	6078      	str	r0, [r7, #4]
 8005b36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	689b      	ldr	r3, [r3, #8]
 8005b3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005b46:	683a      	ldr	r2, [r7, #0]
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	f043 0307 	orr.w	r3, r3, #7
 8005b50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	609a      	str	r2, [r3, #8]
}
 8005b58:	bf00      	nop
 8005b5a:	3714      	adds	r7, #20
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr

08005b64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005b64:	b480      	push	{r7}
 8005b66:	b087      	sub	sp, #28
 8005b68:	af00      	add	r7, sp, #0
 8005b6a:	60f8      	str	r0, [r7, #12]
 8005b6c:	60b9      	str	r1, [r7, #8]
 8005b6e:	607a      	str	r2, [r7, #4]
 8005b70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005b80:	683b      	ldr	r3, [r7, #0]
 8005b82:	021a      	lsls	r2, r3, #8
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	431a      	orrs	r2, r3
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	697a      	ldr	r2, [r7, #20]
 8005b96:	609a      	str	r2, [r3, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	371c      	adds	r7, #28
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba2:	4770      	bx	lr

08005ba4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e06d      	b.n	8005c98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	685b      	ldr	r3, [r3, #4]
 8005bd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	689b      	ldr	r3, [r3, #8]
 8005bda:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	4a30      	ldr	r2, [pc, #192]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d004      	beq.n	8005bf0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	4a2f      	ldr	r2, [pc, #188]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005bec:	4293      	cmp	r3, r2
 8005bee:	d108      	bne.n	8005c02 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005bf6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	685b      	ldr	r3, [r3, #4]
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	4313      	orrs	r3, r2
 8005c00:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c08:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	4313      	orrs	r3, r2
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	68fa      	ldr	r2, [r7, #12]
 8005c1a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a20      	ldr	r2, [pc, #128]	; (8005ca4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d022      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c2e:	d01d      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	4a1d      	ldr	r2, [pc, #116]	; (8005cac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d018      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a1c      	ldr	r2, [pc, #112]	; (8005cb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005c40:	4293      	cmp	r3, r2
 8005c42:	d013      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	4a1a      	ldr	r2, [pc, #104]	; (8005cb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d00e      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	4a15      	ldr	r2, [pc, #84]	; (8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d009      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	4a16      	ldr	r2, [pc, #88]	; (8005cb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d004      	beq.n	8005c6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	4a15      	ldr	r2, [pc, #84]	; (8005cbc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d10c      	bne.n	8005c86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005c6c:	68bb      	ldr	r3, [r7, #8]
 8005c6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005c72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005c74:	683b      	ldr	r3, [r7, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	68ba      	ldr	r2, [r7, #8]
 8005c7a:	4313      	orrs	r3, r2
 8005c7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	2201      	movs	r2, #1
 8005c8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2200      	movs	r2, #0
 8005c92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	40010000 	.word	0x40010000
 8005ca8:	40010400 	.word	0x40010400
 8005cac:	40000400 	.word	0x40000400
 8005cb0:	40000800 	.word	0x40000800
 8005cb4:	40000c00 	.word	0x40000c00
 8005cb8:	40014000 	.word	0x40014000
 8005cbc:	40001800 	.word	0x40001800

08005cc0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005cc0:	b580      	push	{r7, lr}
 8005cc2:	b082      	sub	sp, #8
 8005cc4:	af00      	add	r7, sp, #0
 8005cc6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e040      	b.n	8005d54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d106      	bne.n	8005ce8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2200      	movs	r2, #0
 8005cde:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ce2:	6878      	ldr	r0, [r7, #4]
 8005ce4:	f7fc f8be 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2224      	movs	r2, #36	; 0x24
 8005cec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	681a      	ldr	r2, [r3, #0]
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f022 0201 	bic.w	r2, r2, #1
 8005cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005cfe:	6878      	ldr	r0, [r7, #4]
 8005d00:	f000 f82c 	bl	8005d5c <UART_SetConfig>
 8005d04:	4603      	mov	r3, r0
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d101      	bne.n	8005d0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005d0a:	2301      	movs	r3, #1
 8005d0c:	e022      	b.n	8005d54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d002      	beq.n	8005d1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 fa84 	bl	8006224 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	685a      	ldr	r2, [r3, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	689a      	ldr	r2, [r3, #8]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	681a      	ldr	r2, [r3, #0]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f042 0201 	orr.w	r2, r2, #1
 8005d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f000 fb0b 	bl	8006368 <UART_CheckIdleState>
 8005d52:	4603      	mov	r3, r0
}
 8005d54:	4618      	mov	r0, r3
 8005d56:	3708      	adds	r7, #8
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d5c:	b580      	push	{r7, lr}
 8005d5e:	b088      	sub	sp, #32
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005d64:	2300      	movs	r3, #0
 8005d66:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	689a      	ldr	r2, [r3, #8]
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	431a      	orrs	r2, r3
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	695b      	ldr	r3, [r3, #20]
 8005d76:	431a      	orrs	r2, r3
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	69db      	ldr	r3, [r3, #28]
 8005d7c:	4313      	orrs	r3, r2
 8005d7e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	4ba6      	ldr	r3, [pc, #664]	; (8006020 <UART_SetConfig+0x2c4>)
 8005d88:	4013      	ands	r3, r2
 8005d8a:	687a      	ldr	r2, [r7, #4]
 8005d8c:	6812      	ldr	r2, [r2, #0]
 8005d8e:	6979      	ldr	r1, [r7, #20]
 8005d90:	430b      	orrs	r3, r1
 8005d92:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	685b      	ldr	r3, [r3, #4]
 8005d9a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	68da      	ldr	r2, [r3, #12]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	430a      	orrs	r2, r1
 8005da8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	699b      	ldr	r3, [r3, #24]
 8005dae:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	6a1b      	ldr	r3, [r3, #32]
 8005db4:	697a      	ldr	r2, [r7, #20]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	697a      	ldr	r2, [r7, #20]
 8005dca:	430a      	orrs	r2, r1
 8005dcc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	4a94      	ldr	r2, [pc, #592]	; (8006024 <UART_SetConfig+0x2c8>)
 8005dd4:	4293      	cmp	r3, r2
 8005dd6:	d120      	bne.n	8005e1a <UART_SetConfig+0xbe>
 8005dd8:	4b93      	ldr	r3, [pc, #588]	; (8006028 <UART_SetConfig+0x2cc>)
 8005dda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005dde:	f003 0303 	and.w	r3, r3, #3
 8005de2:	2b03      	cmp	r3, #3
 8005de4:	d816      	bhi.n	8005e14 <UART_SetConfig+0xb8>
 8005de6:	a201      	add	r2, pc, #4	; (adr r2, 8005dec <UART_SetConfig+0x90>)
 8005de8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005dec:	08005dfd 	.word	0x08005dfd
 8005df0:	08005e09 	.word	0x08005e09
 8005df4:	08005e03 	.word	0x08005e03
 8005df8:	08005e0f 	.word	0x08005e0f
 8005dfc:	2301      	movs	r3, #1
 8005dfe:	77fb      	strb	r3, [r7, #31]
 8005e00:	e150      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e02:	2302      	movs	r3, #2
 8005e04:	77fb      	strb	r3, [r7, #31]
 8005e06:	e14d      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e08:	2304      	movs	r3, #4
 8005e0a:	77fb      	strb	r3, [r7, #31]
 8005e0c:	e14a      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e0e:	2308      	movs	r3, #8
 8005e10:	77fb      	strb	r3, [r7, #31]
 8005e12:	e147      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e14:	2310      	movs	r3, #16
 8005e16:	77fb      	strb	r3, [r7, #31]
 8005e18:	e144      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	4a83      	ldr	r2, [pc, #524]	; (800602c <UART_SetConfig+0x2d0>)
 8005e20:	4293      	cmp	r3, r2
 8005e22:	d132      	bne.n	8005e8a <UART_SetConfig+0x12e>
 8005e24:	4b80      	ldr	r3, [pc, #512]	; (8006028 <UART_SetConfig+0x2cc>)
 8005e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e2a:	f003 030c 	and.w	r3, r3, #12
 8005e2e:	2b0c      	cmp	r3, #12
 8005e30:	d828      	bhi.n	8005e84 <UART_SetConfig+0x128>
 8005e32:	a201      	add	r2, pc, #4	; (adr r2, 8005e38 <UART_SetConfig+0xdc>)
 8005e34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e38:	08005e6d 	.word	0x08005e6d
 8005e3c:	08005e85 	.word	0x08005e85
 8005e40:	08005e85 	.word	0x08005e85
 8005e44:	08005e85 	.word	0x08005e85
 8005e48:	08005e79 	.word	0x08005e79
 8005e4c:	08005e85 	.word	0x08005e85
 8005e50:	08005e85 	.word	0x08005e85
 8005e54:	08005e85 	.word	0x08005e85
 8005e58:	08005e73 	.word	0x08005e73
 8005e5c:	08005e85 	.word	0x08005e85
 8005e60:	08005e85 	.word	0x08005e85
 8005e64:	08005e85 	.word	0x08005e85
 8005e68:	08005e7f 	.word	0x08005e7f
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	77fb      	strb	r3, [r7, #31]
 8005e70:	e118      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e72:	2302      	movs	r3, #2
 8005e74:	77fb      	strb	r3, [r7, #31]
 8005e76:	e115      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e78:	2304      	movs	r3, #4
 8005e7a:	77fb      	strb	r3, [r7, #31]
 8005e7c:	e112      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e7e:	2308      	movs	r3, #8
 8005e80:	77fb      	strb	r3, [r7, #31]
 8005e82:	e10f      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e84:	2310      	movs	r3, #16
 8005e86:	77fb      	strb	r3, [r7, #31]
 8005e88:	e10c      	b.n	80060a4 <UART_SetConfig+0x348>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	4a68      	ldr	r2, [pc, #416]	; (8006030 <UART_SetConfig+0x2d4>)
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d120      	bne.n	8005ed6 <UART_SetConfig+0x17a>
 8005e94:	4b64      	ldr	r3, [pc, #400]	; (8006028 <UART_SetConfig+0x2cc>)
 8005e96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e9a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8005e9e:	2b30      	cmp	r3, #48	; 0x30
 8005ea0:	d013      	beq.n	8005eca <UART_SetConfig+0x16e>
 8005ea2:	2b30      	cmp	r3, #48	; 0x30
 8005ea4:	d814      	bhi.n	8005ed0 <UART_SetConfig+0x174>
 8005ea6:	2b20      	cmp	r3, #32
 8005ea8:	d009      	beq.n	8005ebe <UART_SetConfig+0x162>
 8005eaa:	2b20      	cmp	r3, #32
 8005eac:	d810      	bhi.n	8005ed0 <UART_SetConfig+0x174>
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <UART_SetConfig+0x15c>
 8005eb2:	2b10      	cmp	r3, #16
 8005eb4:	d006      	beq.n	8005ec4 <UART_SetConfig+0x168>
 8005eb6:	e00b      	b.n	8005ed0 <UART_SetConfig+0x174>
 8005eb8:	2300      	movs	r3, #0
 8005eba:	77fb      	strb	r3, [r7, #31]
 8005ebc:	e0f2      	b.n	80060a4 <UART_SetConfig+0x348>
 8005ebe:	2302      	movs	r3, #2
 8005ec0:	77fb      	strb	r3, [r7, #31]
 8005ec2:	e0ef      	b.n	80060a4 <UART_SetConfig+0x348>
 8005ec4:	2304      	movs	r3, #4
 8005ec6:	77fb      	strb	r3, [r7, #31]
 8005ec8:	e0ec      	b.n	80060a4 <UART_SetConfig+0x348>
 8005eca:	2308      	movs	r3, #8
 8005ecc:	77fb      	strb	r3, [r7, #31]
 8005ece:	e0e9      	b.n	80060a4 <UART_SetConfig+0x348>
 8005ed0:	2310      	movs	r3, #16
 8005ed2:	77fb      	strb	r3, [r7, #31]
 8005ed4:	e0e6      	b.n	80060a4 <UART_SetConfig+0x348>
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	4a56      	ldr	r2, [pc, #344]	; (8006034 <UART_SetConfig+0x2d8>)
 8005edc:	4293      	cmp	r3, r2
 8005ede:	d120      	bne.n	8005f22 <UART_SetConfig+0x1c6>
 8005ee0:	4b51      	ldr	r3, [pc, #324]	; (8006028 <UART_SetConfig+0x2cc>)
 8005ee2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ee6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8005eea:	2bc0      	cmp	r3, #192	; 0xc0
 8005eec:	d013      	beq.n	8005f16 <UART_SetConfig+0x1ba>
 8005eee:	2bc0      	cmp	r3, #192	; 0xc0
 8005ef0:	d814      	bhi.n	8005f1c <UART_SetConfig+0x1c0>
 8005ef2:	2b80      	cmp	r3, #128	; 0x80
 8005ef4:	d009      	beq.n	8005f0a <UART_SetConfig+0x1ae>
 8005ef6:	2b80      	cmp	r3, #128	; 0x80
 8005ef8:	d810      	bhi.n	8005f1c <UART_SetConfig+0x1c0>
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d002      	beq.n	8005f04 <UART_SetConfig+0x1a8>
 8005efe:	2b40      	cmp	r3, #64	; 0x40
 8005f00:	d006      	beq.n	8005f10 <UART_SetConfig+0x1b4>
 8005f02:	e00b      	b.n	8005f1c <UART_SetConfig+0x1c0>
 8005f04:	2300      	movs	r3, #0
 8005f06:	77fb      	strb	r3, [r7, #31]
 8005f08:	e0cc      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	77fb      	strb	r3, [r7, #31]
 8005f0e:	e0c9      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f10:	2304      	movs	r3, #4
 8005f12:	77fb      	strb	r3, [r7, #31]
 8005f14:	e0c6      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f16:	2308      	movs	r3, #8
 8005f18:	77fb      	strb	r3, [r7, #31]
 8005f1a:	e0c3      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f1c:	2310      	movs	r3, #16
 8005f1e:	77fb      	strb	r3, [r7, #31]
 8005f20:	e0c0      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	4a44      	ldr	r2, [pc, #272]	; (8006038 <UART_SetConfig+0x2dc>)
 8005f28:	4293      	cmp	r3, r2
 8005f2a:	d125      	bne.n	8005f78 <UART_SetConfig+0x21c>
 8005f2c:	4b3e      	ldr	r3, [pc, #248]	; (8006028 <UART_SetConfig+0x2cc>)
 8005f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f32:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f36:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f3a:	d017      	beq.n	8005f6c <UART_SetConfig+0x210>
 8005f3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005f40:	d817      	bhi.n	8005f72 <UART_SetConfig+0x216>
 8005f42:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f46:	d00b      	beq.n	8005f60 <UART_SetConfig+0x204>
 8005f48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005f4c:	d811      	bhi.n	8005f72 <UART_SetConfig+0x216>
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d003      	beq.n	8005f5a <UART_SetConfig+0x1fe>
 8005f52:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f56:	d006      	beq.n	8005f66 <UART_SetConfig+0x20a>
 8005f58:	e00b      	b.n	8005f72 <UART_SetConfig+0x216>
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	77fb      	strb	r3, [r7, #31]
 8005f5e:	e0a1      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f60:	2302      	movs	r3, #2
 8005f62:	77fb      	strb	r3, [r7, #31]
 8005f64:	e09e      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f66:	2304      	movs	r3, #4
 8005f68:	77fb      	strb	r3, [r7, #31]
 8005f6a:	e09b      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	77fb      	strb	r3, [r7, #31]
 8005f70:	e098      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f72:	2310      	movs	r3, #16
 8005f74:	77fb      	strb	r3, [r7, #31]
 8005f76:	e095      	b.n	80060a4 <UART_SetConfig+0x348>
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4a2f      	ldr	r2, [pc, #188]	; (800603c <UART_SetConfig+0x2e0>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d125      	bne.n	8005fce <UART_SetConfig+0x272>
 8005f82:	4b29      	ldr	r3, [pc, #164]	; (8006028 <UART_SetConfig+0x2cc>)
 8005f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8005f8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f90:	d017      	beq.n	8005fc2 <UART_SetConfig+0x266>
 8005f92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005f96:	d817      	bhi.n	8005fc8 <UART_SetConfig+0x26c>
 8005f98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f9c:	d00b      	beq.n	8005fb6 <UART_SetConfig+0x25a>
 8005f9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005fa2:	d811      	bhi.n	8005fc8 <UART_SetConfig+0x26c>
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d003      	beq.n	8005fb0 <UART_SetConfig+0x254>
 8005fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005fac:	d006      	beq.n	8005fbc <UART_SetConfig+0x260>
 8005fae:	e00b      	b.n	8005fc8 <UART_SetConfig+0x26c>
 8005fb0:	2301      	movs	r3, #1
 8005fb2:	77fb      	strb	r3, [r7, #31]
 8005fb4:	e076      	b.n	80060a4 <UART_SetConfig+0x348>
 8005fb6:	2302      	movs	r3, #2
 8005fb8:	77fb      	strb	r3, [r7, #31]
 8005fba:	e073      	b.n	80060a4 <UART_SetConfig+0x348>
 8005fbc:	2304      	movs	r3, #4
 8005fbe:	77fb      	strb	r3, [r7, #31]
 8005fc0:	e070      	b.n	80060a4 <UART_SetConfig+0x348>
 8005fc2:	2308      	movs	r3, #8
 8005fc4:	77fb      	strb	r3, [r7, #31]
 8005fc6:	e06d      	b.n	80060a4 <UART_SetConfig+0x348>
 8005fc8:	2310      	movs	r3, #16
 8005fca:	77fb      	strb	r3, [r7, #31]
 8005fcc:	e06a      	b.n	80060a4 <UART_SetConfig+0x348>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <UART_SetConfig+0x2e4>)
 8005fd4:	4293      	cmp	r3, r2
 8005fd6:	d138      	bne.n	800604a <UART_SetConfig+0x2ee>
 8005fd8:	4b13      	ldr	r3, [pc, #76]	; (8006028 <UART_SetConfig+0x2cc>)
 8005fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fde:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8005fe2:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fe6:	d017      	beq.n	8006018 <UART_SetConfig+0x2bc>
 8005fe8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005fec:	d82a      	bhi.n	8006044 <UART_SetConfig+0x2e8>
 8005fee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff2:	d00b      	beq.n	800600c <UART_SetConfig+0x2b0>
 8005ff4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ff8:	d824      	bhi.n	8006044 <UART_SetConfig+0x2e8>
 8005ffa:	2b00      	cmp	r3, #0
 8005ffc:	d003      	beq.n	8006006 <UART_SetConfig+0x2aa>
 8005ffe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006002:	d006      	beq.n	8006012 <UART_SetConfig+0x2b6>
 8006004:	e01e      	b.n	8006044 <UART_SetConfig+0x2e8>
 8006006:	2300      	movs	r3, #0
 8006008:	77fb      	strb	r3, [r7, #31]
 800600a:	e04b      	b.n	80060a4 <UART_SetConfig+0x348>
 800600c:	2302      	movs	r3, #2
 800600e:	77fb      	strb	r3, [r7, #31]
 8006010:	e048      	b.n	80060a4 <UART_SetConfig+0x348>
 8006012:	2304      	movs	r3, #4
 8006014:	77fb      	strb	r3, [r7, #31]
 8006016:	e045      	b.n	80060a4 <UART_SetConfig+0x348>
 8006018:	2308      	movs	r3, #8
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e042      	b.n	80060a4 <UART_SetConfig+0x348>
 800601e:	bf00      	nop
 8006020:	efff69f3 	.word	0xefff69f3
 8006024:	40011000 	.word	0x40011000
 8006028:	40023800 	.word	0x40023800
 800602c:	40004400 	.word	0x40004400
 8006030:	40004800 	.word	0x40004800
 8006034:	40004c00 	.word	0x40004c00
 8006038:	40005000 	.word	0x40005000
 800603c:	40011400 	.word	0x40011400
 8006040:	40007800 	.word	0x40007800
 8006044:	2310      	movs	r3, #16
 8006046:	77fb      	strb	r3, [r7, #31]
 8006048:	e02c      	b.n	80060a4 <UART_SetConfig+0x348>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	4a72      	ldr	r2, [pc, #456]	; (8006218 <UART_SetConfig+0x4bc>)
 8006050:	4293      	cmp	r3, r2
 8006052:	d125      	bne.n	80060a0 <UART_SetConfig+0x344>
 8006054:	4b71      	ldr	r3, [pc, #452]	; (800621c <UART_SetConfig+0x4c0>)
 8006056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800605a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800605e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006062:	d017      	beq.n	8006094 <UART_SetConfig+0x338>
 8006064:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8006068:	d817      	bhi.n	800609a <UART_SetConfig+0x33e>
 800606a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800606e:	d00b      	beq.n	8006088 <UART_SetConfig+0x32c>
 8006070:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006074:	d811      	bhi.n	800609a <UART_SetConfig+0x33e>
 8006076:	2b00      	cmp	r3, #0
 8006078:	d003      	beq.n	8006082 <UART_SetConfig+0x326>
 800607a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800607e:	d006      	beq.n	800608e <UART_SetConfig+0x332>
 8006080:	e00b      	b.n	800609a <UART_SetConfig+0x33e>
 8006082:	2300      	movs	r3, #0
 8006084:	77fb      	strb	r3, [r7, #31]
 8006086:	e00d      	b.n	80060a4 <UART_SetConfig+0x348>
 8006088:	2302      	movs	r3, #2
 800608a:	77fb      	strb	r3, [r7, #31]
 800608c:	e00a      	b.n	80060a4 <UART_SetConfig+0x348>
 800608e:	2304      	movs	r3, #4
 8006090:	77fb      	strb	r3, [r7, #31]
 8006092:	e007      	b.n	80060a4 <UART_SetConfig+0x348>
 8006094:	2308      	movs	r3, #8
 8006096:	77fb      	strb	r3, [r7, #31]
 8006098:	e004      	b.n	80060a4 <UART_SetConfig+0x348>
 800609a:	2310      	movs	r3, #16
 800609c:	77fb      	strb	r3, [r7, #31]
 800609e:	e001      	b.n	80060a4 <UART_SetConfig+0x348>
 80060a0:	2310      	movs	r3, #16
 80060a2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	69db      	ldr	r3, [r3, #28]
 80060a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060ac:	d15c      	bne.n	8006168 <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 80060ae:	7ffb      	ldrb	r3, [r7, #31]
 80060b0:	2b08      	cmp	r3, #8
 80060b2:	d828      	bhi.n	8006106 <UART_SetConfig+0x3aa>
 80060b4:	a201      	add	r2, pc, #4	; (adr r2, 80060bc <UART_SetConfig+0x360>)
 80060b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ba:	bf00      	nop
 80060bc:	080060e1 	.word	0x080060e1
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060f1 	.word	0x080060f1
 80060c8:	08006107 	.word	0x08006107
 80060cc:	080060f7 	.word	0x080060f7
 80060d0:	08006107 	.word	0x08006107
 80060d4:	08006107 	.word	0x08006107
 80060d8:	08006107 	.word	0x08006107
 80060dc:	080060ff 	.word	0x080060ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80060e0:	f7fe fa18 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 80060e4:	61b8      	str	r0, [r7, #24]
        break;
 80060e6:	e013      	b.n	8006110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80060e8:	f7fe fa28 	bl	800453c <HAL_RCC_GetPCLK2Freq>
 80060ec:	61b8      	str	r0, [r7, #24]
        break;
 80060ee:	e00f      	b.n	8006110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80060f0:	4b4b      	ldr	r3, [pc, #300]	; (8006220 <UART_SetConfig+0x4c4>)
 80060f2:	61bb      	str	r3, [r7, #24]
        break;
 80060f4:	e00c      	b.n	8006110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80060f6:	f7fe f8fb 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80060fa:	61b8      	str	r0, [r7, #24]
        break;
 80060fc:	e008      	b.n	8006110 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80060fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006102:	61bb      	str	r3, [r7, #24]
        break;
 8006104:	e004      	b.n	8006110 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006106:	2300      	movs	r3, #0
 8006108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	77bb      	strb	r3, [r7, #30]
        break;
 800610e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006110:	69bb      	ldr	r3, [r7, #24]
 8006112:	2b00      	cmp	r3, #0
 8006114:	d074      	beq.n	8006200 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006116:	69bb      	ldr	r3, [r7, #24]
 8006118:	005a      	lsls	r2, r3, #1
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	685b      	ldr	r3, [r3, #4]
 800611e:	085b      	lsrs	r3, r3, #1
 8006120:	441a      	add	r2, r3
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	fbb2 f3f3 	udiv	r3, r2, r3
 800612a:	b29b      	uxth	r3, r3
 800612c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	2b0f      	cmp	r3, #15
 8006132:	d916      	bls.n	8006162 <UART_SetConfig+0x406>
 8006134:	693b      	ldr	r3, [r7, #16]
 8006136:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800613a:	d212      	bcs.n	8006162 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	b29b      	uxth	r3, r3
 8006140:	f023 030f 	bic.w	r3, r3, #15
 8006144:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006146:	693b      	ldr	r3, [r7, #16]
 8006148:	085b      	lsrs	r3, r3, #1
 800614a:	b29b      	uxth	r3, r3
 800614c:	f003 0307 	and.w	r3, r3, #7
 8006150:	b29a      	uxth	r2, r3
 8006152:	89fb      	ldrh	r3, [r7, #14]
 8006154:	4313      	orrs	r3, r2
 8006156:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	89fa      	ldrh	r2, [r7, #14]
 800615e:	60da      	str	r2, [r3, #12]
 8006160:	e04e      	b.n	8006200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006162:	2301      	movs	r3, #1
 8006164:	77bb      	strb	r3, [r7, #30]
 8006166:	e04b      	b.n	8006200 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006168:	7ffb      	ldrb	r3, [r7, #31]
 800616a:	2b08      	cmp	r3, #8
 800616c:	d827      	bhi.n	80061be <UART_SetConfig+0x462>
 800616e:	a201      	add	r2, pc, #4	; (adr r2, 8006174 <UART_SetConfig+0x418>)
 8006170:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006174:	08006199 	.word	0x08006199
 8006178:	080061a1 	.word	0x080061a1
 800617c:	080061a9 	.word	0x080061a9
 8006180:	080061bf 	.word	0x080061bf
 8006184:	080061af 	.word	0x080061af
 8006188:	080061bf 	.word	0x080061bf
 800618c:	080061bf 	.word	0x080061bf
 8006190:	080061bf 	.word	0x080061bf
 8006194:	080061b7 	.word	0x080061b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006198:	f7fe f9bc 	bl	8004514 <HAL_RCC_GetPCLK1Freq>
 800619c:	61b8      	str	r0, [r7, #24]
        break;
 800619e:	e013      	b.n	80061c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80061a0:	f7fe f9cc 	bl	800453c <HAL_RCC_GetPCLK2Freq>
 80061a4:	61b8      	str	r0, [r7, #24]
        break;
 80061a6:	e00f      	b.n	80061c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061a8:	4b1d      	ldr	r3, [pc, #116]	; (8006220 <UART_SetConfig+0x4c4>)
 80061aa:	61bb      	str	r3, [r7, #24]
        break;
 80061ac:	e00c      	b.n	80061c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061ae:	f7fe f89f 	bl	80042f0 <HAL_RCC_GetSysClockFreq>
 80061b2:	61b8      	str	r0, [r7, #24]
        break;
 80061b4:	e008      	b.n	80061c8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061ba:	61bb      	str	r3, [r7, #24]
        break;
 80061bc:	e004      	b.n	80061c8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80061be:	2300      	movs	r3, #0
 80061c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80061c2:	2301      	movs	r3, #1
 80061c4:	77bb      	strb	r3, [r7, #30]
        break;
 80061c6:	bf00      	nop
    }

    if (pclk != 0U)
 80061c8:	69bb      	ldr	r3, [r7, #24]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d018      	beq.n	8006200 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	685b      	ldr	r3, [r3, #4]
 80061d2:	085a      	lsrs	r2, r3, #1
 80061d4:	69bb      	ldr	r3, [r7, #24]
 80061d6:	441a      	add	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	685b      	ldr	r3, [r3, #4]
 80061dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80061e0:	b29b      	uxth	r3, r3
 80061e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80061e4:	693b      	ldr	r3, [r7, #16]
 80061e6:	2b0f      	cmp	r3, #15
 80061e8:	d908      	bls.n	80061fc <UART_SetConfig+0x4a0>
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061f0:	d204      	bcs.n	80061fc <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	693a      	ldr	r2, [r7, #16]
 80061f8:	60da      	str	r2, [r3, #12]
 80061fa:	e001      	b.n	8006200 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80061fc:	2301      	movs	r3, #1
 80061fe:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2200      	movs	r2, #0
 8006204:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800620c:	7fbb      	ldrb	r3, [r7, #30]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3720      	adds	r7, #32
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	40007c00 	.word	0x40007c00
 800621c:	40023800 	.word	0x40023800
 8006220:	00f42400 	.word	0x00f42400

08006224 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006224:	b480      	push	{r7}
 8006226:	b083      	sub	sp, #12
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006230:	f003 0301 	and.w	r3, r3, #1
 8006234:	2b00      	cmp	r3, #0
 8006236:	d00a      	beq.n	800624e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	430a      	orrs	r2, r1
 800624c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006252:	f003 0302 	and.w	r3, r3, #2
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00a      	beq.n	8006270 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	430a      	orrs	r2, r1
 800626e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006274:	f003 0304 	and.w	r3, r3, #4
 8006278:	2b00      	cmp	r3, #0
 800627a:	d00a      	beq.n	8006292 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	430a      	orrs	r2, r1
 8006290:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	f003 0308 	and.w	r3, r3, #8
 800629a:	2b00      	cmp	r3, #0
 800629c:	d00a      	beq.n	80062b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	685b      	ldr	r3, [r3, #4]
 80062a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	430a      	orrs	r2, r1
 80062b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062b8:	f003 0310 	and.w	r3, r3, #16
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d00a      	beq.n	80062d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	689b      	ldr	r3, [r3, #8]
 80062c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	430a      	orrs	r2, r1
 80062d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062da:	f003 0320 	and.w	r3, r3, #32
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d00a      	beq.n	80062f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	430a      	orrs	r2, r1
 80062f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d01a      	beq.n	800633a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	685b      	ldr	r3, [r3, #4]
 800630a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	430a      	orrs	r2, r1
 8006318:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800631e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006322:	d10a      	bne.n	800633a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685b      	ldr	r3, [r3, #4]
 800632a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	430a      	orrs	r2, r1
 8006338:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800633e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006342:	2b00      	cmp	r3, #0
 8006344:	d00a      	beq.n	800635c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	685b      	ldr	r3, [r3, #4]
 800634c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	430a      	orrs	r2, r1
 800635a:	605a      	str	r2, [r3, #4]
  }
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr

08006368 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b086      	sub	sp, #24
 800636c:	af02      	add	r7, sp, #8
 800636e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2200      	movs	r2, #0
 8006374:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006378:	f7fd f8cc 	bl	8003514 <HAL_GetTick>
 800637c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	f003 0308 	and.w	r3, r3, #8
 8006388:	2b08      	cmp	r3, #8
 800638a:	d10e      	bne.n	80063aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800638c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006390:	9300      	str	r3, [sp, #0]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	2200      	movs	r2, #0
 8006396:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f000 f82d 	bl	80063fa <UART_WaitOnFlagUntilTimeout>
 80063a0:	4603      	mov	r3, r0
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d001      	beq.n	80063aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063a6:	2303      	movs	r3, #3
 80063a8:	e023      	b.n	80063f2 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	681b      	ldr	r3, [r3, #0]
 80063b0:	f003 0304 	and.w	r3, r3, #4
 80063b4:	2b04      	cmp	r3, #4
 80063b6:	d10e      	bne.n	80063d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80063b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80063bc:	9300      	str	r3, [sp, #0]
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80063c6:	6878      	ldr	r0, [r7, #4]
 80063c8:	f000 f817 	bl	80063fa <UART_WaitOnFlagUntilTimeout>
 80063cc:	4603      	mov	r3, r0
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d001      	beq.n	80063d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80063d2:	2303      	movs	r3, #3
 80063d4:	e00d      	b.n	80063f2 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2220      	movs	r2, #32
 80063da:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	2220      	movs	r2, #32
 80063e0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2200      	movs	r2, #0
 80063e6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80063f0:	2300      	movs	r3, #0
}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3710      	adds	r7, #16
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b084      	sub	sp, #16
 80063fe:	af00      	add	r7, sp, #0
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800640a:	e05e      	b.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800640c:	69bb      	ldr	r3, [r7, #24]
 800640e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006412:	d05a      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006414:	f7fd f87e 	bl	8003514 <HAL_GetTick>
 8006418:	4602      	mov	r2, r0
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	1ad3      	subs	r3, r2, r3
 800641e:	69ba      	ldr	r2, [r7, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d302      	bcc.n	800642a <UART_WaitOnFlagUntilTimeout+0x30>
 8006424:	69bb      	ldr	r3, [r7, #24]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d11b      	bne.n	8006462 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006438:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800643a:	68fb      	ldr	r3, [r7, #12]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	689a      	ldr	r2, [r3, #8]
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	f022 0201 	bic.w	r2, r2, #1
 8006448:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	2220      	movs	r2, #32
 800644e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800645e:	2303      	movs	r3, #3
 8006460:	e043      	b.n	80064ea <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	f003 0304 	and.w	r3, r3, #4
 800646c:	2b00      	cmp	r3, #0
 800646e:	d02c      	beq.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	69db      	ldr	r3, [r3, #28]
 8006476:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800647a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800647e:	d124      	bne.n	80064ca <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006488:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	681a      	ldr	r2, [r3, #0]
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006498:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	689a      	ldr	r2, [r3, #8]
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f022 0201 	bic.w	r2, r2, #1
 80064a8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2220      	movs	r2, #32
 80064ae:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2220      	movs	r2, #32
 80064b4:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	2220      	movs	r2, #32
 80064ba:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	2200      	movs	r2, #0
 80064c2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80064c6:	2303      	movs	r3, #3
 80064c8:	e00f      	b.n	80064ea <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	69da      	ldr	r2, [r3, #28]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4013      	ands	r3, r2
 80064d4:	68ba      	ldr	r2, [r7, #8]
 80064d6:	429a      	cmp	r2, r3
 80064d8:	bf0c      	ite	eq
 80064da:	2301      	moveq	r3, #1
 80064dc:	2300      	movne	r3, #0
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	461a      	mov	r2, r3
 80064e2:	79fb      	ldrb	r3, [r7, #7]
 80064e4:	429a      	cmp	r2, r3
 80064e6:	d091      	beq.n	800640c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80064e8:	2300      	movs	r3, #0
}
 80064ea:	4618      	mov	r0, r3
 80064ec:	3710      	adds	r7, #16
 80064ee:	46bd      	mov	sp, r7
 80064f0:	bd80      	pop	{r7, pc}
	...

080064f4 <__errno>:
 80064f4:	4b01      	ldr	r3, [pc, #4]	; (80064fc <__errno+0x8>)
 80064f6:	6818      	ldr	r0, [r3, #0]
 80064f8:	4770      	bx	lr
 80064fa:	bf00      	nop
 80064fc:	20000010 	.word	0x20000010

08006500 <__libc_init_array>:
 8006500:	b570      	push	{r4, r5, r6, lr}
 8006502:	4d0d      	ldr	r5, [pc, #52]	; (8006538 <__libc_init_array+0x38>)
 8006504:	4c0d      	ldr	r4, [pc, #52]	; (800653c <__libc_init_array+0x3c>)
 8006506:	1b64      	subs	r4, r4, r5
 8006508:	10a4      	asrs	r4, r4, #2
 800650a:	2600      	movs	r6, #0
 800650c:	42a6      	cmp	r6, r4
 800650e:	d109      	bne.n	8006524 <__libc_init_array+0x24>
 8006510:	4d0b      	ldr	r5, [pc, #44]	; (8006540 <__libc_init_array+0x40>)
 8006512:	4c0c      	ldr	r4, [pc, #48]	; (8006544 <__libc_init_array+0x44>)
 8006514:	f002 fe5c 	bl	80091d0 <_init>
 8006518:	1b64      	subs	r4, r4, r5
 800651a:	10a4      	asrs	r4, r4, #2
 800651c:	2600      	movs	r6, #0
 800651e:	42a6      	cmp	r6, r4
 8006520:	d105      	bne.n	800652e <__libc_init_array+0x2e>
 8006522:	bd70      	pop	{r4, r5, r6, pc}
 8006524:	f855 3b04 	ldr.w	r3, [r5], #4
 8006528:	4798      	blx	r3
 800652a:	3601      	adds	r6, #1
 800652c:	e7ee      	b.n	800650c <__libc_init_array+0xc>
 800652e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006532:	4798      	blx	r3
 8006534:	3601      	adds	r6, #1
 8006536:	e7f2      	b.n	800651e <__libc_init_array+0x1e>
 8006538:	0802f234 	.word	0x0802f234
 800653c:	0802f234 	.word	0x0802f234
 8006540:	0802f234 	.word	0x0802f234
 8006544:	0802f238 	.word	0x0802f238

08006548 <memset>:
 8006548:	4402      	add	r2, r0
 800654a:	4603      	mov	r3, r0
 800654c:	4293      	cmp	r3, r2
 800654e:	d100      	bne.n	8006552 <memset+0xa>
 8006550:	4770      	bx	lr
 8006552:	f803 1b01 	strb.w	r1, [r3], #1
 8006556:	e7f9      	b.n	800654c <memset+0x4>

08006558 <__cvt>:
 8006558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800655a:	ed2d 8b02 	vpush	{d8}
 800655e:	eeb0 8b40 	vmov.f64	d8, d0
 8006562:	b085      	sub	sp, #20
 8006564:	4617      	mov	r7, r2
 8006566:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8006568:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800656a:	ee18 2a90 	vmov	r2, s17
 800656e:	f025 0520 	bic.w	r5, r5, #32
 8006572:	2a00      	cmp	r2, #0
 8006574:	bfb6      	itet	lt
 8006576:	222d      	movlt	r2, #45	; 0x2d
 8006578:	2200      	movge	r2, #0
 800657a:	eeb1 8b40 	vneglt.f64	d8, d0
 800657e:	2d46      	cmp	r5, #70	; 0x46
 8006580:	460c      	mov	r4, r1
 8006582:	701a      	strb	r2, [r3, #0]
 8006584:	d004      	beq.n	8006590 <__cvt+0x38>
 8006586:	2d45      	cmp	r5, #69	; 0x45
 8006588:	d100      	bne.n	800658c <__cvt+0x34>
 800658a:	3401      	adds	r4, #1
 800658c:	2102      	movs	r1, #2
 800658e:	e000      	b.n	8006592 <__cvt+0x3a>
 8006590:	2103      	movs	r1, #3
 8006592:	ab03      	add	r3, sp, #12
 8006594:	9301      	str	r3, [sp, #4]
 8006596:	ab02      	add	r3, sp, #8
 8006598:	9300      	str	r3, [sp, #0]
 800659a:	4622      	mov	r2, r4
 800659c:	4633      	mov	r3, r6
 800659e:	eeb0 0b48 	vmov.f64	d0, d8
 80065a2:	f000 fcc9 	bl	8006f38 <_dtoa_r>
 80065a6:	2d47      	cmp	r5, #71	; 0x47
 80065a8:	d101      	bne.n	80065ae <__cvt+0x56>
 80065aa:	07fb      	lsls	r3, r7, #31
 80065ac:	d51a      	bpl.n	80065e4 <__cvt+0x8c>
 80065ae:	2d46      	cmp	r5, #70	; 0x46
 80065b0:	eb00 0204 	add.w	r2, r0, r4
 80065b4:	d10c      	bne.n	80065d0 <__cvt+0x78>
 80065b6:	7803      	ldrb	r3, [r0, #0]
 80065b8:	2b30      	cmp	r3, #48	; 0x30
 80065ba:	d107      	bne.n	80065cc <__cvt+0x74>
 80065bc:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065c4:	bf1c      	itt	ne
 80065c6:	f1c4 0401 	rsbne	r4, r4, #1
 80065ca:	6034      	strne	r4, [r6, #0]
 80065cc:	6833      	ldr	r3, [r6, #0]
 80065ce:	441a      	add	r2, r3
 80065d0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80065d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065d8:	bf08      	it	eq
 80065da:	9203      	streq	r2, [sp, #12]
 80065dc:	2130      	movs	r1, #48	; 0x30
 80065de:	9b03      	ldr	r3, [sp, #12]
 80065e0:	4293      	cmp	r3, r2
 80065e2:	d307      	bcc.n	80065f4 <__cvt+0x9c>
 80065e4:	9b03      	ldr	r3, [sp, #12]
 80065e6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80065e8:	1a1b      	subs	r3, r3, r0
 80065ea:	6013      	str	r3, [r2, #0]
 80065ec:	b005      	add	sp, #20
 80065ee:	ecbd 8b02 	vpop	{d8}
 80065f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80065f4:	1c5c      	adds	r4, r3, #1
 80065f6:	9403      	str	r4, [sp, #12]
 80065f8:	7019      	strb	r1, [r3, #0]
 80065fa:	e7f0      	b.n	80065de <__cvt+0x86>

080065fc <__exponent>:
 80065fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80065fe:	4603      	mov	r3, r0
 8006600:	2900      	cmp	r1, #0
 8006602:	bfb8      	it	lt
 8006604:	4249      	neglt	r1, r1
 8006606:	f803 2b02 	strb.w	r2, [r3], #2
 800660a:	bfb4      	ite	lt
 800660c:	222d      	movlt	r2, #45	; 0x2d
 800660e:	222b      	movge	r2, #43	; 0x2b
 8006610:	2909      	cmp	r1, #9
 8006612:	7042      	strb	r2, [r0, #1]
 8006614:	dd2a      	ble.n	800666c <__exponent+0x70>
 8006616:	f10d 0407 	add.w	r4, sp, #7
 800661a:	46a4      	mov	ip, r4
 800661c:	270a      	movs	r7, #10
 800661e:	46a6      	mov	lr, r4
 8006620:	460a      	mov	r2, r1
 8006622:	fb91 f6f7 	sdiv	r6, r1, r7
 8006626:	fb07 1516 	mls	r5, r7, r6, r1
 800662a:	3530      	adds	r5, #48	; 0x30
 800662c:	2a63      	cmp	r2, #99	; 0x63
 800662e:	f104 34ff 	add.w	r4, r4, #4294967295
 8006632:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8006636:	4631      	mov	r1, r6
 8006638:	dcf1      	bgt.n	800661e <__exponent+0x22>
 800663a:	3130      	adds	r1, #48	; 0x30
 800663c:	f1ae 0502 	sub.w	r5, lr, #2
 8006640:	f804 1c01 	strb.w	r1, [r4, #-1]
 8006644:	1c44      	adds	r4, r0, #1
 8006646:	4629      	mov	r1, r5
 8006648:	4561      	cmp	r1, ip
 800664a:	d30a      	bcc.n	8006662 <__exponent+0x66>
 800664c:	f10d 0209 	add.w	r2, sp, #9
 8006650:	eba2 020e 	sub.w	r2, r2, lr
 8006654:	4565      	cmp	r5, ip
 8006656:	bf88      	it	hi
 8006658:	2200      	movhi	r2, #0
 800665a:	4413      	add	r3, r2
 800665c:	1a18      	subs	r0, r3, r0
 800665e:	b003      	add	sp, #12
 8006660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006662:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006666:	f804 2f01 	strb.w	r2, [r4, #1]!
 800666a:	e7ed      	b.n	8006648 <__exponent+0x4c>
 800666c:	2330      	movs	r3, #48	; 0x30
 800666e:	3130      	adds	r1, #48	; 0x30
 8006670:	7083      	strb	r3, [r0, #2]
 8006672:	70c1      	strb	r1, [r0, #3]
 8006674:	1d03      	adds	r3, r0, #4
 8006676:	e7f1      	b.n	800665c <__exponent+0x60>

08006678 <_printf_float>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	b08b      	sub	sp, #44	; 0x2c
 800667e:	460c      	mov	r4, r1
 8006680:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8006684:	4616      	mov	r6, r2
 8006686:	461f      	mov	r7, r3
 8006688:	4605      	mov	r5, r0
 800668a:	f001 f9c3 	bl	8007a14 <_localeconv_r>
 800668e:	f8d0 b000 	ldr.w	fp, [r0]
 8006692:	4658      	mov	r0, fp
 8006694:	f7f9 fdd4 	bl	8000240 <strlen>
 8006698:	2300      	movs	r3, #0
 800669a:	9308      	str	r3, [sp, #32]
 800669c:	f8d8 3000 	ldr.w	r3, [r8]
 80066a0:	f894 9018 	ldrb.w	r9, [r4, #24]
 80066a4:	6822      	ldr	r2, [r4, #0]
 80066a6:	3307      	adds	r3, #7
 80066a8:	f023 0307 	bic.w	r3, r3, #7
 80066ac:	f103 0108 	add.w	r1, r3, #8
 80066b0:	f8c8 1000 	str.w	r1, [r8]
 80066b4:	4682      	mov	sl, r0
 80066b6:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066ba:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 80066be:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8006920 <_printf_float+0x2a8>
 80066c2:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 80066c6:	eeb0 6bc0 	vabs.f64	d6, d0
 80066ca:	eeb4 6b47 	vcmp.f64	d6, d7
 80066ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066d2:	dd24      	ble.n	800671e <_printf_float+0xa6>
 80066d4:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80066d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80066dc:	d502      	bpl.n	80066e4 <_printf_float+0x6c>
 80066de:	232d      	movs	r3, #45	; 0x2d
 80066e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80066e4:	4b90      	ldr	r3, [pc, #576]	; (8006928 <_printf_float+0x2b0>)
 80066e6:	4891      	ldr	r0, [pc, #580]	; (800692c <_printf_float+0x2b4>)
 80066e8:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80066ec:	bf94      	ite	ls
 80066ee:	4698      	movls	r8, r3
 80066f0:	4680      	movhi	r8, r0
 80066f2:	2303      	movs	r3, #3
 80066f4:	6123      	str	r3, [r4, #16]
 80066f6:	f022 0204 	bic.w	r2, r2, #4
 80066fa:	2300      	movs	r3, #0
 80066fc:	6022      	str	r2, [r4, #0]
 80066fe:	9304      	str	r3, [sp, #16]
 8006700:	9700      	str	r7, [sp, #0]
 8006702:	4633      	mov	r3, r6
 8006704:	aa09      	add	r2, sp, #36	; 0x24
 8006706:	4621      	mov	r1, r4
 8006708:	4628      	mov	r0, r5
 800670a:	f000 f9d3 	bl	8006ab4 <_printf_common>
 800670e:	3001      	adds	r0, #1
 8006710:	f040 808a 	bne.w	8006828 <_printf_float+0x1b0>
 8006714:	f04f 30ff 	mov.w	r0, #4294967295
 8006718:	b00b      	add	sp, #44	; 0x2c
 800671a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800671e:	eeb4 0b40 	vcmp.f64	d0, d0
 8006722:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006726:	d709      	bvc.n	800673c <_printf_float+0xc4>
 8006728:	ee10 3a90 	vmov	r3, s1
 800672c:	2b00      	cmp	r3, #0
 800672e:	bfbc      	itt	lt
 8006730:	232d      	movlt	r3, #45	; 0x2d
 8006732:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8006736:	487e      	ldr	r0, [pc, #504]	; (8006930 <_printf_float+0x2b8>)
 8006738:	4b7e      	ldr	r3, [pc, #504]	; (8006934 <_printf_float+0x2bc>)
 800673a:	e7d5      	b.n	80066e8 <_printf_float+0x70>
 800673c:	6863      	ldr	r3, [r4, #4]
 800673e:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8006742:	9104      	str	r1, [sp, #16]
 8006744:	1c59      	adds	r1, r3, #1
 8006746:	d13c      	bne.n	80067c2 <_printf_float+0x14a>
 8006748:	2306      	movs	r3, #6
 800674a:	6063      	str	r3, [r4, #4]
 800674c:	2300      	movs	r3, #0
 800674e:	9303      	str	r3, [sp, #12]
 8006750:	ab08      	add	r3, sp, #32
 8006752:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8006756:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800675a:	ab07      	add	r3, sp, #28
 800675c:	6861      	ldr	r1, [r4, #4]
 800675e:	9300      	str	r3, [sp, #0]
 8006760:	6022      	str	r2, [r4, #0]
 8006762:	f10d 031b 	add.w	r3, sp, #27
 8006766:	4628      	mov	r0, r5
 8006768:	f7ff fef6 	bl	8006558 <__cvt>
 800676c:	9b04      	ldr	r3, [sp, #16]
 800676e:	9907      	ldr	r1, [sp, #28]
 8006770:	2b47      	cmp	r3, #71	; 0x47
 8006772:	4680      	mov	r8, r0
 8006774:	d108      	bne.n	8006788 <_printf_float+0x110>
 8006776:	1cc8      	adds	r0, r1, #3
 8006778:	db02      	blt.n	8006780 <_printf_float+0x108>
 800677a:	6863      	ldr	r3, [r4, #4]
 800677c:	4299      	cmp	r1, r3
 800677e:	dd41      	ble.n	8006804 <_printf_float+0x18c>
 8006780:	f1a9 0902 	sub.w	r9, r9, #2
 8006784:	fa5f f989 	uxtb.w	r9, r9
 8006788:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800678c:	d820      	bhi.n	80067d0 <_printf_float+0x158>
 800678e:	3901      	subs	r1, #1
 8006790:	464a      	mov	r2, r9
 8006792:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8006796:	9107      	str	r1, [sp, #28]
 8006798:	f7ff ff30 	bl	80065fc <__exponent>
 800679c:	9a08      	ldr	r2, [sp, #32]
 800679e:	9004      	str	r0, [sp, #16]
 80067a0:	1813      	adds	r3, r2, r0
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	6123      	str	r3, [r4, #16]
 80067a6:	dc02      	bgt.n	80067ae <_printf_float+0x136>
 80067a8:	6822      	ldr	r2, [r4, #0]
 80067aa:	07d2      	lsls	r2, r2, #31
 80067ac:	d501      	bpl.n	80067b2 <_printf_float+0x13a>
 80067ae:	3301      	adds	r3, #1
 80067b0:	6123      	str	r3, [r4, #16]
 80067b2:	f89d 301b 	ldrb.w	r3, [sp, #27]
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d0a2      	beq.n	8006700 <_printf_float+0x88>
 80067ba:	232d      	movs	r3, #45	; 0x2d
 80067bc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80067c0:	e79e      	b.n	8006700 <_printf_float+0x88>
 80067c2:	9904      	ldr	r1, [sp, #16]
 80067c4:	2947      	cmp	r1, #71	; 0x47
 80067c6:	d1c1      	bne.n	800674c <_printf_float+0xd4>
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d1bf      	bne.n	800674c <_printf_float+0xd4>
 80067cc:	2301      	movs	r3, #1
 80067ce:	e7bc      	b.n	800674a <_printf_float+0xd2>
 80067d0:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80067d4:	d118      	bne.n	8006808 <_printf_float+0x190>
 80067d6:	2900      	cmp	r1, #0
 80067d8:	6863      	ldr	r3, [r4, #4]
 80067da:	dd0b      	ble.n	80067f4 <_printf_float+0x17c>
 80067dc:	6121      	str	r1, [r4, #16]
 80067de:	b913      	cbnz	r3, 80067e6 <_printf_float+0x16e>
 80067e0:	6822      	ldr	r2, [r4, #0]
 80067e2:	07d0      	lsls	r0, r2, #31
 80067e4:	d502      	bpl.n	80067ec <_printf_float+0x174>
 80067e6:	3301      	adds	r3, #1
 80067e8:	440b      	add	r3, r1
 80067ea:	6123      	str	r3, [r4, #16]
 80067ec:	2300      	movs	r3, #0
 80067ee:	65a1      	str	r1, [r4, #88]	; 0x58
 80067f0:	9304      	str	r3, [sp, #16]
 80067f2:	e7de      	b.n	80067b2 <_printf_float+0x13a>
 80067f4:	b913      	cbnz	r3, 80067fc <_printf_float+0x184>
 80067f6:	6822      	ldr	r2, [r4, #0]
 80067f8:	07d2      	lsls	r2, r2, #31
 80067fa:	d501      	bpl.n	8006800 <_printf_float+0x188>
 80067fc:	3302      	adds	r3, #2
 80067fe:	e7f4      	b.n	80067ea <_printf_float+0x172>
 8006800:	2301      	movs	r3, #1
 8006802:	e7f2      	b.n	80067ea <_printf_float+0x172>
 8006804:	f04f 0967 	mov.w	r9, #103	; 0x67
 8006808:	9b08      	ldr	r3, [sp, #32]
 800680a:	4299      	cmp	r1, r3
 800680c:	db05      	blt.n	800681a <_printf_float+0x1a2>
 800680e:	6823      	ldr	r3, [r4, #0]
 8006810:	6121      	str	r1, [r4, #16]
 8006812:	07d8      	lsls	r0, r3, #31
 8006814:	d5ea      	bpl.n	80067ec <_printf_float+0x174>
 8006816:	1c4b      	adds	r3, r1, #1
 8006818:	e7e7      	b.n	80067ea <_printf_float+0x172>
 800681a:	2900      	cmp	r1, #0
 800681c:	bfd4      	ite	le
 800681e:	f1c1 0202 	rsble	r2, r1, #2
 8006822:	2201      	movgt	r2, #1
 8006824:	4413      	add	r3, r2
 8006826:	e7e0      	b.n	80067ea <_printf_float+0x172>
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	055a      	lsls	r2, r3, #21
 800682c:	d407      	bmi.n	800683e <_printf_float+0x1c6>
 800682e:	6923      	ldr	r3, [r4, #16]
 8006830:	4642      	mov	r2, r8
 8006832:	4631      	mov	r1, r6
 8006834:	4628      	mov	r0, r5
 8006836:	47b8      	blx	r7
 8006838:	3001      	adds	r0, #1
 800683a:	d12a      	bne.n	8006892 <_printf_float+0x21a>
 800683c:	e76a      	b.n	8006714 <_printf_float+0x9c>
 800683e:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8006842:	f240 80e2 	bls.w	8006a0a <_printf_float+0x392>
 8006846:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 800684a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 800684e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006852:	d133      	bne.n	80068bc <_printf_float+0x244>
 8006854:	4a38      	ldr	r2, [pc, #224]	; (8006938 <_printf_float+0x2c0>)
 8006856:	2301      	movs	r3, #1
 8006858:	4631      	mov	r1, r6
 800685a:	4628      	mov	r0, r5
 800685c:	47b8      	blx	r7
 800685e:	3001      	adds	r0, #1
 8006860:	f43f af58 	beq.w	8006714 <_printf_float+0x9c>
 8006864:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8006868:	429a      	cmp	r2, r3
 800686a:	db02      	blt.n	8006872 <_printf_float+0x1fa>
 800686c:	6823      	ldr	r3, [r4, #0]
 800686e:	07d8      	lsls	r0, r3, #31
 8006870:	d50f      	bpl.n	8006892 <_printf_float+0x21a>
 8006872:	4653      	mov	r3, sl
 8006874:	465a      	mov	r2, fp
 8006876:	4631      	mov	r1, r6
 8006878:	4628      	mov	r0, r5
 800687a:	47b8      	blx	r7
 800687c:	3001      	adds	r0, #1
 800687e:	f43f af49 	beq.w	8006714 <_printf_float+0x9c>
 8006882:	f04f 0800 	mov.w	r8, #0
 8006886:	f104 091a 	add.w	r9, r4, #26
 800688a:	9b08      	ldr	r3, [sp, #32]
 800688c:	3b01      	subs	r3, #1
 800688e:	4543      	cmp	r3, r8
 8006890:	dc09      	bgt.n	80068a6 <_printf_float+0x22e>
 8006892:	6823      	ldr	r3, [r4, #0]
 8006894:	079b      	lsls	r3, r3, #30
 8006896:	f100 8108 	bmi.w	8006aaa <_printf_float+0x432>
 800689a:	68e0      	ldr	r0, [r4, #12]
 800689c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800689e:	4298      	cmp	r0, r3
 80068a0:	bfb8      	it	lt
 80068a2:	4618      	movlt	r0, r3
 80068a4:	e738      	b.n	8006718 <_printf_float+0xa0>
 80068a6:	2301      	movs	r3, #1
 80068a8:	464a      	mov	r2, r9
 80068aa:	4631      	mov	r1, r6
 80068ac:	4628      	mov	r0, r5
 80068ae:	47b8      	blx	r7
 80068b0:	3001      	adds	r0, #1
 80068b2:	f43f af2f 	beq.w	8006714 <_printf_float+0x9c>
 80068b6:	f108 0801 	add.w	r8, r8, #1
 80068ba:	e7e6      	b.n	800688a <_printf_float+0x212>
 80068bc:	9b07      	ldr	r3, [sp, #28]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	dc3c      	bgt.n	800693c <_printf_float+0x2c4>
 80068c2:	4a1d      	ldr	r2, [pc, #116]	; (8006938 <_printf_float+0x2c0>)
 80068c4:	2301      	movs	r3, #1
 80068c6:	4631      	mov	r1, r6
 80068c8:	4628      	mov	r0, r5
 80068ca:	47b8      	blx	r7
 80068cc:	3001      	adds	r0, #1
 80068ce:	f43f af21 	beq.w	8006714 <_printf_float+0x9c>
 80068d2:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80068d6:	4313      	orrs	r3, r2
 80068d8:	d102      	bne.n	80068e0 <_printf_float+0x268>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	07d9      	lsls	r1, r3, #31
 80068de:	d5d8      	bpl.n	8006892 <_printf_float+0x21a>
 80068e0:	4653      	mov	r3, sl
 80068e2:	465a      	mov	r2, fp
 80068e4:	4631      	mov	r1, r6
 80068e6:	4628      	mov	r0, r5
 80068e8:	47b8      	blx	r7
 80068ea:	3001      	adds	r0, #1
 80068ec:	f43f af12 	beq.w	8006714 <_printf_float+0x9c>
 80068f0:	f04f 0900 	mov.w	r9, #0
 80068f4:	f104 0a1a 	add.w	sl, r4, #26
 80068f8:	9b07      	ldr	r3, [sp, #28]
 80068fa:	425b      	negs	r3, r3
 80068fc:	454b      	cmp	r3, r9
 80068fe:	dc01      	bgt.n	8006904 <_printf_float+0x28c>
 8006900:	9b08      	ldr	r3, [sp, #32]
 8006902:	e795      	b.n	8006830 <_printf_float+0x1b8>
 8006904:	2301      	movs	r3, #1
 8006906:	4652      	mov	r2, sl
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af00 	beq.w	8006714 <_printf_float+0x9c>
 8006914:	f109 0901 	add.w	r9, r9, #1
 8006918:	e7ee      	b.n	80068f8 <_printf_float+0x280>
 800691a:	bf00      	nop
 800691c:	f3af 8000 	nop.w
 8006920:	ffffffff 	.word	0xffffffff
 8006924:	7fefffff 	.word	0x7fefffff
 8006928:	0802ee54 	.word	0x0802ee54
 800692c:	0802ee58 	.word	0x0802ee58
 8006930:	0802ee60 	.word	0x0802ee60
 8006934:	0802ee5c 	.word	0x0802ee5c
 8006938:	0802ee64 	.word	0x0802ee64
 800693c:	9a08      	ldr	r2, [sp, #32]
 800693e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8006940:	429a      	cmp	r2, r3
 8006942:	bfa8      	it	ge
 8006944:	461a      	movge	r2, r3
 8006946:	2a00      	cmp	r2, #0
 8006948:	4691      	mov	r9, r2
 800694a:	dc38      	bgt.n	80069be <_printf_float+0x346>
 800694c:	2300      	movs	r3, #0
 800694e:	9305      	str	r3, [sp, #20]
 8006950:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006954:	f104 021a 	add.w	r2, r4, #26
 8006958:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800695a:	9905      	ldr	r1, [sp, #20]
 800695c:	9304      	str	r3, [sp, #16]
 800695e:	eba3 0309 	sub.w	r3, r3, r9
 8006962:	428b      	cmp	r3, r1
 8006964:	dc33      	bgt.n	80069ce <_printf_float+0x356>
 8006966:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800696a:	429a      	cmp	r2, r3
 800696c:	db3c      	blt.n	80069e8 <_printf_float+0x370>
 800696e:	6823      	ldr	r3, [r4, #0]
 8006970:	07da      	lsls	r2, r3, #31
 8006972:	d439      	bmi.n	80069e8 <_printf_float+0x370>
 8006974:	9b08      	ldr	r3, [sp, #32]
 8006976:	9a04      	ldr	r2, [sp, #16]
 8006978:	9907      	ldr	r1, [sp, #28]
 800697a:	1a9a      	subs	r2, r3, r2
 800697c:	eba3 0901 	sub.w	r9, r3, r1
 8006980:	4591      	cmp	r9, r2
 8006982:	bfa8      	it	ge
 8006984:	4691      	movge	r9, r2
 8006986:	f1b9 0f00 	cmp.w	r9, #0
 800698a:	dc35      	bgt.n	80069f8 <_printf_float+0x380>
 800698c:	f04f 0800 	mov.w	r8, #0
 8006990:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006994:	f104 0a1a 	add.w	sl, r4, #26
 8006998:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 800699c:	1a9b      	subs	r3, r3, r2
 800699e:	eba3 0309 	sub.w	r3, r3, r9
 80069a2:	4543      	cmp	r3, r8
 80069a4:	f77f af75 	ble.w	8006892 <_printf_float+0x21a>
 80069a8:	2301      	movs	r3, #1
 80069aa:	4652      	mov	r2, sl
 80069ac:	4631      	mov	r1, r6
 80069ae:	4628      	mov	r0, r5
 80069b0:	47b8      	blx	r7
 80069b2:	3001      	adds	r0, #1
 80069b4:	f43f aeae 	beq.w	8006714 <_printf_float+0x9c>
 80069b8:	f108 0801 	add.w	r8, r8, #1
 80069bc:	e7ec      	b.n	8006998 <_printf_float+0x320>
 80069be:	4613      	mov	r3, r2
 80069c0:	4631      	mov	r1, r6
 80069c2:	4642      	mov	r2, r8
 80069c4:	4628      	mov	r0, r5
 80069c6:	47b8      	blx	r7
 80069c8:	3001      	adds	r0, #1
 80069ca:	d1bf      	bne.n	800694c <_printf_float+0x2d4>
 80069cc:	e6a2      	b.n	8006714 <_printf_float+0x9c>
 80069ce:	2301      	movs	r3, #1
 80069d0:	4631      	mov	r1, r6
 80069d2:	4628      	mov	r0, r5
 80069d4:	9204      	str	r2, [sp, #16]
 80069d6:	47b8      	blx	r7
 80069d8:	3001      	adds	r0, #1
 80069da:	f43f ae9b 	beq.w	8006714 <_printf_float+0x9c>
 80069de:	9b05      	ldr	r3, [sp, #20]
 80069e0:	9a04      	ldr	r2, [sp, #16]
 80069e2:	3301      	adds	r3, #1
 80069e4:	9305      	str	r3, [sp, #20]
 80069e6:	e7b7      	b.n	8006958 <_printf_float+0x2e0>
 80069e8:	4653      	mov	r3, sl
 80069ea:	465a      	mov	r2, fp
 80069ec:	4631      	mov	r1, r6
 80069ee:	4628      	mov	r0, r5
 80069f0:	47b8      	blx	r7
 80069f2:	3001      	adds	r0, #1
 80069f4:	d1be      	bne.n	8006974 <_printf_float+0x2fc>
 80069f6:	e68d      	b.n	8006714 <_printf_float+0x9c>
 80069f8:	9a04      	ldr	r2, [sp, #16]
 80069fa:	464b      	mov	r3, r9
 80069fc:	4442      	add	r2, r8
 80069fe:	4631      	mov	r1, r6
 8006a00:	4628      	mov	r0, r5
 8006a02:	47b8      	blx	r7
 8006a04:	3001      	adds	r0, #1
 8006a06:	d1c1      	bne.n	800698c <_printf_float+0x314>
 8006a08:	e684      	b.n	8006714 <_printf_float+0x9c>
 8006a0a:	9a08      	ldr	r2, [sp, #32]
 8006a0c:	2a01      	cmp	r2, #1
 8006a0e:	dc01      	bgt.n	8006a14 <_printf_float+0x39c>
 8006a10:	07db      	lsls	r3, r3, #31
 8006a12:	d537      	bpl.n	8006a84 <_printf_float+0x40c>
 8006a14:	2301      	movs	r3, #1
 8006a16:	4642      	mov	r2, r8
 8006a18:	4631      	mov	r1, r6
 8006a1a:	4628      	mov	r0, r5
 8006a1c:	47b8      	blx	r7
 8006a1e:	3001      	adds	r0, #1
 8006a20:	f43f ae78 	beq.w	8006714 <_printf_float+0x9c>
 8006a24:	4653      	mov	r3, sl
 8006a26:	465a      	mov	r2, fp
 8006a28:	4631      	mov	r1, r6
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	47b8      	blx	r7
 8006a2e:	3001      	adds	r0, #1
 8006a30:	f43f ae70 	beq.w	8006714 <_printf_float+0x9c>
 8006a34:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8006a38:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8006a3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006a40:	d01b      	beq.n	8006a7a <_printf_float+0x402>
 8006a42:	9b08      	ldr	r3, [sp, #32]
 8006a44:	f108 0201 	add.w	r2, r8, #1
 8006a48:	3b01      	subs	r3, #1
 8006a4a:	4631      	mov	r1, r6
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	47b8      	blx	r7
 8006a50:	3001      	adds	r0, #1
 8006a52:	d10e      	bne.n	8006a72 <_printf_float+0x3fa>
 8006a54:	e65e      	b.n	8006714 <_printf_float+0x9c>
 8006a56:	2301      	movs	r3, #1
 8006a58:	464a      	mov	r2, r9
 8006a5a:	4631      	mov	r1, r6
 8006a5c:	4628      	mov	r0, r5
 8006a5e:	47b8      	blx	r7
 8006a60:	3001      	adds	r0, #1
 8006a62:	f43f ae57 	beq.w	8006714 <_printf_float+0x9c>
 8006a66:	f108 0801 	add.w	r8, r8, #1
 8006a6a:	9b08      	ldr	r3, [sp, #32]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	4543      	cmp	r3, r8
 8006a70:	dcf1      	bgt.n	8006a56 <_printf_float+0x3de>
 8006a72:	9b04      	ldr	r3, [sp, #16]
 8006a74:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8006a78:	e6db      	b.n	8006832 <_printf_float+0x1ba>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	f104 091a 	add.w	r9, r4, #26
 8006a82:	e7f2      	b.n	8006a6a <_printf_float+0x3f2>
 8006a84:	2301      	movs	r3, #1
 8006a86:	4642      	mov	r2, r8
 8006a88:	e7df      	b.n	8006a4a <_printf_float+0x3d2>
 8006a8a:	2301      	movs	r3, #1
 8006a8c:	464a      	mov	r2, r9
 8006a8e:	4631      	mov	r1, r6
 8006a90:	4628      	mov	r0, r5
 8006a92:	47b8      	blx	r7
 8006a94:	3001      	adds	r0, #1
 8006a96:	f43f ae3d 	beq.w	8006714 <_printf_float+0x9c>
 8006a9a:	f108 0801 	add.w	r8, r8, #1
 8006a9e:	68e3      	ldr	r3, [r4, #12]
 8006aa0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8006aa2:	1a5b      	subs	r3, r3, r1
 8006aa4:	4543      	cmp	r3, r8
 8006aa6:	dcf0      	bgt.n	8006a8a <_printf_float+0x412>
 8006aa8:	e6f7      	b.n	800689a <_printf_float+0x222>
 8006aaa:	f04f 0800 	mov.w	r8, #0
 8006aae:	f104 0919 	add.w	r9, r4, #25
 8006ab2:	e7f4      	b.n	8006a9e <_printf_float+0x426>

08006ab4 <_printf_common>:
 8006ab4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab8:	4616      	mov	r6, r2
 8006aba:	4699      	mov	r9, r3
 8006abc:	688a      	ldr	r2, [r1, #8]
 8006abe:	690b      	ldr	r3, [r1, #16]
 8006ac0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac4:	4293      	cmp	r3, r2
 8006ac6:	bfb8      	it	lt
 8006ac8:	4613      	movlt	r3, r2
 8006aca:	6033      	str	r3, [r6, #0]
 8006acc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006ad0:	4607      	mov	r7, r0
 8006ad2:	460c      	mov	r4, r1
 8006ad4:	b10a      	cbz	r2, 8006ada <_printf_common+0x26>
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	6033      	str	r3, [r6, #0]
 8006ada:	6823      	ldr	r3, [r4, #0]
 8006adc:	0699      	lsls	r1, r3, #26
 8006ade:	bf42      	ittt	mi
 8006ae0:	6833      	ldrmi	r3, [r6, #0]
 8006ae2:	3302      	addmi	r3, #2
 8006ae4:	6033      	strmi	r3, [r6, #0]
 8006ae6:	6825      	ldr	r5, [r4, #0]
 8006ae8:	f015 0506 	ands.w	r5, r5, #6
 8006aec:	d106      	bne.n	8006afc <_printf_common+0x48>
 8006aee:	f104 0a19 	add.w	sl, r4, #25
 8006af2:	68e3      	ldr	r3, [r4, #12]
 8006af4:	6832      	ldr	r2, [r6, #0]
 8006af6:	1a9b      	subs	r3, r3, r2
 8006af8:	42ab      	cmp	r3, r5
 8006afa:	dc26      	bgt.n	8006b4a <_printf_common+0x96>
 8006afc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b00:	1e13      	subs	r3, r2, #0
 8006b02:	6822      	ldr	r2, [r4, #0]
 8006b04:	bf18      	it	ne
 8006b06:	2301      	movne	r3, #1
 8006b08:	0692      	lsls	r2, r2, #26
 8006b0a:	d42b      	bmi.n	8006b64 <_printf_common+0xb0>
 8006b0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b10:	4649      	mov	r1, r9
 8006b12:	4638      	mov	r0, r7
 8006b14:	47c0      	blx	r8
 8006b16:	3001      	adds	r0, #1
 8006b18:	d01e      	beq.n	8006b58 <_printf_common+0xa4>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	68e5      	ldr	r5, [r4, #12]
 8006b1e:	6832      	ldr	r2, [r6, #0]
 8006b20:	f003 0306 	and.w	r3, r3, #6
 8006b24:	2b04      	cmp	r3, #4
 8006b26:	bf08      	it	eq
 8006b28:	1aad      	subeq	r5, r5, r2
 8006b2a:	68a3      	ldr	r3, [r4, #8]
 8006b2c:	6922      	ldr	r2, [r4, #16]
 8006b2e:	bf0c      	ite	eq
 8006b30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b34:	2500      	movne	r5, #0
 8006b36:	4293      	cmp	r3, r2
 8006b38:	bfc4      	itt	gt
 8006b3a:	1a9b      	subgt	r3, r3, r2
 8006b3c:	18ed      	addgt	r5, r5, r3
 8006b3e:	2600      	movs	r6, #0
 8006b40:	341a      	adds	r4, #26
 8006b42:	42b5      	cmp	r5, r6
 8006b44:	d11a      	bne.n	8006b7c <_printf_common+0xc8>
 8006b46:	2000      	movs	r0, #0
 8006b48:	e008      	b.n	8006b5c <_printf_common+0xa8>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	4652      	mov	r2, sl
 8006b4e:	4649      	mov	r1, r9
 8006b50:	4638      	mov	r0, r7
 8006b52:	47c0      	blx	r8
 8006b54:	3001      	adds	r0, #1
 8006b56:	d103      	bne.n	8006b60 <_printf_common+0xac>
 8006b58:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b60:	3501      	adds	r5, #1
 8006b62:	e7c6      	b.n	8006af2 <_printf_common+0x3e>
 8006b64:	18e1      	adds	r1, r4, r3
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	2030      	movs	r0, #48	; 0x30
 8006b6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b6e:	4422      	add	r2, r4
 8006b70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b78:	3302      	adds	r3, #2
 8006b7a:	e7c7      	b.n	8006b0c <_printf_common+0x58>
 8006b7c:	2301      	movs	r3, #1
 8006b7e:	4622      	mov	r2, r4
 8006b80:	4649      	mov	r1, r9
 8006b82:	4638      	mov	r0, r7
 8006b84:	47c0      	blx	r8
 8006b86:	3001      	adds	r0, #1
 8006b88:	d0e6      	beq.n	8006b58 <_printf_common+0xa4>
 8006b8a:	3601      	adds	r6, #1
 8006b8c:	e7d9      	b.n	8006b42 <_printf_common+0x8e>
	...

08006b90 <_printf_i>:
 8006b90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b94:	7e0f      	ldrb	r7, [r1, #24]
 8006b96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b98:	2f78      	cmp	r7, #120	; 0x78
 8006b9a:	4691      	mov	r9, r2
 8006b9c:	4680      	mov	r8, r0
 8006b9e:	460c      	mov	r4, r1
 8006ba0:	469a      	mov	sl, r3
 8006ba2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006ba6:	d807      	bhi.n	8006bb8 <_printf_i+0x28>
 8006ba8:	2f62      	cmp	r7, #98	; 0x62
 8006baa:	d80a      	bhi.n	8006bc2 <_printf_i+0x32>
 8006bac:	2f00      	cmp	r7, #0
 8006bae:	f000 80d8 	beq.w	8006d62 <_printf_i+0x1d2>
 8006bb2:	2f58      	cmp	r7, #88	; 0x58
 8006bb4:	f000 80a3 	beq.w	8006cfe <_printf_i+0x16e>
 8006bb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bbc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bc0:	e03a      	b.n	8006c38 <_printf_i+0xa8>
 8006bc2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bc6:	2b15      	cmp	r3, #21
 8006bc8:	d8f6      	bhi.n	8006bb8 <_printf_i+0x28>
 8006bca:	a101      	add	r1, pc, #4	; (adr r1, 8006bd0 <_printf_i+0x40>)
 8006bcc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bd0:	08006c29 	.word	0x08006c29
 8006bd4:	08006c3d 	.word	0x08006c3d
 8006bd8:	08006bb9 	.word	0x08006bb9
 8006bdc:	08006bb9 	.word	0x08006bb9
 8006be0:	08006bb9 	.word	0x08006bb9
 8006be4:	08006bb9 	.word	0x08006bb9
 8006be8:	08006c3d 	.word	0x08006c3d
 8006bec:	08006bb9 	.word	0x08006bb9
 8006bf0:	08006bb9 	.word	0x08006bb9
 8006bf4:	08006bb9 	.word	0x08006bb9
 8006bf8:	08006bb9 	.word	0x08006bb9
 8006bfc:	08006d49 	.word	0x08006d49
 8006c00:	08006c6d 	.word	0x08006c6d
 8006c04:	08006d2b 	.word	0x08006d2b
 8006c08:	08006bb9 	.word	0x08006bb9
 8006c0c:	08006bb9 	.word	0x08006bb9
 8006c10:	08006d6b 	.word	0x08006d6b
 8006c14:	08006bb9 	.word	0x08006bb9
 8006c18:	08006c6d 	.word	0x08006c6d
 8006c1c:	08006bb9 	.word	0x08006bb9
 8006c20:	08006bb9 	.word	0x08006bb9
 8006c24:	08006d33 	.word	0x08006d33
 8006c28:	682b      	ldr	r3, [r5, #0]
 8006c2a:	1d1a      	adds	r2, r3, #4
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	602a      	str	r2, [r5, #0]
 8006c30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c38:	2301      	movs	r3, #1
 8006c3a:	e0a3      	b.n	8006d84 <_printf_i+0x1f4>
 8006c3c:	6820      	ldr	r0, [r4, #0]
 8006c3e:	6829      	ldr	r1, [r5, #0]
 8006c40:	0606      	lsls	r6, r0, #24
 8006c42:	f101 0304 	add.w	r3, r1, #4
 8006c46:	d50a      	bpl.n	8006c5e <_printf_i+0xce>
 8006c48:	680e      	ldr	r6, [r1, #0]
 8006c4a:	602b      	str	r3, [r5, #0]
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	da03      	bge.n	8006c58 <_printf_i+0xc8>
 8006c50:	232d      	movs	r3, #45	; 0x2d
 8006c52:	4276      	negs	r6, r6
 8006c54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c58:	485e      	ldr	r0, [pc, #376]	; (8006dd4 <_printf_i+0x244>)
 8006c5a:	230a      	movs	r3, #10
 8006c5c:	e019      	b.n	8006c92 <_printf_i+0x102>
 8006c5e:	680e      	ldr	r6, [r1, #0]
 8006c60:	602b      	str	r3, [r5, #0]
 8006c62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c66:	bf18      	it	ne
 8006c68:	b236      	sxthne	r6, r6
 8006c6a:	e7ef      	b.n	8006c4c <_printf_i+0xbc>
 8006c6c:	682b      	ldr	r3, [r5, #0]
 8006c6e:	6820      	ldr	r0, [r4, #0]
 8006c70:	1d19      	adds	r1, r3, #4
 8006c72:	6029      	str	r1, [r5, #0]
 8006c74:	0601      	lsls	r1, r0, #24
 8006c76:	d501      	bpl.n	8006c7c <_printf_i+0xec>
 8006c78:	681e      	ldr	r6, [r3, #0]
 8006c7a:	e002      	b.n	8006c82 <_printf_i+0xf2>
 8006c7c:	0646      	lsls	r6, r0, #25
 8006c7e:	d5fb      	bpl.n	8006c78 <_printf_i+0xe8>
 8006c80:	881e      	ldrh	r6, [r3, #0]
 8006c82:	4854      	ldr	r0, [pc, #336]	; (8006dd4 <_printf_i+0x244>)
 8006c84:	2f6f      	cmp	r7, #111	; 0x6f
 8006c86:	bf0c      	ite	eq
 8006c88:	2308      	moveq	r3, #8
 8006c8a:	230a      	movne	r3, #10
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c92:	6865      	ldr	r5, [r4, #4]
 8006c94:	60a5      	str	r5, [r4, #8]
 8006c96:	2d00      	cmp	r5, #0
 8006c98:	bfa2      	ittt	ge
 8006c9a:	6821      	ldrge	r1, [r4, #0]
 8006c9c:	f021 0104 	bicge.w	r1, r1, #4
 8006ca0:	6021      	strge	r1, [r4, #0]
 8006ca2:	b90e      	cbnz	r6, 8006ca8 <_printf_i+0x118>
 8006ca4:	2d00      	cmp	r5, #0
 8006ca6:	d04d      	beq.n	8006d44 <_printf_i+0x1b4>
 8006ca8:	4615      	mov	r5, r2
 8006caa:	fbb6 f1f3 	udiv	r1, r6, r3
 8006cae:	fb03 6711 	mls	r7, r3, r1, r6
 8006cb2:	5dc7      	ldrb	r7, [r0, r7]
 8006cb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cb8:	4637      	mov	r7, r6
 8006cba:	42bb      	cmp	r3, r7
 8006cbc:	460e      	mov	r6, r1
 8006cbe:	d9f4      	bls.n	8006caa <_printf_i+0x11a>
 8006cc0:	2b08      	cmp	r3, #8
 8006cc2:	d10b      	bne.n	8006cdc <_printf_i+0x14c>
 8006cc4:	6823      	ldr	r3, [r4, #0]
 8006cc6:	07de      	lsls	r6, r3, #31
 8006cc8:	d508      	bpl.n	8006cdc <_printf_i+0x14c>
 8006cca:	6923      	ldr	r3, [r4, #16]
 8006ccc:	6861      	ldr	r1, [r4, #4]
 8006cce:	4299      	cmp	r1, r3
 8006cd0:	bfde      	ittt	le
 8006cd2:	2330      	movle	r3, #48	; 0x30
 8006cd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cdc:	1b52      	subs	r2, r2, r5
 8006cde:	6122      	str	r2, [r4, #16]
 8006ce0:	f8cd a000 	str.w	sl, [sp]
 8006ce4:	464b      	mov	r3, r9
 8006ce6:	aa03      	add	r2, sp, #12
 8006ce8:	4621      	mov	r1, r4
 8006cea:	4640      	mov	r0, r8
 8006cec:	f7ff fee2 	bl	8006ab4 <_printf_common>
 8006cf0:	3001      	adds	r0, #1
 8006cf2:	d14c      	bne.n	8006d8e <_printf_i+0x1fe>
 8006cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf8:	b004      	add	sp, #16
 8006cfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfe:	4835      	ldr	r0, [pc, #212]	; (8006dd4 <_printf_i+0x244>)
 8006d00:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d04:	6829      	ldr	r1, [r5, #0]
 8006d06:	6823      	ldr	r3, [r4, #0]
 8006d08:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d0c:	6029      	str	r1, [r5, #0]
 8006d0e:	061d      	lsls	r5, r3, #24
 8006d10:	d514      	bpl.n	8006d3c <_printf_i+0x1ac>
 8006d12:	07df      	lsls	r7, r3, #31
 8006d14:	bf44      	itt	mi
 8006d16:	f043 0320 	orrmi.w	r3, r3, #32
 8006d1a:	6023      	strmi	r3, [r4, #0]
 8006d1c:	b91e      	cbnz	r6, 8006d26 <_printf_i+0x196>
 8006d1e:	6823      	ldr	r3, [r4, #0]
 8006d20:	f023 0320 	bic.w	r3, r3, #32
 8006d24:	6023      	str	r3, [r4, #0]
 8006d26:	2310      	movs	r3, #16
 8006d28:	e7b0      	b.n	8006c8c <_printf_i+0xfc>
 8006d2a:	6823      	ldr	r3, [r4, #0]
 8006d2c:	f043 0320 	orr.w	r3, r3, #32
 8006d30:	6023      	str	r3, [r4, #0]
 8006d32:	2378      	movs	r3, #120	; 0x78
 8006d34:	4828      	ldr	r0, [pc, #160]	; (8006dd8 <_printf_i+0x248>)
 8006d36:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d3a:	e7e3      	b.n	8006d04 <_printf_i+0x174>
 8006d3c:	0659      	lsls	r1, r3, #25
 8006d3e:	bf48      	it	mi
 8006d40:	b2b6      	uxthmi	r6, r6
 8006d42:	e7e6      	b.n	8006d12 <_printf_i+0x182>
 8006d44:	4615      	mov	r5, r2
 8006d46:	e7bb      	b.n	8006cc0 <_printf_i+0x130>
 8006d48:	682b      	ldr	r3, [r5, #0]
 8006d4a:	6826      	ldr	r6, [r4, #0]
 8006d4c:	6961      	ldr	r1, [r4, #20]
 8006d4e:	1d18      	adds	r0, r3, #4
 8006d50:	6028      	str	r0, [r5, #0]
 8006d52:	0635      	lsls	r5, r6, #24
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	d501      	bpl.n	8006d5c <_printf_i+0x1cc>
 8006d58:	6019      	str	r1, [r3, #0]
 8006d5a:	e002      	b.n	8006d62 <_printf_i+0x1d2>
 8006d5c:	0670      	lsls	r0, r6, #25
 8006d5e:	d5fb      	bpl.n	8006d58 <_printf_i+0x1c8>
 8006d60:	8019      	strh	r1, [r3, #0]
 8006d62:	2300      	movs	r3, #0
 8006d64:	6123      	str	r3, [r4, #16]
 8006d66:	4615      	mov	r5, r2
 8006d68:	e7ba      	b.n	8006ce0 <_printf_i+0x150>
 8006d6a:	682b      	ldr	r3, [r5, #0]
 8006d6c:	1d1a      	adds	r2, r3, #4
 8006d6e:	602a      	str	r2, [r5, #0]
 8006d70:	681d      	ldr	r5, [r3, #0]
 8006d72:	6862      	ldr	r2, [r4, #4]
 8006d74:	2100      	movs	r1, #0
 8006d76:	4628      	mov	r0, r5
 8006d78:	f7f9 fa6a 	bl	8000250 <memchr>
 8006d7c:	b108      	cbz	r0, 8006d82 <_printf_i+0x1f2>
 8006d7e:	1b40      	subs	r0, r0, r5
 8006d80:	6060      	str	r0, [r4, #4]
 8006d82:	6863      	ldr	r3, [r4, #4]
 8006d84:	6123      	str	r3, [r4, #16]
 8006d86:	2300      	movs	r3, #0
 8006d88:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d8c:	e7a8      	b.n	8006ce0 <_printf_i+0x150>
 8006d8e:	6923      	ldr	r3, [r4, #16]
 8006d90:	462a      	mov	r2, r5
 8006d92:	4649      	mov	r1, r9
 8006d94:	4640      	mov	r0, r8
 8006d96:	47d0      	blx	sl
 8006d98:	3001      	adds	r0, #1
 8006d9a:	d0ab      	beq.n	8006cf4 <_printf_i+0x164>
 8006d9c:	6823      	ldr	r3, [r4, #0]
 8006d9e:	079b      	lsls	r3, r3, #30
 8006da0:	d413      	bmi.n	8006dca <_printf_i+0x23a>
 8006da2:	68e0      	ldr	r0, [r4, #12]
 8006da4:	9b03      	ldr	r3, [sp, #12]
 8006da6:	4298      	cmp	r0, r3
 8006da8:	bfb8      	it	lt
 8006daa:	4618      	movlt	r0, r3
 8006dac:	e7a4      	b.n	8006cf8 <_printf_i+0x168>
 8006dae:	2301      	movs	r3, #1
 8006db0:	4632      	mov	r2, r6
 8006db2:	4649      	mov	r1, r9
 8006db4:	4640      	mov	r0, r8
 8006db6:	47d0      	blx	sl
 8006db8:	3001      	adds	r0, #1
 8006dba:	d09b      	beq.n	8006cf4 <_printf_i+0x164>
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	68e3      	ldr	r3, [r4, #12]
 8006dc0:	9903      	ldr	r1, [sp, #12]
 8006dc2:	1a5b      	subs	r3, r3, r1
 8006dc4:	42ab      	cmp	r3, r5
 8006dc6:	dcf2      	bgt.n	8006dae <_printf_i+0x21e>
 8006dc8:	e7eb      	b.n	8006da2 <_printf_i+0x212>
 8006dca:	2500      	movs	r5, #0
 8006dcc:	f104 0619 	add.w	r6, r4, #25
 8006dd0:	e7f5      	b.n	8006dbe <_printf_i+0x22e>
 8006dd2:	bf00      	nop
 8006dd4:	0802ee66 	.word	0x0802ee66
 8006dd8:	0802ee77 	.word	0x0802ee77

08006ddc <siprintf>:
 8006ddc:	b40e      	push	{r1, r2, r3}
 8006dde:	b500      	push	{lr}
 8006de0:	b09c      	sub	sp, #112	; 0x70
 8006de2:	ab1d      	add	r3, sp, #116	; 0x74
 8006de4:	9002      	str	r0, [sp, #8]
 8006de6:	9006      	str	r0, [sp, #24]
 8006de8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006dec:	4809      	ldr	r0, [pc, #36]	; (8006e14 <siprintf+0x38>)
 8006dee:	9107      	str	r1, [sp, #28]
 8006df0:	9104      	str	r1, [sp, #16]
 8006df2:	4909      	ldr	r1, [pc, #36]	; (8006e18 <siprintf+0x3c>)
 8006df4:	f853 2b04 	ldr.w	r2, [r3], #4
 8006df8:	9105      	str	r1, [sp, #20]
 8006dfa:	6800      	ldr	r0, [r0, #0]
 8006dfc:	9301      	str	r3, [sp, #4]
 8006dfe:	a902      	add	r1, sp, #8
 8006e00:	f001 faf8 	bl	80083f4 <_svfiprintf_r>
 8006e04:	9b02      	ldr	r3, [sp, #8]
 8006e06:	2200      	movs	r2, #0
 8006e08:	701a      	strb	r2, [r3, #0]
 8006e0a:	b01c      	add	sp, #112	; 0x70
 8006e0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006e10:	b003      	add	sp, #12
 8006e12:	4770      	bx	lr
 8006e14:	20000010 	.word	0x20000010
 8006e18:	ffff0208 	.word	0xffff0208

08006e1c <quorem>:
 8006e1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e20:	6903      	ldr	r3, [r0, #16]
 8006e22:	690c      	ldr	r4, [r1, #16]
 8006e24:	42a3      	cmp	r3, r4
 8006e26:	4607      	mov	r7, r0
 8006e28:	f2c0 8081 	blt.w	8006f2e <quorem+0x112>
 8006e2c:	3c01      	subs	r4, #1
 8006e2e:	f101 0814 	add.w	r8, r1, #20
 8006e32:	f100 0514 	add.w	r5, r0, #20
 8006e36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006e3a:	9301      	str	r3, [sp, #4]
 8006e3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006e40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006e44:	3301      	adds	r3, #1
 8006e46:	429a      	cmp	r2, r3
 8006e48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8006e4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006e50:	fbb2 f6f3 	udiv	r6, r2, r3
 8006e54:	d331      	bcc.n	8006eba <quorem+0x9e>
 8006e56:	f04f 0e00 	mov.w	lr, #0
 8006e5a:	4640      	mov	r0, r8
 8006e5c:	46ac      	mov	ip, r5
 8006e5e:	46f2      	mov	sl, lr
 8006e60:	f850 2b04 	ldr.w	r2, [r0], #4
 8006e64:	b293      	uxth	r3, r2
 8006e66:	fb06 e303 	mla	r3, r6, r3, lr
 8006e6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8006e6e:	b29b      	uxth	r3, r3
 8006e70:	ebaa 0303 	sub.w	r3, sl, r3
 8006e74:	f8dc a000 	ldr.w	sl, [ip]
 8006e78:	0c12      	lsrs	r2, r2, #16
 8006e7a:	fa13 f38a 	uxtah	r3, r3, sl
 8006e7e:	fb06 e202 	mla	r2, r6, r2, lr
 8006e82:	9300      	str	r3, [sp, #0]
 8006e84:	9b00      	ldr	r3, [sp, #0]
 8006e86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8006e8a:	b292      	uxth	r2, r2
 8006e8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8006e90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006e94:	f8bd 3000 	ldrh.w	r3, [sp]
 8006e98:	4581      	cmp	r9, r0
 8006e9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006e9e:	f84c 3b04 	str.w	r3, [ip], #4
 8006ea2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8006ea6:	d2db      	bcs.n	8006e60 <quorem+0x44>
 8006ea8:	f855 300b 	ldr.w	r3, [r5, fp]
 8006eac:	b92b      	cbnz	r3, 8006eba <quorem+0x9e>
 8006eae:	9b01      	ldr	r3, [sp, #4]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	429d      	cmp	r5, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	d32e      	bcc.n	8006f16 <quorem+0xfa>
 8006eb8:	613c      	str	r4, [r7, #16]
 8006eba:	4638      	mov	r0, r7
 8006ebc:	f001 f846 	bl	8007f4c <__mcmp>
 8006ec0:	2800      	cmp	r0, #0
 8006ec2:	db24      	blt.n	8006f0e <quorem+0xf2>
 8006ec4:	3601      	adds	r6, #1
 8006ec6:	4628      	mov	r0, r5
 8006ec8:	f04f 0c00 	mov.w	ip, #0
 8006ecc:	f858 2b04 	ldr.w	r2, [r8], #4
 8006ed0:	f8d0 e000 	ldr.w	lr, [r0]
 8006ed4:	b293      	uxth	r3, r2
 8006ed6:	ebac 0303 	sub.w	r3, ip, r3
 8006eda:	0c12      	lsrs	r2, r2, #16
 8006edc:	fa13 f38e 	uxtah	r3, r3, lr
 8006ee0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8006ee4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006eee:	45c1      	cmp	r9, r8
 8006ef0:	f840 3b04 	str.w	r3, [r0], #4
 8006ef4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8006ef8:	d2e8      	bcs.n	8006ecc <quorem+0xb0>
 8006efa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006efe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006f02:	b922      	cbnz	r2, 8006f0e <quorem+0xf2>
 8006f04:	3b04      	subs	r3, #4
 8006f06:	429d      	cmp	r5, r3
 8006f08:	461a      	mov	r2, r3
 8006f0a:	d30a      	bcc.n	8006f22 <quorem+0x106>
 8006f0c:	613c      	str	r4, [r7, #16]
 8006f0e:	4630      	mov	r0, r6
 8006f10:	b003      	add	sp, #12
 8006f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f16:	6812      	ldr	r2, [r2, #0]
 8006f18:	3b04      	subs	r3, #4
 8006f1a:	2a00      	cmp	r2, #0
 8006f1c:	d1cc      	bne.n	8006eb8 <quorem+0x9c>
 8006f1e:	3c01      	subs	r4, #1
 8006f20:	e7c7      	b.n	8006eb2 <quorem+0x96>
 8006f22:	6812      	ldr	r2, [r2, #0]
 8006f24:	3b04      	subs	r3, #4
 8006f26:	2a00      	cmp	r2, #0
 8006f28:	d1f0      	bne.n	8006f0c <quorem+0xf0>
 8006f2a:	3c01      	subs	r4, #1
 8006f2c:	e7eb      	b.n	8006f06 <quorem+0xea>
 8006f2e:	2000      	movs	r0, #0
 8006f30:	e7ee      	b.n	8006f10 <quorem+0xf4>
 8006f32:	0000      	movs	r0, r0
 8006f34:	0000      	movs	r0, r0
	...

08006f38 <_dtoa_r>:
 8006f38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f3c:	ed2d 8b02 	vpush	{d8}
 8006f40:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8006f42:	b091      	sub	sp, #68	; 0x44
 8006f44:	ed8d 0b02 	vstr	d0, [sp, #8]
 8006f48:	ec59 8b10 	vmov	r8, r9, d0
 8006f4c:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8006f4e:	9106      	str	r1, [sp, #24]
 8006f50:	4606      	mov	r6, r0
 8006f52:	9208      	str	r2, [sp, #32]
 8006f54:	930c      	str	r3, [sp, #48]	; 0x30
 8006f56:	b975      	cbnz	r5, 8006f76 <_dtoa_r+0x3e>
 8006f58:	2010      	movs	r0, #16
 8006f5a:	f000 fd5f 	bl	8007a1c <malloc>
 8006f5e:	4602      	mov	r2, r0
 8006f60:	6270      	str	r0, [r6, #36]	; 0x24
 8006f62:	b920      	cbnz	r0, 8006f6e <_dtoa_r+0x36>
 8006f64:	4baa      	ldr	r3, [pc, #680]	; (8007210 <_dtoa_r+0x2d8>)
 8006f66:	21ea      	movs	r1, #234	; 0xea
 8006f68:	48aa      	ldr	r0, [pc, #680]	; (8007214 <_dtoa_r+0x2dc>)
 8006f6a:	f001 fb53 	bl	8008614 <__assert_func>
 8006f6e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8006f72:	6005      	str	r5, [r0, #0]
 8006f74:	60c5      	str	r5, [r0, #12]
 8006f76:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f78:	6819      	ldr	r1, [r3, #0]
 8006f7a:	b151      	cbz	r1, 8006f92 <_dtoa_r+0x5a>
 8006f7c:	685a      	ldr	r2, [r3, #4]
 8006f7e:	604a      	str	r2, [r1, #4]
 8006f80:	2301      	movs	r3, #1
 8006f82:	4093      	lsls	r3, r2
 8006f84:	608b      	str	r3, [r1, #8]
 8006f86:	4630      	mov	r0, r6
 8006f88:	f000 fd9e 	bl	8007ac8 <_Bfree>
 8006f8c:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8006f8e:	2200      	movs	r2, #0
 8006f90:	601a      	str	r2, [r3, #0]
 8006f92:	f1b9 0300 	subs.w	r3, r9, #0
 8006f96:	bfbb      	ittet	lt
 8006f98:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8006f9c:	9303      	strlt	r3, [sp, #12]
 8006f9e:	2300      	movge	r3, #0
 8006fa0:	2201      	movlt	r2, #1
 8006fa2:	bfac      	ite	ge
 8006fa4:	6023      	strge	r3, [r4, #0]
 8006fa6:	6022      	strlt	r2, [r4, #0]
 8006fa8:	4b9b      	ldr	r3, [pc, #620]	; (8007218 <_dtoa_r+0x2e0>)
 8006faa:	9c03      	ldr	r4, [sp, #12]
 8006fac:	43a3      	bics	r3, r4
 8006fae:	d11c      	bne.n	8006fea <_dtoa_r+0xb2>
 8006fb0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006fb2:	f242 730f 	movw	r3, #9999	; 0x270f
 8006fb6:	6013      	str	r3, [r2, #0]
 8006fb8:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006fbc:	ea53 0308 	orrs.w	r3, r3, r8
 8006fc0:	f000 84fd 	beq.w	80079be <_dtoa_r+0xa86>
 8006fc4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8006fc6:	b963      	cbnz	r3, 8006fe2 <_dtoa_r+0xaa>
 8006fc8:	4b94      	ldr	r3, [pc, #592]	; (800721c <_dtoa_r+0x2e4>)
 8006fca:	e01f      	b.n	800700c <_dtoa_r+0xd4>
 8006fcc:	4b94      	ldr	r3, [pc, #592]	; (8007220 <_dtoa_r+0x2e8>)
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	3308      	adds	r3, #8
 8006fd2:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8006fd4:	6013      	str	r3, [r2, #0]
 8006fd6:	9801      	ldr	r0, [sp, #4]
 8006fd8:	b011      	add	sp, #68	; 0x44
 8006fda:	ecbd 8b02 	vpop	{d8}
 8006fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fe2:	4b8e      	ldr	r3, [pc, #568]	; (800721c <_dtoa_r+0x2e4>)
 8006fe4:	9301      	str	r3, [sp, #4]
 8006fe6:	3303      	adds	r3, #3
 8006fe8:	e7f3      	b.n	8006fd2 <_dtoa_r+0x9a>
 8006fea:	ed9d 8b02 	vldr	d8, [sp, #8]
 8006fee:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8006ff2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff6:	d10b      	bne.n	8007010 <_dtoa_r+0xd8>
 8006ff8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	6013      	str	r3, [r2, #0]
 8006ffe:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007000:	2b00      	cmp	r3, #0
 8007002:	f000 84d9 	beq.w	80079b8 <_dtoa_r+0xa80>
 8007006:	4887      	ldr	r0, [pc, #540]	; (8007224 <_dtoa_r+0x2ec>)
 8007008:	6018      	str	r0, [r3, #0]
 800700a:	1e43      	subs	r3, r0, #1
 800700c:	9301      	str	r3, [sp, #4]
 800700e:	e7e2      	b.n	8006fd6 <_dtoa_r+0x9e>
 8007010:	a90f      	add	r1, sp, #60	; 0x3c
 8007012:	aa0e      	add	r2, sp, #56	; 0x38
 8007014:	4630      	mov	r0, r6
 8007016:	eeb0 0b48 	vmov.f64	d0, d8
 800701a:	f001 f83d 	bl	8008098 <__d2b>
 800701e:	f3c4 510a 	ubfx	r1, r4, #20, #11
 8007022:	4605      	mov	r5, r0
 8007024:	980e      	ldr	r0, [sp, #56]	; 0x38
 8007026:	2900      	cmp	r1, #0
 8007028:	d046      	beq.n	80070b8 <_dtoa_r+0x180>
 800702a:	ee18 4a90 	vmov	r4, s17
 800702e:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007032:	ec53 2b18 	vmov	r2, r3, d8
 8007036:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 800703a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800703e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007042:	2400      	movs	r4, #0
 8007044:	ec43 2b16 	vmov	d6, r2, r3
 8007048:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 800704c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 80071f8 <_dtoa_r+0x2c0>
 8007050:	ee36 7b47 	vsub.f64	d7, d6, d7
 8007054:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8007200 <_dtoa_r+0x2c8>
 8007058:	eea7 6b05 	vfma.f64	d6, d7, d5
 800705c:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8007208 <_dtoa_r+0x2d0>
 8007060:	ee07 1a90 	vmov	s15, r1
 8007064:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8007068:	eeb0 7b46 	vmov.f64	d7, d6
 800706c:	eea4 7b05 	vfma.f64	d7, d4, d5
 8007070:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8007074:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8007078:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800707c:	ee16 ba90 	vmov	fp, s13
 8007080:	940a      	str	r4, [sp, #40]	; 0x28
 8007082:	d508      	bpl.n	8007096 <_dtoa_r+0x15e>
 8007084:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8007088:	eeb4 6b47 	vcmp.f64	d6, d7
 800708c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007090:	bf18      	it	ne
 8007092:	f10b 3bff 	addne.w	fp, fp, #4294967295
 8007096:	f1bb 0f16 	cmp.w	fp, #22
 800709a:	d82f      	bhi.n	80070fc <_dtoa_r+0x1c4>
 800709c:	4b62      	ldr	r3, [pc, #392]	; (8007228 <_dtoa_r+0x2f0>)
 800709e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80070a2:	ed93 7b00 	vldr	d7, [r3]
 80070a6:	eeb4 8bc7 	vcmpe.f64	d8, d7
 80070aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070ae:	d501      	bpl.n	80070b4 <_dtoa_r+0x17c>
 80070b0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80070b4:	2300      	movs	r3, #0
 80070b6:	e022      	b.n	80070fe <_dtoa_r+0x1c6>
 80070b8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80070ba:	4401      	add	r1, r0
 80070bc:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80070c0:	2b20      	cmp	r3, #32
 80070c2:	bfc1      	itttt	gt
 80070c4:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80070c8:	fa04 f303 	lslgt.w	r3, r4, r3
 80070cc:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80070d0:	fa28 f804 	lsrgt.w	r8, r8, r4
 80070d4:	bfd6      	itet	le
 80070d6:	f1c3 0320 	rsble	r3, r3, #32
 80070da:	ea43 0808 	orrgt.w	r8, r3, r8
 80070de:	fa08 f803 	lslle.w	r8, r8, r3
 80070e2:	ee07 8a90 	vmov	s15, r8
 80070e6:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80070ea:	3901      	subs	r1, #1
 80070ec:	ee17 4a90 	vmov	r4, s15
 80070f0:	ec53 2b17 	vmov	r2, r3, d7
 80070f4:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80070f8:	2401      	movs	r4, #1
 80070fa:	e7a3      	b.n	8007044 <_dtoa_r+0x10c>
 80070fc:	2301      	movs	r3, #1
 80070fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8007100:	1a43      	subs	r3, r0, r1
 8007102:	1e5a      	subs	r2, r3, #1
 8007104:	bf45      	ittet	mi
 8007106:	f1c3 0301 	rsbmi	r3, r3, #1
 800710a:	9304      	strmi	r3, [sp, #16]
 800710c:	2300      	movpl	r3, #0
 800710e:	2300      	movmi	r3, #0
 8007110:	9205      	str	r2, [sp, #20]
 8007112:	bf54      	ite	pl
 8007114:	9304      	strpl	r3, [sp, #16]
 8007116:	9305      	strmi	r3, [sp, #20]
 8007118:	f1bb 0f00 	cmp.w	fp, #0
 800711c:	db18      	blt.n	8007150 <_dtoa_r+0x218>
 800711e:	9b05      	ldr	r3, [sp, #20]
 8007120:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8007124:	445b      	add	r3, fp
 8007126:	9305      	str	r3, [sp, #20]
 8007128:	2300      	movs	r3, #0
 800712a:	9a06      	ldr	r2, [sp, #24]
 800712c:	2a09      	cmp	r2, #9
 800712e:	d849      	bhi.n	80071c4 <_dtoa_r+0x28c>
 8007130:	2a05      	cmp	r2, #5
 8007132:	bfc4      	itt	gt
 8007134:	3a04      	subgt	r2, #4
 8007136:	9206      	strgt	r2, [sp, #24]
 8007138:	9a06      	ldr	r2, [sp, #24]
 800713a:	f1a2 0202 	sub.w	r2, r2, #2
 800713e:	bfcc      	ite	gt
 8007140:	2400      	movgt	r4, #0
 8007142:	2401      	movle	r4, #1
 8007144:	2a03      	cmp	r2, #3
 8007146:	d848      	bhi.n	80071da <_dtoa_r+0x2a2>
 8007148:	e8df f002 	tbb	[pc, r2]
 800714c:	3a2c2e0b 	.word	0x3a2c2e0b
 8007150:	9b04      	ldr	r3, [sp, #16]
 8007152:	2200      	movs	r2, #0
 8007154:	eba3 030b 	sub.w	r3, r3, fp
 8007158:	9304      	str	r3, [sp, #16]
 800715a:	9209      	str	r2, [sp, #36]	; 0x24
 800715c:	f1cb 0300 	rsb	r3, fp, #0
 8007160:	e7e3      	b.n	800712a <_dtoa_r+0x1f2>
 8007162:	2200      	movs	r2, #0
 8007164:	9207      	str	r2, [sp, #28]
 8007166:	9a08      	ldr	r2, [sp, #32]
 8007168:	2a00      	cmp	r2, #0
 800716a:	dc39      	bgt.n	80071e0 <_dtoa_r+0x2a8>
 800716c:	f04f 0a01 	mov.w	sl, #1
 8007170:	46d1      	mov	r9, sl
 8007172:	4652      	mov	r2, sl
 8007174:	f8cd a020 	str.w	sl, [sp, #32]
 8007178:	6a77      	ldr	r7, [r6, #36]	; 0x24
 800717a:	2100      	movs	r1, #0
 800717c:	6079      	str	r1, [r7, #4]
 800717e:	2004      	movs	r0, #4
 8007180:	f100 0c14 	add.w	ip, r0, #20
 8007184:	4594      	cmp	ip, r2
 8007186:	6879      	ldr	r1, [r7, #4]
 8007188:	d92f      	bls.n	80071ea <_dtoa_r+0x2b2>
 800718a:	4630      	mov	r0, r6
 800718c:	930d      	str	r3, [sp, #52]	; 0x34
 800718e:	f000 fc5b 	bl	8007a48 <_Balloc>
 8007192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007194:	9001      	str	r0, [sp, #4]
 8007196:	4602      	mov	r2, r0
 8007198:	2800      	cmp	r0, #0
 800719a:	d149      	bne.n	8007230 <_dtoa_r+0x2f8>
 800719c:	4b23      	ldr	r3, [pc, #140]	; (800722c <_dtoa_r+0x2f4>)
 800719e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80071a2:	e6e1      	b.n	8006f68 <_dtoa_r+0x30>
 80071a4:	2201      	movs	r2, #1
 80071a6:	e7dd      	b.n	8007164 <_dtoa_r+0x22c>
 80071a8:	2200      	movs	r2, #0
 80071aa:	9207      	str	r2, [sp, #28]
 80071ac:	9a08      	ldr	r2, [sp, #32]
 80071ae:	eb0b 0a02 	add.w	sl, fp, r2
 80071b2:	f10a 0901 	add.w	r9, sl, #1
 80071b6:	464a      	mov	r2, r9
 80071b8:	2a01      	cmp	r2, #1
 80071ba:	bfb8      	it	lt
 80071bc:	2201      	movlt	r2, #1
 80071be:	e7db      	b.n	8007178 <_dtoa_r+0x240>
 80071c0:	2201      	movs	r2, #1
 80071c2:	e7f2      	b.n	80071aa <_dtoa_r+0x272>
 80071c4:	2401      	movs	r4, #1
 80071c6:	2200      	movs	r2, #0
 80071c8:	e9cd 2406 	strd	r2, r4, [sp, #24]
 80071cc:	f04f 3aff 	mov.w	sl, #4294967295
 80071d0:	2100      	movs	r1, #0
 80071d2:	46d1      	mov	r9, sl
 80071d4:	2212      	movs	r2, #18
 80071d6:	9108      	str	r1, [sp, #32]
 80071d8:	e7ce      	b.n	8007178 <_dtoa_r+0x240>
 80071da:	2201      	movs	r2, #1
 80071dc:	9207      	str	r2, [sp, #28]
 80071de:	e7f5      	b.n	80071cc <_dtoa_r+0x294>
 80071e0:	f8dd a020 	ldr.w	sl, [sp, #32]
 80071e4:	46d1      	mov	r9, sl
 80071e6:	4652      	mov	r2, sl
 80071e8:	e7c6      	b.n	8007178 <_dtoa_r+0x240>
 80071ea:	3101      	adds	r1, #1
 80071ec:	6079      	str	r1, [r7, #4]
 80071ee:	0040      	lsls	r0, r0, #1
 80071f0:	e7c6      	b.n	8007180 <_dtoa_r+0x248>
 80071f2:	bf00      	nop
 80071f4:	f3af 8000 	nop.w
 80071f8:	636f4361 	.word	0x636f4361
 80071fc:	3fd287a7 	.word	0x3fd287a7
 8007200:	8b60c8b3 	.word	0x8b60c8b3
 8007204:	3fc68a28 	.word	0x3fc68a28
 8007208:	509f79fb 	.word	0x509f79fb
 800720c:	3fd34413 	.word	0x3fd34413
 8007210:	0802ee95 	.word	0x0802ee95
 8007214:	0802eeac 	.word	0x0802eeac
 8007218:	7ff00000 	.word	0x7ff00000
 800721c:	0802ee91 	.word	0x0802ee91
 8007220:	0802ee88 	.word	0x0802ee88
 8007224:	0802ee65 	.word	0x0802ee65
 8007228:	0802efa0 	.word	0x0802efa0
 800722c:	0802ef07 	.word	0x0802ef07
 8007230:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8007232:	9901      	ldr	r1, [sp, #4]
 8007234:	6011      	str	r1, [r2, #0]
 8007236:	f1b9 0f0e 	cmp.w	r9, #14
 800723a:	d86c      	bhi.n	8007316 <_dtoa_r+0x3de>
 800723c:	2c00      	cmp	r4, #0
 800723e:	d06a      	beq.n	8007316 <_dtoa_r+0x3de>
 8007240:	f1bb 0f00 	cmp.w	fp, #0
 8007244:	f340 80a0 	ble.w	8007388 <_dtoa_r+0x450>
 8007248:	49c1      	ldr	r1, [pc, #772]	; (8007550 <_dtoa_r+0x618>)
 800724a:	f00b 020f 	and.w	r2, fp, #15
 800724e:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8007252:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8007256:	ed92 7b00 	vldr	d7, [r2]
 800725a:	ea4f 112b 	mov.w	r1, fp, asr #4
 800725e:	f000 8087 	beq.w	8007370 <_dtoa_r+0x438>
 8007262:	4abc      	ldr	r2, [pc, #752]	; (8007554 <_dtoa_r+0x61c>)
 8007264:	ed92 6b08 	vldr	d6, [r2, #32]
 8007268:	ee88 6b06 	vdiv.f64	d6, d8, d6
 800726c:	ed8d 6b02 	vstr	d6, [sp, #8]
 8007270:	f001 010f 	and.w	r1, r1, #15
 8007274:	2203      	movs	r2, #3
 8007276:	48b7      	ldr	r0, [pc, #732]	; (8007554 <_dtoa_r+0x61c>)
 8007278:	2900      	cmp	r1, #0
 800727a:	d17b      	bne.n	8007374 <_dtoa_r+0x43c>
 800727c:	ed9d 6b02 	vldr	d6, [sp, #8]
 8007280:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8007284:	ed8d 7b02 	vstr	d7, [sp, #8]
 8007288:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800728a:	2900      	cmp	r1, #0
 800728c:	f000 80a2 	beq.w	80073d4 <_dtoa_r+0x49c>
 8007290:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8007294:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007298:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800729c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072a0:	f140 8098 	bpl.w	80073d4 <_dtoa_r+0x49c>
 80072a4:	f1b9 0f00 	cmp.w	r9, #0
 80072a8:	f000 8094 	beq.w	80073d4 <_dtoa_r+0x49c>
 80072ac:	f1ba 0f00 	cmp.w	sl, #0
 80072b0:	dd2f      	ble.n	8007312 <_dtoa_r+0x3da>
 80072b2:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80072b6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80072ba:	ed8d 7b02 	vstr	d7, [sp, #8]
 80072be:	f10b 37ff 	add.w	r7, fp, #4294967295
 80072c2:	3201      	adds	r2, #1
 80072c4:	4650      	mov	r0, sl
 80072c6:	ed9d 6b02 	vldr	d6, [sp, #8]
 80072ca:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 80072ce:	ee07 2a90 	vmov	s15, r2
 80072d2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 80072d6:	eea7 5b06 	vfma.f64	d5, d7, d6
 80072da:	ee15 4a90 	vmov	r4, s11
 80072de:	ec52 1b15 	vmov	r1, r2, d5
 80072e2:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 80072e6:	2800      	cmp	r0, #0
 80072e8:	d177      	bne.n	80073da <_dtoa_r+0x4a2>
 80072ea:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 80072ee:	ee36 6b47 	vsub.f64	d6, d6, d7
 80072f2:	ec42 1b17 	vmov	d7, r1, r2
 80072f6:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80072fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80072fe:	f300 8263 	bgt.w	80077c8 <_dtoa_r+0x890>
 8007302:	eeb1 7b47 	vneg.f64	d7, d7
 8007306:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800730a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800730e:	f100 8258 	bmi.w	80077c2 <_dtoa_r+0x88a>
 8007312:	ed8d 8b02 	vstr	d8, [sp, #8]
 8007316:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8007318:	2a00      	cmp	r2, #0
 800731a:	f2c0 811d 	blt.w	8007558 <_dtoa_r+0x620>
 800731e:	f1bb 0f0e 	cmp.w	fp, #14
 8007322:	f300 8119 	bgt.w	8007558 <_dtoa_r+0x620>
 8007326:	4b8a      	ldr	r3, [pc, #552]	; (8007550 <_dtoa_r+0x618>)
 8007328:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800732c:	ed93 6b00 	vldr	d6, [r3]
 8007330:	9b08      	ldr	r3, [sp, #32]
 8007332:	2b00      	cmp	r3, #0
 8007334:	f280 80b7 	bge.w	80074a6 <_dtoa_r+0x56e>
 8007338:	f1b9 0f00 	cmp.w	r9, #0
 800733c:	f300 80b3 	bgt.w	80074a6 <_dtoa_r+0x56e>
 8007340:	f040 823f 	bne.w	80077c2 <_dtoa_r+0x88a>
 8007344:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8007348:	ee26 6b07 	vmul.f64	d6, d6, d7
 800734c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8007350:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007354:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007358:	464c      	mov	r4, r9
 800735a:	464f      	mov	r7, r9
 800735c:	f280 8215 	bge.w	800778a <_dtoa_r+0x852>
 8007360:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007364:	2331      	movs	r3, #49	; 0x31
 8007366:	f808 3b01 	strb.w	r3, [r8], #1
 800736a:	f10b 0b01 	add.w	fp, fp, #1
 800736e:	e211      	b.n	8007794 <_dtoa_r+0x85c>
 8007370:	2202      	movs	r2, #2
 8007372:	e780      	b.n	8007276 <_dtoa_r+0x33e>
 8007374:	07cc      	lsls	r4, r1, #31
 8007376:	d504      	bpl.n	8007382 <_dtoa_r+0x44a>
 8007378:	ed90 6b00 	vldr	d6, [r0]
 800737c:	3201      	adds	r2, #1
 800737e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8007382:	1049      	asrs	r1, r1, #1
 8007384:	3008      	adds	r0, #8
 8007386:	e777      	b.n	8007278 <_dtoa_r+0x340>
 8007388:	d022      	beq.n	80073d0 <_dtoa_r+0x498>
 800738a:	f1cb 0100 	rsb	r1, fp, #0
 800738e:	4a70      	ldr	r2, [pc, #448]	; (8007550 <_dtoa_r+0x618>)
 8007390:	f001 000f 	and.w	r0, r1, #15
 8007394:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8007398:	ed92 7b00 	vldr	d7, [r2]
 800739c:	ee28 7b07 	vmul.f64	d7, d8, d7
 80073a0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073a4:	486b      	ldr	r0, [pc, #428]	; (8007554 <_dtoa_r+0x61c>)
 80073a6:	1109      	asrs	r1, r1, #4
 80073a8:	2400      	movs	r4, #0
 80073aa:	2202      	movs	r2, #2
 80073ac:	b929      	cbnz	r1, 80073ba <_dtoa_r+0x482>
 80073ae:	2c00      	cmp	r4, #0
 80073b0:	f43f af6a 	beq.w	8007288 <_dtoa_r+0x350>
 80073b4:	ed8d 7b02 	vstr	d7, [sp, #8]
 80073b8:	e766      	b.n	8007288 <_dtoa_r+0x350>
 80073ba:	07cf      	lsls	r7, r1, #31
 80073bc:	d505      	bpl.n	80073ca <_dtoa_r+0x492>
 80073be:	ed90 6b00 	vldr	d6, [r0]
 80073c2:	3201      	adds	r2, #1
 80073c4:	2401      	movs	r4, #1
 80073c6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80073ca:	1049      	asrs	r1, r1, #1
 80073cc:	3008      	adds	r0, #8
 80073ce:	e7ed      	b.n	80073ac <_dtoa_r+0x474>
 80073d0:	2202      	movs	r2, #2
 80073d2:	e759      	b.n	8007288 <_dtoa_r+0x350>
 80073d4:	465f      	mov	r7, fp
 80073d6:	4648      	mov	r0, r9
 80073d8:	e775      	b.n	80072c6 <_dtoa_r+0x38e>
 80073da:	ec42 1b17 	vmov	d7, r1, r2
 80073de:	4a5c      	ldr	r2, [pc, #368]	; (8007550 <_dtoa_r+0x618>)
 80073e0:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 80073e4:	ed12 4b02 	vldr	d4, [r2, #-8]
 80073e8:	9a01      	ldr	r2, [sp, #4]
 80073ea:	1814      	adds	r4, r2, r0
 80073ec:	9a07      	ldr	r2, [sp, #28]
 80073ee:	b352      	cbz	r2, 8007446 <_dtoa_r+0x50e>
 80073f0:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 80073f4:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 80073f8:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80073fc:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8007400:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007404:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007408:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 800740c:	ee14 2a90 	vmov	r2, s9
 8007410:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007414:	3230      	adds	r2, #48	; 0x30
 8007416:	ee36 6b45 	vsub.f64	d6, d6, d5
 800741a:	eeb4 6bc7 	vcmpe.f64	d6, d7
 800741e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007422:	f808 2b01 	strb.w	r2, [r8], #1
 8007426:	d439      	bmi.n	800749c <_dtoa_r+0x564>
 8007428:	ee32 5b46 	vsub.f64	d5, d2, d6
 800742c:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8007430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007434:	d472      	bmi.n	800751c <_dtoa_r+0x5e4>
 8007436:	45a0      	cmp	r8, r4
 8007438:	f43f af6b 	beq.w	8007312 <_dtoa_r+0x3da>
 800743c:	ee27 7b03 	vmul.f64	d7, d7, d3
 8007440:	ee26 6b03 	vmul.f64	d6, d6, d3
 8007444:	e7e0      	b.n	8007408 <_dtoa_r+0x4d0>
 8007446:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800744a:	ee27 7b04 	vmul.f64	d7, d7, d4
 800744e:	4621      	mov	r1, r4
 8007450:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8007454:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8007458:	ee14 2a90 	vmov	r2, s9
 800745c:	3230      	adds	r2, #48	; 0x30
 800745e:	f808 2b01 	strb.w	r2, [r8], #1
 8007462:	45a0      	cmp	r8, r4
 8007464:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8007468:	ee36 6b45 	vsub.f64	d6, d6, d5
 800746c:	d118      	bne.n	80074a0 <_dtoa_r+0x568>
 800746e:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8007472:	ee37 4b05 	vadd.f64	d4, d7, d5
 8007476:	eeb4 6bc4 	vcmpe.f64	d6, d4
 800747a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800747e:	dc4d      	bgt.n	800751c <_dtoa_r+0x5e4>
 8007480:	ee35 7b47 	vsub.f64	d7, d5, d7
 8007484:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8007488:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800748c:	f57f af41 	bpl.w	8007312 <_dtoa_r+0x3da>
 8007490:	4688      	mov	r8, r1
 8007492:	3901      	subs	r1, #1
 8007494:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8007498:	2b30      	cmp	r3, #48	; 0x30
 800749a:	d0f9      	beq.n	8007490 <_dtoa_r+0x558>
 800749c:	46bb      	mov	fp, r7
 800749e:	e02a      	b.n	80074f6 <_dtoa_r+0x5be>
 80074a0:	ee26 6b03 	vmul.f64	d6, d6, d3
 80074a4:	e7d6      	b.n	8007454 <_dtoa_r+0x51c>
 80074a6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80074aa:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 80074ae:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80074b2:	ee87 5b06 	vdiv.f64	d5, d7, d6
 80074b6:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 80074ba:	ee15 3a10 	vmov	r3, s10
 80074be:	3330      	adds	r3, #48	; 0x30
 80074c0:	f808 3b01 	strb.w	r3, [r8], #1
 80074c4:	9b01      	ldr	r3, [sp, #4]
 80074c6:	eba8 0303 	sub.w	r3, r8, r3
 80074ca:	4599      	cmp	r9, r3
 80074cc:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 80074d0:	eea3 7b46 	vfms.f64	d7, d3, d6
 80074d4:	d133      	bne.n	800753e <_dtoa_r+0x606>
 80074d6:	ee37 7b07 	vadd.f64	d7, d7, d7
 80074da:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80074de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074e2:	dc1a      	bgt.n	800751a <_dtoa_r+0x5e2>
 80074e4:	eeb4 7b46 	vcmp.f64	d7, d6
 80074e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80074ec:	d103      	bne.n	80074f6 <_dtoa_r+0x5be>
 80074ee:	ee15 3a10 	vmov	r3, s10
 80074f2:	07d9      	lsls	r1, r3, #31
 80074f4:	d411      	bmi.n	800751a <_dtoa_r+0x5e2>
 80074f6:	4629      	mov	r1, r5
 80074f8:	4630      	mov	r0, r6
 80074fa:	f000 fae5 	bl	8007ac8 <_Bfree>
 80074fe:	2300      	movs	r3, #0
 8007500:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007502:	f888 3000 	strb.w	r3, [r8]
 8007506:	f10b 0301 	add.w	r3, fp, #1
 800750a:	6013      	str	r3, [r2, #0]
 800750c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800750e:	2b00      	cmp	r3, #0
 8007510:	f43f ad61 	beq.w	8006fd6 <_dtoa_r+0x9e>
 8007514:	f8c3 8000 	str.w	r8, [r3]
 8007518:	e55d      	b.n	8006fd6 <_dtoa_r+0x9e>
 800751a:	465f      	mov	r7, fp
 800751c:	4643      	mov	r3, r8
 800751e:	4698      	mov	r8, r3
 8007520:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007524:	2a39      	cmp	r2, #57	; 0x39
 8007526:	d106      	bne.n	8007536 <_dtoa_r+0x5fe>
 8007528:	9a01      	ldr	r2, [sp, #4]
 800752a:	429a      	cmp	r2, r3
 800752c:	d1f7      	bne.n	800751e <_dtoa_r+0x5e6>
 800752e:	9901      	ldr	r1, [sp, #4]
 8007530:	2230      	movs	r2, #48	; 0x30
 8007532:	3701      	adds	r7, #1
 8007534:	700a      	strb	r2, [r1, #0]
 8007536:	781a      	ldrb	r2, [r3, #0]
 8007538:	3201      	adds	r2, #1
 800753a:	701a      	strb	r2, [r3, #0]
 800753c:	e7ae      	b.n	800749c <_dtoa_r+0x564>
 800753e:	ee27 7b04 	vmul.f64	d7, d7, d4
 8007542:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8007546:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800754a:	d1b2      	bne.n	80074b2 <_dtoa_r+0x57a>
 800754c:	e7d3      	b.n	80074f6 <_dtoa_r+0x5be>
 800754e:	bf00      	nop
 8007550:	0802efa0 	.word	0x0802efa0
 8007554:	0802ef78 	.word	0x0802ef78
 8007558:	9907      	ldr	r1, [sp, #28]
 800755a:	2900      	cmp	r1, #0
 800755c:	f000 80d0 	beq.w	8007700 <_dtoa_r+0x7c8>
 8007560:	9906      	ldr	r1, [sp, #24]
 8007562:	2901      	cmp	r1, #1
 8007564:	f300 80b4 	bgt.w	80076d0 <_dtoa_r+0x798>
 8007568:	990a      	ldr	r1, [sp, #40]	; 0x28
 800756a:	2900      	cmp	r1, #0
 800756c:	f000 80ac 	beq.w	80076c8 <_dtoa_r+0x790>
 8007570:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8007574:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007578:	461c      	mov	r4, r3
 800757a:	930a      	str	r3, [sp, #40]	; 0x28
 800757c:	9b04      	ldr	r3, [sp, #16]
 800757e:	4413      	add	r3, r2
 8007580:	9304      	str	r3, [sp, #16]
 8007582:	9b05      	ldr	r3, [sp, #20]
 8007584:	2101      	movs	r1, #1
 8007586:	4413      	add	r3, r2
 8007588:	4630      	mov	r0, r6
 800758a:	9305      	str	r3, [sp, #20]
 800758c:	f000 fb54 	bl	8007c38 <__i2b>
 8007590:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007592:	4607      	mov	r7, r0
 8007594:	f1b8 0f00 	cmp.w	r8, #0
 8007598:	dd0d      	ble.n	80075b6 <_dtoa_r+0x67e>
 800759a:	9a05      	ldr	r2, [sp, #20]
 800759c:	2a00      	cmp	r2, #0
 800759e:	dd0a      	ble.n	80075b6 <_dtoa_r+0x67e>
 80075a0:	4542      	cmp	r2, r8
 80075a2:	9904      	ldr	r1, [sp, #16]
 80075a4:	bfa8      	it	ge
 80075a6:	4642      	movge	r2, r8
 80075a8:	1a89      	subs	r1, r1, r2
 80075aa:	9104      	str	r1, [sp, #16]
 80075ac:	9905      	ldr	r1, [sp, #20]
 80075ae:	eba8 0802 	sub.w	r8, r8, r2
 80075b2:	1a8a      	subs	r2, r1, r2
 80075b4:	9205      	str	r2, [sp, #20]
 80075b6:	b303      	cbz	r3, 80075fa <_dtoa_r+0x6c2>
 80075b8:	9a07      	ldr	r2, [sp, #28]
 80075ba:	2a00      	cmp	r2, #0
 80075bc:	f000 80a5 	beq.w	800770a <_dtoa_r+0x7d2>
 80075c0:	2c00      	cmp	r4, #0
 80075c2:	dd13      	ble.n	80075ec <_dtoa_r+0x6b4>
 80075c4:	4639      	mov	r1, r7
 80075c6:	4622      	mov	r2, r4
 80075c8:	4630      	mov	r0, r6
 80075ca:	930d      	str	r3, [sp, #52]	; 0x34
 80075cc:	f000 fbf4 	bl	8007db8 <__pow5mult>
 80075d0:	462a      	mov	r2, r5
 80075d2:	4601      	mov	r1, r0
 80075d4:	4607      	mov	r7, r0
 80075d6:	4630      	mov	r0, r6
 80075d8:	f000 fb44 	bl	8007c64 <__multiply>
 80075dc:	4629      	mov	r1, r5
 80075de:	900a      	str	r0, [sp, #40]	; 0x28
 80075e0:	4630      	mov	r0, r6
 80075e2:	f000 fa71 	bl	8007ac8 <_Bfree>
 80075e6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80075e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80075ea:	4615      	mov	r5, r2
 80075ec:	1b1a      	subs	r2, r3, r4
 80075ee:	d004      	beq.n	80075fa <_dtoa_r+0x6c2>
 80075f0:	4629      	mov	r1, r5
 80075f2:	4630      	mov	r0, r6
 80075f4:	f000 fbe0 	bl	8007db8 <__pow5mult>
 80075f8:	4605      	mov	r5, r0
 80075fa:	2101      	movs	r1, #1
 80075fc:	4630      	mov	r0, r6
 80075fe:	f000 fb1b 	bl	8007c38 <__i2b>
 8007602:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007604:	2b00      	cmp	r3, #0
 8007606:	4604      	mov	r4, r0
 8007608:	f340 8081 	ble.w	800770e <_dtoa_r+0x7d6>
 800760c:	461a      	mov	r2, r3
 800760e:	4601      	mov	r1, r0
 8007610:	4630      	mov	r0, r6
 8007612:	f000 fbd1 	bl	8007db8 <__pow5mult>
 8007616:	9b06      	ldr	r3, [sp, #24]
 8007618:	2b01      	cmp	r3, #1
 800761a:	4604      	mov	r4, r0
 800761c:	dd7a      	ble.n	8007714 <_dtoa_r+0x7dc>
 800761e:	2300      	movs	r3, #0
 8007620:	930a      	str	r3, [sp, #40]	; 0x28
 8007622:	6922      	ldr	r2, [r4, #16]
 8007624:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8007628:	6910      	ldr	r0, [r2, #16]
 800762a:	f000 fab5 	bl	8007b98 <__hi0bits>
 800762e:	f1c0 0020 	rsb	r0, r0, #32
 8007632:	9b05      	ldr	r3, [sp, #20]
 8007634:	4418      	add	r0, r3
 8007636:	f010 001f 	ands.w	r0, r0, #31
 800763a:	f000 808c 	beq.w	8007756 <_dtoa_r+0x81e>
 800763e:	f1c0 0220 	rsb	r2, r0, #32
 8007642:	2a04      	cmp	r2, #4
 8007644:	f340 8085 	ble.w	8007752 <_dtoa_r+0x81a>
 8007648:	f1c0 001c 	rsb	r0, r0, #28
 800764c:	9b04      	ldr	r3, [sp, #16]
 800764e:	4403      	add	r3, r0
 8007650:	9304      	str	r3, [sp, #16]
 8007652:	9b05      	ldr	r3, [sp, #20]
 8007654:	4403      	add	r3, r0
 8007656:	4480      	add	r8, r0
 8007658:	9305      	str	r3, [sp, #20]
 800765a:	9b04      	ldr	r3, [sp, #16]
 800765c:	2b00      	cmp	r3, #0
 800765e:	dd05      	ble.n	800766c <_dtoa_r+0x734>
 8007660:	4629      	mov	r1, r5
 8007662:	461a      	mov	r2, r3
 8007664:	4630      	mov	r0, r6
 8007666:	f000 fc01 	bl	8007e6c <__lshift>
 800766a:	4605      	mov	r5, r0
 800766c:	9b05      	ldr	r3, [sp, #20]
 800766e:	2b00      	cmp	r3, #0
 8007670:	dd05      	ble.n	800767e <_dtoa_r+0x746>
 8007672:	4621      	mov	r1, r4
 8007674:	461a      	mov	r2, r3
 8007676:	4630      	mov	r0, r6
 8007678:	f000 fbf8 	bl	8007e6c <__lshift>
 800767c:	4604      	mov	r4, r0
 800767e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007680:	2b00      	cmp	r3, #0
 8007682:	d06a      	beq.n	800775a <_dtoa_r+0x822>
 8007684:	4621      	mov	r1, r4
 8007686:	4628      	mov	r0, r5
 8007688:	f000 fc60 	bl	8007f4c <__mcmp>
 800768c:	2800      	cmp	r0, #0
 800768e:	da64      	bge.n	800775a <_dtoa_r+0x822>
 8007690:	2300      	movs	r3, #0
 8007692:	4629      	mov	r1, r5
 8007694:	220a      	movs	r2, #10
 8007696:	4630      	mov	r0, r6
 8007698:	f000 fa38 	bl	8007b0c <__multadd>
 800769c:	9b07      	ldr	r3, [sp, #28]
 800769e:	f10b 3bff 	add.w	fp, fp, #4294967295
 80076a2:	4605      	mov	r5, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	f000 8191 	beq.w	80079cc <_dtoa_r+0xa94>
 80076aa:	4639      	mov	r1, r7
 80076ac:	2300      	movs	r3, #0
 80076ae:	220a      	movs	r2, #10
 80076b0:	4630      	mov	r0, r6
 80076b2:	f000 fa2b 	bl	8007b0c <__multadd>
 80076b6:	f1ba 0f00 	cmp.w	sl, #0
 80076ba:	4607      	mov	r7, r0
 80076bc:	f300 808d 	bgt.w	80077da <_dtoa_r+0x8a2>
 80076c0:	9b06      	ldr	r3, [sp, #24]
 80076c2:	2b02      	cmp	r3, #2
 80076c4:	dc50      	bgt.n	8007768 <_dtoa_r+0x830>
 80076c6:	e088      	b.n	80077da <_dtoa_r+0x8a2>
 80076c8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80076ca:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80076ce:	e751      	b.n	8007574 <_dtoa_r+0x63c>
 80076d0:	f109 34ff 	add.w	r4, r9, #4294967295
 80076d4:	42a3      	cmp	r3, r4
 80076d6:	bfbf      	itttt	lt
 80076d8:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 80076da:	1ae3      	sublt	r3, r4, r3
 80076dc:	18d2      	addlt	r2, r2, r3
 80076de:	9209      	strlt	r2, [sp, #36]	; 0x24
 80076e0:	bfb6      	itet	lt
 80076e2:	4623      	movlt	r3, r4
 80076e4:	1b1c      	subge	r4, r3, r4
 80076e6:	2400      	movlt	r4, #0
 80076e8:	f1b9 0f00 	cmp.w	r9, #0
 80076ec:	bfb5      	itete	lt
 80076ee:	9a04      	ldrlt	r2, [sp, #16]
 80076f0:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 80076f4:	eba2 0809 	sublt.w	r8, r2, r9
 80076f8:	464a      	movge	r2, r9
 80076fa:	bfb8      	it	lt
 80076fc:	2200      	movlt	r2, #0
 80076fe:	e73c      	b.n	800757a <_dtoa_r+0x642>
 8007700:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8007704:	9f07      	ldr	r7, [sp, #28]
 8007706:	461c      	mov	r4, r3
 8007708:	e744      	b.n	8007594 <_dtoa_r+0x65c>
 800770a:	461a      	mov	r2, r3
 800770c:	e770      	b.n	80075f0 <_dtoa_r+0x6b8>
 800770e:	9b06      	ldr	r3, [sp, #24]
 8007710:	2b01      	cmp	r3, #1
 8007712:	dc18      	bgt.n	8007746 <_dtoa_r+0x80e>
 8007714:	9b02      	ldr	r3, [sp, #8]
 8007716:	b9b3      	cbnz	r3, 8007746 <_dtoa_r+0x80e>
 8007718:	9b03      	ldr	r3, [sp, #12]
 800771a:	f3c3 0213 	ubfx	r2, r3, #0, #20
 800771e:	b9a2      	cbnz	r2, 800774a <_dtoa_r+0x812>
 8007720:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8007724:	0d12      	lsrs	r2, r2, #20
 8007726:	0512      	lsls	r2, r2, #20
 8007728:	b18a      	cbz	r2, 800774e <_dtoa_r+0x816>
 800772a:	9b04      	ldr	r3, [sp, #16]
 800772c:	3301      	adds	r3, #1
 800772e:	9304      	str	r3, [sp, #16]
 8007730:	9b05      	ldr	r3, [sp, #20]
 8007732:	3301      	adds	r3, #1
 8007734:	9305      	str	r3, [sp, #20]
 8007736:	2301      	movs	r3, #1
 8007738:	930a      	str	r3, [sp, #40]	; 0x28
 800773a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800773c:	2b00      	cmp	r3, #0
 800773e:	f47f af70 	bne.w	8007622 <_dtoa_r+0x6ea>
 8007742:	2001      	movs	r0, #1
 8007744:	e775      	b.n	8007632 <_dtoa_r+0x6fa>
 8007746:	2300      	movs	r3, #0
 8007748:	e7f6      	b.n	8007738 <_dtoa_r+0x800>
 800774a:	9b02      	ldr	r3, [sp, #8]
 800774c:	e7f4      	b.n	8007738 <_dtoa_r+0x800>
 800774e:	920a      	str	r2, [sp, #40]	; 0x28
 8007750:	e7f3      	b.n	800773a <_dtoa_r+0x802>
 8007752:	d082      	beq.n	800765a <_dtoa_r+0x722>
 8007754:	4610      	mov	r0, r2
 8007756:	301c      	adds	r0, #28
 8007758:	e778      	b.n	800764c <_dtoa_r+0x714>
 800775a:	f1b9 0f00 	cmp.w	r9, #0
 800775e:	dc37      	bgt.n	80077d0 <_dtoa_r+0x898>
 8007760:	9b06      	ldr	r3, [sp, #24]
 8007762:	2b02      	cmp	r3, #2
 8007764:	dd34      	ble.n	80077d0 <_dtoa_r+0x898>
 8007766:	46ca      	mov	sl, r9
 8007768:	f1ba 0f00 	cmp.w	sl, #0
 800776c:	d10d      	bne.n	800778a <_dtoa_r+0x852>
 800776e:	4621      	mov	r1, r4
 8007770:	4653      	mov	r3, sl
 8007772:	2205      	movs	r2, #5
 8007774:	4630      	mov	r0, r6
 8007776:	f000 f9c9 	bl	8007b0c <__multadd>
 800777a:	4601      	mov	r1, r0
 800777c:	4604      	mov	r4, r0
 800777e:	4628      	mov	r0, r5
 8007780:	f000 fbe4 	bl	8007f4c <__mcmp>
 8007784:	2800      	cmp	r0, #0
 8007786:	f73f adeb 	bgt.w	8007360 <_dtoa_r+0x428>
 800778a:	9b08      	ldr	r3, [sp, #32]
 800778c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8007790:	ea6f 0b03 	mvn.w	fp, r3
 8007794:	f04f 0900 	mov.w	r9, #0
 8007798:	4621      	mov	r1, r4
 800779a:	4630      	mov	r0, r6
 800779c:	f000 f994 	bl	8007ac8 <_Bfree>
 80077a0:	2f00      	cmp	r7, #0
 80077a2:	f43f aea8 	beq.w	80074f6 <_dtoa_r+0x5be>
 80077a6:	f1b9 0f00 	cmp.w	r9, #0
 80077aa:	d005      	beq.n	80077b8 <_dtoa_r+0x880>
 80077ac:	45b9      	cmp	r9, r7
 80077ae:	d003      	beq.n	80077b8 <_dtoa_r+0x880>
 80077b0:	4649      	mov	r1, r9
 80077b2:	4630      	mov	r0, r6
 80077b4:	f000 f988 	bl	8007ac8 <_Bfree>
 80077b8:	4639      	mov	r1, r7
 80077ba:	4630      	mov	r0, r6
 80077bc:	f000 f984 	bl	8007ac8 <_Bfree>
 80077c0:	e699      	b.n	80074f6 <_dtoa_r+0x5be>
 80077c2:	2400      	movs	r4, #0
 80077c4:	4627      	mov	r7, r4
 80077c6:	e7e0      	b.n	800778a <_dtoa_r+0x852>
 80077c8:	46bb      	mov	fp, r7
 80077ca:	4604      	mov	r4, r0
 80077cc:	4607      	mov	r7, r0
 80077ce:	e5c7      	b.n	8007360 <_dtoa_r+0x428>
 80077d0:	9b07      	ldr	r3, [sp, #28]
 80077d2:	46ca      	mov	sl, r9
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	f000 8100 	beq.w	80079da <_dtoa_r+0xaa2>
 80077da:	f1b8 0f00 	cmp.w	r8, #0
 80077de:	dd05      	ble.n	80077ec <_dtoa_r+0x8b4>
 80077e0:	4639      	mov	r1, r7
 80077e2:	4642      	mov	r2, r8
 80077e4:	4630      	mov	r0, r6
 80077e6:	f000 fb41 	bl	8007e6c <__lshift>
 80077ea:	4607      	mov	r7, r0
 80077ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d05d      	beq.n	80078ae <_dtoa_r+0x976>
 80077f2:	6879      	ldr	r1, [r7, #4]
 80077f4:	4630      	mov	r0, r6
 80077f6:	f000 f927 	bl	8007a48 <_Balloc>
 80077fa:	4680      	mov	r8, r0
 80077fc:	b928      	cbnz	r0, 800780a <_dtoa_r+0x8d2>
 80077fe:	4b82      	ldr	r3, [pc, #520]	; (8007a08 <_dtoa_r+0xad0>)
 8007800:	4602      	mov	r2, r0
 8007802:	f240 21ea 	movw	r1, #746	; 0x2ea
 8007806:	f7ff bbaf 	b.w	8006f68 <_dtoa_r+0x30>
 800780a:	693a      	ldr	r2, [r7, #16]
 800780c:	3202      	adds	r2, #2
 800780e:	0092      	lsls	r2, r2, #2
 8007810:	f107 010c 	add.w	r1, r7, #12
 8007814:	300c      	adds	r0, #12
 8007816:	f000 f909 	bl	8007a2c <memcpy>
 800781a:	2201      	movs	r2, #1
 800781c:	4641      	mov	r1, r8
 800781e:	4630      	mov	r0, r6
 8007820:	f000 fb24 	bl	8007e6c <__lshift>
 8007824:	9b01      	ldr	r3, [sp, #4]
 8007826:	3301      	adds	r3, #1
 8007828:	9304      	str	r3, [sp, #16]
 800782a:	9b01      	ldr	r3, [sp, #4]
 800782c:	4453      	add	r3, sl
 800782e:	9308      	str	r3, [sp, #32]
 8007830:	9b02      	ldr	r3, [sp, #8]
 8007832:	f003 0301 	and.w	r3, r3, #1
 8007836:	46b9      	mov	r9, r7
 8007838:	9307      	str	r3, [sp, #28]
 800783a:	4607      	mov	r7, r0
 800783c:	9b04      	ldr	r3, [sp, #16]
 800783e:	4621      	mov	r1, r4
 8007840:	3b01      	subs	r3, #1
 8007842:	4628      	mov	r0, r5
 8007844:	9302      	str	r3, [sp, #8]
 8007846:	f7ff fae9 	bl	8006e1c <quorem>
 800784a:	4603      	mov	r3, r0
 800784c:	3330      	adds	r3, #48	; 0x30
 800784e:	9005      	str	r0, [sp, #20]
 8007850:	4649      	mov	r1, r9
 8007852:	4628      	mov	r0, r5
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
 8007856:	f000 fb79 	bl	8007f4c <__mcmp>
 800785a:	463a      	mov	r2, r7
 800785c:	4682      	mov	sl, r0
 800785e:	4621      	mov	r1, r4
 8007860:	4630      	mov	r0, r6
 8007862:	f000 fb8f 	bl	8007f84 <__mdiff>
 8007866:	68c2      	ldr	r2, [r0, #12]
 8007868:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800786a:	4680      	mov	r8, r0
 800786c:	bb0a      	cbnz	r2, 80078b2 <_dtoa_r+0x97a>
 800786e:	4601      	mov	r1, r0
 8007870:	4628      	mov	r0, r5
 8007872:	f000 fb6b 	bl	8007f4c <__mcmp>
 8007876:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007878:	4602      	mov	r2, r0
 800787a:	4641      	mov	r1, r8
 800787c:	4630      	mov	r0, r6
 800787e:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 8007882:	f000 f921 	bl	8007ac8 <_Bfree>
 8007886:	9b06      	ldr	r3, [sp, #24]
 8007888:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800788a:	f8dd 8010 	ldr.w	r8, [sp, #16]
 800788e:	ea43 0102 	orr.w	r1, r3, r2
 8007892:	9b07      	ldr	r3, [sp, #28]
 8007894:	430b      	orrs	r3, r1
 8007896:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007898:	d10d      	bne.n	80078b6 <_dtoa_r+0x97e>
 800789a:	2b39      	cmp	r3, #57	; 0x39
 800789c:	d029      	beq.n	80078f2 <_dtoa_r+0x9ba>
 800789e:	f1ba 0f00 	cmp.w	sl, #0
 80078a2:	dd01      	ble.n	80078a8 <_dtoa_r+0x970>
 80078a4:	9b05      	ldr	r3, [sp, #20]
 80078a6:	3331      	adds	r3, #49	; 0x31
 80078a8:	9a02      	ldr	r2, [sp, #8]
 80078aa:	7013      	strb	r3, [r2, #0]
 80078ac:	e774      	b.n	8007798 <_dtoa_r+0x860>
 80078ae:	4638      	mov	r0, r7
 80078b0:	e7b8      	b.n	8007824 <_dtoa_r+0x8ec>
 80078b2:	2201      	movs	r2, #1
 80078b4:	e7e1      	b.n	800787a <_dtoa_r+0x942>
 80078b6:	f1ba 0f00 	cmp.w	sl, #0
 80078ba:	db06      	blt.n	80078ca <_dtoa_r+0x992>
 80078bc:	9906      	ldr	r1, [sp, #24]
 80078be:	ea41 0a0a 	orr.w	sl, r1, sl
 80078c2:	9907      	ldr	r1, [sp, #28]
 80078c4:	ea5a 0101 	orrs.w	r1, sl, r1
 80078c8:	d120      	bne.n	800790c <_dtoa_r+0x9d4>
 80078ca:	2a00      	cmp	r2, #0
 80078cc:	ddec      	ble.n	80078a8 <_dtoa_r+0x970>
 80078ce:	4629      	mov	r1, r5
 80078d0:	2201      	movs	r2, #1
 80078d2:	4630      	mov	r0, r6
 80078d4:	9304      	str	r3, [sp, #16]
 80078d6:	f000 fac9 	bl	8007e6c <__lshift>
 80078da:	4621      	mov	r1, r4
 80078dc:	4605      	mov	r5, r0
 80078de:	f000 fb35 	bl	8007f4c <__mcmp>
 80078e2:	2800      	cmp	r0, #0
 80078e4:	9b04      	ldr	r3, [sp, #16]
 80078e6:	dc02      	bgt.n	80078ee <_dtoa_r+0x9b6>
 80078e8:	d1de      	bne.n	80078a8 <_dtoa_r+0x970>
 80078ea:	07da      	lsls	r2, r3, #31
 80078ec:	d5dc      	bpl.n	80078a8 <_dtoa_r+0x970>
 80078ee:	2b39      	cmp	r3, #57	; 0x39
 80078f0:	d1d8      	bne.n	80078a4 <_dtoa_r+0x96c>
 80078f2:	9a02      	ldr	r2, [sp, #8]
 80078f4:	2339      	movs	r3, #57	; 0x39
 80078f6:	7013      	strb	r3, [r2, #0]
 80078f8:	4643      	mov	r3, r8
 80078fa:	4698      	mov	r8, r3
 80078fc:	3b01      	subs	r3, #1
 80078fe:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 8007902:	2a39      	cmp	r2, #57	; 0x39
 8007904:	d051      	beq.n	80079aa <_dtoa_r+0xa72>
 8007906:	3201      	adds	r2, #1
 8007908:	701a      	strb	r2, [r3, #0]
 800790a:	e745      	b.n	8007798 <_dtoa_r+0x860>
 800790c:	2a00      	cmp	r2, #0
 800790e:	dd03      	ble.n	8007918 <_dtoa_r+0x9e0>
 8007910:	2b39      	cmp	r3, #57	; 0x39
 8007912:	d0ee      	beq.n	80078f2 <_dtoa_r+0x9ba>
 8007914:	3301      	adds	r3, #1
 8007916:	e7c7      	b.n	80078a8 <_dtoa_r+0x970>
 8007918:	9a04      	ldr	r2, [sp, #16]
 800791a:	9908      	ldr	r1, [sp, #32]
 800791c:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007920:	428a      	cmp	r2, r1
 8007922:	d02b      	beq.n	800797c <_dtoa_r+0xa44>
 8007924:	4629      	mov	r1, r5
 8007926:	2300      	movs	r3, #0
 8007928:	220a      	movs	r2, #10
 800792a:	4630      	mov	r0, r6
 800792c:	f000 f8ee 	bl	8007b0c <__multadd>
 8007930:	45b9      	cmp	r9, r7
 8007932:	4605      	mov	r5, r0
 8007934:	f04f 0300 	mov.w	r3, #0
 8007938:	f04f 020a 	mov.w	r2, #10
 800793c:	4649      	mov	r1, r9
 800793e:	4630      	mov	r0, r6
 8007940:	d107      	bne.n	8007952 <_dtoa_r+0xa1a>
 8007942:	f000 f8e3 	bl	8007b0c <__multadd>
 8007946:	4681      	mov	r9, r0
 8007948:	4607      	mov	r7, r0
 800794a:	9b04      	ldr	r3, [sp, #16]
 800794c:	3301      	adds	r3, #1
 800794e:	9304      	str	r3, [sp, #16]
 8007950:	e774      	b.n	800783c <_dtoa_r+0x904>
 8007952:	f000 f8db 	bl	8007b0c <__multadd>
 8007956:	4639      	mov	r1, r7
 8007958:	4681      	mov	r9, r0
 800795a:	2300      	movs	r3, #0
 800795c:	220a      	movs	r2, #10
 800795e:	4630      	mov	r0, r6
 8007960:	f000 f8d4 	bl	8007b0c <__multadd>
 8007964:	4607      	mov	r7, r0
 8007966:	e7f0      	b.n	800794a <_dtoa_r+0xa12>
 8007968:	f1ba 0f00 	cmp.w	sl, #0
 800796c:	9a01      	ldr	r2, [sp, #4]
 800796e:	bfcc      	ite	gt
 8007970:	46d0      	movgt	r8, sl
 8007972:	f04f 0801 	movle.w	r8, #1
 8007976:	4490      	add	r8, r2
 8007978:	f04f 0900 	mov.w	r9, #0
 800797c:	4629      	mov	r1, r5
 800797e:	2201      	movs	r2, #1
 8007980:	4630      	mov	r0, r6
 8007982:	9302      	str	r3, [sp, #8]
 8007984:	f000 fa72 	bl	8007e6c <__lshift>
 8007988:	4621      	mov	r1, r4
 800798a:	4605      	mov	r5, r0
 800798c:	f000 fade 	bl	8007f4c <__mcmp>
 8007990:	2800      	cmp	r0, #0
 8007992:	dcb1      	bgt.n	80078f8 <_dtoa_r+0x9c0>
 8007994:	d102      	bne.n	800799c <_dtoa_r+0xa64>
 8007996:	9b02      	ldr	r3, [sp, #8]
 8007998:	07db      	lsls	r3, r3, #31
 800799a:	d4ad      	bmi.n	80078f8 <_dtoa_r+0x9c0>
 800799c:	4643      	mov	r3, r8
 800799e:	4698      	mov	r8, r3
 80079a0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80079a4:	2a30      	cmp	r2, #48	; 0x30
 80079a6:	d0fa      	beq.n	800799e <_dtoa_r+0xa66>
 80079a8:	e6f6      	b.n	8007798 <_dtoa_r+0x860>
 80079aa:	9a01      	ldr	r2, [sp, #4]
 80079ac:	429a      	cmp	r2, r3
 80079ae:	d1a4      	bne.n	80078fa <_dtoa_r+0x9c2>
 80079b0:	f10b 0b01 	add.w	fp, fp, #1
 80079b4:	2331      	movs	r3, #49	; 0x31
 80079b6:	e778      	b.n	80078aa <_dtoa_r+0x972>
 80079b8:	4b14      	ldr	r3, [pc, #80]	; (8007a0c <_dtoa_r+0xad4>)
 80079ba:	f7ff bb27 	b.w	800700c <_dtoa_r+0xd4>
 80079be:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	f47f ab03 	bne.w	8006fcc <_dtoa_r+0x94>
 80079c6:	4b12      	ldr	r3, [pc, #72]	; (8007a10 <_dtoa_r+0xad8>)
 80079c8:	f7ff bb20 	b.w	800700c <_dtoa_r+0xd4>
 80079cc:	f1ba 0f00 	cmp.w	sl, #0
 80079d0:	dc03      	bgt.n	80079da <_dtoa_r+0xaa2>
 80079d2:	9b06      	ldr	r3, [sp, #24]
 80079d4:	2b02      	cmp	r3, #2
 80079d6:	f73f aec7 	bgt.w	8007768 <_dtoa_r+0x830>
 80079da:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80079de:	4621      	mov	r1, r4
 80079e0:	4628      	mov	r0, r5
 80079e2:	f7ff fa1b 	bl	8006e1c <quorem>
 80079e6:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80079ea:	f808 3b01 	strb.w	r3, [r8], #1
 80079ee:	9a01      	ldr	r2, [sp, #4]
 80079f0:	eba8 0202 	sub.w	r2, r8, r2
 80079f4:	4592      	cmp	sl, r2
 80079f6:	ddb7      	ble.n	8007968 <_dtoa_r+0xa30>
 80079f8:	4629      	mov	r1, r5
 80079fa:	2300      	movs	r3, #0
 80079fc:	220a      	movs	r2, #10
 80079fe:	4630      	mov	r0, r6
 8007a00:	f000 f884 	bl	8007b0c <__multadd>
 8007a04:	4605      	mov	r5, r0
 8007a06:	e7ea      	b.n	80079de <_dtoa_r+0xaa6>
 8007a08:	0802ef07 	.word	0x0802ef07
 8007a0c:	0802ee64 	.word	0x0802ee64
 8007a10:	0802ee88 	.word	0x0802ee88

08007a14 <_localeconv_r>:
 8007a14:	4800      	ldr	r0, [pc, #0]	; (8007a18 <_localeconv_r+0x4>)
 8007a16:	4770      	bx	lr
 8007a18:	20000164 	.word	0x20000164

08007a1c <malloc>:
 8007a1c:	4b02      	ldr	r3, [pc, #8]	; (8007a28 <malloc+0xc>)
 8007a1e:	4601      	mov	r1, r0
 8007a20:	6818      	ldr	r0, [r3, #0]
 8007a22:	f000 bc17 	b.w	8008254 <_malloc_r>
 8007a26:	bf00      	nop
 8007a28:	20000010 	.word	0x20000010

08007a2c <memcpy>:
 8007a2c:	440a      	add	r2, r1
 8007a2e:	4291      	cmp	r1, r2
 8007a30:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a34:	d100      	bne.n	8007a38 <memcpy+0xc>
 8007a36:	4770      	bx	lr
 8007a38:	b510      	push	{r4, lr}
 8007a3a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a3e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a42:	4291      	cmp	r1, r2
 8007a44:	d1f9      	bne.n	8007a3a <memcpy+0xe>
 8007a46:	bd10      	pop	{r4, pc}

08007a48 <_Balloc>:
 8007a48:	b570      	push	{r4, r5, r6, lr}
 8007a4a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007a4c:	4604      	mov	r4, r0
 8007a4e:	460d      	mov	r5, r1
 8007a50:	b976      	cbnz	r6, 8007a70 <_Balloc+0x28>
 8007a52:	2010      	movs	r0, #16
 8007a54:	f7ff ffe2 	bl	8007a1c <malloc>
 8007a58:	4602      	mov	r2, r0
 8007a5a:	6260      	str	r0, [r4, #36]	; 0x24
 8007a5c:	b920      	cbnz	r0, 8007a68 <_Balloc+0x20>
 8007a5e:	4b18      	ldr	r3, [pc, #96]	; (8007ac0 <_Balloc+0x78>)
 8007a60:	4818      	ldr	r0, [pc, #96]	; (8007ac4 <_Balloc+0x7c>)
 8007a62:	2166      	movs	r1, #102	; 0x66
 8007a64:	f000 fdd6 	bl	8008614 <__assert_func>
 8007a68:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007a6c:	6006      	str	r6, [r0, #0]
 8007a6e:	60c6      	str	r6, [r0, #12]
 8007a70:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8007a72:	68f3      	ldr	r3, [r6, #12]
 8007a74:	b183      	cbz	r3, 8007a98 <_Balloc+0x50>
 8007a76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007a78:	68db      	ldr	r3, [r3, #12]
 8007a7a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007a7e:	b9b8      	cbnz	r0, 8007ab0 <_Balloc+0x68>
 8007a80:	2101      	movs	r1, #1
 8007a82:	fa01 f605 	lsl.w	r6, r1, r5
 8007a86:	1d72      	adds	r2, r6, #5
 8007a88:	0092      	lsls	r2, r2, #2
 8007a8a:	4620      	mov	r0, r4
 8007a8c:	f000 fb60 	bl	8008150 <_calloc_r>
 8007a90:	b160      	cbz	r0, 8007aac <_Balloc+0x64>
 8007a92:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007a96:	e00e      	b.n	8007ab6 <_Balloc+0x6e>
 8007a98:	2221      	movs	r2, #33	; 0x21
 8007a9a:	2104      	movs	r1, #4
 8007a9c:	4620      	mov	r0, r4
 8007a9e:	f000 fb57 	bl	8008150 <_calloc_r>
 8007aa2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007aa4:	60f0      	str	r0, [r6, #12]
 8007aa6:	68db      	ldr	r3, [r3, #12]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d1e4      	bne.n	8007a76 <_Balloc+0x2e>
 8007aac:	2000      	movs	r0, #0
 8007aae:	bd70      	pop	{r4, r5, r6, pc}
 8007ab0:	6802      	ldr	r2, [r0, #0]
 8007ab2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007abc:	e7f7      	b.n	8007aae <_Balloc+0x66>
 8007abe:	bf00      	nop
 8007ac0:	0802ee95 	.word	0x0802ee95
 8007ac4:	0802ef18 	.word	0x0802ef18

08007ac8 <_Bfree>:
 8007ac8:	b570      	push	{r4, r5, r6, lr}
 8007aca:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8007acc:	4605      	mov	r5, r0
 8007ace:	460c      	mov	r4, r1
 8007ad0:	b976      	cbnz	r6, 8007af0 <_Bfree+0x28>
 8007ad2:	2010      	movs	r0, #16
 8007ad4:	f7ff ffa2 	bl	8007a1c <malloc>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	6268      	str	r0, [r5, #36]	; 0x24
 8007adc:	b920      	cbnz	r0, 8007ae8 <_Bfree+0x20>
 8007ade:	4b09      	ldr	r3, [pc, #36]	; (8007b04 <_Bfree+0x3c>)
 8007ae0:	4809      	ldr	r0, [pc, #36]	; (8007b08 <_Bfree+0x40>)
 8007ae2:	218a      	movs	r1, #138	; 0x8a
 8007ae4:	f000 fd96 	bl	8008614 <__assert_func>
 8007ae8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007aec:	6006      	str	r6, [r0, #0]
 8007aee:	60c6      	str	r6, [r0, #12]
 8007af0:	b13c      	cbz	r4, 8007b02 <_Bfree+0x3a>
 8007af2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8007af4:	6862      	ldr	r2, [r4, #4]
 8007af6:	68db      	ldr	r3, [r3, #12]
 8007af8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007afc:	6021      	str	r1, [r4, #0]
 8007afe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007b02:	bd70      	pop	{r4, r5, r6, pc}
 8007b04:	0802ee95 	.word	0x0802ee95
 8007b08:	0802ef18 	.word	0x0802ef18

08007b0c <__multadd>:
 8007b0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b10:	690d      	ldr	r5, [r1, #16]
 8007b12:	4607      	mov	r7, r0
 8007b14:	460c      	mov	r4, r1
 8007b16:	461e      	mov	r6, r3
 8007b18:	f101 0c14 	add.w	ip, r1, #20
 8007b1c:	2000      	movs	r0, #0
 8007b1e:	f8dc 3000 	ldr.w	r3, [ip]
 8007b22:	b299      	uxth	r1, r3
 8007b24:	fb02 6101 	mla	r1, r2, r1, r6
 8007b28:	0c1e      	lsrs	r6, r3, #16
 8007b2a:	0c0b      	lsrs	r3, r1, #16
 8007b2c:	fb02 3306 	mla	r3, r2, r6, r3
 8007b30:	b289      	uxth	r1, r1
 8007b32:	3001      	adds	r0, #1
 8007b34:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007b38:	4285      	cmp	r5, r0
 8007b3a:	f84c 1b04 	str.w	r1, [ip], #4
 8007b3e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007b42:	dcec      	bgt.n	8007b1e <__multadd+0x12>
 8007b44:	b30e      	cbz	r6, 8007b8a <__multadd+0x7e>
 8007b46:	68a3      	ldr	r3, [r4, #8]
 8007b48:	42ab      	cmp	r3, r5
 8007b4a:	dc19      	bgt.n	8007b80 <__multadd+0x74>
 8007b4c:	6861      	ldr	r1, [r4, #4]
 8007b4e:	4638      	mov	r0, r7
 8007b50:	3101      	adds	r1, #1
 8007b52:	f7ff ff79 	bl	8007a48 <_Balloc>
 8007b56:	4680      	mov	r8, r0
 8007b58:	b928      	cbnz	r0, 8007b66 <__multadd+0x5a>
 8007b5a:	4602      	mov	r2, r0
 8007b5c:	4b0c      	ldr	r3, [pc, #48]	; (8007b90 <__multadd+0x84>)
 8007b5e:	480d      	ldr	r0, [pc, #52]	; (8007b94 <__multadd+0x88>)
 8007b60:	21b5      	movs	r1, #181	; 0xb5
 8007b62:	f000 fd57 	bl	8008614 <__assert_func>
 8007b66:	6922      	ldr	r2, [r4, #16]
 8007b68:	3202      	adds	r2, #2
 8007b6a:	f104 010c 	add.w	r1, r4, #12
 8007b6e:	0092      	lsls	r2, r2, #2
 8007b70:	300c      	adds	r0, #12
 8007b72:	f7ff ff5b 	bl	8007a2c <memcpy>
 8007b76:	4621      	mov	r1, r4
 8007b78:	4638      	mov	r0, r7
 8007b7a:	f7ff ffa5 	bl	8007ac8 <_Bfree>
 8007b7e:	4644      	mov	r4, r8
 8007b80:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007b84:	3501      	adds	r5, #1
 8007b86:	615e      	str	r6, [r3, #20]
 8007b88:	6125      	str	r5, [r4, #16]
 8007b8a:	4620      	mov	r0, r4
 8007b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b90:	0802ef07 	.word	0x0802ef07
 8007b94:	0802ef18 	.word	0x0802ef18

08007b98 <__hi0bits>:
 8007b98:	0c03      	lsrs	r3, r0, #16
 8007b9a:	041b      	lsls	r3, r3, #16
 8007b9c:	b9d3      	cbnz	r3, 8007bd4 <__hi0bits+0x3c>
 8007b9e:	0400      	lsls	r0, r0, #16
 8007ba0:	2310      	movs	r3, #16
 8007ba2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8007ba6:	bf04      	itt	eq
 8007ba8:	0200      	lsleq	r0, r0, #8
 8007baa:	3308      	addeq	r3, #8
 8007bac:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8007bb0:	bf04      	itt	eq
 8007bb2:	0100      	lsleq	r0, r0, #4
 8007bb4:	3304      	addeq	r3, #4
 8007bb6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8007bba:	bf04      	itt	eq
 8007bbc:	0080      	lsleq	r0, r0, #2
 8007bbe:	3302      	addeq	r3, #2
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	db05      	blt.n	8007bd0 <__hi0bits+0x38>
 8007bc4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8007bc8:	f103 0301 	add.w	r3, r3, #1
 8007bcc:	bf08      	it	eq
 8007bce:	2320      	moveq	r3, #32
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	4770      	bx	lr
 8007bd4:	2300      	movs	r3, #0
 8007bd6:	e7e4      	b.n	8007ba2 <__hi0bits+0xa>

08007bd8 <__lo0bits>:
 8007bd8:	6803      	ldr	r3, [r0, #0]
 8007bda:	f013 0207 	ands.w	r2, r3, #7
 8007bde:	4601      	mov	r1, r0
 8007be0:	d00b      	beq.n	8007bfa <__lo0bits+0x22>
 8007be2:	07da      	lsls	r2, r3, #31
 8007be4:	d423      	bmi.n	8007c2e <__lo0bits+0x56>
 8007be6:	0798      	lsls	r0, r3, #30
 8007be8:	bf49      	itett	mi
 8007bea:	085b      	lsrmi	r3, r3, #1
 8007bec:	089b      	lsrpl	r3, r3, #2
 8007bee:	2001      	movmi	r0, #1
 8007bf0:	600b      	strmi	r3, [r1, #0]
 8007bf2:	bf5c      	itt	pl
 8007bf4:	600b      	strpl	r3, [r1, #0]
 8007bf6:	2002      	movpl	r0, #2
 8007bf8:	4770      	bx	lr
 8007bfa:	b298      	uxth	r0, r3
 8007bfc:	b9a8      	cbnz	r0, 8007c2a <__lo0bits+0x52>
 8007bfe:	0c1b      	lsrs	r3, r3, #16
 8007c00:	2010      	movs	r0, #16
 8007c02:	b2da      	uxtb	r2, r3
 8007c04:	b90a      	cbnz	r2, 8007c0a <__lo0bits+0x32>
 8007c06:	3008      	adds	r0, #8
 8007c08:	0a1b      	lsrs	r3, r3, #8
 8007c0a:	071a      	lsls	r2, r3, #28
 8007c0c:	bf04      	itt	eq
 8007c0e:	091b      	lsreq	r3, r3, #4
 8007c10:	3004      	addeq	r0, #4
 8007c12:	079a      	lsls	r2, r3, #30
 8007c14:	bf04      	itt	eq
 8007c16:	089b      	lsreq	r3, r3, #2
 8007c18:	3002      	addeq	r0, #2
 8007c1a:	07da      	lsls	r2, r3, #31
 8007c1c:	d403      	bmi.n	8007c26 <__lo0bits+0x4e>
 8007c1e:	085b      	lsrs	r3, r3, #1
 8007c20:	f100 0001 	add.w	r0, r0, #1
 8007c24:	d005      	beq.n	8007c32 <__lo0bits+0x5a>
 8007c26:	600b      	str	r3, [r1, #0]
 8007c28:	4770      	bx	lr
 8007c2a:	4610      	mov	r0, r2
 8007c2c:	e7e9      	b.n	8007c02 <__lo0bits+0x2a>
 8007c2e:	2000      	movs	r0, #0
 8007c30:	4770      	bx	lr
 8007c32:	2020      	movs	r0, #32
 8007c34:	4770      	bx	lr
	...

08007c38 <__i2b>:
 8007c38:	b510      	push	{r4, lr}
 8007c3a:	460c      	mov	r4, r1
 8007c3c:	2101      	movs	r1, #1
 8007c3e:	f7ff ff03 	bl	8007a48 <_Balloc>
 8007c42:	4602      	mov	r2, r0
 8007c44:	b928      	cbnz	r0, 8007c52 <__i2b+0x1a>
 8007c46:	4b05      	ldr	r3, [pc, #20]	; (8007c5c <__i2b+0x24>)
 8007c48:	4805      	ldr	r0, [pc, #20]	; (8007c60 <__i2b+0x28>)
 8007c4a:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8007c4e:	f000 fce1 	bl	8008614 <__assert_func>
 8007c52:	2301      	movs	r3, #1
 8007c54:	6144      	str	r4, [r0, #20]
 8007c56:	6103      	str	r3, [r0, #16]
 8007c58:	bd10      	pop	{r4, pc}
 8007c5a:	bf00      	nop
 8007c5c:	0802ef07 	.word	0x0802ef07
 8007c60:	0802ef18 	.word	0x0802ef18

08007c64 <__multiply>:
 8007c64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c68:	4691      	mov	r9, r2
 8007c6a:	690a      	ldr	r2, [r1, #16]
 8007c6c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8007c70:	429a      	cmp	r2, r3
 8007c72:	bfb8      	it	lt
 8007c74:	460b      	movlt	r3, r1
 8007c76:	460c      	mov	r4, r1
 8007c78:	bfbc      	itt	lt
 8007c7a:	464c      	movlt	r4, r9
 8007c7c:	4699      	movlt	r9, r3
 8007c7e:	6927      	ldr	r7, [r4, #16]
 8007c80:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8007c84:	68a3      	ldr	r3, [r4, #8]
 8007c86:	6861      	ldr	r1, [r4, #4]
 8007c88:	eb07 060a 	add.w	r6, r7, sl
 8007c8c:	42b3      	cmp	r3, r6
 8007c8e:	b085      	sub	sp, #20
 8007c90:	bfb8      	it	lt
 8007c92:	3101      	addlt	r1, #1
 8007c94:	f7ff fed8 	bl	8007a48 <_Balloc>
 8007c98:	b930      	cbnz	r0, 8007ca8 <__multiply+0x44>
 8007c9a:	4602      	mov	r2, r0
 8007c9c:	4b44      	ldr	r3, [pc, #272]	; (8007db0 <__multiply+0x14c>)
 8007c9e:	4845      	ldr	r0, [pc, #276]	; (8007db4 <__multiply+0x150>)
 8007ca0:	f240 115d 	movw	r1, #349	; 0x15d
 8007ca4:	f000 fcb6 	bl	8008614 <__assert_func>
 8007ca8:	f100 0514 	add.w	r5, r0, #20
 8007cac:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007cb0:	462b      	mov	r3, r5
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	4543      	cmp	r3, r8
 8007cb6:	d321      	bcc.n	8007cfc <__multiply+0x98>
 8007cb8:	f104 0314 	add.w	r3, r4, #20
 8007cbc:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8007cc0:	f109 0314 	add.w	r3, r9, #20
 8007cc4:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8007cc8:	9202      	str	r2, [sp, #8]
 8007cca:	1b3a      	subs	r2, r7, r4
 8007ccc:	3a15      	subs	r2, #21
 8007cce:	f022 0203 	bic.w	r2, r2, #3
 8007cd2:	3204      	adds	r2, #4
 8007cd4:	f104 0115 	add.w	r1, r4, #21
 8007cd8:	428f      	cmp	r7, r1
 8007cda:	bf38      	it	cc
 8007cdc:	2204      	movcc	r2, #4
 8007cde:	9201      	str	r2, [sp, #4]
 8007ce0:	9a02      	ldr	r2, [sp, #8]
 8007ce2:	9303      	str	r3, [sp, #12]
 8007ce4:	429a      	cmp	r2, r3
 8007ce6:	d80c      	bhi.n	8007d02 <__multiply+0x9e>
 8007ce8:	2e00      	cmp	r6, #0
 8007cea:	dd03      	ble.n	8007cf4 <__multiply+0x90>
 8007cec:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d05a      	beq.n	8007daa <__multiply+0x146>
 8007cf4:	6106      	str	r6, [r0, #16]
 8007cf6:	b005      	add	sp, #20
 8007cf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cfc:	f843 2b04 	str.w	r2, [r3], #4
 8007d00:	e7d8      	b.n	8007cb4 <__multiply+0x50>
 8007d02:	f8b3 a000 	ldrh.w	sl, [r3]
 8007d06:	f1ba 0f00 	cmp.w	sl, #0
 8007d0a:	d024      	beq.n	8007d56 <__multiply+0xf2>
 8007d0c:	f104 0e14 	add.w	lr, r4, #20
 8007d10:	46a9      	mov	r9, r5
 8007d12:	f04f 0c00 	mov.w	ip, #0
 8007d16:	f85e 2b04 	ldr.w	r2, [lr], #4
 8007d1a:	f8d9 1000 	ldr.w	r1, [r9]
 8007d1e:	fa1f fb82 	uxth.w	fp, r2
 8007d22:	b289      	uxth	r1, r1
 8007d24:	fb0a 110b 	mla	r1, sl, fp, r1
 8007d28:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8007d2c:	f8d9 2000 	ldr.w	r2, [r9]
 8007d30:	4461      	add	r1, ip
 8007d32:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d36:	fb0a c20b 	mla	r2, sl, fp, ip
 8007d3a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8007d3e:	b289      	uxth	r1, r1
 8007d40:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007d44:	4577      	cmp	r7, lr
 8007d46:	f849 1b04 	str.w	r1, [r9], #4
 8007d4a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8007d4e:	d8e2      	bhi.n	8007d16 <__multiply+0xb2>
 8007d50:	9a01      	ldr	r2, [sp, #4]
 8007d52:	f845 c002 	str.w	ip, [r5, r2]
 8007d56:	9a03      	ldr	r2, [sp, #12]
 8007d58:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8007d5c:	3304      	adds	r3, #4
 8007d5e:	f1b9 0f00 	cmp.w	r9, #0
 8007d62:	d020      	beq.n	8007da6 <__multiply+0x142>
 8007d64:	6829      	ldr	r1, [r5, #0]
 8007d66:	f104 0c14 	add.w	ip, r4, #20
 8007d6a:	46ae      	mov	lr, r5
 8007d6c:	f04f 0a00 	mov.w	sl, #0
 8007d70:	f8bc b000 	ldrh.w	fp, [ip]
 8007d74:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8007d78:	fb09 220b 	mla	r2, r9, fp, r2
 8007d7c:	4492      	add	sl, r2
 8007d7e:	b289      	uxth	r1, r1
 8007d80:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8007d84:	f84e 1b04 	str.w	r1, [lr], #4
 8007d88:	f85c 2b04 	ldr.w	r2, [ip], #4
 8007d8c:	f8be 1000 	ldrh.w	r1, [lr]
 8007d90:	0c12      	lsrs	r2, r2, #16
 8007d92:	fb09 1102 	mla	r1, r9, r2, r1
 8007d96:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8007d9a:	4567      	cmp	r7, ip
 8007d9c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8007da0:	d8e6      	bhi.n	8007d70 <__multiply+0x10c>
 8007da2:	9a01      	ldr	r2, [sp, #4]
 8007da4:	50a9      	str	r1, [r5, r2]
 8007da6:	3504      	adds	r5, #4
 8007da8:	e79a      	b.n	8007ce0 <__multiply+0x7c>
 8007daa:	3e01      	subs	r6, #1
 8007dac:	e79c      	b.n	8007ce8 <__multiply+0x84>
 8007dae:	bf00      	nop
 8007db0:	0802ef07 	.word	0x0802ef07
 8007db4:	0802ef18 	.word	0x0802ef18

08007db8 <__pow5mult>:
 8007db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007dbc:	4615      	mov	r5, r2
 8007dbe:	f012 0203 	ands.w	r2, r2, #3
 8007dc2:	4606      	mov	r6, r0
 8007dc4:	460f      	mov	r7, r1
 8007dc6:	d007      	beq.n	8007dd8 <__pow5mult+0x20>
 8007dc8:	4c25      	ldr	r4, [pc, #148]	; (8007e60 <__pow5mult+0xa8>)
 8007dca:	3a01      	subs	r2, #1
 8007dcc:	2300      	movs	r3, #0
 8007dce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007dd2:	f7ff fe9b 	bl	8007b0c <__multadd>
 8007dd6:	4607      	mov	r7, r0
 8007dd8:	10ad      	asrs	r5, r5, #2
 8007dda:	d03d      	beq.n	8007e58 <__pow5mult+0xa0>
 8007ddc:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007dde:	b97c      	cbnz	r4, 8007e00 <__pow5mult+0x48>
 8007de0:	2010      	movs	r0, #16
 8007de2:	f7ff fe1b 	bl	8007a1c <malloc>
 8007de6:	4602      	mov	r2, r0
 8007de8:	6270      	str	r0, [r6, #36]	; 0x24
 8007dea:	b928      	cbnz	r0, 8007df8 <__pow5mult+0x40>
 8007dec:	4b1d      	ldr	r3, [pc, #116]	; (8007e64 <__pow5mult+0xac>)
 8007dee:	481e      	ldr	r0, [pc, #120]	; (8007e68 <__pow5mult+0xb0>)
 8007df0:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007df4:	f000 fc0e 	bl	8008614 <__assert_func>
 8007df8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007dfc:	6004      	str	r4, [r0, #0]
 8007dfe:	60c4      	str	r4, [r0, #12]
 8007e00:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007e04:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007e08:	b94c      	cbnz	r4, 8007e1e <__pow5mult+0x66>
 8007e0a:	f240 2171 	movw	r1, #625	; 0x271
 8007e0e:	4630      	mov	r0, r6
 8007e10:	f7ff ff12 	bl	8007c38 <__i2b>
 8007e14:	2300      	movs	r3, #0
 8007e16:	f8c8 0008 	str.w	r0, [r8, #8]
 8007e1a:	4604      	mov	r4, r0
 8007e1c:	6003      	str	r3, [r0, #0]
 8007e1e:	f04f 0900 	mov.w	r9, #0
 8007e22:	07eb      	lsls	r3, r5, #31
 8007e24:	d50a      	bpl.n	8007e3c <__pow5mult+0x84>
 8007e26:	4639      	mov	r1, r7
 8007e28:	4622      	mov	r2, r4
 8007e2a:	4630      	mov	r0, r6
 8007e2c:	f7ff ff1a 	bl	8007c64 <__multiply>
 8007e30:	4639      	mov	r1, r7
 8007e32:	4680      	mov	r8, r0
 8007e34:	4630      	mov	r0, r6
 8007e36:	f7ff fe47 	bl	8007ac8 <_Bfree>
 8007e3a:	4647      	mov	r7, r8
 8007e3c:	106d      	asrs	r5, r5, #1
 8007e3e:	d00b      	beq.n	8007e58 <__pow5mult+0xa0>
 8007e40:	6820      	ldr	r0, [r4, #0]
 8007e42:	b938      	cbnz	r0, 8007e54 <__pow5mult+0x9c>
 8007e44:	4622      	mov	r2, r4
 8007e46:	4621      	mov	r1, r4
 8007e48:	4630      	mov	r0, r6
 8007e4a:	f7ff ff0b 	bl	8007c64 <__multiply>
 8007e4e:	6020      	str	r0, [r4, #0]
 8007e50:	f8c0 9000 	str.w	r9, [r0]
 8007e54:	4604      	mov	r4, r0
 8007e56:	e7e4      	b.n	8007e22 <__pow5mult+0x6a>
 8007e58:	4638      	mov	r0, r7
 8007e5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e5e:	bf00      	nop
 8007e60:	0802f068 	.word	0x0802f068
 8007e64:	0802ee95 	.word	0x0802ee95
 8007e68:	0802ef18 	.word	0x0802ef18

08007e6c <__lshift>:
 8007e6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e70:	460c      	mov	r4, r1
 8007e72:	6849      	ldr	r1, [r1, #4]
 8007e74:	6923      	ldr	r3, [r4, #16]
 8007e76:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007e7a:	68a3      	ldr	r3, [r4, #8]
 8007e7c:	4607      	mov	r7, r0
 8007e7e:	4691      	mov	r9, r2
 8007e80:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8007e84:	f108 0601 	add.w	r6, r8, #1
 8007e88:	42b3      	cmp	r3, r6
 8007e8a:	db0b      	blt.n	8007ea4 <__lshift+0x38>
 8007e8c:	4638      	mov	r0, r7
 8007e8e:	f7ff fddb 	bl	8007a48 <_Balloc>
 8007e92:	4605      	mov	r5, r0
 8007e94:	b948      	cbnz	r0, 8007eaa <__lshift+0x3e>
 8007e96:	4602      	mov	r2, r0
 8007e98:	4b2a      	ldr	r3, [pc, #168]	; (8007f44 <__lshift+0xd8>)
 8007e9a:	482b      	ldr	r0, [pc, #172]	; (8007f48 <__lshift+0xdc>)
 8007e9c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007ea0:	f000 fbb8 	bl	8008614 <__assert_func>
 8007ea4:	3101      	adds	r1, #1
 8007ea6:	005b      	lsls	r3, r3, #1
 8007ea8:	e7ee      	b.n	8007e88 <__lshift+0x1c>
 8007eaa:	2300      	movs	r3, #0
 8007eac:	f100 0114 	add.w	r1, r0, #20
 8007eb0:	f100 0210 	add.w	r2, r0, #16
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	4553      	cmp	r3, sl
 8007eb8:	db37      	blt.n	8007f2a <__lshift+0xbe>
 8007eba:	6920      	ldr	r0, [r4, #16]
 8007ebc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007ec0:	f104 0314 	add.w	r3, r4, #20
 8007ec4:	f019 091f 	ands.w	r9, r9, #31
 8007ec8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007ecc:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8007ed0:	d02f      	beq.n	8007f32 <__lshift+0xc6>
 8007ed2:	f1c9 0e20 	rsb	lr, r9, #32
 8007ed6:	468a      	mov	sl, r1
 8007ed8:	f04f 0c00 	mov.w	ip, #0
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	fa02 f209 	lsl.w	r2, r2, r9
 8007ee2:	ea42 020c 	orr.w	r2, r2, ip
 8007ee6:	f84a 2b04 	str.w	r2, [sl], #4
 8007eea:	f853 2b04 	ldr.w	r2, [r3], #4
 8007eee:	4298      	cmp	r0, r3
 8007ef0:	fa22 fc0e 	lsr.w	ip, r2, lr
 8007ef4:	d8f2      	bhi.n	8007edc <__lshift+0x70>
 8007ef6:	1b03      	subs	r3, r0, r4
 8007ef8:	3b15      	subs	r3, #21
 8007efa:	f023 0303 	bic.w	r3, r3, #3
 8007efe:	3304      	adds	r3, #4
 8007f00:	f104 0215 	add.w	r2, r4, #21
 8007f04:	4290      	cmp	r0, r2
 8007f06:	bf38      	it	cc
 8007f08:	2304      	movcc	r3, #4
 8007f0a:	f841 c003 	str.w	ip, [r1, r3]
 8007f0e:	f1bc 0f00 	cmp.w	ip, #0
 8007f12:	d001      	beq.n	8007f18 <__lshift+0xac>
 8007f14:	f108 0602 	add.w	r6, r8, #2
 8007f18:	3e01      	subs	r6, #1
 8007f1a:	4638      	mov	r0, r7
 8007f1c:	612e      	str	r6, [r5, #16]
 8007f1e:	4621      	mov	r1, r4
 8007f20:	f7ff fdd2 	bl	8007ac8 <_Bfree>
 8007f24:	4628      	mov	r0, r5
 8007f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f2a:	f842 0f04 	str.w	r0, [r2, #4]!
 8007f2e:	3301      	adds	r3, #1
 8007f30:	e7c1      	b.n	8007eb6 <__lshift+0x4a>
 8007f32:	3904      	subs	r1, #4
 8007f34:	f853 2b04 	ldr.w	r2, [r3], #4
 8007f38:	f841 2f04 	str.w	r2, [r1, #4]!
 8007f3c:	4298      	cmp	r0, r3
 8007f3e:	d8f9      	bhi.n	8007f34 <__lshift+0xc8>
 8007f40:	e7ea      	b.n	8007f18 <__lshift+0xac>
 8007f42:	bf00      	nop
 8007f44:	0802ef07 	.word	0x0802ef07
 8007f48:	0802ef18 	.word	0x0802ef18

08007f4c <__mcmp>:
 8007f4c:	b530      	push	{r4, r5, lr}
 8007f4e:	6902      	ldr	r2, [r0, #16]
 8007f50:	690c      	ldr	r4, [r1, #16]
 8007f52:	1b12      	subs	r2, r2, r4
 8007f54:	d10e      	bne.n	8007f74 <__mcmp+0x28>
 8007f56:	f100 0314 	add.w	r3, r0, #20
 8007f5a:	3114      	adds	r1, #20
 8007f5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8007f60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8007f64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8007f68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8007f6c:	42a5      	cmp	r5, r4
 8007f6e:	d003      	beq.n	8007f78 <__mcmp+0x2c>
 8007f70:	d305      	bcc.n	8007f7e <__mcmp+0x32>
 8007f72:	2201      	movs	r2, #1
 8007f74:	4610      	mov	r0, r2
 8007f76:	bd30      	pop	{r4, r5, pc}
 8007f78:	4283      	cmp	r3, r0
 8007f7a:	d3f3      	bcc.n	8007f64 <__mcmp+0x18>
 8007f7c:	e7fa      	b.n	8007f74 <__mcmp+0x28>
 8007f7e:	f04f 32ff 	mov.w	r2, #4294967295
 8007f82:	e7f7      	b.n	8007f74 <__mcmp+0x28>

08007f84 <__mdiff>:
 8007f84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f88:	460c      	mov	r4, r1
 8007f8a:	4606      	mov	r6, r0
 8007f8c:	4611      	mov	r1, r2
 8007f8e:	4620      	mov	r0, r4
 8007f90:	4690      	mov	r8, r2
 8007f92:	f7ff ffdb 	bl	8007f4c <__mcmp>
 8007f96:	1e05      	subs	r5, r0, #0
 8007f98:	d110      	bne.n	8007fbc <__mdiff+0x38>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4630      	mov	r0, r6
 8007f9e:	f7ff fd53 	bl	8007a48 <_Balloc>
 8007fa2:	b930      	cbnz	r0, 8007fb2 <__mdiff+0x2e>
 8007fa4:	4b3a      	ldr	r3, [pc, #232]	; (8008090 <__mdiff+0x10c>)
 8007fa6:	4602      	mov	r2, r0
 8007fa8:	f240 2132 	movw	r1, #562	; 0x232
 8007fac:	4839      	ldr	r0, [pc, #228]	; (8008094 <__mdiff+0x110>)
 8007fae:	f000 fb31 	bl	8008614 <__assert_func>
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007fb8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fbc:	bfa4      	itt	ge
 8007fbe:	4643      	movge	r3, r8
 8007fc0:	46a0      	movge	r8, r4
 8007fc2:	4630      	mov	r0, r6
 8007fc4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8007fc8:	bfa6      	itte	ge
 8007fca:	461c      	movge	r4, r3
 8007fcc:	2500      	movge	r5, #0
 8007fce:	2501      	movlt	r5, #1
 8007fd0:	f7ff fd3a 	bl	8007a48 <_Balloc>
 8007fd4:	b920      	cbnz	r0, 8007fe0 <__mdiff+0x5c>
 8007fd6:	4b2e      	ldr	r3, [pc, #184]	; (8008090 <__mdiff+0x10c>)
 8007fd8:	4602      	mov	r2, r0
 8007fda:	f44f 7110 	mov.w	r1, #576	; 0x240
 8007fde:	e7e5      	b.n	8007fac <__mdiff+0x28>
 8007fe0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8007fe4:	6926      	ldr	r6, [r4, #16]
 8007fe6:	60c5      	str	r5, [r0, #12]
 8007fe8:	f104 0914 	add.w	r9, r4, #20
 8007fec:	f108 0514 	add.w	r5, r8, #20
 8007ff0:	f100 0e14 	add.w	lr, r0, #20
 8007ff4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8007ff8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007ffc:	f108 0210 	add.w	r2, r8, #16
 8008000:	46f2      	mov	sl, lr
 8008002:	2100      	movs	r1, #0
 8008004:	f859 3b04 	ldr.w	r3, [r9], #4
 8008008:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800800c:	fa1f f883 	uxth.w	r8, r3
 8008010:	fa11 f18b 	uxtah	r1, r1, fp
 8008014:	0c1b      	lsrs	r3, r3, #16
 8008016:	eba1 0808 	sub.w	r8, r1, r8
 800801a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800801e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8008022:	fa1f f888 	uxth.w	r8, r8
 8008026:	1419      	asrs	r1, r3, #16
 8008028:	454e      	cmp	r6, r9
 800802a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800802e:	f84a 3b04 	str.w	r3, [sl], #4
 8008032:	d8e7      	bhi.n	8008004 <__mdiff+0x80>
 8008034:	1b33      	subs	r3, r6, r4
 8008036:	3b15      	subs	r3, #21
 8008038:	f023 0303 	bic.w	r3, r3, #3
 800803c:	3304      	adds	r3, #4
 800803e:	3415      	adds	r4, #21
 8008040:	42a6      	cmp	r6, r4
 8008042:	bf38      	it	cc
 8008044:	2304      	movcc	r3, #4
 8008046:	441d      	add	r5, r3
 8008048:	4473      	add	r3, lr
 800804a:	469e      	mov	lr, r3
 800804c:	462e      	mov	r6, r5
 800804e:	4566      	cmp	r6, ip
 8008050:	d30e      	bcc.n	8008070 <__mdiff+0xec>
 8008052:	f10c 0203 	add.w	r2, ip, #3
 8008056:	1b52      	subs	r2, r2, r5
 8008058:	f022 0203 	bic.w	r2, r2, #3
 800805c:	3d03      	subs	r5, #3
 800805e:	45ac      	cmp	ip, r5
 8008060:	bf38      	it	cc
 8008062:	2200      	movcc	r2, #0
 8008064:	441a      	add	r2, r3
 8008066:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800806a:	b17b      	cbz	r3, 800808c <__mdiff+0x108>
 800806c:	6107      	str	r7, [r0, #16]
 800806e:	e7a3      	b.n	8007fb8 <__mdiff+0x34>
 8008070:	f856 8b04 	ldr.w	r8, [r6], #4
 8008074:	fa11 f288 	uxtah	r2, r1, r8
 8008078:	1414      	asrs	r4, r2, #16
 800807a:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800807e:	b292      	uxth	r2, r2
 8008080:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 8008084:	f84e 2b04 	str.w	r2, [lr], #4
 8008088:	1421      	asrs	r1, r4, #16
 800808a:	e7e0      	b.n	800804e <__mdiff+0xca>
 800808c:	3f01      	subs	r7, #1
 800808e:	e7ea      	b.n	8008066 <__mdiff+0xe2>
 8008090:	0802ef07 	.word	0x0802ef07
 8008094:	0802ef18 	.word	0x0802ef18

08008098 <__d2b>:
 8008098:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800809c:	4689      	mov	r9, r1
 800809e:	2101      	movs	r1, #1
 80080a0:	ec57 6b10 	vmov	r6, r7, d0
 80080a4:	4690      	mov	r8, r2
 80080a6:	f7ff fccf 	bl	8007a48 <_Balloc>
 80080aa:	4604      	mov	r4, r0
 80080ac:	b930      	cbnz	r0, 80080bc <__d2b+0x24>
 80080ae:	4602      	mov	r2, r0
 80080b0:	4b25      	ldr	r3, [pc, #148]	; (8008148 <__d2b+0xb0>)
 80080b2:	4826      	ldr	r0, [pc, #152]	; (800814c <__d2b+0xb4>)
 80080b4:	f240 310a 	movw	r1, #778	; 0x30a
 80080b8:	f000 faac 	bl	8008614 <__assert_func>
 80080bc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80080c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80080c4:	bb35      	cbnz	r5, 8008114 <__d2b+0x7c>
 80080c6:	2e00      	cmp	r6, #0
 80080c8:	9301      	str	r3, [sp, #4]
 80080ca:	d028      	beq.n	800811e <__d2b+0x86>
 80080cc:	4668      	mov	r0, sp
 80080ce:	9600      	str	r6, [sp, #0]
 80080d0:	f7ff fd82 	bl	8007bd8 <__lo0bits>
 80080d4:	9900      	ldr	r1, [sp, #0]
 80080d6:	b300      	cbz	r0, 800811a <__d2b+0x82>
 80080d8:	9a01      	ldr	r2, [sp, #4]
 80080da:	f1c0 0320 	rsb	r3, r0, #32
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	430b      	orrs	r3, r1
 80080e4:	40c2      	lsrs	r2, r0
 80080e6:	6163      	str	r3, [r4, #20]
 80080e8:	9201      	str	r2, [sp, #4]
 80080ea:	9b01      	ldr	r3, [sp, #4]
 80080ec:	61a3      	str	r3, [r4, #24]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	bf14      	ite	ne
 80080f2:	2202      	movne	r2, #2
 80080f4:	2201      	moveq	r2, #1
 80080f6:	6122      	str	r2, [r4, #16]
 80080f8:	b1d5      	cbz	r5, 8008130 <__d2b+0x98>
 80080fa:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80080fe:	4405      	add	r5, r0
 8008100:	f8c9 5000 	str.w	r5, [r9]
 8008104:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8008108:	f8c8 0000 	str.w	r0, [r8]
 800810c:	4620      	mov	r0, r4
 800810e:	b003      	add	sp, #12
 8008110:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008114:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8008118:	e7d5      	b.n	80080c6 <__d2b+0x2e>
 800811a:	6161      	str	r1, [r4, #20]
 800811c:	e7e5      	b.n	80080ea <__d2b+0x52>
 800811e:	a801      	add	r0, sp, #4
 8008120:	f7ff fd5a 	bl	8007bd8 <__lo0bits>
 8008124:	9b01      	ldr	r3, [sp, #4]
 8008126:	6163      	str	r3, [r4, #20]
 8008128:	2201      	movs	r2, #1
 800812a:	6122      	str	r2, [r4, #16]
 800812c:	3020      	adds	r0, #32
 800812e:	e7e3      	b.n	80080f8 <__d2b+0x60>
 8008130:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008134:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8008138:	f8c9 0000 	str.w	r0, [r9]
 800813c:	6918      	ldr	r0, [r3, #16]
 800813e:	f7ff fd2b 	bl	8007b98 <__hi0bits>
 8008142:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008146:	e7df      	b.n	8008108 <__d2b+0x70>
 8008148:	0802ef07 	.word	0x0802ef07
 800814c:	0802ef18 	.word	0x0802ef18

08008150 <_calloc_r>:
 8008150:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008152:	fba1 2402 	umull	r2, r4, r1, r2
 8008156:	b94c      	cbnz	r4, 800816c <_calloc_r+0x1c>
 8008158:	4611      	mov	r1, r2
 800815a:	9201      	str	r2, [sp, #4]
 800815c:	f000 f87a 	bl	8008254 <_malloc_r>
 8008160:	9a01      	ldr	r2, [sp, #4]
 8008162:	4605      	mov	r5, r0
 8008164:	b930      	cbnz	r0, 8008174 <_calloc_r+0x24>
 8008166:	4628      	mov	r0, r5
 8008168:	b003      	add	sp, #12
 800816a:	bd30      	pop	{r4, r5, pc}
 800816c:	220c      	movs	r2, #12
 800816e:	6002      	str	r2, [r0, #0]
 8008170:	2500      	movs	r5, #0
 8008172:	e7f8      	b.n	8008166 <_calloc_r+0x16>
 8008174:	4621      	mov	r1, r4
 8008176:	f7fe f9e7 	bl	8006548 <memset>
 800817a:	e7f4      	b.n	8008166 <_calloc_r+0x16>

0800817c <_free_r>:
 800817c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800817e:	2900      	cmp	r1, #0
 8008180:	d044      	beq.n	800820c <_free_r+0x90>
 8008182:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008186:	9001      	str	r0, [sp, #4]
 8008188:	2b00      	cmp	r3, #0
 800818a:	f1a1 0404 	sub.w	r4, r1, #4
 800818e:	bfb8      	it	lt
 8008190:	18e4      	addlt	r4, r4, r3
 8008192:	f000 fa9b 	bl	80086cc <__malloc_lock>
 8008196:	4a1e      	ldr	r2, [pc, #120]	; (8008210 <_free_r+0x94>)
 8008198:	9801      	ldr	r0, [sp, #4]
 800819a:	6813      	ldr	r3, [r2, #0]
 800819c:	b933      	cbnz	r3, 80081ac <_free_r+0x30>
 800819e:	6063      	str	r3, [r4, #4]
 80081a0:	6014      	str	r4, [r2, #0]
 80081a2:	b003      	add	sp, #12
 80081a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081a8:	f000 ba96 	b.w	80086d8 <__malloc_unlock>
 80081ac:	42a3      	cmp	r3, r4
 80081ae:	d908      	bls.n	80081c2 <_free_r+0x46>
 80081b0:	6825      	ldr	r5, [r4, #0]
 80081b2:	1961      	adds	r1, r4, r5
 80081b4:	428b      	cmp	r3, r1
 80081b6:	bf01      	itttt	eq
 80081b8:	6819      	ldreq	r1, [r3, #0]
 80081ba:	685b      	ldreq	r3, [r3, #4]
 80081bc:	1949      	addeq	r1, r1, r5
 80081be:	6021      	streq	r1, [r4, #0]
 80081c0:	e7ed      	b.n	800819e <_free_r+0x22>
 80081c2:	461a      	mov	r2, r3
 80081c4:	685b      	ldr	r3, [r3, #4]
 80081c6:	b10b      	cbz	r3, 80081cc <_free_r+0x50>
 80081c8:	42a3      	cmp	r3, r4
 80081ca:	d9fa      	bls.n	80081c2 <_free_r+0x46>
 80081cc:	6811      	ldr	r1, [r2, #0]
 80081ce:	1855      	adds	r5, r2, r1
 80081d0:	42a5      	cmp	r5, r4
 80081d2:	d10b      	bne.n	80081ec <_free_r+0x70>
 80081d4:	6824      	ldr	r4, [r4, #0]
 80081d6:	4421      	add	r1, r4
 80081d8:	1854      	adds	r4, r2, r1
 80081da:	42a3      	cmp	r3, r4
 80081dc:	6011      	str	r1, [r2, #0]
 80081de:	d1e0      	bne.n	80081a2 <_free_r+0x26>
 80081e0:	681c      	ldr	r4, [r3, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	6053      	str	r3, [r2, #4]
 80081e6:	4421      	add	r1, r4
 80081e8:	6011      	str	r1, [r2, #0]
 80081ea:	e7da      	b.n	80081a2 <_free_r+0x26>
 80081ec:	d902      	bls.n	80081f4 <_free_r+0x78>
 80081ee:	230c      	movs	r3, #12
 80081f0:	6003      	str	r3, [r0, #0]
 80081f2:	e7d6      	b.n	80081a2 <_free_r+0x26>
 80081f4:	6825      	ldr	r5, [r4, #0]
 80081f6:	1961      	adds	r1, r4, r5
 80081f8:	428b      	cmp	r3, r1
 80081fa:	bf04      	itt	eq
 80081fc:	6819      	ldreq	r1, [r3, #0]
 80081fe:	685b      	ldreq	r3, [r3, #4]
 8008200:	6063      	str	r3, [r4, #4]
 8008202:	bf04      	itt	eq
 8008204:	1949      	addeq	r1, r1, r5
 8008206:	6021      	streq	r1, [r4, #0]
 8008208:	6054      	str	r4, [r2, #4]
 800820a:	e7ca      	b.n	80081a2 <_free_r+0x26>
 800820c:	b003      	add	sp, #12
 800820e:	bd30      	pop	{r4, r5, pc}
 8008210:	2000034c 	.word	0x2000034c

08008214 <sbrk_aligned>:
 8008214:	b570      	push	{r4, r5, r6, lr}
 8008216:	4e0e      	ldr	r6, [pc, #56]	; (8008250 <sbrk_aligned+0x3c>)
 8008218:	460c      	mov	r4, r1
 800821a:	6831      	ldr	r1, [r6, #0]
 800821c:	4605      	mov	r5, r0
 800821e:	b911      	cbnz	r1, 8008226 <sbrk_aligned+0x12>
 8008220:	f000 f9e8 	bl	80085f4 <_sbrk_r>
 8008224:	6030      	str	r0, [r6, #0]
 8008226:	4621      	mov	r1, r4
 8008228:	4628      	mov	r0, r5
 800822a:	f000 f9e3 	bl	80085f4 <_sbrk_r>
 800822e:	1c43      	adds	r3, r0, #1
 8008230:	d00a      	beq.n	8008248 <sbrk_aligned+0x34>
 8008232:	1cc4      	adds	r4, r0, #3
 8008234:	f024 0403 	bic.w	r4, r4, #3
 8008238:	42a0      	cmp	r0, r4
 800823a:	d007      	beq.n	800824c <sbrk_aligned+0x38>
 800823c:	1a21      	subs	r1, r4, r0
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f9d8 	bl	80085f4 <_sbrk_r>
 8008244:	3001      	adds	r0, #1
 8008246:	d101      	bne.n	800824c <sbrk_aligned+0x38>
 8008248:	f04f 34ff 	mov.w	r4, #4294967295
 800824c:	4620      	mov	r0, r4
 800824e:	bd70      	pop	{r4, r5, r6, pc}
 8008250:	20000350 	.word	0x20000350

08008254 <_malloc_r>:
 8008254:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008258:	1ccd      	adds	r5, r1, #3
 800825a:	f025 0503 	bic.w	r5, r5, #3
 800825e:	3508      	adds	r5, #8
 8008260:	2d0c      	cmp	r5, #12
 8008262:	bf38      	it	cc
 8008264:	250c      	movcc	r5, #12
 8008266:	2d00      	cmp	r5, #0
 8008268:	4607      	mov	r7, r0
 800826a:	db01      	blt.n	8008270 <_malloc_r+0x1c>
 800826c:	42a9      	cmp	r1, r5
 800826e:	d905      	bls.n	800827c <_malloc_r+0x28>
 8008270:	230c      	movs	r3, #12
 8008272:	603b      	str	r3, [r7, #0]
 8008274:	2600      	movs	r6, #0
 8008276:	4630      	mov	r0, r6
 8008278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800827c:	4e2e      	ldr	r6, [pc, #184]	; (8008338 <_malloc_r+0xe4>)
 800827e:	f000 fa25 	bl	80086cc <__malloc_lock>
 8008282:	6833      	ldr	r3, [r6, #0]
 8008284:	461c      	mov	r4, r3
 8008286:	bb34      	cbnz	r4, 80082d6 <_malloc_r+0x82>
 8008288:	4629      	mov	r1, r5
 800828a:	4638      	mov	r0, r7
 800828c:	f7ff ffc2 	bl	8008214 <sbrk_aligned>
 8008290:	1c43      	adds	r3, r0, #1
 8008292:	4604      	mov	r4, r0
 8008294:	d14d      	bne.n	8008332 <_malloc_r+0xde>
 8008296:	6834      	ldr	r4, [r6, #0]
 8008298:	4626      	mov	r6, r4
 800829a:	2e00      	cmp	r6, #0
 800829c:	d140      	bne.n	8008320 <_malloc_r+0xcc>
 800829e:	6823      	ldr	r3, [r4, #0]
 80082a0:	4631      	mov	r1, r6
 80082a2:	4638      	mov	r0, r7
 80082a4:	eb04 0803 	add.w	r8, r4, r3
 80082a8:	f000 f9a4 	bl	80085f4 <_sbrk_r>
 80082ac:	4580      	cmp	r8, r0
 80082ae:	d13a      	bne.n	8008326 <_malloc_r+0xd2>
 80082b0:	6821      	ldr	r1, [r4, #0]
 80082b2:	3503      	adds	r5, #3
 80082b4:	1a6d      	subs	r5, r5, r1
 80082b6:	f025 0503 	bic.w	r5, r5, #3
 80082ba:	3508      	adds	r5, #8
 80082bc:	2d0c      	cmp	r5, #12
 80082be:	bf38      	it	cc
 80082c0:	250c      	movcc	r5, #12
 80082c2:	4629      	mov	r1, r5
 80082c4:	4638      	mov	r0, r7
 80082c6:	f7ff ffa5 	bl	8008214 <sbrk_aligned>
 80082ca:	3001      	adds	r0, #1
 80082cc:	d02b      	beq.n	8008326 <_malloc_r+0xd2>
 80082ce:	6823      	ldr	r3, [r4, #0]
 80082d0:	442b      	add	r3, r5
 80082d2:	6023      	str	r3, [r4, #0]
 80082d4:	e00e      	b.n	80082f4 <_malloc_r+0xa0>
 80082d6:	6822      	ldr	r2, [r4, #0]
 80082d8:	1b52      	subs	r2, r2, r5
 80082da:	d41e      	bmi.n	800831a <_malloc_r+0xc6>
 80082dc:	2a0b      	cmp	r2, #11
 80082de:	d916      	bls.n	800830e <_malloc_r+0xba>
 80082e0:	1961      	adds	r1, r4, r5
 80082e2:	42a3      	cmp	r3, r4
 80082e4:	6025      	str	r5, [r4, #0]
 80082e6:	bf18      	it	ne
 80082e8:	6059      	strne	r1, [r3, #4]
 80082ea:	6863      	ldr	r3, [r4, #4]
 80082ec:	bf08      	it	eq
 80082ee:	6031      	streq	r1, [r6, #0]
 80082f0:	5162      	str	r2, [r4, r5]
 80082f2:	604b      	str	r3, [r1, #4]
 80082f4:	4638      	mov	r0, r7
 80082f6:	f104 060b 	add.w	r6, r4, #11
 80082fa:	f000 f9ed 	bl	80086d8 <__malloc_unlock>
 80082fe:	f026 0607 	bic.w	r6, r6, #7
 8008302:	1d23      	adds	r3, r4, #4
 8008304:	1af2      	subs	r2, r6, r3
 8008306:	d0b6      	beq.n	8008276 <_malloc_r+0x22>
 8008308:	1b9b      	subs	r3, r3, r6
 800830a:	50a3      	str	r3, [r4, r2]
 800830c:	e7b3      	b.n	8008276 <_malloc_r+0x22>
 800830e:	6862      	ldr	r2, [r4, #4]
 8008310:	42a3      	cmp	r3, r4
 8008312:	bf0c      	ite	eq
 8008314:	6032      	streq	r2, [r6, #0]
 8008316:	605a      	strne	r2, [r3, #4]
 8008318:	e7ec      	b.n	80082f4 <_malloc_r+0xa0>
 800831a:	4623      	mov	r3, r4
 800831c:	6864      	ldr	r4, [r4, #4]
 800831e:	e7b2      	b.n	8008286 <_malloc_r+0x32>
 8008320:	4634      	mov	r4, r6
 8008322:	6876      	ldr	r6, [r6, #4]
 8008324:	e7b9      	b.n	800829a <_malloc_r+0x46>
 8008326:	230c      	movs	r3, #12
 8008328:	603b      	str	r3, [r7, #0]
 800832a:	4638      	mov	r0, r7
 800832c:	f000 f9d4 	bl	80086d8 <__malloc_unlock>
 8008330:	e7a1      	b.n	8008276 <_malloc_r+0x22>
 8008332:	6025      	str	r5, [r4, #0]
 8008334:	e7de      	b.n	80082f4 <_malloc_r+0xa0>
 8008336:	bf00      	nop
 8008338:	2000034c 	.word	0x2000034c

0800833c <__ssputs_r>:
 800833c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008340:	688e      	ldr	r6, [r1, #8]
 8008342:	429e      	cmp	r6, r3
 8008344:	4682      	mov	sl, r0
 8008346:	460c      	mov	r4, r1
 8008348:	4690      	mov	r8, r2
 800834a:	461f      	mov	r7, r3
 800834c:	d838      	bhi.n	80083c0 <__ssputs_r+0x84>
 800834e:	898a      	ldrh	r2, [r1, #12]
 8008350:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008354:	d032      	beq.n	80083bc <__ssputs_r+0x80>
 8008356:	6825      	ldr	r5, [r4, #0]
 8008358:	6909      	ldr	r1, [r1, #16]
 800835a:	eba5 0901 	sub.w	r9, r5, r1
 800835e:	6965      	ldr	r5, [r4, #20]
 8008360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008364:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008368:	3301      	adds	r3, #1
 800836a:	444b      	add	r3, r9
 800836c:	106d      	asrs	r5, r5, #1
 800836e:	429d      	cmp	r5, r3
 8008370:	bf38      	it	cc
 8008372:	461d      	movcc	r5, r3
 8008374:	0553      	lsls	r3, r2, #21
 8008376:	d531      	bpl.n	80083dc <__ssputs_r+0xa0>
 8008378:	4629      	mov	r1, r5
 800837a:	f7ff ff6b 	bl	8008254 <_malloc_r>
 800837e:	4606      	mov	r6, r0
 8008380:	b950      	cbnz	r0, 8008398 <__ssputs_r+0x5c>
 8008382:	230c      	movs	r3, #12
 8008384:	f8ca 3000 	str.w	r3, [sl]
 8008388:	89a3      	ldrh	r3, [r4, #12]
 800838a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800838e:	81a3      	strh	r3, [r4, #12]
 8008390:	f04f 30ff 	mov.w	r0, #4294967295
 8008394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008398:	6921      	ldr	r1, [r4, #16]
 800839a:	464a      	mov	r2, r9
 800839c:	f7ff fb46 	bl	8007a2c <memcpy>
 80083a0:	89a3      	ldrh	r3, [r4, #12]
 80083a2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80083a6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80083aa:	81a3      	strh	r3, [r4, #12]
 80083ac:	6126      	str	r6, [r4, #16]
 80083ae:	6165      	str	r5, [r4, #20]
 80083b0:	444e      	add	r6, r9
 80083b2:	eba5 0509 	sub.w	r5, r5, r9
 80083b6:	6026      	str	r6, [r4, #0]
 80083b8:	60a5      	str	r5, [r4, #8]
 80083ba:	463e      	mov	r6, r7
 80083bc:	42be      	cmp	r6, r7
 80083be:	d900      	bls.n	80083c2 <__ssputs_r+0x86>
 80083c0:	463e      	mov	r6, r7
 80083c2:	6820      	ldr	r0, [r4, #0]
 80083c4:	4632      	mov	r2, r6
 80083c6:	4641      	mov	r1, r8
 80083c8:	f000 f966 	bl	8008698 <memmove>
 80083cc:	68a3      	ldr	r3, [r4, #8]
 80083ce:	1b9b      	subs	r3, r3, r6
 80083d0:	60a3      	str	r3, [r4, #8]
 80083d2:	6823      	ldr	r3, [r4, #0]
 80083d4:	4433      	add	r3, r6
 80083d6:	6023      	str	r3, [r4, #0]
 80083d8:	2000      	movs	r0, #0
 80083da:	e7db      	b.n	8008394 <__ssputs_r+0x58>
 80083dc:	462a      	mov	r2, r5
 80083de:	f000 f981 	bl	80086e4 <_realloc_r>
 80083e2:	4606      	mov	r6, r0
 80083e4:	2800      	cmp	r0, #0
 80083e6:	d1e1      	bne.n	80083ac <__ssputs_r+0x70>
 80083e8:	6921      	ldr	r1, [r4, #16]
 80083ea:	4650      	mov	r0, sl
 80083ec:	f7ff fec6 	bl	800817c <_free_r>
 80083f0:	e7c7      	b.n	8008382 <__ssputs_r+0x46>
	...

080083f4 <_svfiprintf_r>:
 80083f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083f8:	4698      	mov	r8, r3
 80083fa:	898b      	ldrh	r3, [r1, #12]
 80083fc:	061b      	lsls	r3, r3, #24
 80083fe:	b09d      	sub	sp, #116	; 0x74
 8008400:	4607      	mov	r7, r0
 8008402:	460d      	mov	r5, r1
 8008404:	4614      	mov	r4, r2
 8008406:	d50e      	bpl.n	8008426 <_svfiprintf_r+0x32>
 8008408:	690b      	ldr	r3, [r1, #16]
 800840a:	b963      	cbnz	r3, 8008426 <_svfiprintf_r+0x32>
 800840c:	2140      	movs	r1, #64	; 0x40
 800840e:	f7ff ff21 	bl	8008254 <_malloc_r>
 8008412:	6028      	str	r0, [r5, #0]
 8008414:	6128      	str	r0, [r5, #16]
 8008416:	b920      	cbnz	r0, 8008422 <_svfiprintf_r+0x2e>
 8008418:	230c      	movs	r3, #12
 800841a:	603b      	str	r3, [r7, #0]
 800841c:	f04f 30ff 	mov.w	r0, #4294967295
 8008420:	e0d1      	b.n	80085c6 <_svfiprintf_r+0x1d2>
 8008422:	2340      	movs	r3, #64	; 0x40
 8008424:	616b      	str	r3, [r5, #20]
 8008426:	2300      	movs	r3, #0
 8008428:	9309      	str	r3, [sp, #36]	; 0x24
 800842a:	2320      	movs	r3, #32
 800842c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008430:	f8cd 800c 	str.w	r8, [sp, #12]
 8008434:	2330      	movs	r3, #48	; 0x30
 8008436:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80085e0 <_svfiprintf_r+0x1ec>
 800843a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800843e:	f04f 0901 	mov.w	r9, #1
 8008442:	4623      	mov	r3, r4
 8008444:	469a      	mov	sl, r3
 8008446:	f813 2b01 	ldrb.w	r2, [r3], #1
 800844a:	b10a      	cbz	r2, 8008450 <_svfiprintf_r+0x5c>
 800844c:	2a25      	cmp	r2, #37	; 0x25
 800844e:	d1f9      	bne.n	8008444 <_svfiprintf_r+0x50>
 8008450:	ebba 0b04 	subs.w	fp, sl, r4
 8008454:	d00b      	beq.n	800846e <_svfiprintf_r+0x7a>
 8008456:	465b      	mov	r3, fp
 8008458:	4622      	mov	r2, r4
 800845a:	4629      	mov	r1, r5
 800845c:	4638      	mov	r0, r7
 800845e:	f7ff ff6d 	bl	800833c <__ssputs_r>
 8008462:	3001      	adds	r0, #1
 8008464:	f000 80aa 	beq.w	80085bc <_svfiprintf_r+0x1c8>
 8008468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800846a:	445a      	add	r2, fp
 800846c:	9209      	str	r2, [sp, #36]	; 0x24
 800846e:	f89a 3000 	ldrb.w	r3, [sl]
 8008472:	2b00      	cmp	r3, #0
 8008474:	f000 80a2 	beq.w	80085bc <_svfiprintf_r+0x1c8>
 8008478:	2300      	movs	r3, #0
 800847a:	f04f 32ff 	mov.w	r2, #4294967295
 800847e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008482:	f10a 0a01 	add.w	sl, sl, #1
 8008486:	9304      	str	r3, [sp, #16]
 8008488:	9307      	str	r3, [sp, #28]
 800848a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800848e:	931a      	str	r3, [sp, #104]	; 0x68
 8008490:	4654      	mov	r4, sl
 8008492:	2205      	movs	r2, #5
 8008494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008498:	4851      	ldr	r0, [pc, #324]	; (80085e0 <_svfiprintf_r+0x1ec>)
 800849a:	f7f7 fed9 	bl	8000250 <memchr>
 800849e:	9a04      	ldr	r2, [sp, #16]
 80084a0:	b9d8      	cbnz	r0, 80084da <_svfiprintf_r+0xe6>
 80084a2:	06d0      	lsls	r0, r2, #27
 80084a4:	bf44      	itt	mi
 80084a6:	2320      	movmi	r3, #32
 80084a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084ac:	0711      	lsls	r1, r2, #28
 80084ae:	bf44      	itt	mi
 80084b0:	232b      	movmi	r3, #43	; 0x2b
 80084b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80084b6:	f89a 3000 	ldrb.w	r3, [sl]
 80084ba:	2b2a      	cmp	r3, #42	; 0x2a
 80084bc:	d015      	beq.n	80084ea <_svfiprintf_r+0xf6>
 80084be:	9a07      	ldr	r2, [sp, #28]
 80084c0:	4654      	mov	r4, sl
 80084c2:	2000      	movs	r0, #0
 80084c4:	f04f 0c0a 	mov.w	ip, #10
 80084c8:	4621      	mov	r1, r4
 80084ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80084ce:	3b30      	subs	r3, #48	; 0x30
 80084d0:	2b09      	cmp	r3, #9
 80084d2:	d94e      	bls.n	8008572 <_svfiprintf_r+0x17e>
 80084d4:	b1b0      	cbz	r0, 8008504 <_svfiprintf_r+0x110>
 80084d6:	9207      	str	r2, [sp, #28]
 80084d8:	e014      	b.n	8008504 <_svfiprintf_r+0x110>
 80084da:	eba0 0308 	sub.w	r3, r0, r8
 80084de:	fa09 f303 	lsl.w	r3, r9, r3
 80084e2:	4313      	orrs	r3, r2
 80084e4:	9304      	str	r3, [sp, #16]
 80084e6:	46a2      	mov	sl, r4
 80084e8:	e7d2      	b.n	8008490 <_svfiprintf_r+0x9c>
 80084ea:	9b03      	ldr	r3, [sp, #12]
 80084ec:	1d19      	adds	r1, r3, #4
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	9103      	str	r1, [sp, #12]
 80084f2:	2b00      	cmp	r3, #0
 80084f4:	bfbb      	ittet	lt
 80084f6:	425b      	neglt	r3, r3
 80084f8:	f042 0202 	orrlt.w	r2, r2, #2
 80084fc:	9307      	strge	r3, [sp, #28]
 80084fe:	9307      	strlt	r3, [sp, #28]
 8008500:	bfb8      	it	lt
 8008502:	9204      	strlt	r2, [sp, #16]
 8008504:	7823      	ldrb	r3, [r4, #0]
 8008506:	2b2e      	cmp	r3, #46	; 0x2e
 8008508:	d10c      	bne.n	8008524 <_svfiprintf_r+0x130>
 800850a:	7863      	ldrb	r3, [r4, #1]
 800850c:	2b2a      	cmp	r3, #42	; 0x2a
 800850e:	d135      	bne.n	800857c <_svfiprintf_r+0x188>
 8008510:	9b03      	ldr	r3, [sp, #12]
 8008512:	1d1a      	adds	r2, r3, #4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	9203      	str	r2, [sp, #12]
 8008518:	2b00      	cmp	r3, #0
 800851a:	bfb8      	it	lt
 800851c:	f04f 33ff 	movlt.w	r3, #4294967295
 8008520:	3402      	adds	r4, #2
 8008522:	9305      	str	r3, [sp, #20]
 8008524:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80085f0 <_svfiprintf_r+0x1fc>
 8008528:	7821      	ldrb	r1, [r4, #0]
 800852a:	2203      	movs	r2, #3
 800852c:	4650      	mov	r0, sl
 800852e:	f7f7 fe8f 	bl	8000250 <memchr>
 8008532:	b140      	cbz	r0, 8008546 <_svfiprintf_r+0x152>
 8008534:	2340      	movs	r3, #64	; 0x40
 8008536:	eba0 000a 	sub.w	r0, r0, sl
 800853a:	fa03 f000 	lsl.w	r0, r3, r0
 800853e:	9b04      	ldr	r3, [sp, #16]
 8008540:	4303      	orrs	r3, r0
 8008542:	3401      	adds	r4, #1
 8008544:	9304      	str	r3, [sp, #16]
 8008546:	f814 1b01 	ldrb.w	r1, [r4], #1
 800854a:	4826      	ldr	r0, [pc, #152]	; (80085e4 <_svfiprintf_r+0x1f0>)
 800854c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008550:	2206      	movs	r2, #6
 8008552:	f7f7 fe7d 	bl	8000250 <memchr>
 8008556:	2800      	cmp	r0, #0
 8008558:	d038      	beq.n	80085cc <_svfiprintf_r+0x1d8>
 800855a:	4b23      	ldr	r3, [pc, #140]	; (80085e8 <_svfiprintf_r+0x1f4>)
 800855c:	bb1b      	cbnz	r3, 80085a6 <_svfiprintf_r+0x1b2>
 800855e:	9b03      	ldr	r3, [sp, #12]
 8008560:	3307      	adds	r3, #7
 8008562:	f023 0307 	bic.w	r3, r3, #7
 8008566:	3308      	adds	r3, #8
 8008568:	9303      	str	r3, [sp, #12]
 800856a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800856c:	4433      	add	r3, r6
 800856e:	9309      	str	r3, [sp, #36]	; 0x24
 8008570:	e767      	b.n	8008442 <_svfiprintf_r+0x4e>
 8008572:	fb0c 3202 	mla	r2, ip, r2, r3
 8008576:	460c      	mov	r4, r1
 8008578:	2001      	movs	r0, #1
 800857a:	e7a5      	b.n	80084c8 <_svfiprintf_r+0xd4>
 800857c:	2300      	movs	r3, #0
 800857e:	3401      	adds	r4, #1
 8008580:	9305      	str	r3, [sp, #20]
 8008582:	4619      	mov	r1, r3
 8008584:	f04f 0c0a 	mov.w	ip, #10
 8008588:	4620      	mov	r0, r4
 800858a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800858e:	3a30      	subs	r2, #48	; 0x30
 8008590:	2a09      	cmp	r2, #9
 8008592:	d903      	bls.n	800859c <_svfiprintf_r+0x1a8>
 8008594:	2b00      	cmp	r3, #0
 8008596:	d0c5      	beq.n	8008524 <_svfiprintf_r+0x130>
 8008598:	9105      	str	r1, [sp, #20]
 800859a:	e7c3      	b.n	8008524 <_svfiprintf_r+0x130>
 800859c:	fb0c 2101 	mla	r1, ip, r1, r2
 80085a0:	4604      	mov	r4, r0
 80085a2:	2301      	movs	r3, #1
 80085a4:	e7f0      	b.n	8008588 <_svfiprintf_r+0x194>
 80085a6:	ab03      	add	r3, sp, #12
 80085a8:	9300      	str	r3, [sp, #0]
 80085aa:	462a      	mov	r2, r5
 80085ac:	4b0f      	ldr	r3, [pc, #60]	; (80085ec <_svfiprintf_r+0x1f8>)
 80085ae:	a904      	add	r1, sp, #16
 80085b0:	4638      	mov	r0, r7
 80085b2:	f7fe f861 	bl	8006678 <_printf_float>
 80085b6:	1c42      	adds	r2, r0, #1
 80085b8:	4606      	mov	r6, r0
 80085ba:	d1d6      	bne.n	800856a <_svfiprintf_r+0x176>
 80085bc:	89ab      	ldrh	r3, [r5, #12]
 80085be:	065b      	lsls	r3, r3, #25
 80085c0:	f53f af2c 	bmi.w	800841c <_svfiprintf_r+0x28>
 80085c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80085c6:	b01d      	add	sp, #116	; 0x74
 80085c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085cc:	ab03      	add	r3, sp, #12
 80085ce:	9300      	str	r3, [sp, #0]
 80085d0:	462a      	mov	r2, r5
 80085d2:	4b06      	ldr	r3, [pc, #24]	; (80085ec <_svfiprintf_r+0x1f8>)
 80085d4:	a904      	add	r1, sp, #16
 80085d6:	4638      	mov	r0, r7
 80085d8:	f7fe fada 	bl	8006b90 <_printf_i>
 80085dc:	e7eb      	b.n	80085b6 <_svfiprintf_r+0x1c2>
 80085de:	bf00      	nop
 80085e0:	0802f074 	.word	0x0802f074
 80085e4:	0802f07e 	.word	0x0802f07e
 80085e8:	08006679 	.word	0x08006679
 80085ec:	0800833d 	.word	0x0800833d
 80085f0:	0802f07a 	.word	0x0802f07a

080085f4 <_sbrk_r>:
 80085f4:	b538      	push	{r3, r4, r5, lr}
 80085f6:	4d06      	ldr	r5, [pc, #24]	; (8008610 <_sbrk_r+0x1c>)
 80085f8:	2300      	movs	r3, #0
 80085fa:	4604      	mov	r4, r0
 80085fc:	4608      	mov	r0, r1
 80085fe:	602b      	str	r3, [r5, #0]
 8008600:	f7f9 fb20 	bl	8001c44 <_sbrk>
 8008604:	1c43      	adds	r3, r0, #1
 8008606:	d102      	bne.n	800860e <_sbrk_r+0x1a>
 8008608:	682b      	ldr	r3, [r5, #0]
 800860a:	b103      	cbz	r3, 800860e <_sbrk_r+0x1a>
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	bd38      	pop	{r3, r4, r5, pc}
 8008610:	20000354 	.word	0x20000354

08008614 <__assert_func>:
 8008614:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008616:	4614      	mov	r4, r2
 8008618:	461a      	mov	r2, r3
 800861a:	4b09      	ldr	r3, [pc, #36]	; (8008640 <__assert_func+0x2c>)
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	4605      	mov	r5, r0
 8008620:	68d8      	ldr	r0, [r3, #12]
 8008622:	b14c      	cbz	r4, 8008638 <__assert_func+0x24>
 8008624:	4b07      	ldr	r3, [pc, #28]	; (8008644 <__assert_func+0x30>)
 8008626:	9100      	str	r1, [sp, #0]
 8008628:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800862c:	4906      	ldr	r1, [pc, #24]	; (8008648 <__assert_func+0x34>)
 800862e:	462b      	mov	r3, r5
 8008630:	f000 f80e 	bl	8008650 <fiprintf>
 8008634:	f000 faac 	bl	8008b90 <abort>
 8008638:	4b04      	ldr	r3, [pc, #16]	; (800864c <__assert_func+0x38>)
 800863a:	461c      	mov	r4, r3
 800863c:	e7f3      	b.n	8008626 <__assert_func+0x12>
 800863e:	bf00      	nop
 8008640:	20000010 	.word	0x20000010
 8008644:	0802f085 	.word	0x0802f085
 8008648:	0802f092 	.word	0x0802f092
 800864c:	0802f0c0 	.word	0x0802f0c0

08008650 <fiprintf>:
 8008650:	b40e      	push	{r1, r2, r3}
 8008652:	b503      	push	{r0, r1, lr}
 8008654:	4601      	mov	r1, r0
 8008656:	ab03      	add	r3, sp, #12
 8008658:	4805      	ldr	r0, [pc, #20]	; (8008670 <fiprintf+0x20>)
 800865a:	f853 2b04 	ldr.w	r2, [r3], #4
 800865e:	6800      	ldr	r0, [r0, #0]
 8008660:	9301      	str	r3, [sp, #4]
 8008662:	f000 f897 	bl	8008794 <_vfiprintf_r>
 8008666:	b002      	add	sp, #8
 8008668:	f85d eb04 	ldr.w	lr, [sp], #4
 800866c:	b003      	add	sp, #12
 800866e:	4770      	bx	lr
 8008670:	20000010 	.word	0x20000010

08008674 <__ascii_mbtowc>:
 8008674:	b082      	sub	sp, #8
 8008676:	b901      	cbnz	r1, 800867a <__ascii_mbtowc+0x6>
 8008678:	a901      	add	r1, sp, #4
 800867a:	b142      	cbz	r2, 800868e <__ascii_mbtowc+0x1a>
 800867c:	b14b      	cbz	r3, 8008692 <__ascii_mbtowc+0x1e>
 800867e:	7813      	ldrb	r3, [r2, #0]
 8008680:	600b      	str	r3, [r1, #0]
 8008682:	7812      	ldrb	r2, [r2, #0]
 8008684:	1e10      	subs	r0, r2, #0
 8008686:	bf18      	it	ne
 8008688:	2001      	movne	r0, #1
 800868a:	b002      	add	sp, #8
 800868c:	4770      	bx	lr
 800868e:	4610      	mov	r0, r2
 8008690:	e7fb      	b.n	800868a <__ascii_mbtowc+0x16>
 8008692:	f06f 0001 	mvn.w	r0, #1
 8008696:	e7f8      	b.n	800868a <__ascii_mbtowc+0x16>

08008698 <memmove>:
 8008698:	4288      	cmp	r0, r1
 800869a:	b510      	push	{r4, lr}
 800869c:	eb01 0402 	add.w	r4, r1, r2
 80086a0:	d902      	bls.n	80086a8 <memmove+0x10>
 80086a2:	4284      	cmp	r4, r0
 80086a4:	4623      	mov	r3, r4
 80086a6:	d807      	bhi.n	80086b8 <memmove+0x20>
 80086a8:	1e43      	subs	r3, r0, #1
 80086aa:	42a1      	cmp	r1, r4
 80086ac:	d008      	beq.n	80086c0 <memmove+0x28>
 80086ae:	f811 2b01 	ldrb.w	r2, [r1], #1
 80086b2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80086b6:	e7f8      	b.n	80086aa <memmove+0x12>
 80086b8:	4402      	add	r2, r0
 80086ba:	4601      	mov	r1, r0
 80086bc:	428a      	cmp	r2, r1
 80086be:	d100      	bne.n	80086c2 <memmove+0x2a>
 80086c0:	bd10      	pop	{r4, pc}
 80086c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80086c6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80086ca:	e7f7      	b.n	80086bc <memmove+0x24>

080086cc <__malloc_lock>:
 80086cc:	4801      	ldr	r0, [pc, #4]	; (80086d4 <__malloc_lock+0x8>)
 80086ce:	f000 bc1f 	b.w	8008f10 <__retarget_lock_acquire_recursive>
 80086d2:	bf00      	nop
 80086d4:	20000358 	.word	0x20000358

080086d8 <__malloc_unlock>:
 80086d8:	4801      	ldr	r0, [pc, #4]	; (80086e0 <__malloc_unlock+0x8>)
 80086da:	f000 bc1a 	b.w	8008f12 <__retarget_lock_release_recursive>
 80086de:	bf00      	nop
 80086e0:	20000358 	.word	0x20000358

080086e4 <_realloc_r>:
 80086e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e8:	4680      	mov	r8, r0
 80086ea:	4614      	mov	r4, r2
 80086ec:	460e      	mov	r6, r1
 80086ee:	b921      	cbnz	r1, 80086fa <_realloc_r+0x16>
 80086f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80086f4:	4611      	mov	r1, r2
 80086f6:	f7ff bdad 	b.w	8008254 <_malloc_r>
 80086fa:	b92a      	cbnz	r2, 8008708 <_realloc_r+0x24>
 80086fc:	f7ff fd3e 	bl	800817c <_free_r>
 8008700:	4625      	mov	r5, r4
 8008702:	4628      	mov	r0, r5
 8008704:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008708:	f000 fc6a 	bl	8008fe0 <_malloc_usable_size_r>
 800870c:	4284      	cmp	r4, r0
 800870e:	4607      	mov	r7, r0
 8008710:	d802      	bhi.n	8008718 <_realloc_r+0x34>
 8008712:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008716:	d812      	bhi.n	800873e <_realloc_r+0x5a>
 8008718:	4621      	mov	r1, r4
 800871a:	4640      	mov	r0, r8
 800871c:	f7ff fd9a 	bl	8008254 <_malloc_r>
 8008720:	4605      	mov	r5, r0
 8008722:	2800      	cmp	r0, #0
 8008724:	d0ed      	beq.n	8008702 <_realloc_r+0x1e>
 8008726:	42bc      	cmp	r4, r7
 8008728:	4622      	mov	r2, r4
 800872a:	4631      	mov	r1, r6
 800872c:	bf28      	it	cs
 800872e:	463a      	movcs	r2, r7
 8008730:	f7ff f97c 	bl	8007a2c <memcpy>
 8008734:	4631      	mov	r1, r6
 8008736:	4640      	mov	r0, r8
 8008738:	f7ff fd20 	bl	800817c <_free_r>
 800873c:	e7e1      	b.n	8008702 <_realloc_r+0x1e>
 800873e:	4635      	mov	r5, r6
 8008740:	e7df      	b.n	8008702 <_realloc_r+0x1e>

08008742 <__sfputc_r>:
 8008742:	6893      	ldr	r3, [r2, #8]
 8008744:	3b01      	subs	r3, #1
 8008746:	2b00      	cmp	r3, #0
 8008748:	b410      	push	{r4}
 800874a:	6093      	str	r3, [r2, #8]
 800874c:	da08      	bge.n	8008760 <__sfputc_r+0x1e>
 800874e:	6994      	ldr	r4, [r2, #24]
 8008750:	42a3      	cmp	r3, r4
 8008752:	db01      	blt.n	8008758 <__sfputc_r+0x16>
 8008754:	290a      	cmp	r1, #10
 8008756:	d103      	bne.n	8008760 <__sfputc_r+0x1e>
 8008758:	f85d 4b04 	ldr.w	r4, [sp], #4
 800875c:	f000 b94a 	b.w	80089f4 <__swbuf_r>
 8008760:	6813      	ldr	r3, [r2, #0]
 8008762:	1c58      	adds	r0, r3, #1
 8008764:	6010      	str	r0, [r2, #0]
 8008766:	7019      	strb	r1, [r3, #0]
 8008768:	4608      	mov	r0, r1
 800876a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800876e:	4770      	bx	lr

08008770 <__sfputs_r>:
 8008770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008772:	4606      	mov	r6, r0
 8008774:	460f      	mov	r7, r1
 8008776:	4614      	mov	r4, r2
 8008778:	18d5      	adds	r5, r2, r3
 800877a:	42ac      	cmp	r4, r5
 800877c:	d101      	bne.n	8008782 <__sfputs_r+0x12>
 800877e:	2000      	movs	r0, #0
 8008780:	e007      	b.n	8008792 <__sfputs_r+0x22>
 8008782:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008786:	463a      	mov	r2, r7
 8008788:	4630      	mov	r0, r6
 800878a:	f7ff ffda 	bl	8008742 <__sfputc_r>
 800878e:	1c43      	adds	r3, r0, #1
 8008790:	d1f3      	bne.n	800877a <__sfputs_r+0xa>
 8008792:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008794 <_vfiprintf_r>:
 8008794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008798:	460d      	mov	r5, r1
 800879a:	b09d      	sub	sp, #116	; 0x74
 800879c:	4614      	mov	r4, r2
 800879e:	4698      	mov	r8, r3
 80087a0:	4606      	mov	r6, r0
 80087a2:	b118      	cbz	r0, 80087ac <_vfiprintf_r+0x18>
 80087a4:	6983      	ldr	r3, [r0, #24]
 80087a6:	b90b      	cbnz	r3, 80087ac <_vfiprintf_r+0x18>
 80087a8:	f000 fb14 	bl	8008dd4 <__sinit>
 80087ac:	4b89      	ldr	r3, [pc, #548]	; (80089d4 <_vfiprintf_r+0x240>)
 80087ae:	429d      	cmp	r5, r3
 80087b0:	d11b      	bne.n	80087ea <_vfiprintf_r+0x56>
 80087b2:	6875      	ldr	r5, [r6, #4]
 80087b4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087b6:	07d9      	lsls	r1, r3, #31
 80087b8:	d405      	bmi.n	80087c6 <_vfiprintf_r+0x32>
 80087ba:	89ab      	ldrh	r3, [r5, #12]
 80087bc:	059a      	lsls	r2, r3, #22
 80087be:	d402      	bmi.n	80087c6 <_vfiprintf_r+0x32>
 80087c0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087c2:	f000 fba5 	bl	8008f10 <__retarget_lock_acquire_recursive>
 80087c6:	89ab      	ldrh	r3, [r5, #12]
 80087c8:	071b      	lsls	r3, r3, #28
 80087ca:	d501      	bpl.n	80087d0 <_vfiprintf_r+0x3c>
 80087cc:	692b      	ldr	r3, [r5, #16]
 80087ce:	b9eb      	cbnz	r3, 800880c <_vfiprintf_r+0x78>
 80087d0:	4629      	mov	r1, r5
 80087d2:	4630      	mov	r0, r6
 80087d4:	f000 f96e 	bl	8008ab4 <__swsetup_r>
 80087d8:	b1c0      	cbz	r0, 800880c <_vfiprintf_r+0x78>
 80087da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80087dc:	07dc      	lsls	r4, r3, #31
 80087de:	d50e      	bpl.n	80087fe <_vfiprintf_r+0x6a>
 80087e0:	f04f 30ff 	mov.w	r0, #4294967295
 80087e4:	b01d      	add	sp, #116	; 0x74
 80087e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ea:	4b7b      	ldr	r3, [pc, #492]	; (80089d8 <_vfiprintf_r+0x244>)
 80087ec:	429d      	cmp	r5, r3
 80087ee:	d101      	bne.n	80087f4 <_vfiprintf_r+0x60>
 80087f0:	68b5      	ldr	r5, [r6, #8]
 80087f2:	e7df      	b.n	80087b4 <_vfiprintf_r+0x20>
 80087f4:	4b79      	ldr	r3, [pc, #484]	; (80089dc <_vfiprintf_r+0x248>)
 80087f6:	429d      	cmp	r5, r3
 80087f8:	bf08      	it	eq
 80087fa:	68f5      	ldreq	r5, [r6, #12]
 80087fc:	e7da      	b.n	80087b4 <_vfiprintf_r+0x20>
 80087fe:	89ab      	ldrh	r3, [r5, #12]
 8008800:	0598      	lsls	r0, r3, #22
 8008802:	d4ed      	bmi.n	80087e0 <_vfiprintf_r+0x4c>
 8008804:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008806:	f000 fb84 	bl	8008f12 <__retarget_lock_release_recursive>
 800880a:	e7e9      	b.n	80087e0 <_vfiprintf_r+0x4c>
 800880c:	2300      	movs	r3, #0
 800880e:	9309      	str	r3, [sp, #36]	; 0x24
 8008810:	2320      	movs	r3, #32
 8008812:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008816:	f8cd 800c 	str.w	r8, [sp, #12]
 800881a:	2330      	movs	r3, #48	; 0x30
 800881c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80089e0 <_vfiprintf_r+0x24c>
 8008820:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008824:	f04f 0901 	mov.w	r9, #1
 8008828:	4623      	mov	r3, r4
 800882a:	469a      	mov	sl, r3
 800882c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008830:	b10a      	cbz	r2, 8008836 <_vfiprintf_r+0xa2>
 8008832:	2a25      	cmp	r2, #37	; 0x25
 8008834:	d1f9      	bne.n	800882a <_vfiprintf_r+0x96>
 8008836:	ebba 0b04 	subs.w	fp, sl, r4
 800883a:	d00b      	beq.n	8008854 <_vfiprintf_r+0xc0>
 800883c:	465b      	mov	r3, fp
 800883e:	4622      	mov	r2, r4
 8008840:	4629      	mov	r1, r5
 8008842:	4630      	mov	r0, r6
 8008844:	f7ff ff94 	bl	8008770 <__sfputs_r>
 8008848:	3001      	adds	r0, #1
 800884a:	f000 80aa 	beq.w	80089a2 <_vfiprintf_r+0x20e>
 800884e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008850:	445a      	add	r2, fp
 8008852:	9209      	str	r2, [sp, #36]	; 0x24
 8008854:	f89a 3000 	ldrb.w	r3, [sl]
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 80a2 	beq.w	80089a2 <_vfiprintf_r+0x20e>
 800885e:	2300      	movs	r3, #0
 8008860:	f04f 32ff 	mov.w	r2, #4294967295
 8008864:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008868:	f10a 0a01 	add.w	sl, sl, #1
 800886c:	9304      	str	r3, [sp, #16]
 800886e:	9307      	str	r3, [sp, #28]
 8008870:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008874:	931a      	str	r3, [sp, #104]	; 0x68
 8008876:	4654      	mov	r4, sl
 8008878:	2205      	movs	r2, #5
 800887a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800887e:	4858      	ldr	r0, [pc, #352]	; (80089e0 <_vfiprintf_r+0x24c>)
 8008880:	f7f7 fce6 	bl	8000250 <memchr>
 8008884:	9a04      	ldr	r2, [sp, #16]
 8008886:	b9d8      	cbnz	r0, 80088c0 <_vfiprintf_r+0x12c>
 8008888:	06d1      	lsls	r1, r2, #27
 800888a:	bf44      	itt	mi
 800888c:	2320      	movmi	r3, #32
 800888e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008892:	0713      	lsls	r3, r2, #28
 8008894:	bf44      	itt	mi
 8008896:	232b      	movmi	r3, #43	; 0x2b
 8008898:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800889c:	f89a 3000 	ldrb.w	r3, [sl]
 80088a0:	2b2a      	cmp	r3, #42	; 0x2a
 80088a2:	d015      	beq.n	80088d0 <_vfiprintf_r+0x13c>
 80088a4:	9a07      	ldr	r2, [sp, #28]
 80088a6:	4654      	mov	r4, sl
 80088a8:	2000      	movs	r0, #0
 80088aa:	f04f 0c0a 	mov.w	ip, #10
 80088ae:	4621      	mov	r1, r4
 80088b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80088b4:	3b30      	subs	r3, #48	; 0x30
 80088b6:	2b09      	cmp	r3, #9
 80088b8:	d94e      	bls.n	8008958 <_vfiprintf_r+0x1c4>
 80088ba:	b1b0      	cbz	r0, 80088ea <_vfiprintf_r+0x156>
 80088bc:	9207      	str	r2, [sp, #28]
 80088be:	e014      	b.n	80088ea <_vfiprintf_r+0x156>
 80088c0:	eba0 0308 	sub.w	r3, r0, r8
 80088c4:	fa09 f303 	lsl.w	r3, r9, r3
 80088c8:	4313      	orrs	r3, r2
 80088ca:	9304      	str	r3, [sp, #16]
 80088cc:	46a2      	mov	sl, r4
 80088ce:	e7d2      	b.n	8008876 <_vfiprintf_r+0xe2>
 80088d0:	9b03      	ldr	r3, [sp, #12]
 80088d2:	1d19      	adds	r1, r3, #4
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	9103      	str	r1, [sp, #12]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	bfbb      	ittet	lt
 80088dc:	425b      	neglt	r3, r3
 80088de:	f042 0202 	orrlt.w	r2, r2, #2
 80088e2:	9307      	strge	r3, [sp, #28]
 80088e4:	9307      	strlt	r3, [sp, #28]
 80088e6:	bfb8      	it	lt
 80088e8:	9204      	strlt	r2, [sp, #16]
 80088ea:	7823      	ldrb	r3, [r4, #0]
 80088ec:	2b2e      	cmp	r3, #46	; 0x2e
 80088ee:	d10c      	bne.n	800890a <_vfiprintf_r+0x176>
 80088f0:	7863      	ldrb	r3, [r4, #1]
 80088f2:	2b2a      	cmp	r3, #42	; 0x2a
 80088f4:	d135      	bne.n	8008962 <_vfiprintf_r+0x1ce>
 80088f6:	9b03      	ldr	r3, [sp, #12]
 80088f8:	1d1a      	adds	r2, r3, #4
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	9203      	str	r2, [sp, #12]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	bfb8      	it	lt
 8008902:	f04f 33ff 	movlt.w	r3, #4294967295
 8008906:	3402      	adds	r4, #2
 8008908:	9305      	str	r3, [sp, #20]
 800890a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80089f0 <_vfiprintf_r+0x25c>
 800890e:	7821      	ldrb	r1, [r4, #0]
 8008910:	2203      	movs	r2, #3
 8008912:	4650      	mov	r0, sl
 8008914:	f7f7 fc9c 	bl	8000250 <memchr>
 8008918:	b140      	cbz	r0, 800892c <_vfiprintf_r+0x198>
 800891a:	2340      	movs	r3, #64	; 0x40
 800891c:	eba0 000a 	sub.w	r0, r0, sl
 8008920:	fa03 f000 	lsl.w	r0, r3, r0
 8008924:	9b04      	ldr	r3, [sp, #16]
 8008926:	4303      	orrs	r3, r0
 8008928:	3401      	adds	r4, #1
 800892a:	9304      	str	r3, [sp, #16]
 800892c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008930:	482c      	ldr	r0, [pc, #176]	; (80089e4 <_vfiprintf_r+0x250>)
 8008932:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008936:	2206      	movs	r2, #6
 8008938:	f7f7 fc8a 	bl	8000250 <memchr>
 800893c:	2800      	cmp	r0, #0
 800893e:	d03f      	beq.n	80089c0 <_vfiprintf_r+0x22c>
 8008940:	4b29      	ldr	r3, [pc, #164]	; (80089e8 <_vfiprintf_r+0x254>)
 8008942:	bb1b      	cbnz	r3, 800898c <_vfiprintf_r+0x1f8>
 8008944:	9b03      	ldr	r3, [sp, #12]
 8008946:	3307      	adds	r3, #7
 8008948:	f023 0307 	bic.w	r3, r3, #7
 800894c:	3308      	adds	r3, #8
 800894e:	9303      	str	r3, [sp, #12]
 8008950:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008952:	443b      	add	r3, r7
 8008954:	9309      	str	r3, [sp, #36]	; 0x24
 8008956:	e767      	b.n	8008828 <_vfiprintf_r+0x94>
 8008958:	fb0c 3202 	mla	r2, ip, r2, r3
 800895c:	460c      	mov	r4, r1
 800895e:	2001      	movs	r0, #1
 8008960:	e7a5      	b.n	80088ae <_vfiprintf_r+0x11a>
 8008962:	2300      	movs	r3, #0
 8008964:	3401      	adds	r4, #1
 8008966:	9305      	str	r3, [sp, #20]
 8008968:	4619      	mov	r1, r3
 800896a:	f04f 0c0a 	mov.w	ip, #10
 800896e:	4620      	mov	r0, r4
 8008970:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008974:	3a30      	subs	r2, #48	; 0x30
 8008976:	2a09      	cmp	r2, #9
 8008978:	d903      	bls.n	8008982 <_vfiprintf_r+0x1ee>
 800897a:	2b00      	cmp	r3, #0
 800897c:	d0c5      	beq.n	800890a <_vfiprintf_r+0x176>
 800897e:	9105      	str	r1, [sp, #20]
 8008980:	e7c3      	b.n	800890a <_vfiprintf_r+0x176>
 8008982:	fb0c 2101 	mla	r1, ip, r1, r2
 8008986:	4604      	mov	r4, r0
 8008988:	2301      	movs	r3, #1
 800898a:	e7f0      	b.n	800896e <_vfiprintf_r+0x1da>
 800898c:	ab03      	add	r3, sp, #12
 800898e:	9300      	str	r3, [sp, #0]
 8008990:	462a      	mov	r2, r5
 8008992:	4b16      	ldr	r3, [pc, #88]	; (80089ec <_vfiprintf_r+0x258>)
 8008994:	a904      	add	r1, sp, #16
 8008996:	4630      	mov	r0, r6
 8008998:	f7fd fe6e 	bl	8006678 <_printf_float>
 800899c:	4607      	mov	r7, r0
 800899e:	1c78      	adds	r0, r7, #1
 80089a0:	d1d6      	bne.n	8008950 <_vfiprintf_r+0x1bc>
 80089a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80089a4:	07d9      	lsls	r1, r3, #31
 80089a6:	d405      	bmi.n	80089b4 <_vfiprintf_r+0x220>
 80089a8:	89ab      	ldrh	r3, [r5, #12]
 80089aa:	059a      	lsls	r2, r3, #22
 80089ac:	d402      	bmi.n	80089b4 <_vfiprintf_r+0x220>
 80089ae:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80089b0:	f000 faaf 	bl	8008f12 <__retarget_lock_release_recursive>
 80089b4:	89ab      	ldrh	r3, [r5, #12]
 80089b6:	065b      	lsls	r3, r3, #25
 80089b8:	f53f af12 	bmi.w	80087e0 <_vfiprintf_r+0x4c>
 80089bc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80089be:	e711      	b.n	80087e4 <_vfiprintf_r+0x50>
 80089c0:	ab03      	add	r3, sp, #12
 80089c2:	9300      	str	r3, [sp, #0]
 80089c4:	462a      	mov	r2, r5
 80089c6:	4b09      	ldr	r3, [pc, #36]	; (80089ec <_vfiprintf_r+0x258>)
 80089c8:	a904      	add	r1, sp, #16
 80089ca:	4630      	mov	r0, r6
 80089cc:	f7fe f8e0 	bl	8006b90 <_printf_i>
 80089d0:	e7e4      	b.n	800899c <_vfiprintf_r+0x208>
 80089d2:	bf00      	nop
 80089d4:	0802f1ec 	.word	0x0802f1ec
 80089d8:	0802f20c 	.word	0x0802f20c
 80089dc:	0802f1cc 	.word	0x0802f1cc
 80089e0:	0802f074 	.word	0x0802f074
 80089e4:	0802f07e 	.word	0x0802f07e
 80089e8:	08006679 	.word	0x08006679
 80089ec:	08008771 	.word	0x08008771
 80089f0:	0802f07a 	.word	0x0802f07a

080089f4 <__swbuf_r>:
 80089f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089f6:	460e      	mov	r6, r1
 80089f8:	4614      	mov	r4, r2
 80089fa:	4605      	mov	r5, r0
 80089fc:	b118      	cbz	r0, 8008a06 <__swbuf_r+0x12>
 80089fe:	6983      	ldr	r3, [r0, #24]
 8008a00:	b90b      	cbnz	r3, 8008a06 <__swbuf_r+0x12>
 8008a02:	f000 f9e7 	bl	8008dd4 <__sinit>
 8008a06:	4b21      	ldr	r3, [pc, #132]	; (8008a8c <__swbuf_r+0x98>)
 8008a08:	429c      	cmp	r4, r3
 8008a0a:	d12b      	bne.n	8008a64 <__swbuf_r+0x70>
 8008a0c:	686c      	ldr	r4, [r5, #4]
 8008a0e:	69a3      	ldr	r3, [r4, #24]
 8008a10:	60a3      	str	r3, [r4, #8]
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	071a      	lsls	r2, r3, #28
 8008a16:	d52f      	bpl.n	8008a78 <__swbuf_r+0x84>
 8008a18:	6923      	ldr	r3, [r4, #16]
 8008a1a:	b36b      	cbz	r3, 8008a78 <__swbuf_r+0x84>
 8008a1c:	6923      	ldr	r3, [r4, #16]
 8008a1e:	6820      	ldr	r0, [r4, #0]
 8008a20:	1ac0      	subs	r0, r0, r3
 8008a22:	6963      	ldr	r3, [r4, #20]
 8008a24:	b2f6      	uxtb	r6, r6
 8008a26:	4283      	cmp	r3, r0
 8008a28:	4637      	mov	r7, r6
 8008a2a:	dc04      	bgt.n	8008a36 <__swbuf_r+0x42>
 8008a2c:	4621      	mov	r1, r4
 8008a2e:	4628      	mov	r0, r5
 8008a30:	f000 f93c 	bl	8008cac <_fflush_r>
 8008a34:	bb30      	cbnz	r0, 8008a84 <__swbuf_r+0x90>
 8008a36:	68a3      	ldr	r3, [r4, #8]
 8008a38:	3b01      	subs	r3, #1
 8008a3a:	60a3      	str	r3, [r4, #8]
 8008a3c:	6823      	ldr	r3, [r4, #0]
 8008a3e:	1c5a      	adds	r2, r3, #1
 8008a40:	6022      	str	r2, [r4, #0]
 8008a42:	701e      	strb	r6, [r3, #0]
 8008a44:	6963      	ldr	r3, [r4, #20]
 8008a46:	3001      	adds	r0, #1
 8008a48:	4283      	cmp	r3, r0
 8008a4a:	d004      	beq.n	8008a56 <__swbuf_r+0x62>
 8008a4c:	89a3      	ldrh	r3, [r4, #12]
 8008a4e:	07db      	lsls	r3, r3, #31
 8008a50:	d506      	bpl.n	8008a60 <__swbuf_r+0x6c>
 8008a52:	2e0a      	cmp	r6, #10
 8008a54:	d104      	bne.n	8008a60 <__swbuf_r+0x6c>
 8008a56:	4621      	mov	r1, r4
 8008a58:	4628      	mov	r0, r5
 8008a5a:	f000 f927 	bl	8008cac <_fflush_r>
 8008a5e:	b988      	cbnz	r0, 8008a84 <__swbuf_r+0x90>
 8008a60:	4638      	mov	r0, r7
 8008a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a64:	4b0a      	ldr	r3, [pc, #40]	; (8008a90 <__swbuf_r+0x9c>)
 8008a66:	429c      	cmp	r4, r3
 8008a68:	d101      	bne.n	8008a6e <__swbuf_r+0x7a>
 8008a6a:	68ac      	ldr	r4, [r5, #8]
 8008a6c:	e7cf      	b.n	8008a0e <__swbuf_r+0x1a>
 8008a6e:	4b09      	ldr	r3, [pc, #36]	; (8008a94 <__swbuf_r+0xa0>)
 8008a70:	429c      	cmp	r4, r3
 8008a72:	bf08      	it	eq
 8008a74:	68ec      	ldreq	r4, [r5, #12]
 8008a76:	e7ca      	b.n	8008a0e <__swbuf_r+0x1a>
 8008a78:	4621      	mov	r1, r4
 8008a7a:	4628      	mov	r0, r5
 8008a7c:	f000 f81a 	bl	8008ab4 <__swsetup_r>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d0cb      	beq.n	8008a1c <__swbuf_r+0x28>
 8008a84:	f04f 37ff 	mov.w	r7, #4294967295
 8008a88:	e7ea      	b.n	8008a60 <__swbuf_r+0x6c>
 8008a8a:	bf00      	nop
 8008a8c:	0802f1ec 	.word	0x0802f1ec
 8008a90:	0802f20c 	.word	0x0802f20c
 8008a94:	0802f1cc 	.word	0x0802f1cc

08008a98 <__ascii_wctomb>:
 8008a98:	b149      	cbz	r1, 8008aae <__ascii_wctomb+0x16>
 8008a9a:	2aff      	cmp	r2, #255	; 0xff
 8008a9c:	bf85      	ittet	hi
 8008a9e:	238a      	movhi	r3, #138	; 0x8a
 8008aa0:	6003      	strhi	r3, [r0, #0]
 8008aa2:	700a      	strbls	r2, [r1, #0]
 8008aa4:	f04f 30ff 	movhi.w	r0, #4294967295
 8008aa8:	bf98      	it	ls
 8008aaa:	2001      	movls	r0, #1
 8008aac:	4770      	bx	lr
 8008aae:	4608      	mov	r0, r1
 8008ab0:	4770      	bx	lr
	...

08008ab4 <__swsetup_r>:
 8008ab4:	4b32      	ldr	r3, [pc, #200]	; (8008b80 <__swsetup_r+0xcc>)
 8008ab6:	b570      	push	{r4, r5, r6, lr}
 8008ab8:	681d      	ldr	r5, [r3, #0]
 8008aba:	4606      	mov	r6, r0
 8008abc:	460c      	mov	r4, r1
 8008abe:	b125      	cbz	r5, 8008aca <__swsetup_r+0x16>
 8008ac0:	69ab      	ldr	r3, [r5, #24]
 8008ac2:	b913      	cbnz	r3, 8008aca <__swsetup_r+0x16>
 8008ac4:	4628      	mov	r0, r5
 8008ac6:	f000 f985 	bl	8008dd4 <__sinit>
 8008aca:	4b2e      	ldr	r3, [pc, #184]	; (8008b84 <__swsetup_r+0xd0>)
 8008acc:	429c      	cmp	r4, r3
 8008ace:	d10f      	bne.n	8008af0 <__swsetup_r+0x3c>
 8008ad0:	686c      	ldr	r4, [r5, #4]
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ad8:	0719      	lsls	r1, r3, #28
 8008ada:	d42c      	bmi.n	8008b36 <__swsetup_r+0x82>
 8008adc:	06dd      	lsls	r5, r3, #27
 8008ade:	d411      	bmi.n	8008b04 <__swsetup_r+0x50>
 8008ae0:	2309      	movs	r3, #9
 8008ae2:	6033      	str	r3, [r6, #0]
 8008ae4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008ae8:	81a3      	strh	r3, [r4, #12]
 8008aea:	f04f 30ff 	mov.w	r0, #4294967295
 8008aee:	e03e      	b.n	8008b6e <__swsetup_r+0xba>
 8008af0:	4b25      	ldr	r3, [pc, #148]	; (8008b88 <__swsetup_r+0xd4>)
 8008af2:	429c      	cmp	r4, r3
 8008af4:	d101      	bne.n	8008afa <__swsetup_r+0x46>
 8008af6:	68ac      	ldr	r4, [r5, #8]
 8008af8:	e7eb      	b.n	8008ad2 <__swsetup_r+0x1e>
 8008afa:	4b24      	ldr	r3, [pc, #144]	; (8008b8c <__swsetup_r+0xd8>)
 8008afc:	429c      	cmp	r4, r3
 8008afe:	bf08      	it	eq
 8008b00:	68ec      	ldreq	r4, [r5, #12]
 8008b02:	e7e6      	b.n	8008ad2 <__swsetup_r+0x1e>
 8008b04:	0758      	lsls	r0, r3, #29
 8008b06:	d512      	bpl.n	8008b2e <__swsetup_r+0x7a>
 8008b08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b0a:	b141      	cbz	r1, 8008b1e <__swsetup_r+0x6a>
 8008b0c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b10:	4299      	cmp	r1, r3
 8008b12:	d002      	beq.n	8008b1a <__swsetup_r+0x66>
 8008b14:	4630      	mov	r0, r6
 8008b16:	f7ff fb31 	bl	800817c <_free_r>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	6363      	str	r3, [r4, #52]	; 0x34
 8008b1e:	89a3      	ldrh	r3, [r4, #12]
 8008b20:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008b24:	81a3      	strh	r3, [r4, #12]
 8008b26:	2300      	movs	r3, #0
 8008b28:	6063      	str	r3, [r4, #4]
 8008b2a:	6923      	ldr	r3, [r4, #16]
 8008b2c:	6023      	str	r3, [r4, #0]
 8008b2e:	89a3      	ldrh	r3, [r4, #12]
 8008b30:	f043 0308 	orr.w	r3, r3, #8
 8008b34:	81a3      	strh	r3, [r4, #12]
 8008b36:	6923      	ldr	r3, [r4, #16]
 8008b38:	b94b      	cbnz	r3, 8008b4e <__swsetup_r+0x9a>
 8008b3a:	89a3      	ldrh	r3, [r4, #12]
 8008b3c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008b40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008b44:	d003      	beq.n	8008b4e <__swsetup_r+0x9a>
 8008b46:	4621      	mov	r1, r4
 8008b48:	4630      	mov	r0, r6
 8008b4a:	f000 fa09 	bl	8008f60 <__smakebuf_r>
 8008b4e:	89a0      	ldrh	r0, [r4, #12]
 8008b50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008b54:	f010 0301 	ands.w	r3, r0, #1
 8008b58:	d00a      	beq.n	8008b70 <__swsetup_r+0xbc>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	60a3      	str	r3, [r4, #8]
 8008b5e:	6963      	ldr	r3, [r4, #20]
 8008b60:	425b      	negs	r3, r3
 8008b62:	61a3      	str	r3, [r4, #24]
 8008b64:	6923      	ldr	r3, [r4, #16]
 8008b66:	b943      	cbnz	r3, 8008b7a <__swsetup_r+0xc6>
 8008b68:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008b6c:	d1ba      	bne.n	8008ae4 <__swsetup_r+0x30>
 8008b6e:	bd70      	pop	{r4, r5, r6, pc}
 8008b70:	0781      	lsls	r1, r0, #30
 8008b72:	bf58      	it	pl
 8008b74:	6963      	ldrpl	r3, [r4, #20]
 8008b76:	60a3      	str	r3, [r4, #8]
 8008b78:	e7f4      	b.n	8008b64 <__swsetup_r+0xb0>
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	e7f7      	b.n	8008b6e <__swsetup_r+0xba>
 8008b7e:	bf00      	nop
 8008b80:	20000010 	.word	0x20000010
 8008b84:	0802f1ec 	.word	0x0802f1ec
 8008b88:	0802f20c 	.word	0x0802f20c
 8008b8c:	0802f1cc 	.word	0x0802f1cc

08008b90 <abort>:
 8008b90:	b508      	push	{r3, lr}
 8008b92:	2006      	movs	r0, #6
 8008b94:	f000 fa54 	bl	8009040 <raise>
 8008b98:	2001      	movs	r0, #1
 8008b9a:	f7f8 ffdb 	bl	8001b54 <_exit>
	...

08008ba0 <__sflush_r>:
 8008ba0:	898a      	ldrh	r2, [r1, #12]
 8008ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008ba6:	4605      	mov	r5, r0
 8008ba8:	0710      	lsls	r0, r2, #28
 8008baa:	460c      	mov	r4, r1
 8008bac:	d458      	bmi.n	8008c60 <__sflush_r+0xc0>
 8008bae:	684b      	ldr	r3, [r1, #4]
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	dc05      	bgt.n	8008bc0 <__sflush_r+0x20>
 8008bb4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008bb6:	2b00      	cmp	r3, #0
 8008bb8:	dc02      	bgt.n	8008bc0 <__sflush_r+0x20>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bc2:	2e00      	cmp	r6, #0
 8008bc4:	d0f9      	beq.n	8008bba <__sflush_r+0x1a>
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008bcc:	682f      	ldr	r7, [r5, #0]
 8008bce:	602b      	str	r3, [r5, #0]
 8008bd0:	d032      	beq.n	8008c38 <__sflush_r+0x98>
 8008bd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008bd4:	89a3      	ldrh	r3, [r4, #12]
 8008bd6:	075a      	lsls	r2, r3, #29
 8008bd8:	d505      	bpl.n	8008be6 <__sflush_r+0x46>
 8008bda:	6863      	ldr	r3, [r4, #4]
 8008bdc:	1ac0      	subs	r0, r0, r3
 8008bde:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008be0:	b10b      	cbz	r3, 8008be6 <__sflush_r+0x46>
 8008be2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008be4:	1ac0      	subs	r0, r0, r3
 8008be6:	2300      	movs	r3, #0
 8008be8:	4602      	mov	r2, r0
 8008bea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008bec:	6a21      	ldr	r1, [r4, #32]
 8008bee:	4628      	mov	r0, r5
 8008bf0:	47b0      	blx	r6
 8008bf2:	1c43      	adds	r3, r0, #1
 8008bf4:	89a3      	ldrh	r3, [r4, #12]
 8008bf6:	d106      	bne.n	8008c06 <__sflush_r+0x66>
 8008bf8:	6829      	ldr	r1, [r5, #0]
 8008bfa:	291d      	cmp	r1, #29
 8008bfc:	d82c      	bhi.n	8008c58 <__sflush_r+0xb8>
 8008bfe:	4a2a      	ldr	r2, [pc, #168]	; (8008ca8 <__sflush_r+0x108>)
 8008c00:	40ca      	lsrs	r2, r1
 8008c02:	07d6      	lsls	r6, r2, #31
 8008c04:	d528      	bpl.n	8008c58 <__sflush_r+0xb8>
 8008c06:	2200      	movs	r2, #0
 8008c08:	6062      	str	r2, [r4, #4]
 8008c0a:	04d9      	lsls	r1, r3, #19
 8008c0c:	6922      	ldr	r2, [r4, #16]
 8008c0e:	6022      	str	r2, [r4, #0]
 8008c10:	d504      	bpl.n	8008c1c <__sflush_r+0x7c>
 8008c12:	1c42      	adds	r2, r0, #1
 8008c14:	d101      	bne.n	8008c1a <__sflush_r+0x7a>
 8008c16:	682b      	ldr	r3, [r5, #0]
 8008c18:	b903      	cbnz	r3, 8008c1c <__sflush_r+0x7c>
 8008c1a:	6560      	str	r0, [r4, #84]	; 0x54
 8008c1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c1e:	602f      	str	r7, [r5, #0]
 8008c20:	2900      	cmp	r1, #0
 8008c22:	d0ca      	beq.n	8008bba <__sflush_r+0x1a>
 8008c24:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c28:	4299      	cmp	r1, r3
 8008c2a:	d002      	beq.n	8008c32 <__sflush_r+0x92>
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	f7ff faa5 	bl	800817c <_free_r>
 8008c32:	2000      	movs	r0, #0
 8008c34:	6360      	str	r0, [r4, #52]	; 0x34
 8008c36:	e7c1      	b.n	8008bbc <__sflush_r+0x1c>
 8008c38:	6a21      	ldr	r1, [r4, #32]
 8008c3a:	2301      	movs	r3, #1
 8008c3c:	4628      	mov	r0, r5
 8008c3e:	47b0      	blx	r6
 8008c40:	1c41      	adds	r1, r0, #1
 8008c42:	d1c7      	bne.n	8008bd4 <__sflush_r+0x34>
 8008c44:	682b      	ldr	r3, [r5, #0]
 8008c46:	2b00      	cmp	r3, #0
 8008c48:	d0c4      	beq.n	8008bd4 <__sflush_r+0x34>
 8008c4a:	2b1d      	cmp	r3, #29
 8008c4c:	d001      	beq.n	8008c52 <__sflush_r+0xb2>
 8008c4e:	2b16      	cmp	r3, #22
 8008c50:	d101      	bne.n	8008c56 <__sflush_r+0xb6>
 8008c52:	602f      	str	r7, [r5, #0]
 8008c54:	e7b1      	b.n	8008bba <__sflush_r+0x1a>
 8008c56:	89a3      	ldrh	r3, [r4, #12]
 8008c58:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c5c:	81a3      	strh	r3, [r4, #12]
 8008c5e:	e7ad      	b.n	8008bbc <__sflush_r+0x1c>
 8008c60:	690f      	ldr	r7, [r1, #16]
 8008c62:	2f00      	cmp	r7, #0
 8008c64:	d0a9      	beq.n	8008bba <__sflush_r+0x1a>
 8008c66:	0793      	lsls	r3, r2, #30
 8008c68:	680e      	ldr	r6, [r1, #0]
 8008c6a:	bf08      	it	eq
 8008c6c:	694b      	ldreq	r3, [r1, #20]
 8008c6e:	600f      	str	r7, [r1, #0]
 8008c70:	bf18      	it	ne
 8008c72:	2300      	movne	r3, #0
 8008c74:	eba6 0807 	sub.w	r8, r6, r7
 8008c78:	608b      	str	r3, [r1, #8]
 8008c7a:	f1b8 0f00 	cmp.w	r8, #0
 8008c7e:	dd9c      	ble.n	8008bba <__sflush_r+0x1a>
 8008c80:	6a21      	ldr	r1, [r4, #32]
 8008c82:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008c84:	4643      	mov	r3, r8
 8008c86:	463a      	mov	r2, r7
 8008c88:	4628      	mov	r0, r5
 8008c8a:	47b0      	blx	r6
 8008c8c:	2800      	cmp	r0, #0
 8008c8e:	dc06      	bgt.n	8008c9e <__sflush_r+0xfe>
 8008c90:	89a3      	ldrh	r3, [r4, #12]
 8008c92:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008c96:	81a3      	strh	r3, [r4, #12]
 8008c98:	f04f 30ff 	mov.w	r0, #4294967295
 8008c9c:	e78e      	b.n	8008bbc <__sflush_r+0x1c>
 8008c9e:	4407      	add	r7, r0
 8008ca0:	eba8 0800 	sub.w	r8, r8, r0
 8008ca4:	e7e9      	b.n	8008c7a <__sflush_r+0xda>
 8008ca6:	bf00      	nop
 8008ca8:	20400001 	.word	0x20400001

08008cac <_fflush_r>:
 8008cac:	b538      	push	{r3, r4, r5, lr}
 8008cae:	690b      	ldr	r3, [r1, #16]
 8008cb0:	4605      	mov	r5, r0
 8008cb2:	460c      	mov	r4, r1
 8008cb4:	b913      	cbnz	r3, 8008cbc <_fflush_r+0x10>
 8008cb6:	2500      	movs	r5, #0
 8008cb8:	4628      	mov	r0, r5
 8008cba:	bd38      	pop	{r3, r4, r5, pc}
 8008cbc:	b118      	cbz	r0, 8008cc6 <_fflush_r+0x1a>
 8008cbe:	6983      	ldr	r3, [r0, #24]
 8008cc0:	b90b      	cbnz	r3, 8008cc6 <_fflush_r+0x1a>
 8008cc2:	f000 f887 	bl	8008dd4 <__sinit>
 8008cc6:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <_fflush_r+0x6c>)
 8008cc8:	429c      	cmp	r4, r3
 8008cca:	d11b      	bne.n	8008d04 <_fflush_r+0x58>
 8008ccc:	686c      	ldr	r4, [r5, #4]
 8008cce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cd2:	2b00      	cmp	r3, #0
 8008cd4:	d0ef      	beq.n	8008cb6 <_fflush_r+0xa>
 8008cd6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008cd8:	07d0      	lsls	r0, r2, #31
 8008cda:	d404      	bmi.n	8008ce6 <_fflush_r+0x3a>
 8008cdc:	0599      	lsls	r1, r3, #22
 8008cde:	d402      	bmi.n	8008ce6 <_fflush_r+0x3a>
 8008ce0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ce2:	f000 f915 	bl	8008f10 <__retarget_lock_acquire_recursive>
 8008ce6:	4628      	mov	r0, r5
 8008ce8:	4621      	mov	r1, r4
 8008cea:	f7ff ff59 	bl	8008ba0 <__sflush_r>
 8008cee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008cf0:	07da      	lsls	r2, r3, #31
 8008cf2:	4605      	mov	r5, r0
 8008cf4:	d4e0      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cf6:	89a3      	ldrh	r3, [r4, #12]
 8008cf8:	059b      	lsls	r3, r3, #22
 8008cfa:	d4dd      	bmi.n	8008cb8 <_fflush_r+0xc>
 8008cfc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008cfe:	f000 f908 	bl	8008f12 <__retarget_lock_release_recursive>
 8008d02:	e7d9      	b.n	8008cb8 <_fflush_r+0xc>
 8008d04:	4b05      	ldr	r3, [pc, #20]	; (8008d1c <_fflush_r+0x70>)
 8008d06:	429c      	cmp	r4, r3
 8008d08:	d101      	bne.n	8008d0e <_fflush_r+0x62>
 8008d0a:	68ac      	ldr	r4, [r5, #8]
 8008d0c:	e7df      	b.n	8008cce <_fflush_r+0x22>
 8008d0e:	4b04      	ldr	r3, [pc, #16]	; (8008d20 <_fflush_r+0x74>)
 8008d10:	429c      	cmp	r4, r3
 8008d12:	bf08      	it	eq
 8008d14:	68ec      	ldreq	r4, [r5, #12]
 8008d16:	e7da      	b.n	8008cce <_fflush_r+0x22>
 8008d18:	0802f1ec 	.word	0x0802f1ec
 8008d1c:	0802f20c 	.word	0x0802f20c
 8008d20:	0802f1cc 	.word	0x0802f1cc

08008d24 <std>:
 8008d24:	2300      	movs	r3, #0
 8008d26:	b510      	push	{r4, lr}
 8008d28:	4604      	mov	r4, r0
 8008d2a:	e9c0 3300 	strd	r3, r3, [r0]
 8008d2e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d32:	6083      	str	r3, [r0, #8]
 8008d34:	8181      	strh	r1, [r0, #12]
 8008d36:	6643      	str	r3, [r0, #100]	; 0x64
 8008d38:	81c2      	strh	r2, [r0, #14]
 8008d3a:	6183      	str	r3, [r0, #24]
 8008d3c:	4619      	mov	r1, r3
 8008d3e:	2208      	movs	r2, #8
 8008d40:	305c      	adds	r0, #92	; 0x5c
 8008d42:	f7fd fc01 	bl	8006548 <memset>
 8008d46:	4b05      	ldr	r3, [pc, #20]	; (8008d5c <std+0x38>)
 8008d48:	6263      	str	r3, [r4, #36]	; 0x24
 8008d4a:	4b05      	ldr	r3, [pc, #20]	; (8008d60 <std+0x3c>)
 8008d4c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008d4e:	4b05      	ldr	r3, [pc, #20]	; (8008d64 <std+0x40>)
 8008d50:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008d52:	4b05      	ldr	r3, [pc, #20]	; (8008d68 <std+0x44>)
 8008d54:	6224      	str	r4, [r4, #32]
 8008d56:	6323      	str	r3, [r4, #48]	; 0x30
 8008d58:	bd10      	pop	{r4, pc}
 8008d5a:	bf00      	nop
 8008d5c:	08009079 	.word	0x08009079
 8008d60:	0800909b 	.word	0x0800909b
 8008d64:	080090d3 	.word	0x080090d3
 8008d68:	080090f7 	.word	0x080090f7

08008d6c <_cleanup_r>:
 8008d6c:	4901      	ldr	r1, [pc, #4]	; (8008d74 <_cleanup_r+0x8>)
 8008d6e:	f000 b8af 	b.w	8008ed0 <_fwalk_reent>
 8008d72:	bf00      	nop
 8008d74:	08008cad 	.word	0x08008cad

08008d78 <__sfmoreglue>:
 8008d78:	b570      	push	{r4, r5, r6, lr}
 8008d7a:	2268      	movs	r2, #104	; 0x68
 8008d7c:	1e4d      	subs	r5, r1, #1
 8008d7e:	4355      	muls	r5, r2
 8008d80:	460e      	mov	r6, r1
 8008d82:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008d86:	f7ff fa65 	bl	8008254 <_malloc_r>
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	b140      	cbz	r0, 8008da0 <__sfmoreglue+0x28>
 8008d8e:	2100      	movs	r1, #0
 8008d90:	e9c0 1600 	strd	r1, r6, [r0]
 8008d94:	300c      	adds	r0, #12
 8008d96:	60a0      	str	r0, [r4, #8]
 8008d98:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008d9c:	f7fd fbd4 	bl	8006548 <memset>
 8008da0:	4620      	mov	r0, r4
 8008da2:	bd70      	pop	{r4, r5, r6, pc}

08008da4 <__sfp_lock_acquire>:
 8008da4:	4801      	ldr	r0, [pc, #4]	; (8008dac <__sfp_lock_acquire+0x8>)
 8008da6:	f000 b8b3 	b.w	8008f10 <__retarget_lock_acquire_recursive>
 8008daa:	bf00      	nop
 8008dac:	20000359 	.word	0x20000359

08008db0 <__sfp_lock_release>:
 8008db0:	4801      	ldr	r0, [pc, #4]	; (8008db8 <__sfp_lock_release+0x8>)
 8008db2:	f000 b8ae 	b.w	8008f12 <__retarget_lock_release_recursive>
 8008db6:	bf00      	nop
 8008db8:	20000359 	.word	0x20000359

08008dbc <__sinit_lock_acquire>:
 8008dbc:	4801      	ldr	r0, [pc, #4]	; (8008dc4 <__sinit_lock_acquire+0x8>)
 8008dbe:	f000 b8a7 	b.w	8008f10 <__retarget_lock_acquire_recursive>
 8008dc2:	bf00      	nop
 8008dc4:	2000035a 	.word	0x2000035a

08008dc8 <__sinit_lock_release>:
 8008dc8:	4801      	ldr	r0, [pc, #4]	; (8008dd0 <__sinit_lock_release+0x8>)
 8008dca:	f000 b8a2 	b.w	8008f12 <__retarget_lock_release_recursive>
 8008dce:	bf00      	nop
 8008dd0:	2000035a 	.word	0x2000035a

08008dd4 <__sinit>:
 8008dd4:	b510      	push	{r4, lr}
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	f7ff fff0 	bl	8008dbc <__sinit_lock_acquire>
 8008ddc:	69a3      	ldr	r3, [r4, #24]
 8008dde:	b11b      	cbz	r3, 8008de8 <__sinit+0x14>
 8008de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008de4:	f7ff bff0 	b.w	8008dc8 <__sinit_lock_release>
 8008de8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008dec:	6523      	str	r3, [r4, #80]	; 0x50
 8008dee:	4b13      	ldr	r3, [pc, #76]	; (8008e3c <__sinit+0x68>)
 8008df0:	4a13      	ldr	r2, [pc, #76]	; (8008e40 <__sinit+0x6c>)
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	62a2      	str	r2, [r4, #40]	; 0x28
 8008df6:	42a3      	cmp	r3, r4
 8008df8:	bf04      	itt	eq
 8008dfa:	2301      	moveq	r3, #1
 8008dfc:	61a3      	streq	r3, [r4, #24]
 8008dfe:	4620      	mov	r0, r4
 8008e00:	f000 f820 	bl	8008e44 <__sfp>
 8008e04:	6060      	str	r0, [r4, #4]
 8008e06:	4620      	mov	r0, r4
 8008e08:	f000 f81c 	bl	8008e44 <__sfp>
 8008e0c:	60a0      	str	r0, [r4, #8]
 8008e0e:	4620      	mov	r0, r4
 8008e10:	f000 f818 	bl	8008e44 <__sfp>
 8008e14:	2200      	movs	r2, #0
 8008e16:	60e0      	str	r0, [r4, #12]
 8008e18:	2104      	movs	r1, #4
 8008e1a:	6860      	ldr	r0, [r4, #4]
 8008e1c:	f7ff ff82 	bl	8008d24 <std>
 8008e20:	68a0      	ldr	r0, [r4, #8]
 8008e22:	2201      	movs	r2, #1
 8008e24:	2109      	movs	r1, #9
 8008e26:	f7ff ff7d 	bl	8008d24 <std>
 8008e2a:	68e0      	ldr	r0, [r4, #12]
 8008e2c:	2202      	movs	r2, #2
 8008e2e:	2112      	movs	r1, #18
 8008e30:	f7ff ff78 	bl	8008d24 <std>
 8008e34:	2301      	movs	r3, #1
 8008e36:	61a3      	str	r3, [r4, #24]
 8008e38:	e7d2      	b.n	8008de0 <__sinit+0xc>
 8008e3a:	bf00      	nop
 8008e3c:	0802ee50 	.word	0x0802ee50
 8008e40:	08008d6d 	.word	0x08008d6d

08008e44 <__sfp>:
 8008e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e46:	4607      	mov	r7, r0
 8008e48:	f7ff ffac 	bl	8008da4 <__sfp_lock_acquire>
 8008e4c:	4b1e      	ldr	r3, [pc, #120]	; (8008ec8 <__sfp+0x84>)
 8008e4e:	681e      	ldr	r6, [r3, #0]
 8008e50:	69b3      	ldr	r3, [r6, #24]
 8008e52:	b913      	cbnz	r3, 8008e5a <__sfp+0x16>
 8008e54:	4630      	mov	r0, r6
 8008e56:	f7ff ffbd 	bl	8008dd4 <__sinit>
 8008e5a:	3648      	adds	r6, #72	; 0x48
 8008e5c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e60:	3b01      	subs	r3, #1
 8008e62:	d503      	bpl.n	8008e6c <__sfp+0x28>
 8008e64:	6833      	ldr	r3, [r6, #0]
 8008e66:	b30b      	cbz	r3, 8008eac <__sfp+0x68>
 8008e68:	6836      	ldr	r6, [r6, #0]
 8008e6a:	e7f7      	b.n	8008e5c <__sfp+0x18>
 8008e6c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e70:	b9d5      	cbnz	r5, 8008ea8 <__sfp+0x64>
 8008e72:	4b16      	ldr	r3, [pc, #88]	; (8008ecc <__sfp+0x88>)
 8008e74:	60e3      	str	r3, [r4, #12]
 8008e76:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008e7a:	6665      	str	r5, [r4, #100]	; 0x64
 8008e7c:	f000 f847 	bl	8008f0e <__retarget_lock_init_recursive>
 8008e80:	f7ff ff96 	bl	8008db0 <__sfp_lock_release>
 8008e84:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008e88:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008e8c:	6025      	str	r5, [r4, #0]
 8008e8e:	61a5      	str	r5, [r4, #24]
 8008e90:	2208      	movs	r2, #8
 8008e92:	4629      	mov	r1, r5
 8008e94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008e98:	f7fd fb56 	bl	8006548 <memset>
 8008e9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ea0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ea4:	4620      	mov	r0, r4
 8008ea6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008ea8:	3468      	adds	r4, #104	; 0x68
 8008eaa:	e7d9      	b.n	8008e60 <__sfp+0x1c>
 8008eac:	2104      	movs	r1, #4
 8008eae:	4638      	mov	r0, r7
 8008eb0:	f7ff ff62 	bl	8008d78 <__sfmoreglue>
 8008eb4:	4604      	mov	r4, r0
 8008eb6:	6030      	str	r0, [r6, #0]
 8008eb8:	2800      	cmp	r0, #0
 8008eba:	d1d5      	bne.n	8008e68 <__sfp+0x24>
 8008ebc:	f7ff ff78 	bl	8008db0 <__sfp_lock_release>
 8008ec0:	230c      	movs	r3, #12
 8008ec2:	603b      	str	r3, [r7, #0]
 8008ec4:	e7ee      	b.n	8008ea4 <__sfp+0x60>
 8008ec6:	bf00      	nop
 8008ec8:	0802ee50 	.word	0x0802ee50
 8008ecc:	ffff0001 	.word	0xffff0001

08008ed0 <_fwalk_reent>:
 8008ed0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ed4:	4606      	mov	r6, r0
 8008ed6:	4688      	mov	r8, r1
 8008ed8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008edc:	2700      	movs	r7, #0
 8008ede:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008ee2:	f1b9 0901 	subs.w	r9, r9, #1
 8008ee6:	d505      	bpl.n	8008ef4 <_fwalk_reent+0x24>
 8008ee8:	6824      	ldr	r4, [r4, #0]
 8008eea:	2c00      	cmp	r4, #0
 8008eec:	d1f7      	bne.n	8008ede <_fwalk_reent+0xe>
 8008eee:	4638      	mov	r0, r7
 8008ef0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef4:	89ab      	ldrh	r3, [r5, #12]
 8008ef6:	2b01      	cmp	r3, #1
 8008ef8:	d907      	bls.n	8008f0a <_fwalk_reent+0x3a>
 8008efa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008efe:	3301      	adds	r3, #1
 8008f00:	d003      	beq.n	8008f0a <_fwalk_reent+0x3a>
 8008f02:	4629      	mov	r1, r5
 8008f04:	4630      	mov	r0, r6
 8008f06:	47c0      	blx	r8
 8008f08:	4307      	orrs	r7, r0
 8008f0a:	3568      	adds	r5, #104	; 0x68
 8008f0c:	e7e9      	b.n	8008ee2 <_fwalk_reent+0x12>

08008f0e <__retarget_lock_init_recursive>:
 8008f0e:	4770      	bx	lr

08008f10 <__retarget_lock_acquire_recursive>:
 8008f10:	4770      	bx	lr

08008f12 <__retarget_lock_release_recursive>:
 8008f12:	4770      	bx	lr

08008f14 <__swhatbuf_r>:
 8008f14:	b570      	push	{r4, r5, r6, lr}
 8008f16:	460e      	mov	r6, r1
 8008f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f1c:	2900      	cmp	r1, #0
 8008f1e:	b096      	sub	sp, #88	; 0x58
 8008f20:	4614      	mov	r4, r2
 8008f22:	461d      	mov	r5, r3
 8008f24:	da08      	bge.n	8008f38 <__swhatbuf_r+0x24>
 8008f26:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	602a      	str	r2, [r5, #0]
 8008f2e:	061a      	lsls	r2, r3, #24
 8008f30:	d410      	bmi.n	8008f54 <__swhatbuf_r+0x40>
 8008f32:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f36:	e00e      	b.n	8008f56 <__swhatbuf_r+0x42>
 8008f38:	466a      	mov	r2, sp
 8008f3a:	f000 f903 	bl	8009144 <_fstat_r>
 8008f3e:	2800      	cmp	r0, #0
 8008f40:	dbf1      	blt.n	8008f26 <__swhatbuf_r+0x12>
 8008f42:	9a01      	ldr	r2, [sp, #4]
 8008f44:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f48:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f4c:	425a      	negs	r2, r3
 8008f4e:	415a      	adcs	r2, r3
 8008f50:	602a      	str	r2, [r5, #0]
 8008f52:	e7ee      	b.n	8008f32 <__swhatbuf_r+0x1e>
 8008f54:	2340      	movs	r3, #64	; 0x40
 8008f56:	2000      	movs	r0, #0
 8008f58:	6023      	str	r3, [r4, #0]
 8008f5a:	b016      	add	sp, #88	; 0x58
 8008f5c:	bd70      	pop	{r4, r5, r6, pc}
	...

08008f60 <__smakebuf_r>:
 8008f60:	898b      	ldrh	r3, [r1, #12]
 8008f62:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f64:	079d      	lsls	r5, r3, #30
 8008f66:	4606      	mov	r6, r0
 8008f68:	460c      	mov	r4, r1
 8008f6a:	d507      	bpl.n	8008f7c <__smakebuf_r+0x1c>
 8008f6c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f70:	6023      	str	r3, [r4, #0]
 8008f72:	6123      	str	r3, [r4, #16]
 8008f74:	2301      	movs	r3, #1
 8008f76:	6163      	str	r3, [r4, #20]
 8008f78:	b002      	add	sp, #8
 8008f7a:	bd70      	pop	{r4, r5, r6, pc}
 8008f7c:	ab01      	add	r3, sp, #4
 8008f7e:	466a      	mov	r2, sp
 8008f80:	f7ff ffc8 	bl	8008f14 <__swhatbuf_r>
 8008f84:	9900      	ldr	r1, [sp, #0]
 8008f86:	4605      	mov	r5, r0
 8008f88:	4630      	mov	r0, r6
 8008f8a:	f7ff f963 	bl	8008254 <_malloc_r>
 8008f8e:	b948      	cbnz	r0, 8008fa4 <__smakebuf_r+0x44>
 8008f90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f94:	059a      	lsls	r2, r3, #22
 8008f96:	d4ef      	bmi.n	8008f78 <__smakebuf_r+0x18>
 8008f98:	f023 0303 	bic.w	r3, r3, #3
 8008f9c:	f043 0302 	orr.w	r3, r3, #2
 8008fa0:	81a3      	strh	r3, [r4, #12]
 8008fa2:	e7e3      	b.n	8008f6c <__smakebuf_r+0xc>
 8008fa4:	4b0d      	ldr	r3, [pc, #52]	; (8008fdc <__smakebuf_r+0x7c>)
 8008fa6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fa8:	89a3      	ldrh	r3, [r4, #12]
 8008faa:	6020      	str	r0, [r4, #0]
 8008fac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fb0:	81a3      	strh	r3, [r4, #12]
 8008fb2:	9b00      	ldr	r3, [sp, #0]
 8008fb4:	6163      	str	r3, [r4, #20]
 8008fb6:	9b01      	ldr	r3, [sp, #4]
 8008fb8:	6120      	str	r0, [r4, #16]
 8008fba:	b15b      	cbz	r3, 8008fd4 <__smakebuf_r+0x74>
 8008fbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fc0:	4630      	mov	r0, r6
 8008fc2:	f000 f8d1 	bl	8009168 <_isatty_r>
 8008fc6:	b128      	cbz	r0, 8008fd4 <__smakebuf_r+0x74>
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f023 0303 	bic.w	r3, r3, #3
 8008fce:	f043 0301 	orr.w	r3, r3, #1
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	89a0      	ldrh	r0, [r4, #12]
 8008fd6:	4305      	orrs	r5, r0
 8008fd8:	81a5      	strh	r5, [r4, #12]
 8008fda:	e7cd      	b.n	8008f78 <__smakebuf_r+0x18>
 8008fdc:	08008d6d 	.word	0x08008d6d

08008fe0 <_malloc_usable_size_r>:
 8008fe0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008fe4:	1f18      	subs	r0, r3, #4
 8008fe6:	2b00      	cmp	r3, #0
 8008fe8:	bfbc      	itt	lt
 8008fea:	580b      	ldrlt	r3, [r1, r0]
 8008fec:	18c0      	addlt	r0, r0, r3
 8008fee:	4770      	bx	lr

08008ff0 <_raise_r>:
 8008ff0:	291f      	cmp	r1, #31
 8008ff2:	b538      	push	{r3, r4, r5, lr}
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	460d      	mov	r5, r1
 8008ff8:	d904      	bls.n	8009004 <_raise_r+0x14>
 8008ffa:	2316      	movs	r3, #22
 8008ffc:	6003      	str	r3, [r0, #0]
 8008ffe:	f04f 30ff 	mov.w	r0, #4294967295
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009006:	b112      	cbz	r2, 800900e <_raise_r+0x1e>
 8009008:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800900c:	b94b      	cbnz	r3, 8009022 <_raise_r+0x32>
 800900e:	4620      	mov	r0, r4
 8009010:	f000 f830 	bl	8009074 <_getpid_r>
 8009014:	462a      	mov	r2, r5
 8009016:	4601      	mov	r1, r0
 8009018:	4620      	mov	r0, r4
 800901a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800901e:	f000 b817 	b.w	8009050 <_kill_r>
 8009022:	2b01      	cmp	r3, #1
 8009024:	d00a      	beq.n	800903c <_raise_r+0x4c>
 8009026:	1c59      	adds	r1, r3, #1
 8009028:	d103      	bne.n	8009032 <_raise_r+0x42>
 800902a:	2316      	movs	r3, #22
 800902c:	6003      	str	r3, [r0, #0]
 800902e:	2001      	movs	r0, #1
 8009030:	e7e7      	b.n	8009002 <_raise_r+0x12>
 8009032:	2400      	movs	r4, #0
 8009034:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009038:	4628      	mov	r0, r5
 800903a:	4798      	blx	r3
 800903c:	2000      	movs	r0, #0
 800903e:	e7e0      	b.n	8009002 <_raise_r+0x12>

08009040 <raise>:
 8009040:	4b02      	ldr	r3, [pc, #8]	; (800904c <raise+0xc>)
 8009042:	4601      	mov	r1, r0
 8009044:	6818      	ldr	r0, [r3, #0]
 8009046:	f7ff bfd3 	b.w	8008ff0 <_raise_r>
 800904a:	bf00      	nop
 800904c:	20000010 	.word	0x20000010

08009050 <_kill_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	4d07      	ldr	r5, [pc, #28]	; (8009070 <_kill_r+0x20>)
 8009054:	2300      	movs	r3, #0
 8009056:	4604      	mov	r4, r0
 8009058:	4608      	mov	r0, r1
 800905a:	4611      	mov	r1, r2
 800905c:	602b      	str	r3, [r5, #0]
 800905e:	f7f8 fd69 	bl	8001b34 <_kill>
 8009062:	1c43      	adds	r3, r0, #1
 8009064:	d102      	bne.n	800906c <_kill_r+0x1c>
 8009066:	682b      	ldr	r3, [r5, #0]
 8009068:	b103      	cbz	r3, 800906c <_kill_r+0x1c>
 800906a:	6023      	str	r3, [r4, #0]
 800906c:	bd38      	pop	{r3, r4, r5, pc}
 800906e:	bf00      	nop
 8009070:	20000354 	.word	0x20000354

08009074 <_getpid_r>:
 8009074:	f7f8 bd56 	b.w	8001b24 <_getpid>

08009078 <__sread>:
 8009078:	b510      	push	{r4, lr}
 800907a:	460c      	mov	r4, r1
 800907c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009080:	f000 f894 	bl	80091ac <_read_r>
 8009084:	2800      	cmp	r0, #0
 8009086:	bfab      	itete	ge
 8009088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800908a:	89a3      	ldrhlt	r3, [r4, #12]
 800908c:	181b      	addge	r3, r3, r0
 800908e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009092:	bfac      	ite	ge
 8009094:	6563      	strge	r3, [r4, #84]	; 0x54
 8009096:	81a3      	strhlt	r3, [r4, #12]
 8009098:	bd10      	pop	{r4, pc}

0800909a <__swrite>:
 800909a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	461f      	mov	r7, r3
 80090a0:	898b      	ldrh	r3, [r1, #12]
 80090a2:	05db      	lsls	r3, r3, #23
 80090a4:	4605      	mov	r5, r0
 80090a6:	460c      	mov	r4, r1
 80090a8:	4616      	mov	r6, r2
 80090aa:	d505      	bpl.n	80090b8 <__swrite+0x1e>
 80090ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090b0:	2302      	movs	r3, #2
 80090b2:	2200      	movs	r2, #0
 80090b4:	f000 f868 	bl	8009188 <_lseek_r>
 80090b8:	89a3      	ldrh	r3, [r4, #12]
 80090ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80090be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80090c2:	81a3      	strh	r3, [r4, #12]
 80090c4:	4632      	mov	r2, r6
 80090c6:	463b      	mov	r3, r7
 80090c8:	4628      	mov	r0, r5
 80090ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80090ce:	f000 b817 	b.w	8009100 <_write_r>

080090d2 <__sseek>:
 80090d2:	b510      	push	{r4, lr}
 80090d4:	460c      	mov	r4, r1
 80090d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090da:	f000 f855 	bl	8009188 <_lseek_r>
 80090de:	1c43      	adds	r3, r0, #1
 80090e0:	89a3      	ldrh	r3, [r4, #12]
 80090e2:	bf15      	itete	ne
 80090e4:	6560      	strne	r0, [r4, #84]	; 0x54
 80090e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80090ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80090ee:	81a3      	strheq	r3, [r4, #12]
 80090f0:	bf18      	it	ne
 80090f2:	81a3      	strhne	r3, [r4, #12]
 80090f4:	bd10      	pop	{r4, pc}

080090f6 <__sclose>:
 80090f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090fa:	f000 b813 	b.w	8009124 <_close_r>
	...

08009100 <_write_r>:
 8009100:	b538      	push	{r3, r4, r5, lr}
 8009102:	4d07      	ldr	r5, [pc, #28]	; (8009120 <_write_r+0x20>)
 8009104:	4604      	mov	r4, r0
 8009106:	4608      	mov	r0, r1
 8009108:	4611      	mov	r1, r2
 800910a:	2200      	movs	r2, #0
 800910c:	602a      	str	r2, [r5, #0]
 800910e:	461a      	mov	r2, r3
 8009110:	f7f8 fd47 	bl	8001ba2 <_write>
 8009114:	1c43      	adds	r3, r0, #1
 8009116:	d102      	bne.n	800911e <_write_r+0x1e>
 8009118:	682b      	ldr	r3, [r5, #0]
 800911a:	b103      	cbz	r3, 800911e <_write_r+0x1e>
 800911c:	6023      	str	r3, [r4, #0]
 800911e:	bd38      	pop	{r3, r4, r5, pc}
 8009120:	20000354 	.word	0x20000354

08009124 <_close_r>:
 8009124:	b538      	push	{r3, r4, r5, lr}
 8009126:	4d06      	ldr	r5, [pc, #24]	; (8009140 <_close_r+0x1c>)
 8009128:	2300      	movs	r3, #0
 800912a:	4604      	mov	r4, r0
 800912c:	4608      	mov	r0, r1
 800912e:	602b      	str	r3, [r5, #0]
 8009130:	f7f8 fd53 	bl	8001bda <_close>
 8009134:	1c43      	adds	r3, r0, #1
 8009136:	d102      	bne.n	800913e <_close_r+0x1a>
 8009138:	682b      	ldr	r3, [r5, #0]
 800913a:	b103      	cbz	r3, 800913e <_close_r+0x1a>
 800913c:	6023      	str	r3, [r4, #0]
 800913e:	bd38      	pop	{r3, r4, r5, pc}
 8009140:	20000354 	.word	0x20000354

08009144 <_fstat_r>:
 8009144:	b538      	push	{r3, r4, r5, lr}
 8009146:	4d07      	ldr	r5, [pc, #28]	; (8009164 <_fstat_r+0x20>)
 8009148:	2300      	movs	r3, #0
 800914a:	4604      	mov	r4, r0
 800914c:	4608      	mov	r0, r1
 800914e:	4611      	mov	r1, r2
 8009150:	602b      	str	r3, [r5, #0]
 8009152:	f7f8 fd4e 	bl	8001bf2 <_fstat>
 8009156:	1c43      	adds	r3, r0, #1
 8009158:	d102      	bne.n	8009160 <_fstat_r+0x1c>
 800915a:	682b      	ldr	r3, [r5, #0]
 800915c:	b103      	cbz	r3, 8009160 <_fstat_r+0x1c>
 800915e:	6023      	str	r3, [r4, #0]
 8009160:	bd38      	pop	{r3, r4, r5, pc}
 8009162:	bf00      	nop
 8009164:	20000354 	.word	0x20000354

08009168 <_isatty_r>:
 8009168:	b538      	push	{r3, r4, r5, lr}
 800916a:	4d06      	ldr	r5, [pc, #24]	; (8009184 <_isatty_r+0x1c>)
 800916c:	2300      	movs	r3, #0
 800916e:	4604      	mov	r4, r0
 8009170:	4608      	mov	r0, r1
 8009172:	602b      	str	r3, [r5, #0]
 8009174:	f7f8 fd4d 	bl	8001c12 <_isatty>
 8009178:	1c43      	adds	r3, r0, #1
 800917a:	d102      	bne.n	8009182 <_isatty_r+0x1a>
 800917c:	682b      	ldr	r3, [r5, #0]
 800917e:	b103      	cbz	r3, 8009182 <_isatty_r+0x1a>
 8009180:	6023      	str	r3, [r4, #0]
 8009182:	bd38      	pop	{r3, r4, r5, pc}
 8009184:	20000354 	.word	0x20000354

08009188 <_lseek_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d07      	ldr	r5, [pc, #28]	; (80091a8 <_lseek_r+0x20>)
 800918c:	4604      	mov	r4, r0
 800918e:	4608      	mov	r0, r1
 8009190:	4611      	mov	r1, r2
 8009192:	2200      	movs	r2, #0
 8009194:	602a      	str	r2, [r5, #0]
 8009196:	461a      	mov	r2, r3
 8009198:	f7f8 fd46 	bl	8001c28 <_lseek>
 800919c:	1c43      	adds	r3, r0, #1
 800919e:	d102      	bne.n	80091a6 <_lseek_r+0x1e>
 80091a0:	682b      	ldr	r3, [r5, #0]
 80091a2:	b103      	cbz	r3, 80091a6 <_lseek_r+0x1e>
 80091a4:	6023      	str	r3, [r4, #0]
 80091a6:	bd38      	pop	{r3, r4, r5, pc}
 80091a8:	20000354 	.word	0x20000354

080091ac <_read_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d07      	ldr	r5, [pc, #28]	; (80091cc <_read_r+0x20>)
 80091b0:	4604      	mov	r4, r0
 80091b2:	4608      	mov	r0, r1
 80091b4:	4611      	mov	r1, r2
 80091b6:	2200      	movs	r2, #0
 80091b8:	602a      	str	r2, [r5, #0]
 80091ba:	461a      	mov	r2, r3
 80091bc:	f7f8 fcd4 	bl	8001b68 <_read>
 80091c0:	1c43      	adds	r3, r0, #1
 80091c2:	d102      	bne.n	80091ca <_read_r+0x1e>
 80091c4:	682b      	ldr	r3, [r5, #0]
 80091c6:	b103      	cbz	r3, 80091ca <_read_r+0x1e>
 80091c8:	6023      	str	r3, [r4, #0]
 80091ca:	bd38      	pop	{r3, r4, r5, pc}
 80091cc:	20000354 	.word	0x20000354

080091d0 <_init>:
 80091d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d2:	bf00      	nop
 80091d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d6:	bc08      	pop	{r3}
 80091d8:	469e      	mov	lr, r3
 80091da:	4770      	bx	lr

080091dc <_fini>:
 80091dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091de:	bf00      	nop
 80091e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091e2:	bc08      	pop	{r3}
 80091e4:	469e      	mov	lr, r3
 80091e6:	4770      	bx	lr
