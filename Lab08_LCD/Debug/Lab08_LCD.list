
Lab08_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a8d0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00005b34  0800aad0  0800aad0  0001aad0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010604  08010604  000301e0  2**0
                  CONTENTS
  4 .ARM          00000008  08010604  08010604  00020604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801060c  0801060c  000301e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801060c  0801060c  0002060c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010610  08010610  00020610  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  08010614  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002bc  200001e0  080107f4  000301e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000049c  080107f4  0003049c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000301e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00019d6c  00000000  00000000  0003020e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e32  00000000  00000000  00049f7a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001678  00000000  00000000  0004ddb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000014a0  00000000  00000000  0004f428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002bfaa  00000000  00000000  000508c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d7ad  00000000  00000000  0007c872  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00106039  00000000  00000000  0009a01f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001a0058  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006c48  00000000  00000000  001a00a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001e0 	.word	0x200001e0
 800021c:	00000000 	.word	0x00000000
 8000220:	0800aab8 	.word	0x0800aab8

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001e4 	.word	0x200001e4
 800023c:	0800aab8 	.word	0x0800aab8

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b084      	sub	sp, #16
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005fa:	463b      	mov	r3, r7
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
 8000600:	605a      	str	r2, [r3, #4]
 8000602:	609a      	str	r2, [r3, #8]
 8000604:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000606:	4b21      	ldr	r3, [pc, #132]	; (800068c <MX_ADC1_Init+0x98>)
 8000608:	4a21      	ldr	r2, [pc, #132]	; (8000690 <MX_ADC1_Init+0x9c>)
 800060a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800060c:	4b1f      	ldr	r3, [pc, #124]	; (800068c <MX_ADC1_Init+0x98>)
 800060e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000612:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000614:	4b1d      	ldr	r3, [pc, #116]	; (800068c <MX_ADC1_Init+0x98>)
 8000616:	2200      	movs	r2, #0
 8000618:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800061a:	4b1c      	ldr	r3, [pc, #112]	; (800068c <MX_ADC1_Init+0x98>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000620:	4b1a      	ldr	r3, [pc, #104]	; (800068c <MX_ADC1_Init+0x98>)
 8000622:	2201      	movs	r2, #1
 8000624:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000626:	4b19      	ldr	r3, [pc, #100]	; (800068c <MX_ADC1_Init+0x98>)
 8000628:	2200      	movs	r2, #0
 800062a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800062e:	4b17      	ldr	r3, [pc, #92]	; (800068c <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000634:	4b15      	ldr	r3, [pc, #84]	; (800068c <MX_ADC1_Init+0x98>)
 8000636:	4a17      	ldr	r2, [pc, #92]	; (8000694 <MX_ADC1_Init+0xa0>)
 8000638:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800063a:	4b14      	ldr	r3, [pc, #80]	; (800068c <MX_ADC1_Init+0x98>)
 800063c:	2200      	movs	r2, #0
 800063e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000640:	4b12      	ldr	r3, [pc, #72]	; (800068c <MX_ADC1_Init+0x98>)
 8000642:	2201      	movs	r2, #1
 8000644:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000646:	4b11      	ldr	r3, [pc, #68]	; (800068c <MX_ADC1_Init+0x98>)
 8000648:	2200      	movs	r2, #0
 800064a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800064e:	4b0f      	ldr	r3, [pc, #60]	; (800068c <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000654:	480d      	ldr	r0, [pc, #52]	; (800068c <MX_ADC1_Init+0x98>)
 8000656:	f002 fc8d 	bl	8002f74 <HAL_ADC_Init>
 800065a:	4603      	mov	r3, r0
 800065c:	2b00      	cmp	r3, #0
 800065e:	d001      	beq.n	8000664 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000660:	f000 ff10 	bl	8001484 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8000664:	230a      	movs	r3, #10
 8000666:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000668:	2301      	movs	r3, #1
 800066a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800066c:	2300      	movs	r3, #0
 800066e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000670:	463b      	mov	r3, r7
 8000672:	4619      	mov	r1, r3
 8000674:	4805      	ldr	r0, [pc, #20]	; (800068c <MX_ADC1_Init+0x98>)
 8000676:	f002 fe27 	bl	80032c8 <HAL_ADC_ConfigChannel>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000680:	f000 ff00 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000684:	bf00      	nop
 8000686:	3710      	adds	r7, #16
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	200001fc 	.word	0x200001fc
 8000690:	40012000 	.word	0x40012000
 8000694:	0f000001 	.word	0x0f000001

08000698 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b08a      	sub	sp, #40	; 0x28
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a0:	f107 0314 	add.w	r3, r7, #20
 80006a4:	2200      	movs	r2, #0
 80006a6:	601a      	str	r2, [r3, #0]
 80006a8:	605a      	str	r2, [r3, #4]
 80006aa:	609a      	str	r2, [r3, #8]
 80006ac:	60da      	str	r2, [r3, #12]
 80006ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	4a15      	ldr	r2, [pc, #84]	; (800070c <HAL_ADC_MspInit+0x74>)
 80006b6:	4293      	cmp	r3, r2
 80006b8:	d123      	bne.n	8000702 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80006ba:	4b15      	ldr	r3, [pc, #84]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006be:	4a14      	ldr	r2, [pc, #80]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c4:	6453      	str	r3, [r2, #68]	; 0x44
 80006c6:	4b12      	ldr	r3, [pc, #72]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80006ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80006ce:	613b      	str	r3, [r7, #16]
 80006d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006d2:	4b0f      	ldr	r3, [pc, #60]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	4a0e      	ldr	r2, [pc, #56]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006d8:	f043 0304 	orr.w	r3, r3, #4
 80006dc:	6313      	str	r3, [r2, #48]	; 0x30
 80006de:	4b0c      	ldr	r3, [pc, #48]	; (8000710 <HAL_ADC_MspInit+0x78>)
 80006e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e2:	f003 0304 	and.w	r3, r3, #4
 80006e6:	60fb      	str	r3, [r7, #12]
 80006e8:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80006ea:	2301      	movs	r3, #1
 80006ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006ee:	2303      	movs	r3, #3
 80006f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f2:	2300      	movs	r3, #0
 80006f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006f6:	f107 0314 	add.w	r3, r7, #20
 80006fa:	4619      	mov	r1, r3
 80006fc:	4805      	ldr	r0, [pc, #20]	; (8000714 <HAL_ADC_MspInit+0x7c>)
 80006fe:	f003 f939 	bl	8003974 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000702:	bf00      	nop
 8000704:	3728      	adds	r7, #40	; 0x28
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40012000 	.word	0x40012000
 8000710:	40023800 	.word	0x40023800
 8000714:	40020800 	.word	0x40020800

08000718 <am2320_Init>:
 */


#include "am2320.h"

Am2320_HandleTypeDef am2320_Init(I2C_HandleTypeDef* i2c_handle,uint8_t device_address) {
 8000718:	b490      	push	{r4, r7}
 800071a:	b088      	sub	sp, #32
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	4613      	mov	r3, r2
 8000724:	71fb      	strb	r3, [r7, #7]
	Am2320_HandleTypeDef AM2320_;
	AM2320_.i2c_handle = i2c_handle;
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	613b      	str	r3, [r7, #16]
	AM2320_.device_address = device_address;
 800072a:	79fb      	ldrb	r3, [r7, #7]
 800072c:	753b      	strb	r3, [r7, #20]
	return AM2320_;
 800072e:	68fb      	ldr	r3, [r7, #12]
 8000730:	461c      	mov	r4, r3
 8000732:	f107 0310 	add.w	r3, r7, #16
 8000736:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000738:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	3720      	adds	r7, #32
 8000740:	46bd      	mov	sp, r7
 8000742:	bc90      	pop	{r4, r7}
 8000744:	4770      	bx	lr
	...

08000748 <am2320_ReadValue>:

uint8_t am2320_ReadValue(Am2320_HandleTypeDef *am2320) {
 8000748:	b580      	push	{r7, lr}
 800074a:	b086      	sub	sp, #24
 800074c:	af02      	add	r7, sp, #8
 800074e:	6078      	str	r0, [r7, #4]
	uint8_t registers[3] = { 0x03, 0x00, 0x04 };
 8000750:	4a26      	ldr	r2, [pc, #152]	; (80007ec <am2320_ReadValue+0xa4>)
 8000752:	f107 030c 	add.w	r3, r7, #12
 8000756:	6812      	ldr	r2, [r2, #0]
 8000758:	4611      	mov	r1, r2
 800075a:	8019      	strh	r1, [r3, #0]
 800075c:	3302      	adds	r3, #2
 800075e:	0c12      	lsrs	r2, r2, #16
 8000760:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address, 0x00, 0,
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	6818      	ldr	r0, [r3, #0]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	791b      	ldrb	r3, [r3, #4]
 800076a:	b299      	uxth	r1, r3
 800076c:	f04f 33ff 	mov.w	r3, #4294967295
 8000770:	9300      	str	r3, [sp, #0]
 8000772:	2300      	movs	r3, #0
 8000774:	2200      	movs	r2, #0
 8000776:	f003 fb6b 	bl	8003e50 <HAL_I2C_Master_Transmit>
	HAL_MAX_DELAY);
	HAL_Delay(1);
 800077a:	2001      	movs	r0, #1
 800077c:	f002 fbd6 	bl	8002f2c <HAL_Delay>
	if (HAL_I2C_Master_Transmit(am2320->i2c_handle, am2320->device_address,registers, 3, HAL_MAX_DELAY) != HAL_OK) {
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6818      	ldr	r0, [r3, #0]
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	791b      	ldrb	r3, [r3, #4]
 8000788:	b299      	uxth	r1, r3
 800078a:	f107 020c 	add.w	r2, r7, #12
 800078e:	f04f 33ff 	mov.w	r3, #4294967295
 8000792:	9300      	str	r3, [sp, #0]
 8000794:	2303      	movs	r3, #3
 8000796:	f003 fb5b 	bl	8003e50 <HAL_I2C_Master_Transmit>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <am2320_ReadValue+0x5c>
		return 1;
 80007a0:	2301      	movs	r3, #1
 80007a2:	e01f      	b.n	80007e4 <am2320_ReadValue+0x9c>
	}
	HAL_Delay(2);
 80007a4:	2002      	movs	r0, #2
 80007a6:	f002 fbc1 	bl	8002f2c <HAL_Delay>
	if (HAL_I2C_Master_Receive(am2320->i2c_handle, am2320->device_address,am2320->data, 8, HAL_MAX_DELAY) != HAL_OK) {
 80007aa:	687b      	ldr	r3, [r7, #4]
 80007ac:	6818      	ldr	r0, [r3, #0]
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	791b      	ldrb	r3, [r3, #4]
 80007b2:	b299      	uxth	r1, r3
 80007b4:	687b      	ldr	r3, [r7, #4]
 80007b6:	1d5a      	adds	r2, r3, #5
 80007b8:	f04f 33ff 	mov.w	r3, #4294967295
 80007bc:	9300      	str	r3, [sp, #0]
 80007be:	2308      	movs	r3, #8
 80007c0:	f003 fc3a 	bl	8004038 <HAL_I2C_Master_Receive>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <am2320_ReadValue+0x86>
		return 2;
 80007ca:	2302      	movs	r3, #2
 80007cc:	e00a      	b.n	80007e4 <am2320_ReadValue+0x9c>
	}
	if (am2320->data[1] != 0x04 && am2320->data[0] != 0x03) {
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	799b      	ldrb	r3, [r3, #6]
 80007d2:	2b04      	cmp	r3, #4
 80007d4:	d005      	beq.n	80007e2 <am2320_ReadValue+0x9a>
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	795b      	ldrb	r3, [r3, #5]
 80007da:	2b03      	cmp	r3, #3
 80007dc:	d001      	beq.n	80007e2 <am2320_ReadValue+0x9a>
		return 3;
 80007de:	2303      	movs	r3, #3
 80007e0:	e000      	b.n	80007e4 <am2320_ReadValue+0x9c>
	}
	return 0;
 80007e2:	2300      	movs	r3, #0
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	0800aad0 	.word	0x0800aad0

080007f0 <am2320_GetTemperatureAndHumidity>:

void am2320_GetTemperatureAndHumidity(Am2320_HandleTypeDef *am2320, float *temperature,float *humidity) {
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b086      	sub	sp, #24
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
	int read = am2320_ReadValue(am2320);
 80007fc:	68f8      	ldr	r0, [r7, #12]
 80007fe:	f7ff ffa3 	bl	8000748 <am2320_ReadValue>
 8000802:	4603      	mov	r3, r0
 8000804:	613b      	str	r3, [r7, #16]
	if (read) {
		// Simple exception handling
	}
	uint16_t temp_temperature = (am2320->data[5] | am2320->data[4] << 8);
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	7a9b      	ldrb	r3, [r3, #10]
 800080a:	b21a      	sxth	r2, r3
 800080c:	68fb      	ldr	r3, [r7, #12]
 800080e:	7a5b      	ldrb	r3, [r3, #9]
 8000810:	021b      	lsls	r3, r3, #8
 8000812:	b21b      	sxth	r3, r3
 8000814:	4313      	orrs	r3, r2
 8000816:	b21b      	sxth	r3, r3
 8000818:	82fb      	strh	r3, [r7, #22]
	if (temp_temperature & 0x8000) {
 800081a:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800081e:	2b00      	cmp	r3, #0
 8000820:	da05      	bge.n	800082e <am2320_GetTemperatureAndHumidity+0x3e>
		temp_temperature = -(int16_t) (temp_temperature & 0x7fff);
 8000822:	8afb      	ldrh	r3, [r7, #22]
 8000824:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000828:	b29b      	uxth	r3, r3
 800082a:	425b      	negs	r3, r3
 800082c:	82fb      	strh	r3, [r7, #22]
	} else {
		temp_temperature = (int16_t) temp_temperature;
	}
	*temperature = (float) temp_temperature / 10.0;
 800082e:	8afb      	ldrh	r3, [r7, #22]
 8000830:	ee07 3a90 	vmov	s15, r3
 8000834:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000838:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 800083c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000840:	68bb      	ldr	r3, [r7, #8]
 8000842:	edc3 7a00 	vstr	s15, [r3]
	*humidity = (float) (am2320->data[3] | am2320->data[2] << 8) / 10.0;
 8000846:	68fb      	ldr	r3, [r7, #12]
 8000848:	7a1b      	ldrb	r3, [r3, #8]
 800084a:	461a      	mov	r2, r3
 800084c:	68fb      	ldr	r3, [r7, #12]
 800084e:	79db      	ldrb	r3, [r3, #7]
 8000850:	021b      	lsls	r3, r3, #8
 8000852:	4313      	orrs	r3, r2
 8000854:	ee07 3a90 	vmov	s15, r3
 8000858:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800085c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000860:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	edc3 7a00 	vstr	s15, [r3]
}
 800086a:	bf00      	nop
 800086c:	3718      	adds	r7, #24
 800086e:	46bd      	mov	sp, r7
 8000870:	bd80      	pop	{r7, pc}
	...

08000874 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b08e      	sub	sp, #56	; 0x38
 8000878:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800087a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
 8000888:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800088a:	4b8d      	ldr	r3, [pc, #564]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	4a8c      	ldr	r2, [pc, #560]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	; 0x30
 8000896:	4b8a      	ldr	r3, [pc, #552]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b87      	ldr	r3, [pc, #540]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a86      	ldr	r2, [pc, #536]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b84      	ldr	r3, [pc, #528]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	61fb      	str	r3, [r7, #28]
 80008b8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80008ba:	4b81      	ldr	r3, [pc, #516]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	4a80      	ldr	r2, [pc, #512]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008c0:	f043 0320 	orr.w	r3, r3, #32
 80008c4:	6313      	str	r3, [r2, #48]	; 0x30
 80008c6:	4b7e      	ldr	r3, [pc, #504]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ca:	f003 0320 	and.w	r3, r3, #32
 80008ce:	61bb      	str	r3, [r7, #24]
 80008d0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d2:	4b7b      	ldr	r3, [pc, #492]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a7a      	ldr	r2, [pc, #488]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b78      	ldr	r3, [pc, #480]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	617b      	str	r3, [r7, #20]
 80008e8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	4b75      	ldr	r3, [pc, #468]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a74      	ldr	r2, [pc, #464]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008f0:	f043 0301 	orr.w	r3, r3, #1
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b72      	ldr	r3, [pc, #456]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0301 	and.w	r3, r3, #1
 80008fe:	613b      	str	r3, [r7, #16]
 8000900:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000902:	4b6f      	ldr	r3, [pc, #444]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	4a6e      	ldr	r2, [pc, #440]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000908:	f043 0302 	orr.w	r3, r3, #2
 800090c:	6313      	str	r3, [r2, #48]	; 0x30
 800090e:	4b6c      	ldr	r3, [pc, #432]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000912:	f003 0302 	and.w	r3, r3, #2
 8000916:	60fb      	str	r3, [r7, #12]
 8000918:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800091a:	4b69      	ldr	r3, [pc, #420]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a68      	ldr	r2, [pc, #416]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000920:	f043 0308 	orr.w	r3, r3, #8
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b66      	ldr	r3, [pc, #408]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0308 	and.w	r3, r3, #8
 800092e:	60bb      	str	r3, [r7, #8]
 8000930:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000932:	4b63      	ldr	r3, [pc, #396]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a62      	ldr	r2, [pc, #392]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000938:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b60      	ldr	r3, [pc, #384]	; (8000ac0 <MX_GPIO_Init+0x24c>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, T_CLK_Pin|T_MOSI_Pin|T_CS_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	2168      	movs	r1, #104	; 0x68
 800094e:	485d      	ldr	r0, [pc, #372]	; (8000ac4 <MX_GPIO_Init+0x250>)
 8000950:	f003 f9d4 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000954:	2200      	movs	r2, #0
 8000956:	f244 0181 	movw	r1, #16513	; 0x4081
 800095a:	485b      	ldr	r0, [pc, #364]	; (8000ac8 <MX_GPIO_Init+0x254>)
 800095c:	f003 f9ce 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000960:	2200      	movs	r2, #0
 8000962:	2140      	movs	r1, #64	; 0x40
 8000964:	4859      	ldr	r0, [pc, #356]	; (8000acc <MX_GPIO_Init+0x258>)
 8000966:	f003 f9c9 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, CS_Pin|DC_Pin|RST_Pin, GPIO_PIN_RESET);
 800096a:	2200      	movs	r2, #0
 800096c:	f44f 61e0 	mov.w	r1, #1792	; 0x700
 8000970:	4857      	ldr	r0, [pc, #348]	; (8000ad0 <MX_GPIO_Init+0x25c>)
 8000972:	f003 f9c3 	bl	8003cfc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000976:	2314      	movs	r3, #20
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800097a:	2300      	movs	r3, #0
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000982:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000986:	4619      	mov	r1, r3
 8000988:	484e      	ldr	r0, [pc, #312]	; (8000ac4 <MX_GPIO_Init+0x250>)
 800098a:	f002 fff3 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = T_CLK_Pin|T_MOSI_Pin|T_CS_Pin;
 800098e:	2368      	movs	r3, #104	; 0x68
 8000990:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000992:	2301      	movs	r3, #1
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000996:	2300      	movs	r3, #0
 8000998:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800099a:	2303      	movs	r3, #3
 800099c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800099e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009a2:	4619      	mov	r1, r3
 80009a4:	4847      	ldr	r0, [pc, #284]	; (8000ac4 <MX_GPIO_Init+0x250>)
 80009a6:	f002 ffe5 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Blue_Button_Pin;
 80009aa:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b0:	2300      	movs	r3, #0
 80009b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b4:	2300      	movs	r3, #0
 80009b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(User_Blue_Button_GPIO_Port, &GPIO_InitStruct);
 80009b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009bc:	4619      	mov	r1, r3
 80009be:	4844      	ldr	r0, [pc, #272]	; (8000ad0 <MX_GPIO_Init+0x25c>)
 80009c0:	f002 ffd8 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80009c4:	2332      	movs	r3, #50	; 0x32
 80009c6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c8:	2302      	movs	r3, #2
 80009ca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009cc:	2300      	movs	r3, #0
 80009ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009d0:	2303      	movs	r3, #3
 80009d2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009d4:	230b      	movs	r3, #11
 80009d6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009dc:	4619      	mov	r1, r3
 80009de:	483c      	ldr	r0, [pc, #240]	; (8000ad0 <MX_GPIO_Init+0x25c>)
 80009e0:	f002 ffc8 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80009e4:	2386      	movs	r3, #134	; 0x86
 80009e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e8:	2302      	movs	r3, #2
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ec:	2300      	movs	r3, #0
 80009ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f0:	2303      	movs	r3, #3
 80009f2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009f4:	230b      	movs	r3, #11
 80009f6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009fc:	4619      	mov	r1, r3
 80009fe:	4835      	ldr	r0, [pc, #212]	; (8000ad4 <MX_GPIO_Init+0x260>)
 8000a00:	f002 ffb8 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PBPin PBPin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|LD3_Pin|LD2_Pin;
 8000a04:	f244 0381 	movw	r3, #16513	; 0x4081
 8000a08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a0a:	2301      	movs	r3, #1
 8000a0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	482a      	ldr	r0, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0x254>)
 8000a1e:	f002 ffa9 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000a22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a28:	2302      	movs	r3, #2
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a30:	2303      	movs	r3, #3
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a34:	230b      	movs	r3, #11
 8000a36:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000a38:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	4822      	ldr	r0, [pc, #136]	; (8000ac8 <MX_GPIO_Init+0x254>)
 8000a40:	f002 ff98 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000a44:	2340      	movs	r3, #64	; 0x40
 8000a46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a48:	2301      	movs	r3, #1
 8000a4a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a50:	2300      	movs	r3, #0
 8000a52:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	481c      	ldr	r0, [pc, #112]	; (8000acc <MX_GPIO_Init+0x258>)
 8000a5c:	f002 ff8a 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a60:	2380      	movs	r3, #128	; 0x80
 8000a62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a64:	2300      	movs	r3, #0
 8000a66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a70:	4619      	mov	r1, r3
 8000a72:	4816      	ldr	r0, [pc, #88]	; (8000acc <MX_GPIO_Init+0x258>)
 8000a74:	f002 ff7e 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = CS_Pin|DC_Pin|RST_Pin;
 8000a78:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a86:	2303      	movs	r3, #3
 8000a88:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480f      	ldr	r0, [pc, #60]	; (8000ad0 <MX_GPIO_Init+0x25c>)
 8000a92:	f002 ff6f 	bl	8003974 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a96:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa4:	2303      	movs	r3, #3
 8000aa6:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000aa8:	230b      	movs	r3, #11
 8000aaa:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000aac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4806      	ldr	r0, [pc, #24]	; (8000acc <MX_GPIO_Init+0x258>)
 8000ab4:	f002 ff5e 	bl	8003974 <HAL_GPIO_Init>

}
 8000ab8:	bf00      	nop
 8000aba:	3738      	adds	r7, #56	; 0x38
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bd80      	pop	{r7, pc}
 8000ac0:	40023800 	.word	0x40023800
 8000ac4:	40021000 	.word	0x40021000
 8000ac8:	40020400 	.word	0x40020400
 8000acc:	40021800 	.word	0x40021800
 8000ad0:	40020800 	.word	0x40020800
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000adc:	4b1b      	ldr	r3, [pc, #108]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000ade:	4a1c      	ldr	r2, [pc, #112]	; (8000b50 <MX_I2C1_Init+0x78>)
 8000ae0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00C0EAFF;
 8000ae2:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000ae4:	4a1b      	ldr	r2, [pc, #108]	; (8000b54 <MX_I2C1_Init+0x7c>)
 8000ae6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000ae8:	4b18      	ldr	r3, [pc, #96]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000aee:	4b17      	ldr	r3, [pc, #92]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000af0:	2201      	movs	r2, #1
 8000af2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000af4:	4b15      	ldr	r3, [pc, #84]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000afa:	4b14      	ldr	r3, [pc, #80]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000b00:	4b12      	ldr	r3, [pc, #72]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000b06:	4b11      	ldr	r3, [pc, #68]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000b0c:	4b0f      	ldr	r3, [pc, #60]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000b12:	480e      	ldr	r0, [pc, #56]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b14:	f003 f90c 	bl	8003d30 <HAL_I2C_Init>
 8000b18:	4603      	mov	r3, r0
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000b1e:	f000 fcb1 	bl	8001484 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000b22:	2100      	movs	r1, #0
 8000b24:	4809      	ldr	r0, [pc, #36]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b26:	f003 fd5d 	bl	80045e4 <HAL_I2CEx_ConfigAnalogFilter>
 8000b2a:	4603      	mov	r3, r0
 8000b2c:	2b00      	cmp	r3, #0
 8000b2e:	d001      	beq.n	8000b34 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000b30:	f000 fca8 	bl	8001484 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000b34:	2100      	movs	r1, #0
 8000b36:	4805      	ldr	r0, [pc, #20]	; (8000b4c <MX_I2C1_Init+0x74>)
 8000b38:	f003 fd9f 	bl	800467a <HAL_I2CEx_ConfigDigitalFilter>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000b42:	f000 fc9f 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20000244 	.word	0x20000244
 8000b50:	40005400 	.word	0x40005400
 8000b54:	00c0eaff 	.word	0x00c0eaff

08000b58 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b08a      	sub	sp, #40	; 0x28
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b60:	f107 0314 	add.w	r3, r7, #20
 8000b64:	2200      	movs	r2, #0
 8000b66:	601a      	str	r2, [r3, #0]
 8000b68:	605a      	str	r2, [r3, #4]
 8000b6a:	609a      	str	r2, [r3, #8]
 8000b6c:	60da      	str	r2, [r3, #12]
 8000b6e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000b70:	687b      	ldr	r3, [r7, #4]
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a17      	ldr	r2, [pc, #92]	; (8000bd4 <HAL_I2C_MspInit+0x7c>)
 8000b76:	4293      	cmp	r3, r2
 8000b78:	d128      	bne.n	8000bcc <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b7a:	4b17      	ldr	r3, [pc, #92]	; (8000bd8 <HAL_I2C_MspInit+0x80>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a16      	ldr	r2, [pc, #88]	; (8000bd8 <HAL_I2C_MspInit+0x80>)
 8000b80:	f043 0302 	orr.w	r3, r3, #2
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b14      	ldr	r3, [pc, #80]	; (8000bd8 <HAL_I2C_MspInit+0x80>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0302 	and.w	r3, r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
 8000b90:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b92:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b96:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b98:	2312      	movs	r3, #18
 8000b9a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ba0:	2303      	movs	r3, #3
 8000ba2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ba4:	2304      	movs	r3, #4
 8000ba6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ba8:	f107 0314 	add.w	r3, r7, #20
 8000bac:	4619      	mov	r1, r3
 8000bae:	480b      	ldr	r0, [pc, #44]	; (8000bdc <HAL_I2C_MspInit+0x84>)
 8000bb0:	f002 fee0 	bl	8003974 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <HAL_I2C_MspInit+0x80>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb8:	4a07      	ldr	r2, [pc, #28]	; (8000bd8 <HAL_I2C_MspInit+0x80>)
 8000bba:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bbe:	6413      	str	r3, [r2, #64]	; 0x40
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <HAL_I2C_MspInit+0x80>)
 8000bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000bcc:	bf00      	nop
 8000bce:	3728      	adds	r7, #40	; 0x28
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40005400 	.word	0x40005400
 8000bd8:	40023800 	.word	0x40023800
 8000bdc:	40020400 	.word	0x40020400

08000be0 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000be4:	f3bf 8f4f 	dsb	sy
}
 8000be8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bea:	f3bf 8f6f 	isb	sy
}
 8000bee:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000bf0:	4b0d      	ldr	r3, [pc, #52]	; (8000c28 <SCB_EnableICache+0x48>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000bf8:	f3bf 8f4f 	dsb	sy
}
 8000bfc:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000bfe:	f3bf 8f6f 	isb	sy
}
 8000c02:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c04:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <SCB_EnableICache+0x48>)
 8000c06:	695b      	ldr	r3, [r3, #20]
 8000c08:	4a07      	ldr	r2, [pc, #28]	; (8000c28 <SCB_EnableICache+0x48>)
 8000c0a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c0e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c10:	f3bf 8f4f 	dsb	sy
}
 8000c14:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c16:	f3bf 8f6f 	isb	sy
}
 8000c1a:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 8000c1c:	bf00      	nop
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop
 8000c28:	e000ed00 	.word	0xe000ed00

08000c2c <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	b085      	sub	sp, #20
 8000c30:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8000c32:	4b1f      	ldr	r3, [pc, #124]	; (8000cb0 <SCB_EnableDCache+0x84>)
 8000c34:	2200      	movs	r2, #0
 8000c36:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3a:	f3bf 8f4f 	dsb	sy
}
 8000c3e:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c40:	4b1b      	ldr	r3, [pc, #108]	; (8000cb0 <SCB_EnableDCache+0x84>)
 8000c42:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000c46:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	0b5b      	lsrs	r3, r3, #13
 8000c4c:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8000c50:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	08db      	lsrs	r3, r3, #3
 8000c56:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000c5a:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	015a      	lsls	r2, r3, #5
 8000c60:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000c64:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000c66:	68ba      	ldr	r2, [r7, #8]
 8000c68:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c6a:	4911      	ldr	r1, [pc, #68]	; (8000cb0 <SCB_EnableDCache+0x84>)
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c72:	68bb      	ldr	r3, [r7, #8]
 8000c74:	1e5a      	subs	r2, r3, #1
 8000c76:	60ba      	str	r2, [r7, #8]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d1ef      	bne.n	8000c5c <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	1e5a      	subs	r2, r3, #1
 8000c80:	60fa      	str	r2, [r7, #12]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d1e5      	bne.n	8000c52 <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000c86:	f3bf 8f4f 	dsb	sy
}
 8000c8a:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c8c:	4b08      	ldr	r3, [pc, #32]	; (8000cb0 <SCB_EnableDCache+0x84>)
 8000c8e:	695b      	ldr	r3, [r3, #20]
 8000c90:	4a07      	ldr	r2, [pc, #28]	; (8000cb0 <SCB_EnableDCache+0x84>)
 8000c92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c96:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c98:	f3bf 8f4f 	dsb	sy
}
 8000c9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000c9e:	f3bf 8f6f 	isb	sy
}
 8000ca2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000ca4:	bf00      	nop
 8000ca6:	3714      	adds	r7, #20
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000ed00 	.word	0xe000ed00
 8000cb4:	00000000 	.word	0x00000000

08000cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb8:	b5b0      	push	{r4, r5, r7, lr}
 8000cba:	b0f0      	sub	sp, #448	; 0x1c0
 8000cbc:	af02      	add	r7, sp, #8
	//uint8_t cmdBuffer[3];
	//uint8_t dataBuffer[8];
  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000cbe:	f7ff ff8f 	bl	8000be0 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8000cc2:	f7ff ffb3 	bl	8000c2c <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cc6:	f002 f8c5 	bl	8002e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cca:	f000 fb41 	bl	8001350 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cce:	f7ff fdd1 	bl	8000874 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000cd2:	f000 ff57 	bl	8001b84 <MX_USART3_UART_Init>
  MX_SPI5_Init();
 8000cd6:	f000 fc0d 	bl	80014f4 <MX_SPI5_Init>
  MX_TIM1_Init();
 8000cda:	f000 fdc3 	bl	8001864 <MX_TIM1_Init>
  MX_RNG_Init();
 8000cde:	f000 fbd5 	bl	800148c <MX_RNG_Init>
  MX_I2C1_Init();
 8000ce2:	f7ff fef9 	bl	8000ad8 <MX_I2C1_Init>
  MX_TIM8_Init();
 8000ce6:	f000 fe6b 	bl	80019c0 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000cea:	f7ff fc83 	bl	80005f4 <MX_ADC1_Init>
  MX_TIM2_Init();
 8000cee:	f000 fe0d 	bl	800190c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ILI9341_Init();//initial driver setup to drive ili9341
 8000cf2:	f001 fc71 	bl	80025d8 <ILI9341_Init>
  //sprintf(str, "\n\rAM2320 I2C DEMO Starting . . . \n\r");
  Am2320_HandleTypeDef Am2320_;
  Am2320_ = am2320_Init(&hi2c1, AM2320_ADDRESS);
 8000cf6:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000cfa:	f5a3 748e 	sub.w	r4, r3, #284	; 0x11c
 8000cfe:	463b      	mov	r3, r7
 8000d00:	22b8      	movs	r2, #184	; 0xb8
 8000d02:	49d8      	ldr	r1, [pc, #864]	; (8001064 <main+0x3ac>)
 8000d04:	4618      	mov	r0, r3
 8000d06:	f7ff fd07 	bl	8000718 <am2320_Init>
 8000d0a:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000d0e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8000d12:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d14:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 200);
 8000d18:	f507 73be 	add.w	r3, r7, #380	; 0x17c
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	f7ff fa8f 	bl	8000240 <strlen>
 8000d22:	4603      	mov	r3, r0
 8000d24:	b29a      	uxth	r2, r3
 8000d26:	f507 71be 	add.w	r1, r7, #380	; 0x17c
 8000d2a:	23c8      	movs	r3, #200	; 0xc8
 8000d2c:	48ce      	ldr	r0, [pc, #824]	; (8001068 <main+0x3b0>)
 8000d2e:	f006 fbf3 	bl	8007518 <HAL_UART_Transmit>
  float temperature, humidity;
  uint8_t rx = 0;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
  uint8_t gx = 0;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
  uint8_t bx = 0;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
  //cmdBuffer[0] = 0x03;
  //cmdBuffer[1] = 0x00;
  //cmdBuffer[2] = 0x04;
  char fname[32] = "Phacharaphol";
 8000d44:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000d48:	f5a3 75a2 	sub.w	r5, r3, #324	; 0x144
 8000d4c:	4bc7      	ldr	r3, [pc, #796]	; (800106c <main+0x3b4>)
 8000d4e:	462c      	mov	r4, r5
 8000d50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d52:	c407      	stmia	r4!, {r0, r1, r2}
 8000d54:	7023      	strb	r3, [r4, #0]
 8000d56:	f105 030d 	add.w	r3, r5, #13
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	601a      	str	r2, [r3, #0]
 8000d5e:	605a      	str	r2, [r3, #4]
 8000d60:	609a      	str	r2, [r3, #8]
 8000d62:	60da      	str	r2, [r3, #12]
 8000d64:	f8c3 200f 	str.w	r2, [r3, #15]
  char lname[32] = "Chokkhun";
 8000d68:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000d6c:	f5a3 74b2 	sub.w	r4, r3, #356	; 0x164
 8000d70:	4abf      	ldr	r2, [pc, #764]	; (8001070 <main+0x3b8>)
 8000d72:	4623      	mov	r3, r4
 8000d74:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d76:	c303      	stmia	r3!, {r0, r1}
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	f104 0309 	add.w	r3, r4, #9
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
 8000d82:	605a      	str	r2, [r3, #4]
 8000d84:	609a      	str	r2, [r3, #8]
 8000d86:	60da      	str	r2, [r3, #12]
 8000d88:	611a      	str	r2, [r3, #16]
 8000d8a:	f8c3 2013 	str.w	r2, [r3, #19]
  char std_id[32] = "63010631";
 8000d8e:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000d92:	f5a3 74c2 	sub.w	r4, r3, #388	; 0x184
 8000d96:	4ab7      	ldr	r2, [pc, #732]	; (8001074 <main+0x3bc>)
 8000d98:	4623      	mov	r3, r4
 8000d9a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000d9c:	c303      	stmia	r3!, {r0, r1}
 8000d9e:	701a      	strb	r2, [r3, #0]
 8000da0:	f104 0309 	add.w	r3, r4, #9
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
 8000daa:	609a      	str	r2, [r3, #8]
 8000dac:	60da      	str	r2, [r3, #12]
 8000dae:	611a      	str	r2, [r3, #16]
 8000db0:	f8c3 2013 	str.w	r2, [r3, #19]
  char group_no[32] = "Group No.1";
 8000db4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000db8:	f5a3 74d2 	sub.w	r4, r3, #420	; 0x1a4
 8000dbc:	4aae      	ldr	r2, [pc, #696]	; (8001078 <main+0x3c0>)
 8000dbe:	4623      	mov	r3, r4
 8000dc0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000dc2:	c303      	stmia	r3!, {r0, r1}
 8000dc4:	801a      	strh	r2, [r3, #0]
 8000dc6:	3302      	adds	r3, #2
 8000dc8:	0c12      	lsrs	r2, r2, #16
 8000dca:	701a      	strb	r2, [r3, #0]
 8000dcc:	f104 030b 	add.w	r3, r4, #11
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	601a      	str	r2, [r3, #0]
 8000dd4:	605a      	str	r2, [r3, #4]
 8000dd6:	609a      	str	r2, [r3, #8]
 8000dd8:	60da      	str	r2, [r3, #12]
 8000dda:	611a      	str	r2, [r3, #16]
 8000ddc:	751a      	strb	r2, [r3, #20]
  ILI9341_Fill_Screen(WHITE);
 8000dde:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000de2:	f001 fda5 	bl	8002930 <ILI9341_Fill_Screen>
  ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 8000de6:	2001      	movs	r0, #1
 8000de8:	f001 fb98 	bl	800251c <ILI9341_Set_Rotation>
  HAL_TIM_Base_Start_IT(&htim8);
 8000dec:	48a3      	ldr	r0, [pc, #652]	; (800107c <main+0x3c4>)
 8000dee:	f005 f9e9 	bl	80061c4 <HAL_TIM_Base_Start_IT>
  HAL_ADC_Start(&hadc1);
 8000df2:	48a3      	ldr	r0, [pc, #652]	; (8001080 <main+0x3c8>)
 8000df4:	f002 f902 	bl	8002ffc <HAL_ADC_Start>
  htim2.Instance -> CCR4 = (10000-1) * dutyCycle;
 8000df8:	4ba2      	ldr	r3, [pc, #648]	; (8001084 <main+0x3cc>)
 8000dfa:	edd3 7a00 	vldr	s15, [r3]
 8000dfe:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 8001088 <main+0x3d0>
 8000e02:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e06:	4ba1      	ldr	r3, [pc, #644]	; (800108c <main+0x3d4>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e0e:	ee17 2a90 	vmov	r2, s15
 8000e12:	641a      	str	r2, [r3, #64]	; 0x40
   HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e14:	210c      	movs	r1, #12
 8000e16:	489d      	ldr	r0, [pc, #628]	; (800108c <main+0x3d4>)
 8000e18:	f005 faa4 	bl	8006364 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(state == 0)
 8000e1c:	4b9c      	ldr	r3, [pc, #624]	; (8001090 <main+0x3d8>)
 8000e1e:	781b      	ldrb	r3, [r3, #0]
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	f040 81ef 	bne.w	8001204 <main+0x54c>
	  {
	  	  sprintf(r,"%3d %%",(int)rx*100/120);
 8000e26:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8000e2a:	2264      	movs	r2, #100	; 0x64
 8000e2c:	fb02 f303 	mul.w	r3, r2, r3
 8000e30:	4a98      	ldr	r2, [pc, #608]	; (8001094 <main+0x3dc>)
 8000e32:	fb82 1203 	smull	r1, r2, r2, r3
 8000e36:	441a      	add	r2, r3
 8000e38:	1192      	asrs	r2, r2, #6
 8000e3a:	17db      	asrs	r3, r3, #31
 8000e3c:	1ad2      	subs	r2, r2, r3
 8000e3e:	f507 738a 	add.w	r3, r7, #276	; 0x114
 8000e42:	4995      	ldr	r1, [pc, #596]	; (8001098 <main+0x3e0>)
 8000e44:	4618      	mov	r0, r3
 8000e46:	f007 fc3d 	bl	80086c4 <siprintf>
	  	  sprintf(g,"%3d %%",(int)gx*100/120);
 8000e4a:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8000e4e:	2264      	movs	r2, #100	; 0x64
 8000e50:	fb02 f303 	mul.w	r3, r2, r3
 8000e54:	4a8f      	ldr	r2, [pc, #572]	; (8001094 <main+0x3dc>)
 8000e56:	fb82 1203 	smull	r1, r2, r2, r3
 8000e5a:	441a      	add	r2, r3
 8000e5c:	1192      	asrs	r2, r2, #6
 8000e5e:	17db      	asrs	r3, r3, #31
 8000e60:	1ad2      	subs	r2, r2, r3
 8000e62:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000e66:	498c      	ldr	r1, [pc, #560]	; (8001098 <main+0x3e0>)
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f007 fc2b 	bl	80086c4 <siprintf>
	  	  sprintf(b,"%3d %%",(int)bx*100/120);
 8000e6e:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8000e72:	2264      	movs	r2, #100	; 0x64
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	4a86      	ldr	r2, [pc, #536]	; (8001094 <main+0x3dc>)
 8000e7a:	fb82 1203 	smull	r1, r2, r2, r3
 8000e7e:	441a      	add	r2, r3
 8000e80:	1192      	asrs	r2, r2, #6
 8000e82:	17db      	asrs	r3, r3, #31
 8000e84:	1ad2      	subs	r2, r2, r3
 8000e86:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8000e8a:	4983      	ldr	r1, [pc, #524]	; (8001098 <main+0x3e0>)
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f007 fc19 	bl	80086c4 <siprintf>


	  	  color = (r_density << 11) + (g_density << 5) + b_density;
 8000e92:	4b82      	ldr	r3, [pc, #520]	; (800109c <main+0x3e4>)
 8000e94:	881b      	ldrh	r3, [r3, #0]
 8000e96:	02db      	lsls	r3, r3, #11
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	4b81      	ldr	r3, [pc, #516]	; (80010a0 <main+0x3e8>)
 8000e9c:	881b      	ldrh	r3, [r3, #0]
 8000e9e:	015b      	lsls	r3, r3, #5
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b7f      	ldr	r3, [pc, #508]	; (80010a4 <main+0x3ec>)
 8000ea8:	881b      	ldrh	r3, [r3, #0]
 8000eaa:	4413      	add	r3, r2
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	4b7e      	ldr	r3, [pc, #504]	; (80010a8 <main+0x3f0>)
 8000eb0:	801a      	strh	r2, [r3, #0]
	  	  ILI9341_Draw_Filled_Circle(125, 30, 25, color);
 8000eb2:	4b7d      	ldr	r3, [pc, #500]	; (80010a8 <main+0x3f0>)
 8000eb4:	881b      	ldrh	r3, [r3, #0]
 8000eb6:	2219      	movs	r2, #25
 8000eb8:	211e      	movs	r1, #30
 8000eba:	207d      	movs	r0, #125	; 0x7d
 8000ebc:	f000 feff 	bl	8001cbe <ILI9341_Draw_Filled_Circle>

	  	  ILI9341_Draw_Filled_Circle(25, 85, 20, 0xF800);
 8000ec0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000ec4:	2214      	movs	r2, #20
 8000ec6:	2155      	movs	r1, #85	; 0x55
 8000ec8:	2019      	movs	r0, #25
 8000eca:	f000 fef8 	bl	8001cbe <ILI9341_Draw_Filled_Circle>
	  	  ILI9341_Draw_Filled_Rectangle_Coord(70, 70, 190, 100, 0xFDB6);
 8000ece:	f64f 53b6 	movw	r3, #64950	; 0xfdb6
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2364      	movs	r3, #100	; 0x64
 8000ed6:	22be      	movs	r2, #190	; 0xbe
 8000ed8:	2146      	movs	r1, #70	; 0x46
 8000eda:	2046      	movs	r0, #70	; 0x46
 8000edc:	f000 ff77 	bl	8001dce <ILI9341_Draw_Filled_Rectangle_Coord>
	  	  ILI9341_Draw_Filled_Rectangle_Coord(70, 70, 70+rx, 100, 0xF800);
 8000ee0:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8000ee4:	b29b      	uxth	r3, r3
 8000ee6:	3346      	adds	r3, #70	; 0x46
 8000ee8:	b29a      	uxth	r2, r3
 8000eea:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8000eee:	9300      	str	r3, [sp, #0]
 8000ef0:	2364      	movs	r3, #100	; 0x64
 8000ef2:	2146      	movs	r1, #70	; 0x46
 8000ef4:	2046      	movs	r0, #70	; 0x46
 8000ef6:	f000 ff6a 	bl	8001dce <ILI9341_Draw_Filled_Rectangle_Coord>
	  	  ILI9341_Draw_Text(r, 200, 70, BLACK, 2, WHITE);
 8000efa:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8000efe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f02:	9301      	str	r3, [sp, #4]
 8000f04:	2302      	movs	r3, #2
 8000f06:	9300      	str	r3, [sp, #0]
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2246      	movs	r2, #70	; 0x46
 8000f0c:	21c8      	movs	r1, #200	; 0xc8
 8000f0e:	f001 f857 	bl	8001fc0 <ILI9341_Draw_Text>

	  	  ILI9341_Draw_Filled_Circle(25, 145, 20, 0x07E0);
 8000f12:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f16:	2214      	movs	r2, #20
 8000f18:	2191      	movs	r1, #145	; 0x91
 8000f1a:	2019      	movs	r0, #25
 8000f1c:	f000 fecf 	bl	8001cbe <ILI9341_Draw_Filled_Circle>
	  	  ILI9341_Draw_Filled_Rectangle_Coord(70, 130, 190, 160, 0xCFFA);
 8000f20:	f64c 73fa 	movw	r3, #53242	; 0xcffa
 8000f24:	9300      	str	r3, [sp, #0]
 8000f26:	23a0      	movs	r3, #160	; 0xa0
 8000f28:	22be      	movs	r2, #190	; 0xbe
 8000f2a:	2182      	movs	r1, #130	; 0x82
 8000f2c:	2046      	movs	r0, #70	; 0x46
 8000f2e:	f000 ff4e 	bl	8001dce <ILI9341_Draw_Filled_Rectangle_Coord>
	  	  ILI9341_Draw_Filled_Rectangle_Coord(70, 130, 70+gx, 160, 0x07E0);
 8000f32:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	3346      	adds	r3, #70	; 0x46
 8000f3a:	b29a      	uxth	r2, r3
 8000f3c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8000f40:	9300      	str	r3, [sp, #0]
 8000f42:	23a0      	movs	r3, #160	; 0xa0
 8000f44:	2182      	movs	r1, #130	; 0x82
 8000f46:	2046      	movs	r0, #70	; 0x46
 8000f48:	f000 ff41 	bl	8001dce <ILI9341_Draw_Filled_Rectangle_Coord>
	  	  ILI9341_Draw_Text(g, 200, 130, BLACK, 2, WHITE);
 8000f4c:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8000f50:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	2302      	movs	r3, #2
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2300      	movs	r3, #0
 8000f5c:	2282      	movs	r2, #130	; 0x82
 8000f5e:	21c8      	movs	r1, #200	; 0xc8
 8000f60:	f001 f82e 	bl	8001fc0 <ILI9341_Draw_Text>

	  	  ILI9341_Draw_Filled_Circle(25, 205, 20, 0x001F);
 8000f64:	231f      	movs	r3, #31
 8000f66:	2214      	movs	r2, #20
 8000f68:	21cd      	movs	r1, #205	; 0xcd
 8000f6a:	2019      	movs	r0, #25
 8000f6c:	f000 fea7 	bl	8001cbe <ILI9341_Draw_Filled_Circle>
	  	  ILI9341_Draw_Filled_Rectangle_Coord(70, 190, 190, 220, 0xCE5F);
 8000f70:	f64c 635f 	movw	r3, #52831	; 0xce5f
 8000f74:	9300      	str	r3, [sp, #0]
 8000f76:	23dc      	movs	r3, #220	; 0xdc
 8000f78:	22be      	movs	r2, #190	; 0xbe
 8000f7a:	21be      	movs	r1, #190	; 0xbe
 8000f7c:	2046      	movs	r0, #70	; 0x46
 8000f7e:	f000 ff26 	bl	8001dce <ILI9341_Draw_Filled_Rectangle_Coord>
	  	  ILI9341_Draw_Filled_Rectangle_Coord(70, 190, 70+bx, 220, 0x001F);
 8000f82:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	3346      	adds	r3, #70	; 0x46
 8000f8a:	b29a      	uxth	r2, r3
 8000f8c:	231f      	movs	r3, #31
 8000f8e:	9300      	str	r3, [sp, #0]
 8000f90:	23dc      	movs	r3, #220	; 0xdc
 8000f92:	21be      	movs	r1, #190	; 0xbe
 8000f94:	2046      	movs	r0, #70	; 0x46
 8000f96:	f000 ff1a 	bl	8001dce <ILI9341_Draw_Filled_Rectangle_Coord>
	  	  ILI9341_Draw_Text(b, 200, 190, BLACK, 2, WHITE);
 8000f9a:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8000f9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000fa2:	9301      	str	r3, [sp, #4]
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	9300      	str	r3, [sp, #0]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	22be      	movs	r2, #190	; 0xbe
 8000fac:	21c8      	movs	r1, #200	; 0xc8
 8000fae:	f001 f807 	bl	8001fc0 <ILI9341_Draw_Text>

	  	  am2320_GetTemperatureAndHumidity(&Am2320_, &temperature, &humidity);
 8000fb2:	f107 0294 	add.w	r2, r7, #148	; 0x94
 8000fb6:	f107 0198 	add.w	r1, r7, #152	; 0x98
 8000fba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f7ff fc16 	bl	80007f0 <am2320_GetTemperatureAndHumidity>
	  	  sprintf(str, "%4.1f C",temperature);
 8000fc4:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000fc8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8000fcc:	edd3 7a00 	vldr	s15, [r3]
 8000fd0:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000fd4:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8000fd8:	ec53 2b17 	vmov	r2, r3, d7
 8000fdc:	4933      	ldr	r1, [pc, #204]	; (80010ac <main+0x3f4>)
 8000fde:	f007 fb71 	bl	80086c4 <siprintf>
	  	  sprintf(str1, "%4.1f %%RH" ,humidity);
 8000fe2:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 8000fe6:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8000fea:	edd3 7a00 	vldr	s15, [r3]
 8000fee:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 8000ff2:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 8000ff6:	ec53 2b17 	vmov	r2, r3, d7
 8000ffa:	492d      	ldr	r1, [pc, #180]	; (80010b0 <main+0x3f8>)
 8000ffc:	f007 fb62 	bl	80086c4 <siprintf>
	  	  ILI9341_Draw_Text(str, 20, 20, BLACK, 2, WHITE);
 8001000:	f507 70be 	add.w	r0, r7, #380	; 0x17c
 8001004:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001008:	9301      	str	r3, [sp, #4]
 800100a:	2302      	movs	r3, #2
 800100c:	9300      	str	r3, [sp, #0]
 800100e:	2300      	movs	r3, #0
 8001010:	2214      	movs	r2, #20
 8001012:	2114      	movs	r1, #20
 8001014:	f000 ffd4 	bl	8001fc0 <ILI9341_Draw_Text>
	  	  ILI9341_Draw_Text(str1, 160, 20, BLACK, 2, WHITE);
 8001018:	f507 70a4 	add.w	r0, r7, #328	; 0x148
 800101c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001020:	9301      	str	r3, [sp, #4]
 8001022:	2302      	movs	r3, #2
 8001024:	9300      	str	r3, [sp, #0]
 8001026:	2300      	movs	r3, #0
 8001028:	2214      	movs	r2, #20
 800102a:	21a0      	movs	r1, #160	; 0xa0
 800102c:	f000 ffc8 	bl	8001fc0 <ILI9341_Draw_Text>


	  	  if(TP_Touchpad_Pressed())
 8001030:	f001 ff00 	bl	8002e34 <TP_Touchpad_Pressed>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	f000 8130 	beq.w	800129c <main+0x5e4>
	  	  {
	  		  uint16_t x_pos = 0;
 800103c:	2300      	movs	r3, #0
 800103e:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
	  		  uint16_t y_pos = 0;
 8001042:	2300      	movs	r3, #0
 8001044:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
	  		  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_SET);
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 800104e:	4819      	ldr	r0, [pc, #100]	; (80010b4 <main+0x3fc>)
 8001050:	f002 fe54 	bl	8003cfc <HAL_GPIO_WritePin>
	  		  uint16_t position_array[2];
	  		  if(TP_Read_Coordinates(position_array) == TOUCHPAD_DATA_OK)
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	4618      	mov	r0, r3
 800105a:	f001 fe29 	bl	8002cb0 <TP_Read_Coordinates>
 800105e:	4603      	mov	r3, r0
 8001060:	2b01      	cmp	r3, #1
 8001062:	e029      	b.n	80010b8 <main+0x400>
 8001064:	20000244 	.word	0x20000244
 8001068:	20000404 	.word	0x20000404
 800106c:	0800aaf0 	.word	0x0800aaf0
 8001070:	0800ab10 	.word	0x0800ab10
 8001074:	0800ab30 	.word	0x0800ab30
 8001078:	0800ab50 	.word	0x0800ab50
 800107c:	200003b8 	.word	0x200003b8
 8001080:	200001fc 	.word	0x200001fc
 8001084:	20000290 	.word	0x20000290
 8001088:	461c3c00 	.word	0x461c3c00
 800108c:	2000036c 	.word	0x2000036c
 8001090:	200002a0 	.word	0x200002a0
 8001094:	88888889 	.word	0x88888889
 8001098:	0800aad4 	.word	0x0800aad4
 800109c:	20000296 	.word	0x20000296
 80010a0:	20000298 	.word	0x20000298
 80010a4:	2000029a 	.word	0x2000029a
 80010a8:	20000294 	.word	0x20000294
 80010ac:	0800aadc 	.word	0x0800aadc
 80010b0:	0800aae4 	.word	0x0800aae4
 80010b4:	40020400 	.word	0x40020400
 80010b8:	f040 809d 	bne.w	80011f6 <main+0x53e>
	  		  {
	  		  	  	y_pos = 240 - position_array[0];
 80010bc:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80010c0:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80010c4:	881b      	ldrh	r3, [r3, #0]
 80010c6:	f1c3 03f0 	rsb	r3, r3, #240	; 0xf0
 80010ca:	f8a7 31b0 	strh.w	r3, [r7, #432]	; 0x1b0
	  		  	  	x_pos = position_array[1];
 80010ce:	f507 73dc 	add.w	r3, r7, #440	; 0x1b8
 80010d2:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 80010d6:	885b      	ldrh	r3, [r3, #2]
 80010d8:	f8a7 31b2 	strh.w	r3, [r7, #434]	; 0x1b2
	  		  	  	if((x_pos >= 5 && x_pos <= 45) && (y_pos >= 65 && y_pos <= 105))
 80010dc:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80010e0:	2b04      	cmp	r3, #4
 80010e2:	d920      	bls.n	8001126 <main+0x46e>
 80010e4:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80010e8:	2b2d      	cmp	r3, #45	; 0x2d
 80010ea:	d81c      	bhi.n	8001126 <main+0x46e>
 80010ec:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80010f0:	2b40      	cmp	r3, #64	; 0x40
 80010f2:	d918      	bls.n	8001126 <main+0x46e>
 80010f4:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80010f8:	2b69      	cmp	r3, #105	; 0x69
 80010fa:	d814      	bhi.n	8001126 <main+0x46e>
	  		  	  	{
	  		  	  		//ILI9341_Draw_Hollow_Rectangle_Coord(5, 65, 45, 105, 0x001F);
	  		  	  		rx += 12;
 80010fc:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8001100:	330c      	adds	r3, #12
 8001102:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
	  		  	  		r_density += (int)31*10/100;
 8001106:	4b86      	ldr	r3, [pc, #536]	; (8001320 <main+0x668>)
 8001108:	881b      	ldrh	r3, [r3, #0]
 800110a:	3303      	adds	r3, #3
 800110c:	b29a      	uxth	r2, r3
 800110e:	4b84      	ldr	r3, [pc, #528]	; (8001320 <main+0x668>)
 8001110:	801a      	strh	r2, [r3, #0]
	  		  	  		if(rx > 120)
 8001112:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8001116:	2b78      	cmp	r3, #120	; 0x78
 8001118:	d905      	bls.n	8001126 <main+0x46e>
	  		  	  		{
	  		  	  			r_density = 0;
 800111a:	4b81      	ldr	r3, [pc, #516]	; (8001320 <main+0x668>)
 800111c:	2200      	movs	r2, #0
 800111e:	801a      	strh	r2, [r3, #0]
	  		  	  			rx = 0;
 8001120:	2300      	movs	r3, #0
 8001122:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
	  		  	  		}
	  		  	  	}
	  		  	  	if((x_pos >= 5 && x_pos <= 45) && (y_pos >= 125 && y_pos <= 165))
 8001126:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 800112a:	2b04      	cmp	r3, #4
 800112c:	d920      	bls.n	8001170 <main+0x4b8>
 800112e:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 8001132:	2b2d      	cmp	r3, #45	; 0x2d
 8001134:	d81c      	bhi.n	8001170 <main+0x4b8>
 8001136:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 800113a:	2b7c      	cmp	r3, #124	; 0x7c
 800113c:	d918      	bls.n	8001170 <main+0x4b8>
 800113e:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8001142:	2ba5      	cmp	r3, #165	; 0xa5
 8001144:	d814      	bhi.n	8001170 <main+0x4b8>
	  		  	  	{
	  		  	  		//ILI9341_Draw_Hollow_Rectangle_Coord(5, 125, 45, 165, 0x001F);
	  		  	  		gx += 12;
 8001146:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 800114a:	330c      	adds	r3, #12
 800114c:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
	  		  	  		g_density += (int)63*10/100;
 8001150:	4b74      	ldr	r3, [pc, #464]	; (8001324 <main+0x66c>)
 8001152:	881b      	ldrh	r3, [r3, #0]
 8001154:	3306      	adds	r3, #6
 8001156:	b29a      	uxth	r2, r3
 8001158:	4b72      	ldr	r3, [pc, #456]	; (8001324 <main+0x66c>)
 800115a:	801a      	strh	r2, [r3, #0]
	  		  	  		if(gx > 120)
 800115c:	f897 31b6 	ldrb.w	r3, [r7, #438]	; 0x1b6
 8001160:	2b78      	cmp	r3, #120	; 0x78
 8001162:	d905      	bls.n	8001170 <main+0x4b8>
	  		  	  		{
	  		  	  			g_density = 0;
 8001164:	4b6f      	ldr	r3, [pc, #444]	; (8001324 <main+0x66c>)
 8001166:	2200      	movs	r2, #0
 8001168:	801a      	strh	r2, [r3, #0]
	  		  	  			gx = 0;
 800116a:	2300      	movs	r3, #0
 800116c:	f887 31b6 	strb.w	r3, [r7, #438]	; 0x1b6
	  		  	  		}
	  		  	  	}
	  		  	  	if((x_pos >= 5 && x_pos <= 45) && (y_pos >= 185 && y_pos <= 225))
 8001170:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 8001174:	2b04      	cmp	r3, #4
 8001176:	d920      	bls.n	80011ba <main+0x502>
 8001178:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 800117c:	2b2d      	cmp	r3, #45	; 0x2d
 800117e:	d81c      	bhi.n	80011ba <main+0x502>
 8001180:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 8001184:	2bb8      	cmp	r3, #184	; 0xb8
 8001186:	d918      	bls.n	80011ba <main+0x502>
 8001188:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 800118c:	2be1      	cmp	r3, #225	; 0xe1
 800118e:	d814      	bhi.n	80011ba <main+0x502>
	  		  	  	{
	  		  	  		//ILI9341_Draw_Hollow_Rectangle_Coord(5, 185, 45, 225, 0x00FF);
	  		  			bx += 12;
 8001190:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 8001194:	330c      	adds	r3, #12
 8001196:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
	  		  			b_density += (int)31*10/100;
 800119a:	4b63      	ldr	r3, [pc, #396]	; (8001328 <main+0x670>)
 800119c:	881b      	ldrh	r3, [r3, #0]
 800119e:	3303      	adds	r3, #3
 80011a0:	b29a      	uxth	r2, r3
 80011a2:	4b61      	ldr	r3, [pc, #388]	; (8001328 <main+0x670>)
 80011a4:	801a      	strh	r2, [r3, #0]
	  		  			if(bx > 120)
 80011a6:	f897 31b5 	ldrb.w	r3, [r7, #437]	; 0x1b5
 80011aa:	2b78      	cmp	r3, #120	; 0x78
 80011ac:	d905      	bls.n	80011ba <main+0x502>
	  		  			{
	  		  				b_density = 0;
 80011ae:	4b5e      	ldr	r3, [pc, #376]	; (8001328 <main+0x670>)
 80011b0:	2200      	movs	r2, #0
 80011b2:	801a      	strh	r2, [r3, #0]
	  		  				bx = 0;
 80011b4:	2300      	movs	r3, #0
 80011b6:	f887 31b5 	strb.w	r3, [r7, #437]	; 0x1b5
	  		  			}
	  		  		}
	  		  	  	if((x_pos >= 100 && x_pos <= 150) && (y_pos >= 5 && y_pos <= 55))
 80011ba:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80011be:	2b63      	cmp	r3, #99	; 0x63
 80011c0:	d96c      	bls.n	800129c <main+0x5e4>
 80011c2:	f8b7 31b2 	ldrh.w	r3, [r7, #434]	; 0x1b2
 80011c6:	2b96      	cmp	r3, #150	; 0x96
 80011c8:	d868      	bhi.n	800129c <main+0x5e4>
 80011ca:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	d964      	bls.n	800129c <main+0x5e4>
 80011d2:	f8b7 31b0 	ldrh.w	r3, [r7, #432]	; 0x1b0
 80011d6:	2b37      	cmp	r3, #55	; 0x37
 80011d8:	d860      	bhi.n	800129c <main+0x5e4>
	  		  	  	{
	  		  	  		//ILI9341_Draw_Hollow_Rectangle_Coord(100, 5, 150, 55, 0x00FF);
	  		  	  		HAL_Delay(200);
 80011da:	20c8      	movs	r0, #200	; 0xc8
 80011dc:	f001 fea6 	bl	8002f2c <HAL_Delay>
	  		  	  		ILI9341_Fill_Screen(WHITE);
 80011e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 80011e4:	f001 fba4 	bl	8002930 <ILI9341_Fill_Screen>
	  		  	  		state = 1;
 80011e8:	4b50      	ldr	r3, [pc, #320]	; (800132c <main+0x674>)
 80011ea:	2201      	movs	r2, #1
 80011ec:	701a      	strb	r2, [r3, #0]
	  		  	  		count = 0;
 80011ee:	4b50      	ldr	r3, [pc, #320]	; (8001330 <main+0x678>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	601a      	str	r2, [r3, #0]
 80011f4:	e052      	b.n	800129c <main+0x5e4>
	  		  	  	}
	  		  }
	  		  else
	  		  {
	  		  	  				HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80011f6:	2200      	movs	r2, #0
 80011f8:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 80011fc:	484d      	ldr	r0, [pc, #308]	; (8001334 <main+0x67c>)
 80011fe:	f002 fd7d 	bl	8003cfc <HAL_GPIO_WritePin>
 8001202:	e04b      	b.n	800129c <main+0x5e4>
	  	  }

	  	}
	  	else
	  	{
	  		ILI9341_Draw_Image((const char*)my_picture , SCREEN_HORIZONTAL_1);
 8001204:	2101      	movs	r1, #1
 8001206:	484c      	ldr	r0, [pc, #304]	; (8001338 <main+0x680>)
 8001208:	f000 ff0a 	bl	8002020 <ILI9341_Draw_Image>
	  		ILI9341_Draw_Text(group_no, 120, 60, BLACK, 2, WHITE);
 800120c:	f107 0014 	add.w	r0, r7, #20
 8001210:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001214:	9301      	str	r3, [sp, #4]
 8001216:	2302      	movs	r3, #2
 8001218:	9300      	str	r3, [sp, #0]
 800121a:	2300      	movs	r3, #0
 800121c:	223c      	movs	r2, #60	; 0x3c
 800121e:	2178      	movs	r1, #120	; 0x78
 8001220:	f000 fece 	bl	8001fc0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(fname, 120, 85, BLACK, 2, WHITE);
 8001224:	f107 0074 	add.w	r0, r7, #116	; 0x74
 8001228:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800122c:	9301      	str	r3, [sp, #4]
 800122e:	2302      	movs	r3, #2
 8001230:	9300      	str	r3, [sp, #0]
 8001232:	2300      	movs	r3, #0
 8001234:	2255      	movs	r2, #85	; 0x55
 8001236:	2178      	movs	r1, #120	; 0x78
 8001238:	f000 fec2 	bl	8001fc0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(lname, 120, 110, BLACK, 2, WHITE);
 800123c:	f107 0054 	add.w	r0, r7, #84	; 0x54
 8001240:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001244:	9301      	str	r3, [sp, #4]
 8001246:	2302      	movs	r3, #2
 8001248:	9300      	str	r3, [sp, #0]
 800124a:	2300      	movs	r3, #0
 800124c:	226e      	movs	r2, #110	; 0x6e
 800124e:	2178      	movs	r1, #120	; 0x78
 8001250:	f000 feb6 	bl	8001fc0 <ILI9341_Draw_Text>
	  		ILI9341_Draw_Text(std_id, 120, 135, BLACK, 2, WHITE);
 8001254:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8001258:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800125c:	9301      	str	r3, [sp, #4]
 800125e:	2302      	movs	r3, #2
 8001260:	9300      	str	r3, [sp, #0]
 8001262:	2300      	movs	r3, #0
 8001264:	2287      	movs	r2, #135	; 0x87
 8001266:	2178      	movs	r1, #120	; 0x78
 8001268:	f000 feaa 	bl	8001fc0 <ILI9341_Draw_Text>
	  		if (count >= 5 )
 800126c:	4b30      	ldr	r3, [pc, #192]	; (8001330 <main+0x678>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b04      	cmp	r3, #4
 8001272:	d907      	bls.n	8001284 <main+0x5cc>
	  		{
	  			ILI9341_Fill_Screen(WHITE);
 8001274:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001278:	f001 fb5a 	bl	8002930 <ILI9341_Fill_Screen>
	  			state = 0;
 800127c:	4b2b      	ldr	r3, [pc, #172]	; (800132c <main+0x674>)
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
 8001282:	e00b      	b.n	800129c <main+0x5e4>
	  		}
	  		else if(TP_Touchpad_Pressed() )
 8001284:	f001 fdd6 	bl	8002e34 <TP_Touchpad_Pressed>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d006      	beq.n	800129c <main+0x5e4>
	  		{
	  			//HAL_Delay(1000);
	  			ILI9341_Fill_Screen(WHITE);
 800128e:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8001292:	f001 fb4d 	bl	8002930 <ILI9341_Fill_Screen>
	  			state = 0;
 8001296:	4b25      	ldr	r3, [pc, #148]	; (800132c <main+0x674>)
 8001298:	2200      	movs	r2, #0
 800129a:	701a      	strb	r2, [r3, #0]
	  		}
	  	}
	  	  while (HAL_ADC_PollForConversion(&hadc1, 100) != HAL_OK){}
 800129c:	bf00      	nop
 800129e:	2164      	movs	r1, #100	; 0x64
 80012a0:	4826      	ldr	r0, [pc, #152]	; (800133c <main+0x684>)
 80012a2:	f001 ff79 	bl	8003198 <HAL_ADC_PollForConversion>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d1f8      	bne.n	800129e <main+0x5e6>
	  	  	  adc_val = HAL_ADC_GetValue(&hadc1);
 80012ac:	4823      	ldr	r0, [pc, #140]	; (800133c <main+0x684>)
 80012ae:	f001 fffe 	bl	80032ae <HAL_ADC_GetValue>
 80012b2:	4603      	mov	r3, r0
 80012b4:	4a22      	ldr	r2, [pc, #136]	; (8001340 <main+0x688>)
 80012b6:	6013      	str	r3, [r2, #0]
	  	  	  dutyCycle = 0.2 + (adc_val/4095.0 * 0.8);
 80012b8:	4b21      	ldr	r3, [pc, #132]	; (8001340 <main+0x688>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	ee07 3a90 	vmov	s15, r3
 80012c0:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 80012c4:	ed9f 5b10 	vldr	d5, [pc, #64]	; 8001308 <main+0x650>
 80012c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80012cc:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001310 <main+0x658>
 80012d0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80012d4:	ed9f 6b10 	vldr	d6, [pc, #64]	; 8001318 <main+0x660>
 80012d8:	ee37 7b06 	vadd.f64	d7, d7, d6
 80012dc:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80012e0:	4b18      	ldr	r3, [pc, #96]	; (8001344 <main+0x68c>)
 80012e2:	edc3 7a00 	vstr	s15, [r3]
	  	  htim2.Instance -> CCR4 = (10000-1) * dutyCycle;
 80012e6:	4b17      	ldr	r3, [pc, #92]	; (8001344 <main+0x68c>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8001348 <main+0x690>
 80012f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80012f4:	4b15      	ldr	r3, [pc, #84]	; (800134c <main+0x694>)
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80012fc:	ee17 2a90 	vmov	r2, s15
 8001300:	641a      	str	r2, [r3, #64]	; 0x40
	  if(state == 0)
 8001302:	e58b      	b.n	8000e1c <main+0x164>
 8001304:	f3af 8000 	nop.w
 8001308:	00000000 	.word	0x00000000
 800130c:	40affe00 	.word	0x40affe00
 8001310:	9999999a 	.word	0x9999999a
 8001314:	3fe99999 	.word	0x3fe99999
 8001318:	9999999a 	.word	0x9999999a
 800131c:	3fc99999 	.word	0x3fc99999
 8001320:	20000296 	.word	0x20000296
 8001324:	20000298 	.word	0x20000298
 8001328:	2000029a 	.word	0x2000029a
 800132c:	200002a0 	.word	0x200002a0
 8001330:	2000029c 	.word	0x2000029c
 8001334:	40020400 	.word	0x40020400
 8001338:	0800ab70 	.word	0x0800ab70
 800133c:	200001fc 	.word	0x200001fc
 8001340:	200002a4 	.word	0x200002a4
 8001344:	20000290 	.word	0x20000290
 8001348:	461c3c00 	.word	0x461c3c00
 800134c:	2000036c 	.word	0x2000036c

08001350 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b0b8      	sub	sp, #224	; 0xe0
 8001354:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001356:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800135a:	2234      	movs	r2, #52	; 0x34
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f006 fd64 	bl	8007e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001364:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001368:	2200      	movs	r2, #0
 800136a:	601a      	str	r2, [r3, #0]
 800136c:	605a      	str	r2, [r3, #4]
 800136e:	609a      	str	r2, [r3, #8]
 8001370:	60da      	str	r2, [r3, #12]
 8001372:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001374:	f107 0308 	add.w	r3, r7, #8
 8001378:	2290      	movs	r2, #144	; 0x90
 800137a:	2100      	movs	r1, #0
 800137c:	4618      	mov	r0, r3
 800137e:	f006 fd55 	bl	8007e2c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001382:	f003 f9c7 	bl	8004714 <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001386:	4b3c      	ldr	r3, [pc, #240]	; (8001478 <SystemClock_Config+0x128>)
 8001388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800138a:	4a3b      	ldr	r2, [pc, #236]	; (8001478 <SystemClock_Config+0x128>)
 800138c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001390:	6413      	str	r3, [r2, #64]	; 0x40
 8001392:	4b39      	ldr	r3, [pc, #228]	; (8001478 <SystemClock_Config+0x128>)
 8001394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800139a:	607b      	str	r3, [r7, #4]
 800139c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800139e:	4b37      	ldr	r3, [pc, #220]	; (800147c <SystemClock_Config+0x12c>)
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	4a36      	ldr	r2, [pc, #216]	; (800147c <SystemClock_Config+0x12c>)
 80013a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80013a8:	6013      	str	r3, [r2, #0]
 80013aa:	4b34      	ldr	r3, [pc, #208]	; (800147c <SystemClock_Config+0x12c>)
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80013b2:	603b      	str	r3, [r7, #0]
 80013b4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80013b6:	2301      	movs	r3, #1
 80013b8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80013bc:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80013c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80013c4:	2302      	movs	r3, #2
 80013c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80013ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80013ce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013d2:	2304      	movs	r3, #4
 80013d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 200;
 80013d8:	23c8      	movs	r3, #200	; 0xc8
 80013da:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013de:	2302      	movs	r3, #2
 80013e0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80013e4:	2309      	movs	r3, #9
 80013e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = 2;
 80013ea:	2302      	movs	r3, #2
 80013ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013f0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80013f4:	4618      	mov	r0, r3
 80013f6:	f003 f9ed 	bl	80047d4 <HAL_RCC_OscConfig>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8001400:	f000 f840 	bl	8001484 <Error_Handler>
  }
  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001404:	f003 f996 	bl	8004734 <HAL_PWREx_EnableOverDrive>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	d001      	beq.n	8001412 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800140e:	f000 f839 	bl	8001484 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001412:	230f      	movs	r3, #15
 8001414:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001418:	2302      	movs	r3, #2
 800141a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800141e:	2300      	movs	r3, #0
 8001420:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001424:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001428:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800142c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001430:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_6) != HAL_OK)
 8001434:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001438:	2106      	movs	r1, #6
 800143a:	4618      	mov	r0, r3
 800143c:	f003 fc78 	bl	8004d30 <HAL_RCC_ClockConfig>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <SystemClock_Config+0xfa>
  {
    Error_Handler();
 8001446:	f000 f81d 	bl	8001484 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_I2C1
 800144a:	4b0d      	ldr	r3, [pc, #52]	; (8001480 <SystemClock_Config+0x130>)
 800144c:	60bb      	str	r3, [r7, #8]
                              |RCC_PERIPHCLK_CLK48;
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800144e:	2300      	movs	r3, #0
 8001450:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001452:	2300      	movs	r3, #0
 8001454:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001456:	2300      	movs	r3, #0
 8001458:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800145c:	f107 0308 	add.w	r3, r7, #8
 8001460:	4618      	mov	r0, r3
 8001462:	f003 fe8b 	bl	800517c <HAL_RCCEx_PeriphCLKConfig>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <SystemClock_Config+0x120>
  {
    Error_Handler();
 800146c:	f000 f80a 	bl	8001484 <Error_Handler>
  }
}
 8001470:	bf00      	nop
 8001472:	37e0      	adds	r7, #224	; 0xe0
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	40023800 	.word	0x40023800
 800147c:	40007000 	.word	0x40007000
 8001480:	00204100 	.word	0x00204100

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8001488:	e7fe      	b.n	8001488 <Error_Handler+0x4>
	...

0800148c <MX_RNG_Init>:

RNG_HandleTypeDef hrng;

/* RNG init function */
void MX_RNG_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001490:	4b06      	ldr	r3, [pc, #24]	; (80014ac <MX_RNG_Init+0x20>)
 8001492:	4a07      	ldr	r2, [pc, #28]	; (80014b0 <MX_RNG_Init+0x24>)
 8001494:	601a      	str	r2, [r3, #0]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 8001496:	4805      	ldr	r0, [pc, #20]	; (80014ac <MX_RNG_Init+0x20>)
 8001498:	f004 fa98 	bl	80059cc <HAL_RNG_Init>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d001      	beq.n	80014a6 <MX_RNG_Init+0x1a>
  {
    Error_Handler();
 80014a2:	f7ff ffef 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200002a8 	.word	0x200002a8
 80014b0:	50060800 	.word	0x50060800

080014b4 <HAL_RNG_MspInit>:

void HAL_RNG_MspInit(RNG_HandleTypeDef* rngHandle)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b085      	sub	sp, #20
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  if(rngHandle->Instance==RNG)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	4a0a      	ldr	r2, [pc, #40]	; (80014ec <HAL_RNG_MspInit+0x38>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d10b      	bne.n	80014de <HAL_RNG_MspInit+0x2a>
  {
  /* USER CODE BEGIN RNG_MspInit 0 */

  /* USER CODE END RNG_MspInit 0 */
    /* RNG clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 80014c6:	4b0a      	ldr	r3, [pc, #40]	; (80014f0 <HAL_RNG_MspInit+0x3c>)
 80014c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ca:	4a09      	ldr	r2, [pc, #36]	; (80014f0 <HAL_RNG_MspInit+0x3c>)
 80014cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014d0:	6353      	str	r3, [r2, #52]	; 0x34
 80014d2:	4b07      	ldr	r3, [pc, #28]	; (80014f0 <HAL_RNG_MspInit+0x3c>)
 80014d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014da:	60fb      	str	r3, [r7, #12]
 80014dc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }
}
 80014de:	bf00      	nop
 80014e0:	3714      	adds	r7, #20
 80014e2:	46bd      	mov	sp, r7
 80014e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e8:	4770      	bx	lr
 80014ea:	bf00      	nop
 80014ec:	50060800 	.word	0x50060800
 80014f0:	40023800 	.word	0x40023800

080014f4 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_SPI5_Init+0x74>)
 80014fa:	4a1c      	ldr	r2, [pc, #112]	; (800156c <MX_SPI5_Init+0x78>)
 80014fc:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80014fe:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_SPI5_Init+0x74>)
 8001500:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001504:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_SPI5_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800150c:	4b16      	ldr	r3, [pc, #88]	; (8001568 <MX_SPI5_Init+0x74>)
 800150e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001512:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001514:	4b14      	ldr	r3, [pc, #80]	; (8001568 <MX_SPI5_Init+0x74>)
 8001516:	2200      	movs	r2, #0
 8001518:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800151a:	4b13      	ldr	r3, [pc, #76]	; (8001568 <MX_SPI5_Init+0x74>)
 800151c:	2200      	movs	r2, #0
 800151e:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001520:	4b11      	ldr	r3, [pc, #68]	; (8001568 <MX_SPI5_Init+0x74>)
 8001522:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001526:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001528:	4b0f      	ldr	r3, [pc, #60]	; (8001568 <MX_SPI5_Init+0x74>)
 800152a:	2200      	movs	r2, #0
 800152c:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800152e:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <MX_SPI5_Init+0x74>)
 8001530:	2200      	movs	r2, #0
 8001532:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001534:	4b0c      	ldr	r3, [pc, #48]	; (8001568 <MX_SPI5_Init+0x74>)
 8001536:	2200      	movs	r2, #0
 8001538:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	; (8001568 <MX_SPI5_Init+0x74>)
 800153c:	2200      	movs	r2, #0
 800153e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001540:	4b09      	ldr	r3, [pc, #36]	; (8001568 <MX_SPI5_Init+0x74>)
 8001542:	2207      	movs	r2, #7
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001546:	4b08      	ldr	r3, [pc, #32]	; (8001568 <MX_SPI5_Init+0x74>)
 8001548:	2200      	movs	r2, #0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800154c:	4b06      	ldr	r3, [pc, #24]	; (8001568 <MX_SPI5_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_SPI5_Init+0x74>)
 8001554:	f004 fa64 	bl	8005a20 <HAL_SPI_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800155e:	f7ff ff91 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	200002b8 	.word	0x200002b8
 800156c:	40015000 	.word	0x40015000

08001570 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	; 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a17      	ldr	r2, [pc, #92]	; (80015ec <HAL_SPI_MspInit+0x7c>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d128      	bne.n	80015e4 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001592:	4b17      	ldr	r3, [pc, #92]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 8001594:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001596:	4a16      	ldr	r2, [pc, #88]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 8001598:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800159c:	6453      	str	r3, [r2, #68]	; 0x44
 800159e:	4b14      	ldr	r3, [pc, #80]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80015a6:	613b      	str	r3, [r7, #16]
 80015a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80015aa:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a10      	ldr	r2, [pc, #64]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015b0:	f043 0320 	orr.w	r3, r3, #32
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b0e      	ldr	r3, [pc, #56]	; (80015f0 <HAL_SPI_MspInit+0x80>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0320 	and.w	r3, r3, #32
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80015c2:	f44f 7360 	mov.w	r3, #896	; 0x380
 80015c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c8:	2302      	movs	r3, #2
 80015ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015d0:	2303      	movs	r3, #3
 80015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80015d4:	2305      	movs	r3, #5
 80015d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80015d8:	f107 0314 	add.w	r3, r7, #20
 80015dc:	4619      	mov	r1, r3
 80015de:	4805      	ldr	r0, [pc, #20]	; (80015f4 <HAL_SPI_MspInit+0x84>)
 80015e0:	f002 f9c8 	bl	8003974 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 80015e4:	bf00      	nop
 80015e6:	3728      	adds	r7, #40	; 0x28
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	40015000 	.word	0x40015000
 80015f0:	40023800 	.word	0x40023800
 80015f4:	40021400 	.word	0x40021400

080015f8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80015fe:	4b0f      	ldr	r3, [pc, #60]	; (800163c <HAL_MspInit+0x44>)
 8001600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001602:	4a0e      	ldr	r2, [pc, #56]	; (800163c <HAL_MspInit+0x44>)
 8001604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001608:	6413      	str	r3, [r2, #64]	; 0x40
 800160a:	4b0c      	ldr	r3, [pc, #48]	; (800163c <HAL_MspInit+0x44>)
 800160c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001612:	607b      	str	r3, [r7, #4]
 8001614:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001616:	4b09      	ldr	r3, [pc, #36]	; (800163c <HAL_MspInit+0x44>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a08      	ldr	r2, [pc, #32]	; (800163c <HAL_MspInit+0x44>)
 800161c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b06      	ldr	r3, [pc, #24]	; (800163c <HAL_MspInit+0x44>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800162a:	603b      	str	r3, [r7, #0]
 800162c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001638:	4770      	bx	lr
 800163a:	bf00      	nop
 800163c:	40023800 	.word	0x40023800

08001640 <SysTick_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001644:	f001 fc52 	bl	8002eec <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	bd80      	pop	{r7, pc}

0800164c <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001650:	4804      	ldr	r0, [pc, #16]	; (8001664 <TIM8_UP_TIM13_IRQHandler+0x18>)
 8001652:	f004 ff81 	bl	8006558 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */
  count++;
 8001656:	4b04      	ldr	r3, [pc, #16]	; (8001668 <TIM8_UP_TIM13_IRQHandler+0x1c>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	3301      	adds	r3, #1
 800165c:	4a02      	ldr	r2, [pc, #8]	; (8001668 <TIM8_UP_TIM13_IRQHandler+0x1c>)
 800165e:	6013      	str	r3, [r2, #0]
  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 8001660:	bf00      	nop
 8001662:	bd80      	pop	{r7, pc}
 8001664:	200003b8 	.word	0x200003b8
 8001668:	2000029c 	.word	0x2000029c

0800166c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
	return 1;
 8001670:	2301      	movs	r3, #1
}
 8001672:	4618      	mov	r0, r3
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <_kill>:

int _kill(int pid, int sig)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b082      	sub	sp, #8
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001686:	f006 fba7 	bl	8007dd8 <__errno>
 800168a:	4603      	mov	r3, r0
 800168c:	2216      	movs	r2, #22
 800168e:	601a      	str	r2, [r3, #0]
	return -1;
 8001690:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001694:	4618      	mov	r0, r3
 8001696:	3708      	adds	r7, #8
 8001698:	46bd      	mov	sp, r7
 800169a:	bd80      	pop	{r7, pc}

0800169c <_exit>:

void _exit (int status)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b082      	sub	sp, #8
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80016a4:	f04f 31ff 	mov.w	r1, #4294967295
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ffe7 	bl	800167c <_kill>
	while (1) {}		/* Make sure we hang here */
 80016ae:	e7fe      	b.n	80016ae <_exit+0x12>

080016b0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	60f8      	str	r0, [r7, #12]
 80016b8:	60b9      	str	r1, [r7, #8]
 80016ba:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016bc:	2300      	movs	r3, #0
 80016be:	617b      	str	r3, [r7, #20]
 80016c0:	e00a      	b.n	80016d8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80016c2:	f3af 8000 	nop.w
 80016c6:	4601      	mov	r1, r0
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	1c5a      	adds	r2, r3, #1
 80016cc:	60ba      	str	r2, [r7, #8]
 80016ce:	b2ca      	uxtb	r2, r1
 80016d0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	3301      	adds	r3, #1
 80016d6:	617b      	str	r3, [r7, #20]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	429a      	cmp	r2, r3
 80016de:	dbf0      	blt.n	80016c2 <_read+0x12>
	}

return len;
 80016e0:	687b      	ldr	r3, [r7, #4]
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3718      	adds	r7, #24
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}

080016ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016ea:	b580      	push	{r7, lr}
 80016ec:	b086      	sub	sp, #24
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	60f8      	str	r0, [r7, #12]
 80016f2:	60b9      	str	r1, [r7, #8]
 80016f4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016f6:	2300      	movs	r3, #0
 80016f8:	617b      	str	r3, [r7, #20]
 80016fa:	e009      	b.n	8001710 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80016fc:	68bb      	ldr	r3, [r7, #8]
 80016fe:	1c5a      	adds	r2, r3, #1
 8001700:	60ba      	str	r2, [r7, #8]
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4618      	mov	r0, r3
 8001706:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	3301      	adds	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
 8001710:	697a      	ldr	r2, [r7, #20]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	429a      	cmp	r2, r3
 8001716:	dbf1      	blt.n	80016fc <_write+0x12>
	}
	return len;
 8001718:	687b      	ldr	r3, [r7, #4]
}
 800171a:	4618      	mov	r0, r3
 800171c:	3718      	adds	r7, #24
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}

08001722 <_close>:

int _close(int file)
{
 8001722:	b480      	push	{r7}
 8001724:	b083      	sub	sp, #12
 8001726:	af00      	add	r7, sp, #0
 8001728:	6078      	str	r0, [r7, #4]
	return -1;
 800172a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800172e:	4618      	mov	r0, r3
 8001730:	370c      	adds	r7, #12
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr

0800173a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800173a:	b480      	push	{r7}
 800173c:	b083      	sub	sp, #12
 800173e:	af00      	add	r7, sp, #0
 8001740:	6078      	str	r0, [r7, #4]
 8001742:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001744:	683b      	ldr	r3, [r7, #0]
 8001746:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800174a:	605a      	str	r2, [r3, #4]
	return 0;
 800174c:	2300      	movs	r3, #0
}
 800174e:	4618      	mov	r0, r3
 8001750:	370c      	adds	r7, #12
 8001752:	46bd      	mov	sp, r7
 8001754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001758:	4770      	bx	lr

0800175a <_isatty>:

int _isatty(int file)
{
 800175a:	b480      	push	{r7}
 800175c:	b083      	sub	sp, #12
 800175e:	af00      	add	r7, sp, #0
 8001760:	6078      	str	r0, [r7, #4]
	return 1;
 8001762:	2301      	movs	r3, #1
}
 8001764:	4618      	mov	r0, r3
 8001766:	370c      	adds	r7, #12
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001770:	b480      	push	{r7}
 8001772:	b085      	sub	sp, #20
 8001774:	af00      	add	r7, sp, #0
 8001776:	60f8      	str	r0, [r7, #12]
 8001778:	60b9      	str	r1, [r7, #8]
 800177a:	607a      	str	r2, [r7, #4]
	return 0;
 800177c:	2300      	movs	r3, #0
}
 800177e:	4618      	mov	r0, r3
 8001780:	3714      	adds	r7, #20
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
	...

0800178c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b086      	sub	sp, #24
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001794:	4a14      	ldr	r2, [pc, #80]	; (80017e8 <_sbrk+0x5c>)
 8001796:	4b15      	ldr	r3, [pc, #84]	; (80017ec <_sbrk+0x60>)
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017a0:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <_sbrk+0x64>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d102      	bne.n	80017ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <_sbrk+0x64>)
 80017aa:	4a12      	ldr	r2, [pc, #72]	; (80017f4 <_sbrk+0x68>)
 80017ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ae:	4b10      	ldr	r3, [pc, #64]	; (80017f0 <_sbrk+0x64>)
 80017b0:	681a      	ldr	r2, [r3, #0]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	4413      	add	r3, r2
 80017b6:	693a      	ldr	r2, [r7, #16]
 80017b8:	429a      	cmp	r2, r3
 80017ba:	d207      	bcs.n	80017cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017bc:	f006 fb0c 	bl	8007dd8 <__errno>
 80017c0:	4603      	mov	r3, r0
 80017c2:	220c      	movs	r2, #12
 80017c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017c6:	f04f 33ff 	mov.w	r3, #4294967295
 80017ca:	e009      	b.n	80017e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <_sbrk+0x64>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017d2:	4b07      	ldr	r3, [pc, #28]	; (80017f0 <_sbrk+0x64>)
 80017d4:	681a      	ldr	r2, [r3, #0]
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4413      	add	r3, r2
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <_sbrk+0x64>)
 80017dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017de:	68fb      	ldr	r3, [r7, #12]
}
 80017e0:	4618      	mov	r0, r3
 80017e2:	3718      	adds	r7, #24
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20080000 	.word	0x20080000
 80017ec:	00000400 	.word	0x00000400
 80017f0:	2000031c 	.word	0x2000031c
 80017f4:	200004a0 	.word	0x200004a0

080017f8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017f8:	b480      	push	{r7}
 80017fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017fc:	4b15      	ldr	r3, [pc, #84]	; (8001854 <SystemInit+0x5c>)
 80017fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001802:	4a14      	ldr	r2, [pc, #80]	; (8001854 <SystemInit+0x5c>)
 8001804:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001808:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800180c:	4b12      	ldr	r3, [pc, #72]	; (8001858 <SystemInit+0x60>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a11      	ldr	r2, [pc, #68]	; (8001858 <SystemInit+0x60>)
 8001812:	f043 0301 	orr.w	r3, r3, #1
 8001816:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <SystemInit+0x60>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800181e:	4b0e      	ldr	r3, [pc, #56]	; (8001858 <SystemInit+0x60>)
 8001820:	681a      	ldr	r2, [r3, #0]
 8001822:	490d      	ldr	r1, [pc, #52]	; (8001858 <SystemInit+0x60>)
 8001824:	4b0d      	ldr	r3, [pc, #52]	; (800185c <SystemInit+0x64>)
 8001826:	4013      	ands	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <SystemInit+0x60>)
 800182c:	4a0c      	ldr	r2, [pc, #48]	; (8001860 <SystemInit+0x68>)
 800182e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001830:	4b09      	ldr	r3, [pc, #36]	; (8001858 <SystemInit+0x60>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a08      	ldr	r2, [pc, #32]	; (8001858 <SystemInit+0x60>)
 8001836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800183a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800183c:	4b06      	ldr	r3, [pc, #24]	; (8001858 <SystemInit+0x60>)
 800183e:	2200      	movs	r2, #0
 8001840:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <SystemInit+0x5c>)
 8001844:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001848:	609a      	str	r2, [r3, #8]
#endif
}
 800184a:	bf00      	nop
 800184c:	46bd      	mov	sp, r7
 800184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001852:	4770      	bx	lr
 8001854:	e000ed00 	.word	0xe000ed00
 8001858:	40023800 	.word	0x40023800
 800185c:	fef6ffff 	.word	0xfef6ffff
 8001860:	24003010 	.word	0x24003010

08001864 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim8;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b088      	sub	sp, #32
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0310 	add.w	r3, r7, #16
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	1d3b      	adds	r3, r7, #4
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001882:	4b20      	ldr	r3, [pc, #128]	; (8001904 <MX_TIM1_Init+0xa0>)
 8001884:	4a20      	ldr	r2, [pc, #128]	; (8001908 <MX_TIM1_Init+0xa4>)
 8001886:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 10000-1;
 8001888:	4b1e      	ldr	r3, [pc, #120]	; (8001904 <MX_TIM1_Init+0xa0>)
 800188a:	f242 720f 	movw	r2, #9999	; 0x270f
 800188e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001890:	4b1c      	ldr	r3, [pc, #112]	; (8001904 <MX_TIM1_Init+0xa0>)
 8001892:	2200      	movs	r2, #0
 8001894:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0;
 8001896:	4b1b      	ldr	r3, [pc, #108]	; (8001904 <MX_TIM1_Init+0xa0>)
 8001898:	2200      	movs	r2, #0
 800189a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 800189c:	4b19      	ldr	r3, [pc, #100]	; (8001904 <MX_TIM1_Init+0xa0>)
 800189e:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018a2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80018a4:	4b17      	ldr	r3, [pc, #92]	; (8001904 <MX_TIM1_Init+0xa0>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018aa:	4b16      	ldr	r3, [pc, #88]	; (8001904 <MX_TIM1_Init+0xa0>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80018b0:	4814      	ldr	r0, [pc, #80]	; (8001904 <MX_TIM1_Init+0xa0>)
 80018b2:	f004 fc2f 	bl	8006114 <HAL_TIM_Base_Init>
 80018b6:	4603      	mov	r3, r0
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d001      	beq.n	80018c0 <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 80018bc:	f7ff fde2 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80018c6:	f107 0310 	add.w	r3, r7, #16
 80018ca:	4619      	mov	r1, r3
 80018cc:	480d      	ldr	r0, [pc, #52]	; (8001904 <MX_TIM1_Init+0xa0>)
 80018ce:	f005 f873 	bl	80069b8 <HAL_TIM_ConfigClockSource>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80018d8:	f7ff fdd4 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018dc:	2300      	movs	r3, #0
 80018de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80018e0:	2300      	movs	r3, #0
 80018e2:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018e4:	2300      	movs	r3, #0
 80018e6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	4619      	mov	r1, r3
 80018ec:	4805      	ldr	r0, [pc, #20]	; (8001904 <MX_TIM1_Init+0xa0>)
 80018ee:	f005 fd19 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 80018f2:	4603      	mov	r3, r0
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d001      	beq.n	80018fc <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 80018f8:	f7ff fdc4 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80018fc:	bf00      	nop
 80018fe:	3720      	adds	r7, #32
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000320 	.word	0x20000320
 8001908:	40010000 	.word	0x40010000

0800190c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08a      	sub	sp, #40	; 0x28
 8001910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191e:	463b      	mov	r3, r7
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
 800192c:	615a      	str	r2, [r3, #20]
 800192e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001930:	4b22      	ldr	r3, [pc, #136]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001932:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001936:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99-1;
 8001938:	4b20      	ldr	r3, [pc, #128]	; (80019bc <MX_TIM2_Init+0xb0>)
 800193a:	2262      	movs	r2, #98	; 0x62
 800193c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800193e:	4b1f      	ldr	r3, [pc, #124]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001940:	2200      	movs	r2, #0
 8001942:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 8001944:	4b1d      	ldr	r3, [pc, #116]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001946:	f242 720f 	movw	r2, #9999	; 0x270f
 800194a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800194c:	4b1b      	ldr	r3, [pc, #108]	; (80019bc <MX_TIM2_Init+0xb0>)
 800194e:	2200      	movs	r2, #0
 8001950:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001952:	4b1a      	ldr	r3, [pc, #104]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001954:	2200      	movs	r2, #0
 8001956:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001958:	4818      	ldr	r0, [pc, #96]	; (80019bc <MX_TIM2_Init+0xb0>)
 800195a:	f004 fcab 	bl	80062b4 <HAL_TIM_PWM_Init>
 800195e:	4603      	mov	r3, r0
 8001960:	2b00      	cmp	r3, #0
 8001962:	d001      	beq.n	8001968 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 8001964:	f7ff fd8e 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001968:	2300      	movs	r3, #0
 800196a:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001970:	f107 031c 	add.w	r3, r7, #28
 8001974:	4619      	mov	r1, r3
 8001976:	4811      	ldr	r0, [pc, #68]	; (80019bc <MX_TIM2_Init+0xb0>)
 8001978:	f005 fcd4 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 8001982:	f7ff fd7f 	bl	8001484 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001986:	2360      	movs	r3, #96	; 0x60
 8001988:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 800198a:	f640 13c3 	movw	r3, #2499	; 0x9c3
 800198e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001990:	2300      	movs	r3, #0
 8001992:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001994:	2300      	movs	r3, #0
 8001996:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001998:	463b      	mov	r3, r7
 800199a:	220c      	movs	r2, #12
 800199c:	4619      	mov	r1, r3
 800199e:	4807      	ldr	r0, [pc, #28]	; (80019bc <MX_TIM2_Init+0xb0>)
 80019a0:	f004 fefa 	bl	8006798 <HAL_TIM_PWM_ConfigChannel>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM2_Init+0xa2>
  {
    Error_Handler();
 80019aa:	f7ff fd6b 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80019ae:	4803      	ldr	r0, [pc, #12]	; (80019bc <MX_TIM2_Init+0xb0>)
 80019b0:	f000 f8b2 	bl	8001b18 <HAL_TIM_MspPostInit>

}
 80019b4:	bf00      	nop
 80019b6:	3728      	adds	r7, #40	; 0x28
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	2000036c 	.word	0x2000036c

080019c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	b088      	sub	sp, #32
 80019c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80019c6:	f107 0310 	add.w	r3, r7, #16
 80019ca:	2200      	movs	r2, #0
 80019cc:	601a      	str	r2, [r3, #0]
 80019ce:	605a      	str	r2, [r3, #4]
 80019d0:	609a      	str	r2, [r3, #8]
 80019d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019d4:	1d3b      	adds	r3, r7, #4
 80019d6:	2200      	movs	r2, #0
 80019d8:	601a      	str	r2, [r3, #0]
 80019da:	605a      	str	r2, [r3, #4]
 80019dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80019de:	4b20      	ldr	r3, [pc, #128]	; (8001a60 <MX_TIM8_Init+0xa0>)
 80019e0:	4a20      	ldr	r2, [pc, #128]	; (8001a64 <MX_TIM8_Init+0xa4>)
 80019e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 20000-1;
 80019e4:	4b1e      	ldr	r3, [pc, #120]	; (8001a60 <MX_TIM8_Init+0xa0>)
 80019e6:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80019ea:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ec:	4b1c      	ldr	r3, [pc, #112]	; (8001a60 <MX_TIM8_Init+0xa0>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 10000-1;
 80019f2:	4b1b      	ldr	r3, [pc, #108]	; (8001a60 <MX_TIM8_Init+0xa0>)
 80019f4:	f242 720f 	movw	r2, #9999	; 0x270f
 80019f8:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019fa:	4b19      	ldr	r3, [pc, #100]	; (8001a60 <MX_TIM8_Init+0xa0>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a00:	4b17      	ldr	r3, [pc, #92]	; (8001a60 <MX_TIM8_Init+0xa0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a06:	4b16      	ldr	r3, [pc, #88]	; (8001a60 <MX_TIM8_Init+0xa0>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a0c:	4814      	ldr	r0, [pc, #80]	; (8001a60 <MX_TIM8_Init+0xa0>)
 8001a0e:	f004 fb81 	bl	8006114 <HAL_TIM_Base_Init>
 8001a12:	4603      	mov	r3, r0
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_TIM8_Init+0x5c>
  {
    Error_Handler();
 8001a18:	f7ff fd34 	bl	8001484 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a1c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a20:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001a22:	f107 0310 	add.w	r3, r7, #16
 8001a26:	4619      	mov	r1, r3
 8001a28:	480d      	ldr	r0, [pc, #52]	; (8001a60 <MX_TIM8_Init+0xa0>)
 8001a2a:	f004 ffc5 	bl	80069b8 <HAL_TIM_ConfigClockSource>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d001      	beq.n	8001a38 <MX_TIM8_Init+0x78>
  {
    Error_Handler();
 8001a34:	f7ff fd26 	bl	8001484 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a40:	2300      	movs	r3, #0
 8001a42:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001a44:	1d3b      	adds	r3, r7, #4
 8001a46:	4619      	mov	r1, r3
 8001a48:	4805      	ldr	r0, [pc, #20]	; (8001a60 <MX_TIM8_Init+0xa0>)
 8001a4a:	f005 fc6b 	bl	8007324 <HAL_TIMEx_MasterConfigSynchronization>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d001      	beq.n	8001a58 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001a54:	f7ff fd16 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001a58:	bf00      	nop
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	200003b8 	.word	0x200003b8
 8001a64:	40010400 	.word	0x40010400

08001a68 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b084      	sub	sp, #16
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a16      	ldr	r2, [pc, #88]	; (8001ad0 <HAL_TIM_Base_MspInit+0x68>)
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d10c      	bne.n	8001a94 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a7a:	4b16      	ldr	r3, [pc, #88]	; (8001ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4a15      	ldr	r2, [pc, #84]	; (8001ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a80:	f043 0301 	orr.w	r3, r3, #1
 8001a84:	6453      	str	r3, [r2, #68]	; 0x44
 8001a86:	4b13      	ldr	r3, [pc, #76]	; (8001ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8001a88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	60fb      	str	r3, [r7, #12]
 8001a90:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 8001a92:	e018      	b.n	8001ac6 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM8)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	4a0f      	ldr	r2, [pc, #60]	; (8001ad8 <HAL_TIM_Base_MspInit+0x70>)
 8001a9a:	4293      	cmp	r3, r2
 8001a9c:	d113      	bne.n	8001ac6 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a9e:	4b0d      	ldr	r3, [pc, #52]	; (8001ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a0c      	ldr	r2, [pc, #48]	; (8001ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8001aa4:	f043 0302 	orr.w	r3, r3, #2
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b0a      	ldr	r3, [pc, #40]	; (8001ad4 <HAL_TIM_Base_MspInit+0x6c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f003 0302 	and.w	r3, r3, #2
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 2, 0);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	2102      	movs	r1, #2
 8001aba:	202c      	movs	r0, #44	; 0x2c
 8001abc:	f001 ff23 	bl	8003906 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001ac0:	202c      	movs	r0, #44	; 0x2c
 8001ac2:	f001 ff3c 	bl	800393e <HAL_NVIC_EnableIRQ>
}
 8001ac6:	bf00      	nop
 8001ac8:	3710      	adds	r7, #16
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	40010000 	.word	0x40010000
 8001ad4:	40023800 	.word	0x40023800
 8001ad8:	40010400 	.word	0x40010400

08001adc <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b085      	sub	sp, #20
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001aec:	d10b      	bne.n	8001b06 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aee:	4b09      	ldr	r3, [pc, #36]	; (8001b14 <HAL_TIM_PWM_MspInit+0x38>)
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	4a08      	ldr	r2, [pc, #32]	; (8001b14 <HAL_TIM_PWM_MspInit+0x38>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	6413      	str	r3, [r2, #64]	; 0x40
 8001afa:	4b06      	ldr	r3, [pc, #24]	; (8001b14 <HAL_TIM_PWM_MspInit+0x38>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	60fb      	str	r3, [r7, #12]
 8001b04:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b06:	bf00      	nop
 8001b08:	3714      	adds	r7, #20
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	40023800 	.word	0x40023800

08001b18 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af00      	add	r7, sp, #0
 8001b1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b20:	f107 030c 	add.w	r3, r7, #12
 8001b24:	2200      	movs	r2, #0
 8001b26:	601a      	str	r2, [r3, #0]
 8001b28:	605a      	str	r2, [r3, #4]
 8001b2a:	609a      	str	r2, [r3, #8]
 8001b2c:	60da      	str	r2, [r3, #12]
 8001b2e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b38:	d11b      	bne.n	8001b72 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b3a:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <HAL_TIM_MspPostInit+0x64>)
 8001b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b3e:	4a0f      	ldr	r2, [pc, #60]	; (8001b7c <HAL_TIM_MspPostInit+0x64>)
 8001b40:	f043 0301 	orr.w	r3, r3, #1
 8001b44:	6313      	str	r3, [r2, #48]	; 0x30
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <HAL_TIM_MspPostInit+0x64>)
 8001b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b4a:	f003 0301 	and.w	r3, r3, #1
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001b52:	2308      	movs	r3, #8
 8001b54:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b56:	2302      	movs	r3, #2
 8001b58:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b5e:	2303      	movs	r3, #3
 8001b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001b62:	2301      	movs	r3, #1
 8001b64:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b66:	f107 030c 	add.w	r3, r7, #12
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	4804      	ldr	r0, [pc, #16]	; (8001b80 <HAL_TIM_MspPostInit+0x68>)
 8001b6e:	f001 ff01 	bl	8003974 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001b72:	bf00      	nop
 8001b74:	3720      	adds	r7, #32
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	40023800 	.word	0x40023800
 8001b80:	40020000 	.word	0x40020000

08001b84 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b88:	4b14      	ldr	r3, [pc, #80]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b8a:	4a15      	ldr	r2, [pc, #84]	; (8001be0 <MX_USART3_UART_Init+0x5c>)
 8001b8c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b8e:	4b13      	ldr	r3, [pc, #76]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b90:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b94:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b96:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b9c:	4b0f      	ldr	r3, [pc, #60]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001b9e:	2200      	movs	r2, #0
 8001ba0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001baa:	220c      	movs	r2, #12
 8001bac:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_USART3_UART_Init+0x58>)
 8001bc8:	f005 fc58 	bl	800747c <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001bd2:	f7ff fc57 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	20000404 	.word	0x20000404
 8001be0:	40004800 	.word	0x40004800

08001be4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b08a      	sub	sp, #40	; 0x28
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bec:	f107 0314 	add.w	r3, r7, #20
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	601a      	str	r2, [r3, #0]
 8001bf4:	605a      	str	r2, [r3, #4]
 8001bf6:	609a      	str	r2, [r3, #8]
 8001bf8:	60da      	str	r2, [r3, #12]
 8001bfa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a17      	ldr	r2, [pc, #92]	; (8001c60 <HAL_UART_MspInit+0x7c>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d128      	bne.n	8001c58 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c06:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c0a:	4a16      	ldr	r2, [pc, #88]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c10:	6413      	str	r3, [r2, #64]	; 0x40
 8001c12:	4b14      	ldr	r3, [pc, #80]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c1a:	613b      	str	r3, [r7, #16]
 8001c1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1e:	4b11      	ldr	r3, [pc, #68]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	4a10      	ldr	r2, [pc, #64]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c24:	f043 0308 	orr.w	r3, r3, #8
 8001c28:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2a:	4b0e      	ldr	r3, [pc, #56]	; (8001c64 <HAL_UART_MspInit+0x80>)
 8001c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2e:	f003 0308 	and.w	r3, r3, #8
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001c36:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001c3a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c40:	2300      	movs	r3, #0
 8001c42:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c44:	2303      	movs	r3, #3
 8001c46:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c48:	2307      	movs	r3, #7
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	4619      	mov	r1, r3
 8001c52:	4805      	ldr	r0, [pc, #20]	; (8001c68 <HAL_UART_MspInit+0x84>)
 8001c54:	f001 fe8e 	bl	8003974 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001c58:	bf00      	nop
 8001c5a:	3728      	adds	r7, #40	; 0x28
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	40004800 	.word	0x40004800
 8001c64:	40023800 	.word	0x40023800
 8001c68:	40020c00 	.word	0x40020c00

08001c6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001c6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ca4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001c70:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001c72:	e003      	b.n	8001c7c <LoopCopyDataInit>

08001c74 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001c74:	4b0c      	ldr	r3, [pc, #48]	; (8001ca8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001c76:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001c78:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001c7a:	3104      	adds	r1, #4

08001c7c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001c7c:	480b      	ldr	r0, [pc, #44]	; (8001cac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001c7e:	4b0c      	ldr	r3, [pc, #48]	; (8001cb0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001c80:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001c82:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001c84:	d3f6      	bcc.n	8001c74 <CopyDataInit>
  ldr  r2, =_sbss
 8001c86:	4a0b      	ldr	r2, [pc, #44]	; (8001cb4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001c88:	e002      	b.n	8001c90 <LoopFillZerobss>

08001c8a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001c8a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001c8c:	f842 3b04 	str.w	r3, [r2], #4

08001c90 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001c92:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001c94:	d3f9      	bcc.n	8001c8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c96:	f7ff fdaf 	bl	80017f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001c9a:	f006 f8a3 	bl	8007de4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c9e:	f7ff f80b 	bl	8000cb8 <main>
  bx  lr    
 8001ca2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001ca4:	20080000 	.word	0x20080000
  ldr  r3, =_sidata
 8001ca8:	08010614 	.word	0x08010614
  ldr  r0, =_sdata
 8001cac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8001cb0:	200001e0 	.word	0x200001e0
  ldr  r2, =_sbss
 8001cb4:	200001e0 	.word	0x200001e0
  ldr  r3, = _ebss
 8001cb8:	2000049c 	.word	0x2000049c

08001cbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001cbc:	e7fe      	b.n	8001cbc <ADC_IRQHandler>

08001cbe <ILI9341_Draw_Filled_Circle>:
    }
}

/*Draw filled circle at X,Y location with specified radius and colour. X and Y represent circles center */
void ILI9341_Draw_Filled_Circle(uint16_t X, uint16_t Y, uint16_t Radius, uint16_t Colour)
{
 8001cbe:	b590      	push	{r4, r7, lr}
 8001cc0:	b08b      	sub	sp, #44	; 0x2c
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	4604      	mov	r4, r0
 8001cc6:	4608      	mov	r0, r1
 8001cc8:	4611      	mov	r1, r2
 8001cca:	461a      	mov	r2, r3
 8001ccc:	4623      	mov	r3, r4
 8001cce:	80fb      	strh	r3, [r7, #6]
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	80bb      	strh	r3, [r7, #4]
 8001cd4:	460b      	mov	r3, r1
 8001cd6:	807b      	strh	r3, [r7, #2]
 8001cd8:	4613      	mov	r3, r2
 8001cda:	803b      	strh	r3, [r7, #0]
	
		int x = Radius;
 8001cdc:	887b      	ldrh	r3, [r7, #2]
 8001cde:	627b      	str	r3, [r7, #36]	; 0x24
    int y = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	623b      	str	r3, [r7, #32]
    int xChange = 1 - (Radius << 1);
 8001ce4:	887b      	ldrh	r3, [r7, #2]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	f1c3 0301 	rsb	r3, r3, #1
 8001cec:	61fb      	str	r3, [r7, #28]
    int yChange = 0;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	61bb      	str	r3, [r7, #24]
    int radiusError = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	617b      	str	r3, [r7, #20]

    while (x >= y)
 8001cf6:	e061      	b.n	8001dbc <ILI9341_Draw_Filled_Circle+0xfe>
    {
        for (int i = X - x; i <= X + x; i++)
 8001cf8:	88fa      	ldrh	r2, [r7, #6]
 8001cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	613b      	str	r3, [r7, #16]
 8001d00:	e018      	b.n	8001d34 <ILI9341_Draw_Filled_Circle+0x76>
        {
            ILI9341_Draw_Pixel(i, Y + y,Colour);
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	b298      	uxth	r0, r3
 8001d06:	6a3b      	ldr	r3, [r7, #32]
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	88bb      	ldrh	r3, [r7, #4]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	883a      	ldrh	r2, [r7, #0]
 8001d12:	4619      	mov	r1, r3
 8001d14:	f000 fe32 	bl	800297c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - y,Colour);
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	b298      	uxth	r0, r3
 8001d1c:	6a3b      	ldr	r3, [r7, #32]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	88ba      	ldrh	r2, [r7, #4]
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	b29b      	uxth	r3, r3
 8001d26:	883a      	ldrh	r2, [r7, #0]
 8001d28:	4619      	mov	r1, r3
 8001d2a:	f000 fe27 	bl	800297c <ILI9341_Draw_Pixel>
        for (int i = X - x; i <= X + x; i++)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	3301      	adds	r3, #1
 8001d32:	613b      	str	r3, [r7, #16]
 8001d34:	88fa      	ldrh	r2, [r7, #6]
 8001d36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d38:	4413      	add	r3, r2
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	dde0      	ble.n	8001d02 <ILI9341_Draw_Filled_Circle+0x44>
        }
        for (int i = X - y; i <= X + y; i++)
 8001d40:	88fa      	ldrh	r2, [r7, #6]
 8001d42:	6a3b      	ldr	r3, [r7, #32]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	e018      	b.n	8001d7c <ILI9341_Draw_Filled_Circle+0xbe>
        {
            ILI9341_Draw_Pixel(i, Y + x,Colour);
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	b298      	uxth	r0, r3
 8001d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d50:	b29a      	uxth	r2, r3
 8001d52:	88bb      	ldrh	r3, [r7, #4]
 8001d54:	4413      	add	r3, r2
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	883a      	ldrh	r2, [r7, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	f000 fe0e 	bl	800297c <ILI9341_Draw_Pixel>
            ILI9341_Draw_Pixel(i, Y - x,Colour);
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	b298      	uxth	r0, r3
 8001d64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d66:	b29b      	uxth	r3, r3
 8001d68:	88ba      	ldrh	r2, [r7, #4]
 8001d6a:	1ad3      	subs	r3, r2, r3
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	883a      	ldrh	r2, [r7, #0]
 8001d70:	4619      	mov	r1, r3
 8001d72:	f000 fe03 	bl	800297c <ILI9341_Draw_Pixel>
        for (int i = X - y; i <= X + y; i++)
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	3301      	adds	r3, #1
 8001d7a:	60fb      	str	r3, [r7, #12]
 8001d7c:	88fa      	ldrh	r2, [r7, #6]
 8001d7e:	6a3b      	ldr	r3, [r7, #32]
 8001d80:	4413      	add	r3, r2
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	dde0      	ble.n	8001d4a <ILI9341_Draw_Filled_Circle+0x8c>
        }

        y++;
 8001d88:	6a3b      	ldr	r3, [r7, #32]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	623b      	str	r3, [r7, #32]
        radiusError += yChange;
 8001d8e:	697a      	ldr	r2, [r7, #20]
 8001d90:	69bb      	ldr	r3, [r7, #24]
 8001d92:	4413      	add	r3, r2
 8001d94:	617b      	str	r3, [r7, #20]
        yChange += 2;
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	3302      	adds	r3, #2
 8001d9a:	61bb      	str	r3, [r7, #24]
        if (((radiusError << 1) + xChange) > 0)
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	005a      	lsls	r2, r3, #1
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	4413      	add	r3, r2
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	dd09      	ble.n	8001dbc <ILI9341_Draw_Filled_Circle+0xfe>
        {
            x--;
 8001da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001daa:	3b01      	subs	r3, #1
 8001dac:	627b      	str	r3, [r7, #36]	; 0x24
            radiusError += xChange;
 8001dae:	697a      	ldr	r2, [r7, #20]
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
            xChange += 2;
 8001db6:	69fb      	ldr	r3, [r7, #28]
 8001db8:	3302      	adds	r3, #2
 8001dba:	61fb      	str	r3, [r7, #28]
    while (x >= y)
 8001dbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dbe:	6a3b      	ldr	r3, [r7, #32]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	da99      	bge.n	8001cf8 <ILI9341_Draw_Filled_Circle+0x3a>
        }
    }
		//Really slow implementation, will require future overhaul
		//TODO:	https://stackoverflow.com/questions/1201200/fast-algorithm-for-drawing-filled-circles	
}
 8001dc4:	bf00      	nop
 8001dc6:	bf00      	nop
 8001dc8:	372c      	adds	r7, #44	; 0x2c
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd90      	pop	{r4, r7, pc}

08001dce <ILI9341_Draw_Filled_Rectangle_Coord>:
	
}

/*Draw a filled rectangle between positions X0,Y0 and X1,Y1 with specified colour*/
void ILI9341_Draw_Filled_Rectangle_Coord(uint16_t X0, uint16_t Y0, uint16_t X1, uint16_t Y1, uint16_t Colour)
{
 8001dce:	b590      	push	{r4, r7, lr}
 8001dd0:	b089      	sub	sp, #36	; 0x24
 8001dd2:	af02      	add	r7, sp, #8
 8001dd4:	4604      	mov	r4, r0
 8001dd6:	4608      	mov	r0, r1
 8001dd8:	4611      	mov	r1, r2
 8001dda:	461a      	mov	r2, r3
 8001ddc:	4623      	mov	r3, r4
 8001dde:	80fb      	strh	r3, [r7, #6]
 8001de0:	4603      	mov	r3, r0
 8001de2:	80bb      	strh	r3, [r7, #4]
 8001de4:	460b      	mov	r3, r1
 8001de6:	807b      	strh	r3, [r7, #2]
 8001de8:	4613      	mov	r3, r2
 8001dea:	803b      	strh	r3, [r7, #0]
	uint16_t 	X_length = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	82fb      	strh	r3, [r7, #22]
	uint16_t 	Y_length = 0;
 8001df0:	2300      	movs	r3, #0
 8001df2:	82bb      	strh	r3, [r7, #20]
	uint8_t		Negative_X = 0;
 8001df4:	2300      	movs	r3, #0
 8001df6:	74fb      	strb	r3, [r7, #19]
	uint8_t 	Negative_Y = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	74bb      	strb	r3, [r7, #18]
	int32_t 	Calc_Negative = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60bb      	str	r3, [r7, #8]
	
	uint16_t X0_true = 0;
 8001e00:	2300      	movs	r3, #0
 8001e02:	823b      	strh	r3, [r7, #16]
	uint16_t Y0_true = 0;
 8001e04:	2300      	movs	r3, #0
 8001e06:	81fb      	strh	r3, [r7, #14]
	
	Calc_Negative = X1 - X0;
 8001e08:	887a      	ldrh	r2, [r7, #2]
 8001e0a:	88fb      	ldrh	r3, [r7, #6]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_X = 1;
 8001e10:	68bb      	ldr	r3, [r7, #8]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	da01      	bge.n	8001e1a <ILI9341_Draw_Filled_Rectangle_Coord+0x4c>
 8001e16:	2301      	movs	r3, #1
 8001e18:	74fb      	strb	r3, [r7, #19]
	Calc_Negative = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	60bb      	str	r3, [r7, #8]
	
	Calc_Negative = Y1 - Y0;
 8001e1e:	883a      	ldrh	r2, [r7, #0]
 8001e20:	88bb      	ldrh	r3, [r7, #4]
 8001e22:	1ad3      	subs	r3, r2, r3
 8001e24:	60bb      	str	r3, [r7, #8]
	if(Calc_Negative < 0) Negative_Y = 1;
 8001e26:	68bb      	ldr	r3, [r7, #8]
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	da01      	bge.n	8001e30 <ILI9341_Draw_Filled_Rectangle_Coord+0x62>
 8001e2c:	2301      	movs	r3, #1
 8001e2e:	74bb      	strb	r3, [r7, #18]
	
	
	//DRAW HORIZONTAL!
	if(!Negative_X)
 8001e30:	7cfb      	ldrb	r3, [r7, #19]
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <ILI9341_Draw_Filled_Rectangle_Coord+0x76>
	{
		X_length = X1 - X0;
 8001e36:	887a      	ldrh	r2, [r7, #2]
 8001e38:	88fb      	ldrh	r3, [r7, #6]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	82fb      	strh	r3, [r7, #22]
		X0_true = X0;
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	823b      	strh	r3, [r7, #16]
 8001e42:	e005      	b.n	8001e50 <ILI9341_Draw_Filled_Rectangle_Coord+0x82>
	}
	else
	{
		X_length = X0 - X1;
 8001e44:	88fa      	ldrh	r2, [r7, #6]
 8001e46:	887b      	ldrh	r3, [r7, #2]
 8001e48:	1ad3      	subs	r3, r2, r3
 8001e4a:	82fb      	strh	r3, [r7, #22]
		X0_true = X1;
 8001e4c:	887b      	ldrh	r3, [r7, #2]
 8001e4e:	823b      	strh	r3, [r7, #16]
	}
	
	//DRAW VERTICAL!
	if(!Negative_Y)
 8001e50:	7cbb      	ldrb	r3, [r7, #18]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d106      	bne.n	8001e64 <ILI9341_Draw_Filled_Rectangle_Coord+0x96>
	{
		Y_length = Y1 - Y0;
 8001e56:	883a      	ldrh	r2, [r7, #0]
 8001e58:	88bb      	ldrh	r3, [r7, #4]
 8001e5a:	1ad3      	subs	r3, r2, r3
 8001e5c:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y0;		
 8001e5e:	88bb      	ldrh	r3, [r7, #4]
 8001e60:	81fb      	strh	r3, [r7, #14]
 8001e62:	e005      	b.n	8001e70 <ILI9341_Draw_Filled_Rectangle_Coord+0xa2>
	}
	else
	{
		Y_length = Y0 - Y1;
 8001e64:	88ba      	ldrh	r2, [r7, #4]
 8001e66:	883b      	ldrh	r3, [r7, #0]
 8001e68:	1ad3      	subs	r3, r2, r3
 8001e6a:	82bb      	strh	r3, [r7, #20]
		Y0_true = Y1;	
 8001e6c:	883b      	ldrh	r3, [r7, #0]
 8001e6e:	81fb      	strh	r3, [r7, #14]
	}
	
	ILI9341_Draw_Rectangle(X0_true, Y0_true, X_length, Y_length, Colour);	
 8001e70:	8abc      	ldrh	r4, [r7, #20]
 8001e72:	8afa      	ldrh	r2, [r7, #22]
 8001e74:	89f9      	ldrh	r1, [r7, #14]
 8001e76:	8a38      	ldrh	r0, [r7, #16]
 8001e78:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	4623      	mov	r3, r4
 8001e7e:	f000 fe57 	bl	8002b30 <ILI9341_Draw_Rectangle>
}
 8001e82:	bf00      	nop
 8001e84:	371c      	adds	r7, #28
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd90      	pop	{r4, r7, pc}
	...

08001e8c <ILI9341_Draw_Char>:

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001e8c:	b590      	push	{r4, r7, lr}
 8001e8e:	b089      	sub	sp, #36	; 0x24
 8001e90:	af02      	add	r7, sp, #8
 8001e92:	4604      	mov	r4, r0
 8001e94:	4608      	mov	r0, r1
 8001e96:	4611      	mov	r1, r2
 8001e98:	461a      	mov	r2, r3
 8001e9a:	4623      	mov	r3, r4
 8001e9c:	71fb      	strb	r3, [r7, #7]
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	71bb      	strb	r3, [r7, #6]
 8001ea2:	460b      	mov	r3, r1
 8001ea4:	717b      	strb	r3, [r7, #5]
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001eaa:	79fb      	ldrb	r3, [r7, #7]
 8001eac:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001eae:	7dfb      	ldrb	r3, [r7, #23]
 8001eb0:	2b1f      	cmp	r3, #31
 8001eb2:	d802      	bhi.n	8001eba <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	71fb      	strb	r3, [r7, #7]
 8001eb8:	e002      	b.n	8001ec0 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	3b20      	subs	r3, #32
 8001ebe:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	753b      	strb	r3, [r7, #20]
 8001ec4:	e012      	b.n	8001eec <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001ec6:	7dfa      	ldrb	r2, [r7, #23]
 8001ec8:	7d38      	ldrb	r0, [r7, #20]
 8001eca:	7d39      	ldrb	r1, [r7, #20]
 8001ecc:	4c3b      	ldr	r4, [pc, #236]	; (8001fbc <ILI9341_Draw_Char+0x130>)
 8001ece:	4613      	mov	r3, r2
 8001ed0:	005b      	lsls	r3, r3, #1
 8001ed2:	4413      	add	r3, r2
 8001ed4:	005b      	lsls	r3, r3, #1
 8001ed6:	4423      	add	r3, r4
 8001ed8:	4403      	add	r3, r0
 8001eda:	781a      	ldrb	r2, [r3, #0]
 8001edc:	f101 0318 	add.w	r3, r1, #24
 8001ee0:	443b      	add	r3, r7
 8001ee2:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001ee6:	7d3b      	ldrb	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	753b      	strb	r3, [r7, #20]
 8001eec:	7d3b      	ldrb	r3, [r7, #20]
 8001eee:	2b05      	cmp	r3, #5
 8001ef0:	d9e9      	bls.n	8001ec6 <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001ef2:	79bb      	ldrb	r3, [r7, #6]
 8001ef4:	b298      	uxth	r0, r3
 8001ef6:	797b      	ldrb	r3, [r7, #5]
 8001ef8:	b299      	uxth	r1, r3
 8001efa:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001efc:	461a      	mov	r2, r3
 8001efe:	0052      	lsls	r2, r2, #1
 8001f00:	4413      	add	r3, r2
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	b29a      	uxth	r2, r3
 8001f06:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	b29c      	uxth	r4, r3
 8001f0c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001f0e:	9300      	str	r3, [sp, #0]
 8001f10:	4623      	mov	r3, r4
 8001f12:	f000 fe0d 	bl	8002b30 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001f16:	2300      	movs	r3, #0
 8001f18:	757b      	strb	r3, [r7, #21]
 8001f1a:	e047      	b.n	8001fac <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	75bb      	strb	r3, [r7, #22]
 8001f20:	e03e      	b.n	8001fa0 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001f22:	7d7b      	ldrb	r3, [r7, #21]
 8001f24:	3318      	adds	r3, #24
 8001f26:	443b      	add	r3, r7
 8001f28:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	7dbb      	ldrb	r3, [r7, #22]
 8001f30:	fa42 f303 	asr.w	r3, r2, r3
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d02e      	beq.n	8001f9a <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001f3c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d110      	bne.n	8001f64 <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001f42:	79bb      	ldrb	r3, [r7, #6]
 8001f44:	b29a      	uxth	r2, r3
 8001f46:	7d7b      	ldrb	r3, [r7, #21]
 8001f48:	b29b      	uxth	r3, r3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b298      	uxth	r0, r3
 8001f4e:	797b      	ldrb	r3, [r7, #5]
 8001f50:	b29a      	uxth	r2, r3
 8001f52:	7dbb      	ldrb	r3, [r7, #22]
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	4413      	add	r3, r2
 8001f58:	b29b      	uxth	r3, r3
 8001f5a:	887a      	ldrh	r2, [r7, #2]
 8001f5c:	4619      	mov	r1, r3
 8001f5e:	f000 fd0d 	bl	800297c <ILI9341_Draw_Pixel>
 8001f62:	e01a      	b.n	8001f9a <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	b29a      	uxth	r2, r3
 8001f68:	7d7b      	ldrb	r3, [r7, #21]
 8001f6a:	b29b      	uxth	r3, r3
 8001f6c:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f6e:	fb11 f303 	smulbb	r3, r1, r3
 8001f72:	b29b      	uxth	r3, r3
 8001f74:	4413      	add	r3, r2
 8001f76:	b298      	uxth	r0, r3
 8001f78:	797b      	ldrb	r3, [r7, #5]
 8001f7a:	b29a      	uxth	r2, r3
 8001f7c:	7dbb      	ldrb	r3, [r7, #22]
 8001f7e:	b29b      	uxth	r3, r3
 8001f80:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001f82:	fb11 f303 	smulbb	r3, r1, r3
 8001f86:	b29b      	uxth	r3, r3
 8001f88:	4413      	add	r3, r2
 8001f8a:	b299      	uxth	r1, r3
 8001f8c:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001f8e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001f90:	887b      	ldrh	r3, [r7, #2]
 8001f92:	9300      	str	r3, [sp, #0]
 8001f94:	4623      	mov	r3, r4
 8001f96:	f000 fdcb 	bl	8002b30 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001f9a:	7dbb      	ldrb	r3, [r7, #22]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	75bb      	strb	r3, [r7, #22]
 8001fa0:	7dbb      	ldrb	r3, [r7, #22]
 8001fa2:	2b07      	cmp	r3, #7
 8001fa4:	d9bd      	bls.n	8001f22 <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001fa6:	7d7b      	ldrb	r3, [r7, #21]
 8001fa8:	3301      	adds	r3, #1
 8001faa:	757b      	strb	r3, [r7, #21]
 8001fac:	7d7b      	ldrb	r3, [r7, #21]
 8001fae:	2b05      	cmp	r3, #5
 8001fb0:	d9b4      	bls.n	8001f1c <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001fb2:	bf00      	nop
 8001fb4:	bf00      	nop
 8001fb6:	371c      	adds	r7, #28
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd90      	pop	{r4, r7, pc}
 8001fbc:	0800ffe8 	.word	0x0800ffe8

08001fc0 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001fc0:	b590      	push	{r4, r7, lr}
 8001fc2:	b085      	sub	sp, #20
 8001fc4:	af02      	add	r7, sp, #8
 8001fc6:	6078      	str	r0, [r7, #4]
 8001fc8:	4608      	mov	r0, r1
 8001fca:	4611      	mov	r1, r2
 8001fcc:	461a      	mov	r2, r3
 8001fce:	4603      	mov	r3, r0
 8001fd0:	70fb      	strb	r3, [r7, #3]
 8001fd2:	460b      	mov	r3, r1
 8001fd4:	70bb      	strb	r3, [r7, #2]
 8001fd6:	4613      	mov	r3, r2
 8001fd8:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001fda:	e017      	b.n	800200c <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	1c5a      	adds	r2, r3, #1
 8001fe0:	607a      	str	r2, [r7, #4]
 8001fe2:	7818      	ldrb	r0, [r3, #0]
 8001fe4:	883c      	ldrh	r4, [r7, #0]
 8001fe6:	78ba      	ldrb	r2, [r7, #2]
 8001fe8:	78f9      	ldrb	r1, [r7, #3]
 8001fea:	8bbb      	ldrh	r3, [r7, #28]
 8001fec:	9301      	str	r3, [sp, #4]
 8001fee:	8b3b      	ldrh	r3, [r7, #24]
 8001ff0:	9300      	str	r3, [sp, #0]
 8001ff2:	4623      	mov	r3, r4
 8001ff4:	f7ff ff4a 	bl	8001e8c <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001ff8:	8b3b      	ldrh	r3, [r7, #24]
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	0052      	lsls	r2, r2, #1
 8002000:	4413      	add	r3, r2
 8002002:	005b      	lsls	r3, r3, #1
 8002004:	b2da      	uxtb	r2, r3
 8002006:	78fb      	ldrb	r3, [r7, #3]
 8002008:	4413      	add	r3, r2
 800200a:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d1e3      	bne.n	8001fdc <ILI9341_Draw_Text+0x1c>
    }
}
 8002014:	bf00      	nop
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	bd90      	pop	{r4, r7, pc}
	...

08002020 <ILI9341_Draw_Image>:

/*Draws a full screen picture from flash. Image converted from RGB .jpeg/other to C array using online converter*/
//USING CONVERTER: http://www.digole.com/tools/PicturetoC_Hex_converter.php
//65K colour (2Bytes / Pixel)
void ILI9341_Draw_Image(const char* Image_Array, uint8_t Orientation)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8002026:	af00      	add	r7, sp, #0
 8002028:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800202c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8002030:	6018      	str	r0, [r3, #0]
 8002032:	460a      	mov	r2, r1
 8002034:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002038:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 800203c:	701a      	strb	r2, [r3, #0]
	if(Orientation == SCREEN_HORIZONTAL_1)
 800203e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002042:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d15c      	bne.n	8002106 <ILI9341_Draw_Image+0xe6>
	{
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_1);
 800204c:	2001      	movs	r0, #1
 800204e:	f000 fa65 	bl	800251c <ILI9341_Set_Rotation>
		//ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
		ILI9341_Set_Address(10,60,99,179);
 8002052:	23b3      	movs	r3, #179	; 0xb3
 8002054:	2263      	movs	r2, #99	; 0x63
 8002056:	213c      	movs	r1, #60	; 0x3c
 8002058:	200a      	movs	r0, #10
 800205a:	f000 f9f5 	bl	8002448 <ILI9341_Set_Address>
			
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 800205e:	2201      	movs	r2, #1
 8002060:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002064:	48c3      	ldr	r0, [pc, #780]	; (8002374 <ILI9341_Draw_Image+0x354>)
 8002066:	f001 fe49 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800206a:	2200      	movs	r2, #0
 800206c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002070:	48c0      	ldr	r0, [pc, #768]	; (8002374 <ILI9341_Draw_Image+0x354>)
 8002072:	f001 fe43 	bl	8003cfc <HAL_GPIO_WritePin>
		
		unsigned char Temp_small_buffer[BURST_MAX_SIZE];
		uint32_t counter = 0;
 8002076:	2300      	movs	r3, #0
 8002078:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		//for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
		for(uint32_t i = 0; i < 89*119*2/BURST_MAX_SIZE; i++)
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8002082:	e035      	b.n	80020f0 <ILI9341_Draw_Image+0xd0>
		{			
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002084:	2300      	movs	r3, #0
 8002086:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 800208a:	e019      	b.n	80020c0 <ILI9341_Draw_Image+0xa0>
				{
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 800208c:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8002090:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8002094:	4413      	add	r3, r2
 8002096:	f507 720c 	add.w	r2, r7, #560	; 0x230
 800209a:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	7819      	ldrb	r1, [r3, #0]
 80020a4:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80020a8:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 80020ac:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020b0:	4413      	add	r3, r2
 80020b2:	460a      	mov	r2, r1
 80020b4:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80020b6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020ba:	3301      	adds	r3, #1
 80020bc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 80020c0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80020c4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020c8:	d3e0      	bcc.n	800208c <ILI9341_Draw_Image+0x6c>
				}						
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 80020ca:	f107 010c 	add.w	r1, r7, #12
 80020ce:	230a      	movs	r3, #10
 80020d0:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80020d4:	48a8      	ldr	r0, [pc, #672]	; (8002378 <ILI9341_Draw_Image+0x358>)
 80020d6:	f003 fd4e 	bl	8005b76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80020da:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80020de:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80020e2:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
		for(uint32_t i = 0; i < 89*119*2/BURST_MAX_SIZE; i++)
 80020e6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80020ea:	3301      	adds	r3, #1
 80020ec:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 80020f0:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80020f4:	2b29      	cmp	r3, #41	; 0x29
 80020f6:	d9c5      	bls.n	8002084 <ILI9341_Draw_Image+0x64>
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020f8:	2201      	movs	r2, #1
 80020fa:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020fe:	489d      	ldr	r0, [pc, #628]	; (8002374 <ILI9341_Draw_Image+0x354>)
 8002100:	f001 fdfc 	bl	8003cfc <HAL_GPIO_WritePin>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
				counter += BURST_MAX_SIZE;			
		}
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
	}
}
 8002104:	e130      	b.n	8002368 <ILI9341_Draw_Image+0x348>
	else if(Orientation == SCREEN_HORIZONTAL_2)
 8002106:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800210a:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 800210e:	781b      	ldrb	r3, [r3, #0]
 8002110:	2b03      	cmp	r3, #3
 8002112:	d15e      	bne.n	80021d2 <ILI9341_Draw_Image+0x1b2>
		ILI9341_Set_Rotation(SCREEN_HORIZONTAL_2);
 8002114:	2003      	movs	r0, #3
 8002116:	f000 fa01 	bl	800251c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_WIDTH,ILI9341_SCREEN_HEIGHT);
 800211a:	23f0      	movs	r3, #240	; 0xf0
 800211c:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002120:	2100      	movs	r1, #0
 8002122:	2000      	movs	r0, #0
 8002124:	f000 f990 	bl	8002448 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 8002128:	2201      	movs	r2, #1
 800212a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800212e:	4891      	ldr	r0, [pc, #580]	; (8002374 <ILI9341_Draw_Image+0x354>)
 8002130:	f001 fde4 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002134:	2200      	movs	r2, #0
 8002136:	f44f 7180 	mov.w	r1, #256	; 0x100
 800213a:	488e      	ldr	r0, [pc, #568]	; (8002374 <ILI9341_Draw_Image+0x354>)
 800213c:	f001 fdde 	bl	8003cfc <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 8002140:	2300      	movs	r3, #0
 8002142:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002146:	2300      	movs	r3, #0
 8002148:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 800214c:	e035      	b.n	80021ba <ILI9341_Draw_Image+0x19a>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800214e:	2300      	movs	r3, #0
 8002150:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 8002154:	e019      	b.n	800218a <ILI9341_Draw_Image+0x16a>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002156:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 800215a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800215e:	4413      	add	r3, r2
 8002160:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002164:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002168:	6812      	ldr	r2, [r2, #0]
 800216a:	4413      	add	r3, r2
 800216c:	7819      	ldrb	r1, [r3, #0]
 800216e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8002172:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002176:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800217a:	4413      	add	r3, r2
 800217c:	460a      	mov	r2, r1
 800217e:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002180:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8002184:	3301      	adds	r3, #1
 8002186:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
 800218a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 800218e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002192:	d3e0      	bcc.n	8002156 <ILI9341_Draw_Image+0x136>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002194:	f107 010c 	add.w	r1, r7, #12
 8002198:	230a      	movs	r3, #10
 800219a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800219e:	4876      	ldr	r0, [pc, #472]	; (8002378 <ILI9341_Draw_Image+0x358>)
 80021a0:	f003 fce9 	bl	8005b76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 80021a4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80021a8:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 80021ac:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80021b0:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021b4:	3301      	adds	r3, #1
 80021b6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
 80021ba:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 80021be:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 80021c2:	d9c4      	bls.n	800214e <ILI9341_Draw_Image+0x12e>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80021c4:	2201      	movs	r2, #1
 80021c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80021ca:	486a      	ldr	r0, [pc, #424]	; (8002374 <ILI9341_Draw_Image+0x354>)
 80021cc:	f001 fd96 	bl	8003cfc <HAL_GPIO_WritePin>
}
 80021d0:	e0ca      	b.n	8002368 <ILI9341_Draw_Image+0x348>
	else if(Orientation == SCREEN_VERTICAL_2)
 80021d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80021d6:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d15e      	bne.n	800229e <ILI9341_Draw_Image+0x27e>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_2);
 80021e0:	2002      	movs	r0, #2
 80021e2:	f000 f99b 	bl	800251c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 80021e6:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80021ea:	22f0      	movs	r2, #240	; 0xf0
 80021ec:	2100      	movs	r1, #0
 80021ee:	2000      	movs	r0, #0
 80021f0:	f000 f92a 	bl	8002448 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80021f4:	2201      	movs	r2, #1
 80021f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80021fa:	485e      	ldr	r0, [pc, #376]	; (8002374 <ILI9341_Draw_Image+0x354>)
 80021fc:	f001 fd7e 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002200:	2200      	movs	r2, #0
 8002202:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002206:	485b      	ldr	r0, [pc, #364]	; (8002374 <ILI9341_Draw_Image+0x354>)
 8002208:	f001 fd78 	bl	8003cfc <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 800220c:	2300      	movs	r3, #0
 800220e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002212:	2300      	movs	r3, #0
 8002214:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002218:	e035      	b.n	8002286 <ILI9341_Draw_Image+0x266>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800221a:	2300      	movs	r3, #0
 800221c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002220:	e019      	b.n	8002256 <ILI9341_Draw_Image+0x236>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 8002222:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8002226:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800222a:	4413      	add	r3, r2
 800222c:	f507 720c 	add.w	r2, r7, #560	; 0x230
 8002230:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002234:	6812      	ldr	r2, [r2, #0]
 8002236:	4413      	add	r3, r2
 8002238:	7819      	ldrb	r1, [r3, #0]
 800223a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800223e:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 8002242:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002246:	4413      	add	r3, r2
 8002248:	460a      	mov	r2, r1
 800224a:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 800224c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8002250:	3301      	adds	r3, #1
 8002252:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 8002256:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 800225a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800225e:	d3e0      	bcc.n	8002222 <ILI9341_Draw_Image+0x202>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 8002260:	f107 010c 	add.w	r1, r7, #12
 8002264:	230a      	movs	r3, #10
 8002266:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800226a:	4843      	ldr	r0, [pc, #268]	; (8002378 <ILI9341_Draw_Image+0x358>)
 800226c:	f003 fc83 	bl	8005b76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 8002270:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8002274:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002278:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 800227c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8002280:	3301      	adds	r3, #1
 8002282:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
 8002286:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 800228a:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800228e:	d9c4      	bls.n	800221a <ILI9341_Draw_Image+0x1fa>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002290:	2201      	movs	r2, #1
 8002292:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002296:	4837      	ldr	r0, [pc, #220]	; (8002374 <ILI9341_Draw_Image+0x354>)
 8002298:	f001 fd30 	bl	8003cfc <HAL_GPIO_WritePin>
}
 800229c:	e064      	b.n	8002368 <ILI9341_Draw_Image+0x348>
	else if(Orientation == SCREEN_VERTICAL_1)
 800229e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80022a2:	f2a3 232d 	subw	r3, r3, #557	; 0x22d
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d15d      	bne.n	8002368 <ILI9341_Draw_Image+0x348>
		ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80022ac:	2000      	movs	r0, #0
 80022ae:	f000 f935 	bl	800251c <ILI9341_Set_Rotation>
		ILI9341_Set_Address(0,0,ILI9341_SCREEN_HEIGHT,ILI9341_SCREEN_WIDTH);
 80022b2:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80022b6:	22f0      	movs	r2, #240	; 0xf0
 80022b8:	2100      	movs	r1, #0
 80022ba:	2000      	movs	r0, #0
 80022bc:	f000 f8c4 	bl	8002448 <ILI9341_Set_Address>
		HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);
 80022c0:	2201      	movs	r2, #1
 80022c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80022c6:	482b      	ldr	r0, [pc, #172]	; (8002374 <ILI9341_Draw_Image+0x354>)
 80022c8:	f001 fd18 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80022cc:	2200      	movs	r2, #0
 80022ce:	f44f 7180 	mov.w	r1, #256	; 0x100
 80022d2:	4828      	ldr	r0, [pc, #160]	; (8002374 <ILI9341_Draw_Image+0x354>)
 80022d4:	f001 fd12 	bl	8003cfc <HAL_GPIO_WritePin>
		uint32_t counter = 0;
 80022d8:	2300      	movs	r3, #0
 80022da:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 80022de:	2300      	movs	r3, #0
 80022e0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 80022e4:	e035      	b.n	8002352 <ILI9341_Draw_Image+0x332>
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 80022e6:	2300      	movs	r3, #0
 80022e8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80022ec:	e019      	b.n	8002322 <ILI9341_Draw_Image+0x302>
					Temp_small_buffer[k]	= Image_Array[counter+k];		
 80022ee:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80022f2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80022f6:	4413      	add	r3, r2
 80022f8:	f507 720c 	add.w	r2, r7, #560	; 0x230
 80022fc:	f5a2 720b 	sub.w	r2, r2, #556	; 0x22c
 8002300:	6812      	ldr	r2, [r2, #0]
 8002302:	4413      	add	r3, r2
 8002304:	7819      	ldrb	r1, [r3, #0]
 8002306:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800230a:	f5a3 7209 	sub.w	r2, r3, #548	; 0x224
 800230e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002312:	4413      	add	r3, r2
 8002314:	460a      	mov	r2, r1
 8002316:	701a      	strb	r2, [r3, #0]
				for(uint32_t k = 0; k< BURST_MAX_SIZE; k++)
 8002318:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800231c:	3301      	adds	r3, #1
 800231e:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8002322:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8002326:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800232a:	d3e0      	bcc.n	80022ee <ILI9341_Draw_Image+0x2ce>
				HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char*)Temp_small_buffer, BURST_MAX_SIZE, 10);
 800232c:	f107 010c 	add.w	r1, r7, #12
 8002330:	230a      	movs	r3, #10
 8002332:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002336:	4810      	ldr	r0, [pc, #64]	; (8002378 <ILI9341_Draw_Image+0x358>)
 8002338:	f003 fc1d 	bl	8005b76 <HAL_SPI_Transmit>
				counter += BURST_MAX_SIZE;			
 800233c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8002340:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8002344:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
		for(uint32_t i = 0; i < ILI9341_SCREEN_WIDTH*ILI9341_SCREEN_HEIGHT*2/BURST_MAX_SIZE; i++)
 8002348:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 800234c:	3301      	adds	r3, #1
 800234e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8002352:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8002356:	f5b3 7f99 	cmp.w	r3, #306	; 0x132
 800235a:	d9c4      	bls.n	80022e6 <ILI9341_Draw_Image+0x2c6>
		HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800235c:	2201      	movs	r2, #1
 800235e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002362:	4804      	ldr	r0, [pc, #16]	; (8002374 <ILI9341_Draw_Image+0x354>)
 8002364:	f001 fcca 	bl	8003cfc <HAL_GPIO_WritePin>
}
 8002368:	bf00      	nop
 800236a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}
 8002372:	bf00      	nop
 8002374:	40020800 	.word	0x40020800
 8002378:	200002b8 	.word	0x200002b8

0800237c <ILI9341_SPI_Init>:
volatile uint16_t LCD_HEIGHT = ILI9341_SCREEN_HEIGHT;
volatile uint16_t LCD_WIDTH	 = ILI9341_SCREEN_WIDTH;

/* Initialize SPI */
void ILI9341_SPI_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
MX_SPI5_Init();																							//SPI INIT
 8002380:	f7ff f8b8 	bl	80014f4 <MX_SPI5_Init>
MX_GPIO_Init();																							//GPIO INIT
 8002384:	f7fe fa76 	bl	8000874 <MX_GPIO_Init>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
 8002388:	2200      	movs	r2, #0
 800238a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800238e:	4802      	ldr	r0, [pc, #8]	; (8002398 <ILI9341_SPI_Init+0x1c>)
 8002390:	f001 fcb4 	bl	8003cfc <HAL_GPIO_WritePin>
}
 8002394:	bf00      	nop
 8002396:	bd80      	pop	{r7, pc}
 8002398:	40020800 	.word	0x40020800

0800239c <ILI9341_SPI_Send>:

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	4603      	mov	r3, r0
 80023a4:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 80023a6:	1df9      	adds	r1, r7, #7
 80023a8:	2301      	movs	r3, #1
 80023aa:	2201      	movs	r2, #1
 80023ac:	4803      	ldr	r0, [pc, #12]	; (80023bc <ILI9341_SPI_Send+0x20>)
 80023ae:	f003 fbe2 	bl	8005b76 <HAL_SPI_Transmit>
}
 80023b2:	bf00      	nop
 80023b4:	3708      	adds	r7, #8
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	200002b8 	.word	0x200002b8

080023c0 <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	4603      	mov	r3, r0
 80023c8:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80023ca:	2200      	movs	r2, #0
 80023cc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023d0:	480b      	ldr	r0, [pc, #44]	; (8002400 <ILI9341_Write_Command+0x40>)
 80023d2:	f001 fc93 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80023d6:	2200      	movs	r2, #0
 80023d8:	f44f 7100 	mov.w	r1, #512	; 0x200
 80023dc:	4808      	ldr	r0, [pc, #32]	; (8002400 <ILI9341_Write_Command+0x40>)
 80023de:	f001 fc8d 	bl	8003cfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 80023e2:	79fb      	ldrb	r3, [r7, #7]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7ff ffd9 	bl	800239c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80023ea:	2201      	movs	r2, #1
 80023ec:	f44f 7180 	mov.w	r1, #256	; 0x100
 80023f0:	4803      	ldr	r0, [pc, #12]	; (8002400 <ILI9341_Write_Command+0x40>)
 80023f2:	f001 fc83 	bl	8003cfc <HAL_GPIO_WritePin>
}
 80023f6:	bf00      	nop
 80023f8:	3708      	adds	r7, #8
 80023fa:	46bd      	mov	sp, r7
 80023fc:	bd80      	pop	{r7, pc}
 80023fe:	bf00      	nop
 8002400:	40020800 	.word	0x40020800

08002404 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b082      	sub	sp, #8
 8002408:	af00      	add	r7, sp, #0
 800240a:	4603      	mov	r3, r0
 800240c:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 800240e:	2201      	movs	r2, #1
 8002410:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002414:	480b      	ldr	r0, [pc, #44]	; (8002444 <ILI9341_Write_Data+0x40>)
 8002416:	f001 fc71 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800241a:	2200      	movs	r2, #0
 800241c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002420:	4808      	ldr	r0, [pc, #32]	; (8002444 <ILI9341_Write_Data+0x40>)
 8002422:	f001 fc6b 	bl	8003cfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4618      	mov	r0, r3
 800242a:	f7ff ffb7 	bl	800239c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800242e:	2201      	movs	r2, #1
 8002430:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002434:	4803      	ldr	r0, [pc, #12]	; (8002444 <ILI9341_Write_Data+0x40>)
 8002436:	f001 fc61 	bl	8003cfc <HAL_GPIO_WritePin>
}
 800243a:	bf00      	nop
 800243c:	3708      	adds	r7, #8
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
 8002442:	bf00      	nop
 8002444:	40020800 	.word	0x40020800

08002448 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8002448:	b590      	push	{r4, r7, lr}
 800244a:	b083      	sub	sp, #12
 800244c:	af00      	add	r7, sp, #0
 800244e:	4604      	mov	r4, r0
 8002450:	4608      	mov	r0, r1
 8002452:	4611      	mov	r1, r2
 8002454:	461a      	mov	r2, r3
 8002456:	4623      	mov	r3, r4
 8002458:	80fb      	strh	r3, [r7, #6]
 800245a:	4603      	mov	r3, r0
 800245c:	80bb      	strh	r3, [r7, #4]
 800245e:	460b      	mov	r3, r1
 8002460:	807b      	strh	r3, [r7, #2]
 8002462:	4613      	mov	r3, r2
 8002464:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8002466:	202a      	movs	r0, #42	; 0x2a
 8002468:	f7ff ffaa 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	0a1b      	lsrs	r3, r3, #8
 8002470:	b29b      	uxth	r3, r3
 8002472:	b2db      	uxtb	r3, r3
 8002474:	4618      	mov	r0, r3
 8002476:	f7ff ffc5 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	b2db      	uxtb	r3, r3
 800247e:	4618      	mov	r0, r3
 8002480:	f7ff ffc0 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8002484:	887b      	ldrh	r3, [r7, #2]
 8002486:	0a1b      	lsrs	r3, r3, #8
 8002488:	b29b      	uxth	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	4618      	mov	r0, r3
 800248e:	f7ff ffb9 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8002492:	887b      	ldrh	r3, [r7, #2]
 8002494:	b2db      	uxtb	r3, r3
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff ffb4 	bl	8002404 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 800249c:	202b      	movs	r0, #43	; 0x2b
 800249e:	f7ff ff8f 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 80024a2:	88bb      	ldrh	r3, [r7, #4]
 80024a4:	0a1b      	lsrs	r3, r3, #8
 80024a6:	b29b      	uxth	r3, r3
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	4618      	mov	r0, r3
 80024ac:	f7ff ffaa 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 80024b0:	88bb      	ldrh	r3, [r7, #4]
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	4618      	mov	r0, r3
 80024b6:	f7ff ffa5 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 80024ba:	883b      	ldrh	r3, [r7, #0]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	b29b      	uxth	r3, r3
 80024c0:	b2db      	uxtb	r3, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f7ff ff9e 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 80024c8:	883b      	ldrh	r3, [r7, #0]
 80024ca:	b2db      	uxtb	r3, r3
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7ff ff99 	bl	8002404 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 80024d2:	202c      	movs	r0, #44	; 0x2c
 80024d4:	f7ff ff74 	bl	80023c0 <ILI9341_Write_Command>
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd90      	pop	{r4, r7, pc}

080024e0 <ILI9341_Reset>:

/*HARDWARE RESET*/
void ILI9341_Reset(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80024e4:	2201      	movs	r2, #1
 80024e6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80024ea:	480b      	ldr	r0, [pc, #44]	; (8002518 <ILI9341_Reset+0x38>)
 80024ec:	f001 fc06 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_Delay(200);
 80024f0:	20c8      	movs	r0, #200	; 0xc8
 80024f2:	f000 fd1b 	bl	8002f2c <HAL_Delay>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80024f6:	2200      	movs	r2, #0
 80024f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80024fc:	4806      	ldr	r0, [pc, #24]	; (8002518 <ILI9341_Reset+0x38>)
 80024fe:	f001 fbfd 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_Delay(200);
 8002502:	20c8      	movs	r0, #200	; 0xc8
 8002504:	f000 fd12 	bl	8002f2c <HAL_Delay>
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
 8002508:	2201      	movs	r2, #1
 800250a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800250e:	4802      	ldr	r0, [pc, #8]	; (8002518 <ILI9341_Reset+0x38>)
 8002510:	f001 fbf4 	bl	8003cfc <HAL_GPIO_WritePin>
}
 8002514:	bf00      	nop
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40020800 	.word	0x40020800

0800251c <ILI9341_Set_Rotation>:

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b084      	sub	sp, #16
 8002520:	af00      	add	r7, sp, #0
 8002522:	4603      	mov	r3, r0
 8002524:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8002526:	79fb      	ldrb	r3, [r7, #7]
 8002528:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 800252a:	2036      	movs	r0, #54	; 0x36
 800252c:	f7ff ff48 	bl	80023c0 <ILI9341_Write_Command>
HAL_Delay(1);
 8002530:	2001      	movs	r0, #1
 8002532:	f000 fcfb 	bl	8002f2c <HAL_Delay>
	
switch(screen_rotation) 
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b03      	cmp	r3, #3
 800253a:	d837      	bhi.n	80025ac <ILI9341_Set_Rotation+0x90>
 800253c:	a201      	add	r2, pc, #4	; (adr r2, 8002544 <ILI9341_Set_Rotation+0x28>)
 800253e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002542:	bf00      	nop
 8002544:	08002555 	.word	0x08002555
 8002548:	0800256b 	.word	0x0800256b
 800254c:	08002581 	.word	0x08002581
 8002550:	08002597 	.word	0x08002597
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8002554:	2048      	movs	r0, #72	; 0x48
 8002556:	f7ff ff55 	bl	8002404 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <ILI9341_Set_Rotation+0x9c>)
 800255c:	22f0      	movs	r2, #240	; 0xf0
 800255e:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8002560:	4b16      	ldr	r3, [pc, #88]	; (80025bc <ILI9341_Set_Rotation+0xa0>)
 8002562:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002566:	801a      	strh	r2, [r3, #0]
			break;
 8002568:	e021      	b.n	80025ae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 800256a:	2028      	movs	r0, #40	; 0x28
 800256c:	f7ff ff4a 	bl	8002404 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8002570:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <ILI9341_Set_Rotation+0x9c>)
 8002572:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002576:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8002578:	4b10      	ldr	r3, [pc, #64]	; (80025bc <ILI9341_Set_Rotation+0xa0>)
 800257a:	22f0      	movs	r2, #240	; 0xf0
 800257c:	801a      	strh	r2, [r3, #0]
			break;
 800257e:	e016      	b.n	80025ae <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8002580:	2088      	movs	r0, #136	; 0x88
 8002582:	f7ff ff3f 	bl	8002404 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8002586:	4b0c      	ldr	r3, [pc, #48]	; (80025b8 <ILI9341_Set_Rotation+0x9c>)
 8002588:	22f0      	movs	r2, #240	; 0xf0
 800258a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 800258c:	4b0b      	ldr	r3, [pc, #44]	; (80025bc <ILI9341_Set_Rotation+0xa0>)
 800258e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002592:	801a      	strh	r2, [r3, #0]
			break;
 8002594:	e00b      	b.n	80025ae <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8002596:	20e8      	movs	r0, #232	; 0xe8
 8002598:	f7ff ff34 	bl	8002404 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 800259c:	4b06      	ldr	r3, [pc, #24]	; (80025b8 <ILI9341_Set_Rotation+0x9c>)
 800259e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80025a2:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 80025a4:	4b05      	ldr	r3, [pc, #20]	; (80025bc <ILI9341_Set_Rotation+0xa0>)
 80025a6:	22f0      	movs	r2, #240	; 0xf0
 80025a8:	801a      	strh	r2, [r3, #0]
			break;
 80025aa:	e000      	b.n	80025ae <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 80025ac:	bf00      	nop
	}
}
 80025ae:	bf00      	nop
 80025b0:	3710      	adds	r7, #16
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	20000006 	.word	0x20000006
 80025bc:	20000004 	.word	0x20000004

080025c0 <ILI9341_Enable>:

/*Enable LCD display*/
void ILI9341_Enable(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);
 80025c4:	2201      	movs	r2, #1
 80025c6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80025ca:	4802      	ldr	r0, [pc, #8]	; (80025d4 <ILI9341_Enable+0x14>)
 80025cc:	f001 fb96 	bl	8003cfc <HAL_GPIO_WritePin>
}
 80025d0:	bf00      	nop
 80025d2:	bd80      	pop	{r7, pc}
 80025d4:	40020800 	.word	0x40020800

080025d8 <ILI9341_Init>:

/*Initialize LCD display*/
void ILI9341_Init(void)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	af00      	add	r7, sp, #0

ILI9341_Enable();
 80025dc:	f7ff fff0 	bl	80025c0 <ILI9341_Enable>
ILI9341_SPI_Init();
 80025e0:	f7ff fecc 	bl	800237c <ILI9341_SPI_Init>
ILI9341_Reset();
 80025e4:	f7ff ff7c 	bl	80024e0 <ILI9341_Reset>

//SOFTWARE RESET
ILI9341_Write_Command(0x01);
 80025e8:	2001      	movs	r0, #1
 80025ea:	f7ff fee9 	bl	80023c0 <ILI9341_Write_Command>
HAL_Delay(1000);
 80025ee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80025f2:	f000 fc9b 	bl	8002f2c <HAL_Delay>
	
//POWER CONTROL A
ILI9341_Write_Command(0xCB);
 80025f6:	20cb      	movs	r0, #203	; 0xcb
 80025f8:	f7ff fee2 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x39);
 80025fc:	2039      	movs	r0, #57	; 0x39
 80025fe:	f7ff ff01 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2C);
 8002602:	202c      	movs	r0, #44	; 0x2c
 8002604:	f7ff fefe 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002608:	2000      	movs	r0, #0
 800260a:	f7ff fefb 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x34);
 800260e:	2034      	movs	r0, #52	; 0x34
 8002610:	f7ff fef8 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x02);
 8002614:	2002      	movs	r0, #2
 8002616:	f7ff fef5 	bl	8002404 <ILI9341_Write_Data>

//POWER CONTROL B
ILI9341_Write_Command(0xCF);
 800261a:	20cf      	movs	r0, #207	; 0xcf
 800261c:	f7ff fed0 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002620:	2000      	movs	r0, #0
 8002622:	f7ff feef 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 8002626:	20c1      	movs	r0, #193	; 0xc1
 8002628:	f7ff feec 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x30);
 800262c:	2030      	movs	r0, #48	; 0x30
 800262e:	f7ff fee9 	bl	8002404 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL A
ILI9341_Write_Command(0xE8);
 8002632:	20e8      	movs	r0, #232	; 0xe8
 8002634:	f7ff fec4 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x85);
 8002638:	2085      	movs	r0, #133	; 0x85
 800263a:	f7ff fee3 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 800263e:	2000      	movs	r0, #0
 8002640:	f7ff fee0 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x78);
 8002644:	2078      	movs	r0, #120	; 0x78
 8002646:	f7ff fedd 	bl	8002404 <ILI9341_Write_Data>

//DRIVER TIMING CONTROL B
ILI9341_Write_Command(0xEA);
 800264a:	20ea      	movs	r0, #234	; 0xea
 800264c:	f7ff feb8 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002650:	2000      	movs	r0, #0
 8002652:	f7ff fed7 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002656:	2000      	movs	r0, #0
 8002658:	f7ff fed4 	bl	8002404 <ILI9341_Write_Data>

//POWER ON SEQUENCE CONTROL
ILI9341_Write_Command(0xED);
 800265c:	20ed      	movs	r0, #237	; 0xed
 800265e:	f7ff feaf 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x64);
 8002662:	2064      	movs	r0, #100	; 0x64
 8002664:	f7ff fece 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 8002668:	2003      	movs	r0, #3
 800266a:	f7ff fecb 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x12);
 800266e:	2012      	movs	r0, #18
 8002670:	f7ff fec8 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x81);
 8002674:	2081      	movs	r0, #129	; 0x81
 8002676:	f7ff fec5 	bl	8002404 <ILI9341_Write_Data>

//PUMP RATIO CONTROL
ILI9341_Write_Command(0xF7);
 800267a:	20f7      	movs	r0, #247	; 0xf7
 800267c:	f7ff fea0 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x20);
 8002680:	2020      	movs	r0, #32
 8002682:	f7ff febf 	bl	8002404 <ILI9341_Write_Data>

//POWER CONTROL,VRH[5:0]
ILI9341_Write_Command(0xC0);
 8002686:	20c0      	movs	r0, #192	; 0xc0
 8002688:	f7ff fe9a 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x23);
 800268c:	2023      	movs	r0, #35	; 0x23
 800268e:	f7ff feb9 	bl	8002404 <ILI9341_Write_Data>

//POWER CONTROL,SAP[2:0];BT[3:0]
ILI9341_Write_Command(0xC1);
 8002692:	20c1      	movs	r0, #193	; 0xc1
 8002694:	f7ff fe94 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x10);
 8002698:	2010      	movs	r0, #16
 800269a:	f7ff feb3 	bl	8002404 <ILI9341_Write_Data>

//VCM CONTROL
ILI9341_Write_Command(0xC5);
 800269e:	20c5      	movs	r0, #197	; 0xc5
 80026a0:	f7ff fe8e 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x3E);
 80026a4:	203e      	movs	r0, #62	; 0x3e
 80026a6:	f7ff fead 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x28);
 80026aa:	2028      	movs	r0, #40	; 0x28
 80026ac:	f7ff feaa 	bl	8002404 <ILI9341_Write_Data>

//VCM CONTROL 2
ILI9341_Write_Command(0xC7);
 80026b0:	20c7      	movs	r0, #199	; 0xc7
 80026b2:	f7ff fe85 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x86);
 80026b6:	2086      	movs	r0, #134	; 0x86
 80026b8:	f7ff fea4 	bl	8002404 <ILI9341_Write_Data>

//MEMORY ACCESS CONTROL
ILI9341_Write_Command(0x36);
 80026bc:	2036      	movs	r0, #54	; 0x36
 80026be:	f7ff fe7f 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x48);
 80026c2:	2048      	movs	r0, #72	; 0x48
 80026c4:	f7ff fe9e 	bl	8002404 <ILI9341_Write_Data>

//PIXEL FORMAT
ILI9341_Write_Command(0x3A);
 80026c8:	203a      	movs	r0, #58	; 0x3a
 80026ca:	f7ff fe79 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x55);
 80026ce:	2055      	movs	r0, #85	; 0x55
 80026d0:	f7ff fe98 	bl	8002404 <ILI9341_Write_Data>

//FRAME RATIO CONTROL, STANDARD RGB COLOR
ILI9341_Write_Command(0xB1);
 80026d4:	20b1      	movs	r0, #177	; 0xb1
 80026d6:	f7ff fe73 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 80026da:	2000      	movs	r0, #0
 80026dc:	f7ff fe92 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x18);
 80026e0:	2018      	movs	r0, #24
 80026e2:	f7ff fe8f 	bl	8002404 <ILI9341_Write_Data>

//DISPLAY FUNCTION CONTROL
ILI9341_Write_Command(0xB6);
 80026e6:	20b6      	movs	r0, #182	; 0xb6
 80026e8:	f7ff fe6a 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x08);
 80026ec:	2008      	movs	r0, #8
 80026ee:	f7ff fe89 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x82);
 80026f2:	2082      	movs	r0, #130	; 0x82
 80026f4:	f7ff fe86 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x27);
 80026f8:	2027      	movs	r0, #39	; 0x27
 80026fa:	f7ff fe83 	bl	8002404 <ILI9341_Write_Data>

//3GAMMA FUNCTION DISABLE
ILI9341_Write_Command(0xF2);
 80026fe:	20f2      	movs	r0, #242	; 0xf2
 8002700:	f7ff fe5e 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 8002704:	2000      	movs	r0, #0
 8002706:	f7ff fe7d 	bl	8002404 <ILI9341_Write_Data>

//GAMMA CURVE SELECTED
ILI9341_Write_Command(0x26);
 800270a:	2026      	movs	r0, #38	; 0x26
 800270c:	f7ff fe58 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x01);
 8002710:	2001      	movs	r0, #1
 8002712:	f7ff fe77 	bl	8002404 <ILI9341_Write_Data>

//POSITIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE0);
 8002716:	20e0      	movs	r0, #224	; 0xe0
 8002718:	f7ff fe52 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x0F);
 800271c:	200f      	movs	r0, #15
 800271e:	f7ff fe71 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 8002722:	2031      	movs	r0, #49	; 0x31
 8002724:	f7ff fe6e 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x2B);
 8002728:	202b      	movs	r0, #43	; 0x2b
 800272a:	f7ff fe6b 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 800272e:	200c      	movs	r0, #12
 8002730:	f7ff fe68 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002734:	200e      	movs	r0, #14
 8002736:	f7ff fe65 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 800273a:	2008      	movs	r0, #8
 800273c:	f7ff fe62 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x4E);
 8002740:	204e      	movs	r0, #78	; 0x4e
 8002742:	f7ff fe5f 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0xF1);
 8002746:	20f1      	movs	r0, #241	; 0xf1
 8002748:	f7ff fe5c 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x37);
 800274c:	2037      	movs	r0, #55	; 0x37
 800274e:	f7ff fe59 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 8002752:	2007      	movs	r0, #7
 8002754:	f7ff fe56 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x10);
 8002758:	2010      	movs	r0, #16
 800275a:	f7ff fe53 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800275e:	2003      	movs	r0, #3
 8002760:	f7ff fe50 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002764:	200e      	movs	r0, #14
 8002766:	f7ff fe4d 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x09);
 800276a:	2009      	movs	r0, #9
 800276c:	f7ff fe4a 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x00);
 8002770:	2000      	movs	r0, #0
 8002772:	f7ff fe47 	bl	8002404 <ILI9341_Write_Data>

//NEGATIVE GAMMA CORRECTION
ILI9341_Write_Command(0xE1);
 8002776:	20e1      	movs	r0, #225	; 0xe1
 8002778:	f7ff fe22 	bl	80023c0 <ILI9341_Write_Command>
ILI9341_Write_Data(0x00);
 800277c:	2000      	movs	r0, #0
 800277e:	f7ff fe41 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0E);
 8002782:	200e      	movs	r0, #14
 8002784:	f7ff fe3e 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x14);
 8002788:	2014      	movs	r0, #20
 800278a:	f7ff fe3b 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x03);
 800278e:	2003      	movs	r0, #3
 8002790:	f7ff fe38 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x11);
 8002794:	2011      	movs	r0, #17
 8002796:	f7ff fe35 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x07);
 800279a:	2007      	movs	r0, #7
 800279c:	f7ff fe32 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80027a0:	2031      	movs	r0, #49	; 0x31
 80027a2:	f7ff fe2f 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0xC1);
 80027a6:	20c1      	movs	r0, #193	; 0xc1
 80027a8:	f7ff fe2c 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x48);
 80027ac:	2048      	movs	r0, #72	; 0x48
 80027ae:	f7ff fe29 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x08);
 80027b2:	2008      	movs	r0, #8
 80027b4:	f7ff fe26 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80027b8:	200f      	movs	r0, #15
 80027ba:	f7ff fe23 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0C);
 80027be:	200c      	movs	r0, #12
 80027c0:	f7ff fe20 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x31);
 80027c4:	2031      	movs	r0, #49	; 0x31
 80027c6:	f7ff fe1d 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x36);
 80027ca:	2036      	movs	r0, #54	; 0x36
 80027cc:	f7ff fe1a 	bl	8002404 <ILI9341_Write_Data>
ILI9341_Write_Data(0x0F);
 80027d0:	200f      	movs	r0, #15
 80027d2:	f7ff fe17 	bl	8002404 <ILI9341_Write_Data>

//EXIT SLEEP
ILI9341_Write_Command(0x11);
 80027d6:	2011      	movs	r0, #17
 80027d8:	f7ff fdf2 	bl	80023c0 <ILI9341_Write_Command>
HAL_Delay(120);
 80027dc:	2078      	movs	r0, #120	; 0x78
 80027de:	f000 fba5 	bl	8002f2c <HAL_Delay>

//TURN ON DISPLAY
ILI9341_Write_Command(0x29);
 80027e2:	2029      	movs	r0, #41	; 0x29
 80027e4:	f7ff fdec 	bl	80023c0 <ILI9341_Write_Command>

//STARTING ROTATION
ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 80027e8:	2000      	movs	r0, #0
 80027ea:	f7ff fe97 	bl	800251c <ILI9341_Set_Rotation>
}
 80027ee:	bf00      	nop
 80027f0:	bd80      	pop	{r7, pc}
	...

080027f4 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 80027f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80027f8:	b08d      	sub	sp, #52	; 0x34
 80027fa:	af00      	add	r7, sp, #0
 80027fc:	4603      	mov	r3, r0
 80027fe:	6039      	str	r1, [r7, #0]
 8002800:	80fb      	strh	r3, [r7, #6]
 8002802:	466b      	mov	r3, sp
 8002804:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8002806:	2300      	movs	r3, #0
 8002808:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	005b      	lsls	r3, r3, #1
 800280e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002812:	d202      	bcs.n	800281a <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	627b      	str	r3, [r7, #36]	; 0x24
 8002818:	e002      	b.n	8002820 <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 800281a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800281e:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002820:	2201      	movs	r2, #1
 8002822:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002826:	4840      	ldr	r0, [pc, #256]	; (8002928 <ILI9341_Draw_Colour_Burst+0x134>)
 8002828:	f001 fa68 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 800282c:	2200      	movs	r2, #0
 800282e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002832:	483d      	ldr	r0, [pc, #244]	; (8002928 <ILI9341_Draw_Colour_Burst+0x134>)
 8002834:	f001 fa62 	bl	8003cfc <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8002838:	88fb      	ldrh	r3, [r7, #6]
 800283a:	0a1b      	lsrs	r3, r3, #8
 800283c:	b29b      	uxth	r3, r3
 800283e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8002842:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002844:	460b      	mov	r3, r1
 8002846:	3b01      	subs	r3, #1
 8002848:	61fb      	str	r3, [r7, #28]
 800284a:	2300      	movs	r3, #0
 800284c:	4688      	mov	r8, r1
 800284e:	4699      	mov	r9, r3
 8002850:	f04f 0200 	mov.w	r2, #0
 8002854:	f04f 0300 	mov.w	r3, #0
 8002858:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800285c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002860:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002864:	2300      	movs	r3, #0
 8002866:	460c      	mov	r4, r1
 8002868:	461d      	mov	r5, r3
 800286a:	f04f 0200 	mov.w	r2, #0
 800286e:	f04f 0300 	mov.w	r3, #0
 8002872:	00eb      	lsls	r3, r5, #3
 8002874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002878:	00e2      	lsls	r2, r4, #3
 800287a:	1dcb      	adds	r3, r1, #7
 800287c:	08db      	lsrs	r3, r3, #3
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	ebad 0d03 	sub.w	sp, sp, r3
 8002884:	466b      	mov	r3, sp
 8002886:	3300      	adds	r3, #0
 8002888:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 800288a:	2300      	movs	r3, #0
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
 800288e:	e00e      	b.n	80028ae <ILI9341_Draw_Colour_Burst+0xba>
	{
		burst_buffer[j] = 	chifted;
 8002890:	69ba      	ldr	r2, [r7, #24]
 8002892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002894:	4413      	add	r3, r2
 8002896:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800289a:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 800289c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800289e:	3301      	adds	r3, #1
 80028a0:	88fa      	ldrh	r2, [r7, #6]
 80028a2:	b2d1      	uxtb	r1, r2
 80028a4:	69ba      	ldr	r2, [r7, #24]
 80028a6:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 80028a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028aa:	3302      	adds	r3, #2
 80028ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80028ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028b2:	429a      	cmp	r2, r3
 80028b4:	d3ec      	bcc.n	8002890 <ILI9341_Draw_Colour_Burst+0x9c>
	}

uint32_t Sending_Size = Size*2;
 80028b6:	683b      	ldr	r3, [r7, #0]
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 80028bc:	697a      	ldr	r2, [r7, #20]
 80028be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028c4:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80028ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028d0:	fb01 f202 	mul.w	r2, r1, r2
 80028d4:	1a9b      	subs	r3, r3, r2
 80028d6:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d010      	beq.n	8002900 <ILI9341_Draw_Colour_Burst+0x10c>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80028de:	2300      	movs	r3, #0
 80028e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028e2:	e009      	b.n	80028f8 <ILI9341_Draw_Colour_Burst+0x104>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 80028e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	230a      	movs	r3, #10
 80028ea:	69b9      	ldr	r1, [r7, #24]
 80028ec:	480f      	ldr	r0, [pc, #60]	; (800292c <ILI9341_Draw_Colour_Burst+0x138>)
 80028ee:	f003 f942 	bl	8005b76 <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 80028f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028f4:	3301      	adds	r3, #1
 80028f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	429a      	cmp	r2, r3
 80028fe:	d3f1      	bcc.n	80028e4 <ILI9341_Draw_Colour_Burst+0xf0>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	b29a      	uxth	r2, r3
 8002904:	230a      	movs	r3, #10
 8002906:	69b9      	ldr	r1, [r7, #24]
 8002908:	4808      	ldr	r0, [pc, #32]	; (800292c <ILI9341_Draw_Colour_Burst+0x138>)
 800290a:	f003 f934 	bl	8005b76 <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800290e:	2201      	movs	r2, #1
 8002910:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002914:	4804      	ldr	r0, [pc, #16]	; (8002928 <ILI9341_Draw_Colour_Burst+0x134>)
 8002916:	f001 f9f1 	bl	8003cfc <HAL_GPIO_WritePin>
 800291a:	46b5      	mov	sp, r6
}
 800291c:	bf00      	nop
 800291e:	3734      	adds	r7, #52	; 0x34
 8002920:	46bd      	mov	sp, r7
 8002922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002926:	bf00      	nop
 8002928:	40020800 	.word	0x40020800
 800292c:	200002b8 	.word	0x200002b8

08002930 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
 8002936:	4603      	mov	r3, r0
 8002938:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 800293a:	4b0e      	ldr	r3, [pc, #56]	; (8002974 <ILI9341_Fill_Screen+0x44>)
 800293c:	881b      	ldrh	r3, [r3, #0]
 800293e:	b29a      	uxth	r2, r3
 8002940:	4b0d      	ldr	r3, [pc, #52]	; (8002978 <ILI9341_Fill_Screen+0x48>)
 8002942:	881b      	ldrh	r3, [r3, #0]
 8002944:	b29b      	uxth	r3, r3
 8002946:	2100      	movs	r1, #0
 8002948:	2000      	movs	r0, #0
 800294a:	f7ff fd7d 	bl	8002448 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 800294e:	4b09      	ldr	r3, [pc, #36]	; (8002974 <ILI9341_Fill_Screen+0x44>)
 8002950:	881b      	ldrh	r3, [r3, #0]
 8002952:	b29b      	uxth	r3, r3
 8002954:	461a      	mov	r2, r3
 8002956:	4b08      	ldr	r3, [pc, #32]	; (8002978 <ILI9341_Fill_Screen+0x48>)
 8002958:	881b      	ldrh	r3, [r3, #0]
 800295a:	b29b      	uxth	r3, r3
 800295c:	fb02 f303 	mul.w	r3, r2, r3
 8002960:	461a      	mov	r2, r3
 8002962:	88fb      	ldrh	r3, [r7, #6]
 8002964:	4611      	mov	r1, r2
 8002966:	4618      	mov	r0, r3
 8002968:	f7ff ff44 	bl	80027f4 <ILI9341_Draw_Colour_Burst>
}
 800296c:	bf00      	nop
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	20000006 	.word	0x20000006
 8002978:	20000004 	.word	0x20000004

0800297c <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b086      	sub	sp, #24
 8002980:	af00      	add	r7, sp, #0
 8002982:	4603      	mov	r3, r0
 8002984:	80fb      	strh	r3, [r7, #6]
 8002986:	460b      	mov	r3, r1
 8002988:	80bb      	strh	r3, [r7, #4]
 800298a:	4613      	mov	r3, r2
 800298c:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 800298e:	4b64      	ldr	r3, [pc, #400]	; (8002b20 <ILI9341_Draw_Pixel+0x1a4>)
 8002990:	881b      	ldrh	r3, [r3, #0]
 8002992:	b29b      	uxth	r3, r3
 8002994:	88fa      	ldrh	r2, [r7, #6]
 8002996:	429a      	cmp	r2, r3
 8002998:	f080 80be 	bcs.w	8002b18 <ILI9341_Draw_Pixel+0x19c>
 800299c:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <ILI9341_Draw_Pixel+0x1a8>)
 800299e:	881b      	ldrh	r3, [r3, #0]
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	88ba      	ldrh	r2, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	f080 80b7 	bcs.w	8002b18 <ILI9341_Draw_Pixel+0x19c>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80029aa:	2200      	movs	r2, #0
 80029ac:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029b0:	485d      	ldr	r0, [pc, #372]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 80029b2:	f001 f9a3 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80029b6:	2200      	movs	r2, #0
 80029b8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029bc:	485a      	ldr	r0, [pc, #360]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 80029be:	f001 f99d 	bl	8003cfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 80029c2:	202a      	movs	r0, #42	; 0x2a
 80029c4:	f7ff fcea 	bl	800239c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 80029c8:	2201      	movs	r2, #1
 80029ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80029ce:	4856      	ldr	r0, [pc, #344]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 80029d0:	f001 f994 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 80029d4:	2201      	movs	r2, #1
 80029d6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029da:	4853      	ldr	r0, [pc, #332]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 80029dc:	f001 f98e 	bl	8003cfc <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 80029e0:	2200      	movs	r2, #0
 80029e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80029e6:	4850      	ldr	r0, [pc, #320]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 80029e8:	f001 f988 	bl	8003cfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 80029ec:	88fb      	ldrh	r3, [r7, #6]
 80029ee:	0a1b      	lsrs	r3, r3, #8
 80029f0:	b29b      	uxth	r3, r3
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	753b      	strb	r3, [r7, #20]
 80029f6:	88fb      	ldrh	r3, [r7, #6]
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	757b      	strb	r3, [r7, #21]
 80029fc:	88fb      	ldrh	r3, [r7, #6]
 80029fe:	3301      	adds	r3, #1
 8002a00:	121b      	asrs	r3, r3, #8
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	75bb      	strb	r3, [r7, #22]
 8002a06:	88fb      	ldrh	r3, [r7, #6]
 8002a08:	b2db      	uxtb	r3, r3
 8002a0a:	3301      	adds	r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 8002a10:	f107 0114 	add.w	r1, r7, #20
 8002a14:	2301      	movs	r3, #1
 8002a16:	2204      	movs	r2, #4
 8002a18:	4844      	ldr	r0, [pc, #272]	; (8002b2c <ILI9341_Draw_Pixel+0x1b0>)
 8002a1a:	f003 f8ac 	bl	8005b76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a1e:	2201      	movs	r2, #1
 8002a20:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a24:	4840      	ldr	r0, [pc, #256]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002a26:	f001 f969 	bl	8003cfc <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a30:	483d      	ldr	r0, [pc, #244]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002a32:	f001 f963 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002a36:	2200      	movs	r2, #0
 8002a38:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a3c:	483a      	ldr	r0, [pc, #232]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002a3e:	f001 f95d 	bl	8003cfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002a42:	202b      	movs	r0, #43	; 0x2b
 8002a44:	f7ff fcaa 	bl	800239c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002a48:	2201      	movs	r2, #1
 8002a4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002a4e:	4836      	ldr	r0, [pc, #216]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002a50:	f001 f954 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002a54:	2201      	movs	r2, #1
 8002a56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a5a:	4833      	ldr	r0, [pc, #204]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002a5c:	f001 f94e 	bl	8003cfc <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002a60:	2200      	movs	r2, #0
 8002a62:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002a66:	4830      	ldr	r0, [pc, #192]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002a68:	f001 f948 	bl	8003cfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 8002a6c:	88bb      	ldrh	r3, [r7, #4]
 8002a6e:	0a1b      	lsrs	r3, r3, #8
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	743b      	strb	r3, [r7, #16]
 8002a76:	88bb      	ldrh	r3, [r7, #4]
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	747b      	strb	r3, [r7, #17]
 8002a7c:	88bb      	ldrh	r3, [r7, #4]
 8002a7e:	3301      	adds	r3, #1
 8002a80:	121b      	asrs	r3, r3, #8
 8002a82:	b2db      	uxtb	r3, r3
 8002a84:	74bb      	strb	r3, [r7, #18]
 8002a86:	88bb      	ldrh	r3, [r7, #4]
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	b2db      	uxtb	r3, r3
 8002a8e:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 8002a90:	f107 0110 	add.w	r1, r7, #16
 8002a94:	2301      	movs	r3, #1
 8002a96:	2204      	movs	r2, #4
 8002a98:	4824      	ldr	r0, [pc, #144]	; (8002b2c <ILI9341_Draw_Pixel+0x1b0>)
 8002a9a:	f003 f86c 	bl	8005b76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002aa4:	4820      	ldr	r0, [pc, #128]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002aa6:	f001 f929 	bl	8003cfc <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002aaa:	2200      	movs	r2, #0
 8002aac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ab0:	481d      	ldr	r0, [pc, #116]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002ab2:	f001 f923 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002abc:	481a      	ldr	r0, [pc, #104]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002abe:	f001 f91d 	bl	8003cfc <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 8002ac2:	202c      	movs	r0, #44	; 0x2c
 8002ac4:	f7ff fc6a 	bl	800239c <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002ac8:	2201      	movs	r2, #1
 8002aca:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ace:	4816      	ldr	r0, [pc, #88]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002ad0:	f001 f914 	bl	8003cfc <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ada:	4813      	ldr	r0, [pc, #76]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002adc:	f001 f90e 	bl	8003cfc <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ae6:	4810      	ldr	r0, [pc, #64]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002ae8:	f001 f908 	bl	8003cfc <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 8002aec:	887b      	ldrh	r3, [r7, #2]
 8002aee:	0a1b      	lsrs	r3, r3, #8
 8002af0:	b29b      	uxth	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	733b      	strb	r3, [r7, #12]
 8002af6:	887b      	ldrh	r3, [r7, #2]
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 8002afc:	f107 010c 	add.w	r1, r7, #12
 8002b00:	2301      	movs	r3, #1
 8002b02:	2202      	movs	r2, #2
 8002b04:	4809      	ldr	r0, [pc, #36]	; (8002b2c <ILI9341_Draw_Pixel+0x1b0>)
 8002b06:	f003 f836 	bl	8005b76 <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b10:	4805      	ldr	r0, [pc, #20]	; (8002b28 <ILI9341_Draw_Pixel+0x1ac>)
 8002b12:	f001 f8f3 	bl	8003cfc <HAL_GPIO_WritePin>
 8002b16:	e000      	b.n	8002b1a <ILI9341_Draw_Pixel+0x19e>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002b18:	bf00      	nop
	
}
 8002b1a:	3718      	adds	r7, #24
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}
 8002b20:	20000006 	.word	0x20000006
 8002b24:	20000004 	.word	0x20000004
 8002b28:	40020800 	.word	0x40020800
 8002b2c:	200002b8 	.word	0x200002b8

08002b30 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002b30:	b590      	push	{r4, r7, lr}
 8002b32:	b083      	sub	sp, #12
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	4604      	mov	r4, r0
 8002b38:	4608      	mov	r0, r1
 8002b3a:	4611      	mov	r1, r2
 8002b3c:	461a      	mov	r2, r3
 8002b3e:	4623      	mov	r3, r4
 8002b40:	80fb      	strh	r3, [r7, #6]
 8002b42:	4603      	mov	r3, r0
 8002b44:	80bb      	strh	r3, [r7, #4]
 8002b46:	460b      	mov	r3, r1
 8002b48:	807b      	strh	r3, [r7, #2]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002b4e:	4b24      	ldr	r3, [pc, #144]	; (8002be0 <ILI9341_Draw_Rectangle+0xb0>)
 8002b50:	881b      	ldrh	r3, [r3, #0]
 8002b52:	b29b      	uxth	r3, r3
 8002b54:	88fa      	ldrh	r2, [r7, #6]
 8002b56:	429a      	cmp	r2, r3
 8002b58:	d23d      	bcs.n	8002bd6 <ILI9341_Draw_Rectangle+0xa6>
 8002b5a:	4b22      	ldr	r3, [pc, #136]	; (8002be4 <ILI9341_Draw_Rectangle+0xb4>)
 8002b5c:	881b      	ldrh	r3, [r3, #0]
 8002b5e:	b29b      	uxth	r3, r3
 8002b60:	88ba      	ldrh	r2, [r7, #4]
 8002b62:	429a      	cmp	r2, r3
 8002b64:	d237      	bcs.n	8002bd6 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 8002b66:	88fa      	ldrh	r2, [r7, #6]
 8002b68:	887b      	ldrh	r3, [r7, #2]
 8002b6a:	4413      	add	r3, r2
 8002b6c:	4a1c      	ldr	r2, [pc, #112]	; (8002be0 <ILI9341_Draw_Rectangle+0xb0>)
 8002b6e:	8812      	ldrh	r2, [r2, #0]
 8002b70:	b292      	uxth	r2, r2
 8002b72:	4293      	cmp	r3, r2
 8002b74:	dd05      	ble.n	8002b82 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 8002b76:	4b1a      	ldr	r3, [pc, #104]	; (8002be0 <ILI9341_Draw_Rectangle+0xb0>)
 8002b78:	881b      	ldrh	r3, [r3, #0]
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	88fb      	ldrh	r3, [r7, #6]
 8002b7e:	1ad3      	subs	r3, r2, r3
 8002b80:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 8002b82:	88ba      	ldrh	r2, [r7, #4]
 8002b84:	883b      	ldrh	r3, [r7, #0]
 8002b86:	4413      	add	r3, r2
 8002b88:	4a16      	ldr	r2, [pc, #88]	; (8002be4 <ILI9341_Draw_Rectangle+0xb4>)
 8002b8a:	8812      	ldrh	r2, [r2, #0]
 8002b8c:	b292      	uxth	r2, r2
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	dd05      	ble.n	8002b9e <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 8002b92:	4b14      	ldr	r3, [pc, #80]	; (8002be4 <ILI9341_Draw_Rectangle+0xb4>)
 8002b94:	881b      	ldrh	r3, [r3, #0]
 8002b96:	b29a      	uxth	r2, r3
 8002b98:	88bb      	ldrh	r3, [r7, #4]
 8002b9a:	1ad3      	subs	r3, r2, r3
 8002b9c:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 8002b9e:	88fa      	ldrh	r2, [r7, #6]
 8002ba0:	887b      	ldrh	r3, [r7, #2]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	3b01      	subs	r3, #1
 8002ba8:	b29c      	uxth	r4, r3
 8002baa:	88ba      	ldrh	r2, [r7, #4]
 8002bac:	883b      	ldrh	r3, [r7, #0]
 8002bae:	4413      	add	r3, r2
 8002bb0:	b29b      	uxth	r3, r3
 8002bb2:	3b01      	subs	r3, #1
 8002bb4:	b29b      	uxth	r3, r3
 8002bb6:	88b9      	ldrh	r1, [r7, #4]
 8002bb8:	88f8      	ldrh	r0, [r7, #6]
 8002bba:	4622      	mov	r2, r4
 8002bbc:	f7ff fc44 	bl	8002448 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002bc0:	883b      	ldrh	r3, [r7, #0]
 8002bc2:	887a      	ldrh	r2, [r7, #2]
 8002bc4:	fb02 f303 	mul.w	r3, r2, r3
 8002bc8:	461a      	mov	r2, r3
 8002bca:	8b3b      	ldrh	r3, [r7, #24]
 8002bcc:	4611      	mov	r1, r2
 8002bce:	4618      	mov	r0, r3
 8002bd0:	f7ff fe10 	bl	80027f4 <ILI9341_Draw_Colour_Burst>
 8002bd4:	e000      	b.n	8002bd8 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002bd6:	bf00      	nop
}
 8002bd8:	370c      	adds	r7, #12
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd90      	pop	{r4, r7, pc}
 8002bde:	bf00      	nop
 8002be0:	20000006 	.word	0x20000006
 8002be4:	20000004 	.word	0x20000004

08002be8 <TP_Read>:
#include "ILI9341_Touchscreen.h"
#include "stm32f7xx_hal.h"

//Internal Touchpad command, do not call directly
uint16_t TP_Read(void)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
    uint8_t i = 16;
 8002bee:	2310      	movs	r3, #16
 8002bf0:	71fb      	strb	r3, [r7, #7]
    uint16_t value = 0;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	80bb      	strh	r3, [r7, #4]

    while(i > 0x00)
 8002bf6:	e019      	b.n	8002c2c <TP_Read+0x44>
    {
        value <<= 1;
 8002bf8:	88bb      	ldrh	r3, [r7, #4]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	80bb      	strh	r3, [r7, #4]

				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2108      	movs	r1, #8
 8002c02:	480e      	ldr	r0, [pc, #56]	; (8002c3c <TP_Read+0x54>)
 8002c04:	f001 f87a 	bl	8003cfc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);
 8002c08:	2200      	movs	r2, #0
 8002c0a:	2108      	movs	r1, #8
 8002c0c:	480b      	ldr	r0, [pc, #44]	; (8002c3c <TP_Read+0x54>)
 8002c0e:	f001 f875 	bl	8003cfc <HAL_GPIO_WritePin>
			
        if(HAL_GPIO_ReadPin(TP_MISO_PORT, TP_MISO_PIN) != 0)
 8002c12:	2110      	movs	r1, #16
 8002c14:	4809      	ldr	r0, [pc, #36]	; (8002c3c <TP_Read+0x54>)
 8002c16:	f001 f859 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002c1a:	4603      	mov	r3, r0
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d002      	beq.n	8002c26 <TP_Read+0x3e>
        {
            value++;
 8002c20:	88bb      	ldrh	r3, [r7, #4]
 8002c22:	3301      	adds	r3, #1
 8002c24:	80bb      	strh	r3, [r7, #4]
        }

        i--;
 8002c26:	79fb      	ldrb	r3, [r7, #7]
 8002c28:	3b01      	subs	r3, #1
 8002c2a:	71fb      	strb	r3, [r7, #7]
    while(i > 0x00)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1e2      	bne.n	8002bf8 <TP_Read+0x10>
    };

    return value;
 8002c32:	88bb      	ldrh	r3, [r7, #4]
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000

08002c40 <TP_Write>:

//Internal Touchpad command, do not call directly
void TP_Write(uint8_t value)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	4603      	mov	r3, r0
 8002c48:	71fb      	strb	r3, [r7, #7]
    uint8_t i = 0x08;
 8002c4a:	2308      	movs	r3, #8
 8002c4c:	73fb      	strb	r3, [r7, #15]

		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);	
 8002c4e:	2200      	movs	r2, #0
 8002c50:	2108      	movs	r1, #8
 8002c52:	4815      	ldr	r0, [pc, #84]	; (8002ca8 <TP_Write+0x68>)
 8002c54:	f001 f852 	bl	8003cfc <HAL_GPIO_WritePin>
	
    while(i > 0)
 8002c58:	e01e      	b.n	8002c98 <TP_Write+0x58>
    {
        if((value & 0x80) != 0x00)
 8002c5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	da05      	bge.n	8002c6e <TP_Write+0x2e>
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);
 8002c62:	2201      	movs	r2, #1
 8002c64:	2120      	movs	r1, #32
 8002c66:	4810      	ldr	r0, [pc, #64]	; (8002ca8 <TP_Write+0x68>)
 8002c68:	f001 f848 	bl	8003cfc <HAL_GPIO_WritePin>
 8002c6c:	e004      	b.n	8002c78 <TP_Write+0x38>
        }
        else
        {
						HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_RESET);
 8002c6e:	2200      	movs	r2, #0
 8002c70:	2120      	movs	r1, #32
 8002c72:	480d      	ldr	r0, [pc, #52]	; (8002ca8 <TP_Write+0x68>)
 8002c74:	f001 f842 	bl	8003cfc <HAL_GPIO_WritePin>
        }

        value <<= 1;
 8002c78:	79fb      	ldrb	r3, [r7, #7]
 8002c7a:	005b      	lsls	r3, r3, #1
 8002c7c:	71fb      	strb	r3, [r7, #7]
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);
 8002c7e:	2201      	movs	r2, #1
 8002c80:	2108      	movs	r1, #8
 8002c82:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <TP_Write+0x68>)
 8002c84:	f001 f83a 	bl	8003cfc <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_RESET);        
 8002c88:	2200      	movs	r2, #0
 8002c8a:	2108      	movs	r1, #8
 8002c8c:	4806      	ldr	r0, [pc, #24]	; (8002ca8 <TP_Write+0x68>)
 8002c8e:	f001 f835 	bl	8003cfc <HAL_GPIO_WritePin>
        i--;
 8002c92:	7bfb      	ldrb	r3, [r7, #15]
 8002c94:	3b01      	subs	r3, #1
 8002c96:	73fb      	strb	r3, [r7, #15]
    while(i > 0)
 8002c98:	7bfb      	ldrb	r3, [r7, #15]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d1dd      	bne.n	8002c5a <TP_Write+0x1a>
    };
}
 8002c9e:	bf00      	nop
 8002ca0:	bf00      	nop
 8002ca2:	3710      	adds	r7, #16
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bd80      	pop	{r7, pc}
 8002ca8:	40021000 	.word	0x40021000
 8002cac:	00000000 	.word	0x00000000

08002cb0 <TP_Read_Coordinates>:



//Read coordinates of touchscreen press. Position[0] = X, Position[1] = Y
uint8_t TP_Read_Coordinates(uint16_t Coordinates[2])
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b08a      	sub	sp, #40	; 0x28
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
		HAL_GPIO_WritePin(TP_CLK_PORT, TP_CLK_PIN, GPIO_PIN_SET);		
 8002cb8:	2201      	movs	r2, #1
 8002cba:	2108      	movs	r1, #8
 8002cbc:	485a      	ldr	r0, [pc, #360]	; (8002e28 <TP_Read_Coordinates+0x178>)
 8002cbe:	f001 f81d 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_MOSI_PORT, TP_MOSI_PIN, GPIO_PIN_SET);		
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2120      	movs	r1, #32
 8002cc6:	4858      	ldr	r0, [pc, #352]	; (8002e28 <TP_Read_Coordinates+0x178>)
 8002cc8:	f001 f818 	bl	8003cfc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);		
 8002ccc:	2201      	movs	r2, #1
 8002cce:	2140      	movs	r1, #64	; 0x40
 8002cd0:	4855      	ldr	r0, [pc, #340]	; (8002e28 <TP_Read_Coordinates+0x178>)
 8002cd2:	f001 f813 	bl	8003cfc <HAL_GPIO_WritePin>

	
	
    uint32_t avg_x, avg_y = 0;		
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	623b      	str	r3, [r7, #32]
		uint16_t rawx, rawy = 0;	
 8002cda:	2300      	movs	r3, #0
 8002cdc:	81fb      	strh	r3, [r7, #14]
		uint32_t calculating_x, calculating_y = 0;
 8002cde:	2300      	movs	r3, #0
 8002ce0:	61bb      	str	r3, [r7, #24]
	
    uint32_t samples = NO_OF_POSITION_SAMPLES;
 8002ce2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ce6:	617b      	str	r3, [r7, #20]
    uint32_t counted_samples = 0;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	613b      	str	r3, [r7, #16]

		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_RESET);
 8002cec:	2200      	movs	r2, #0
 8002cee:	2140      	movs	r1, #64	; 0x40
 8002cf0:	484d      	ldr	r0, [pc, #308]	; (8002e28 <TP_Read_Coordinates+0x178>)
 8002cf2:	f001 f803 	bl	8003cfc <HAL_GPIO_WritePin>

	
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002cf6:	e023      	b.n	8002d40 <TP_Read_Coordinates+0x90>
    {			
        TP_Write(CMD_RDY);
 8002cf8:	2090      	movs	r0, #144	; 0x90
 8002cfa:	f7ff ffa1 	bl	8002c40 <TP_Write>

				rawy = TP_Read();	
 8002cfe:	f7ff ff73 	bl	8002be8 <TP_Read>
 8002d02:	4603      	mov	r3, r0
 8002d04:	81fb      	strh	r3, [r7, #14]
				avg_y += rawy;
 8002d06:	89fb      	ldrh	r3, [r7, #14]
 8002d08:	6a3a      	ldr	r2, [r7, #32]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	623b      	str	r3, [r7, #32]
				calculating_y += rawy;
 8002d0e:	89fb      	ldrh	r3, [r7, #14]
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4413      	add	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]

				
        TP_Write(CMD_RDX);
 8002d16:	20d0      	movs	r0, #208	; 0xd0
 8002d18:	f7ff ff92 	bl	8002c40 <TP_Write>
        rawx = TP_Read();
 8002d1c:	f7ff ff64 	bl	8002be8 <TP_Read>
 8002d20:	4603      	mov	r3, r0
 8002d22:	81bb      	strh	r3, [r7, #12]
				avg_x += rawx;
 8002d24:	89bb      	ldrh	r3, [r7, #12]
 8002d26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d28:	4413      	add	r3, r2
 8002d2a:	627b      	str	r3, [r7, #36]	; 0x24
				calculating_x += rawx;
 8002d2c:	89bb      	ldrh	r3, [r7, #12]
 8002d2e:	69fa      	ldr	r2, [r7, #28]
 8002d30:	4413      	add	r3, r2
 8002d32:	61fb      	str	r3, [r7, #28]
        samples--;
 8002d34:	697b      	ldr	r3, [r7, #20]
 8002d36:	3b01      	subs	r3, #1
 8002d38:	617b      	str	r3, [r7, #20]
				counted_samples++;
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	3301      	adds	r3, #1
 8002d3e:	613b      	str	r3, [r7, #16]
    while((samples > 0)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d006      	beq.n	8002d54 <TP_Read_Coordinates+0xa4>
 8002d46:	2104      	movs	r1, #4
 8002d48:	4837      	ldr	r0, [pc, #220]	; (8002e28 <TP_Read_Coordinates+0x178>)
 8002d4a:	f000 ffbf 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d0d1      	beq.n	8002cf8 <TP_Read_Coordinates+0x48>
    };
		
		HAL_GPIO_WritePin(TP_CS_PORT, TP_CS_PIN, GPIO_PIN_SET);
 8002d54:	2201      	movs	r2, #1
 8002d56:	2140      	movs	r1, #64	; 0x40
 8002d58:	4833      	ldr	r0, [pc, #204]	; (8002e28 <TP_Read_Coordinates+0x178>)
 8002d5a:	f000 ffcf 	bl	8003cfc <HAL_GPIO_WritePin>

		
		if((counted_samples == NO_OF_POSITION_SAMPLES)&&(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0))
 8002d5e:	693b      	ldr	r3, [r7, #16]
 8002d60:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d64:	d14d      	bne.n	8002e02 <TP_Read_Coordinates+0x152>
 8002d66:	2104      	movs	r1, #4
 8002d68:	482f      	ldr	r0, [pc, #188]	; (8002e28 <TP_Read_Coordinates+0x178>)
 8002d6a:	f000 ffaf 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002d6e:	4603      	mov	r3, r0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d146      	bne.n	8002e02 <TP_Read_Coordinates+0x152>
		{
		
		calculating_x /= counted_samples;
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d7c:	61fb      	str	r3, [r7, #28]
		calculating_y /= counted_samples;
 8002d7e:	69ba      	ldr	r2, [r7, #24]
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	61bb      	str	r3, [r7, #24]
		
		rawx = calculating_x;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	81bb      	strh	r3, [r7, #12]
		rawy = calculating_y;		
 8002d8c:	69bb      	ldr	r3, [r7, #24]
 8002d8e:	81fb      	strh	r3, [r7, #14]
		
		rawx *= -1;
 8002d90:	89bb      	ldrh	r3, [r7, #12]
 8002d92:	425b      	negs	r3, r3
 8002d94:	81bb      	strh	r3, [r7, #12]
		rawy *= -1;
 8002d96:	89fb      	ldrh	r3, [r7, #14]
 8002d98:	425b      	negs	r3, r3
 8002d9a:	81fb      	strh	r3, [r7, #14]
		
		//CONVERTING 16bit Value to Screen coordinates
    // 65535/273 = 240!
		// 65535/204 = 320!
    Coordinates[0] = ((240 - (rawx/X_TRANSLATION)) - X_OFFSET)*X_MAGNITUDE;
 8002d9c:	89ba      	ldrh	r2, [r7, #12]
 8002d9e:	4b23      	ldr	r3, [pc, #140]	; (8002e2c <TP_Read_Coordinates+0x17c>)
 8002da0:	fba3 1302 	umull	r1, r3, r3, r2
 8002da4:	1ad2      	subs	r2, r2, r3
 8002da6:	0852      	lsrs	r2, r2, #1
 8002da8:	4413      	add	r3, r2
 8002daa:	0a1b      	lsrs	r3, r3, #8
 8002dac:	b29b      	uxth	r3, r3
 8002dae:	f1c3 03e3 	rsb	r3, r3, #227	; 0xe3
 8002db2:	ee07 3a90 	vmov	s15, r3
 8002db6:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002dba:	ed9f 6b19 	vldr	d6, [pc, #100]	; 8002e20 <TP_Read_Coordinates+0x170>
 8002dbe:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dc2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002dc6:	ee17 3a90 	vmov	r3, s15
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	801a      	strh	r2, [r3, #0]
		Coordinates[1] = ((rawy/Y_TRANSLATION)- Y_OFFSET)*Y_MAGNITUDE;
 8002dd0:	89fb      	ldrh	r3, [r7, #14]
 8002dd2:	4a17      	ldr	r2, [pc, #92]	; (8002e30 <TP_Read_Coordinates+0x180>)
 8002dd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002dd8:	09db      	lsrs	r3, r3, #7
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3b0f      	subs	r3, #15
 8002dde:	ee07 3a90 	vmov	s15, r3
 8002de2:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8002de6:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8002e20 <TP_Read_Coordinates+0x170>
 8002dea:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	3302      	adds	r3, #2
 8002df2:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8002df6:	ee17 2a90 	vmov	r2, s15
 8002dfa:	b292      	uxth	r2, r2
 8002dfc:	801a      	strh	r2, [r3, #0]
		
		return TOUCHPAD_DATA_OK;			
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e007      	b.n	8002e12 <TP_Read_Coordinates+0x162>
		}
		else
		{
			Coordinates[0] = 0;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	801a      	strh	r2, [r3, #0]
			Coordinates[1] = 0;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	3302      	adds	r3, #2
 8002e0c:	2200      	movs	r2, #0
 8002e0e:	801a      	strh	r2, [r3, #0]
			return TOUCHPAD_DATA_NOISY;
 8002e10:	2300      	movs	r3, #0
		}
}
 8002e12:	4618      	mov	r0, r3
 8002e14:	3728      	adds	r7, #40	; 0x28
 8002e16:	46bd      	mov	sp, r7
 8002e18:	bd80      	pop	{r7, pc}
 8002e1a:	bf00      	nop
 8002e1c:	f3af 8000 	nop.w
 8002e20:	28f5c28f 	.word	0x28f5c28f
 8002e24:	3ff28f5c 	.word	0x3ff28f5c
 8002e28:	40021000 	.word	0x40021000
 8002e2c:	e01e01e1 	.word	0xe01e01e1
 8002e30:	a0a0a0a1 	.word	0xa0a0a0a1

08002e34 <TP_Touchpad_Pressed>:

//Check if Touchpad was pressed. Returns TOUCHPAD_PRESSED (1) or TOUCHPAD_NOT_PRESSED (0)
uint8_t TP_Touchpad_Pressed(void)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(TP_IRQ_PORT, TP_IRQ_PIN) == 0)
 8002e38:	2104      	movs	r1, #4
 8002e3a:	4805      	ldr	r0, [pc, #20]	; (8002e50 <TP_Touchpad_Pressed+0x1c>)
 8002e3c:	f000 ff46 	bl	8003ccc <HAL_GPIO_ReadPin>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d101      	bne.n	8002e4a <TP_Touchpad_Pressed+0x16>
	{
		return TOUCHPAD_PRESSED;
 8002e46:	2301      	movs	r3, #1
 8002e48:	e000      	b.n	8002e4c <TP_Touchpad_Pressed+0x18>
	}
	else
	{
		return TOUCHPAD_NOT_PRESSED;
 8002e4a:	2300      	movs	r3, #0
	}
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	bd80      	pop	{r7, pc}
 8002e50:	40021000 	.word	0x40021000

08002e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	af00      	add	r7, sp, #0
  /* Configure Instruction cache through ART accelerator */ 
#if (ART_ACCLERATOR_ENABLE != 0)
   __HAL_FLASH_ART_ENABLE();
 8002e58:	4b0b      	ldr	r3, [pc, #44]	; (8002e88 <HAL_Init+0x34>)
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a0a      	ldr	r2, [pc, #40]	; (8002e88 <HAL_Init+0x34>)
 8002e5e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e62:	6013      	str	r3, [r2, #0]
#endif /* ART_ACCLERATOR_ENABLE */

  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e64:	4b08      	ldr	r3, [pc, #32]	; (8002e88 <HAL_Init+0x34>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a07      	ldr	r2, [pc, #28]	; (8002e88 <HAL_Init+0x34>)
 8002e6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e6e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e70:	2003      	movs	r0, #3
 8002e72:	f000 fd3d 	bl	80038f0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e76:	2000      	movs	r0, #0
 8002e78:	f000 f808 	bl	8002e8c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8002e7c:	f7fe fbbc 	bl	80015f8 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8002e80:	2300      	movs	r3, #0
}
 8002e82:	4618      	mov	r0, r3
 8002e84:	bd80      	pop	{r7, pc}
 8002e86:	bf00      	nop
 8002e88:	40023c00 	.word	0x40023c00

08002e8c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e8c:	b580      	push	{r7, lr}
 8002e8e:	b082      	sub	sp, #8
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <HAL_InitTick+0x54>)
 8002e96:	681a      	ldr	r2, [r3, #0]
 8002e98:	4b12      	ldr	r3, [pc, #72]	; (8002ee4 <HAL_InitTick+0x58>)
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002ea2:	fbb3 f3f1 	udiv	r3, r3, r1
 8002ea6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f000 fd55 	bl	800395a <HAL_SYSTICK_Config>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e00e      	b.n	8002ed8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2b0f      	cmp	r3, #15
 8002ebe:	d80a      	bhi.n	8002ed6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	f04f 30ff 	mov.w	r0, #4294967295
 8002ec8:	f000 fd1d 	bl	8003906 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002ecc:	4a06      	ldr	r2, [pc, #24]	; (8002ee8 <HAL_InitTick+0x5c>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	e000      	b.n	8002ed8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
}
 8002ed8:	4618      	mov	r0, r3
 8002eda:	3708      	adds	r7, #8
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bd80      	pop	{r7, pc}
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	2000000c 	.word	0x2000000c
 8002ee8:	20000008 	.word	0x20000008

08002eec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eec:	b480      	push	{r7}
 8002eee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ef0:	4b06      	ldr	r3, [pc, #24]	; (8002f0c <HAL_IncTick+0x20>)
 8002ef2:	781b      	ldrb	r3, [r3, #0]
 8002ef4:	461a      	mov	r2, r3
 8002ef6:	4b06      	ldr	r3, [pc, #24]	; (8002f10 <HAL_IncTick+0x24>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	4413      	add	r3, r2
 8002efc:	4a04      	ldr	r2, [pc, #16]	; (8002f10 <HAL_IncTick+0x24>)
 8002efe:	6013      	str	r3, [r2, #0]
}
 8002f00:	bf00      	nop
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	2000000c 	.word	0x2000000c
 8002f10:	20000488 	.word	0x20000488

08002f14 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f14:	b480      	push	{r7}
 8002f16:	af00      	add	r7, sp, #0
  return uwTick;
 8002f18:	4b03      	ldr	r3, [pc, #12]	; (8002f28 <HAL_GetTick+0x14>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f24:	4770      	bx	lr
 8002f26:	bf00      	nop
 8002f28:	20000488 	.word	0x20000488

08002f2c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b084      	sub	sp, #16
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f34:	f7ff ffee 	bl	8002f14 <HAL_GetTick>
 8002f38:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f44:	d005      	beq.n	8002f52 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f46:	4b0a      	ldr	r3, [pc, #40]	; (8002f70 <HAL_Delay+0x44>)
 8002f48:	781b      	ldrb	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	4413      	add	r3, r2
 8002f50:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f52:	bf00      	nop
 8002f54:	f7ff ffde 	bl	8002f14 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68bb      	ldr	r3, [r7, #8]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d8f7      	bhi.n	8002f54 <HAL_Delay+0x28>
  {
  }
}
 8002f64:	bf00      	nop
 8002f66:	bf00      	nop
 8002f68:	3710      	adds	r7, #16
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	2000000c 	.word	0x2000000c

08002f74 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e031      	b.n	8002fee <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d109      	bne.n	8002fa6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f7fd fb80 	bl	8000698 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002faa:	f003 0310 	and.w	r3, r3, #16
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d116      	bne.n	8002fe0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <HAL_ADC_Init+0x84>)
 8002fb8:	4013      	ands	r3, r2
 8002fba:	f043 0202 	orr.w	r2, r3, #2
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f000 faca 	bl	800355c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2200      	movs	r2, #0
 8002fcc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f023 0303 	bic.w	r3, r3, #3
 8002fd6:	f043 0201 	orr.w	r2, r3, #1
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	641a      	str	r2, [r3, #64]	; 0x40
 8002fde:	e001      	b.n	8002fe4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fe0:	2301      	movs	r3, #1
 8002fe2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fec:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}
 8002ff6:	bf00      	nop
 8002ff8:	ffffeefd 	.word	0xffffeefd

08002ffc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b085      	sub	sp, #20
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800300e:	2b01      	cmp	r3, #1
 8003010:	d101      	bne.n	8003016 <HAL_ADC_Start+0x1a>
 8003012:	2302      	movs	r3, #2
 8003014:	e0ad      	b.n	8003172 <HAL_ADC_Start+0x176>
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2201      	movs	r2, #1
 800301a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	689b      	ldr	r3, [r3, #8]
 8003024:	f003 0301 	and.w	r3, r3, #1
 8003028:	2b01      	cmp	r3, #1
 800302a:	d018      	beq.n	800305e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	689a      	ldr	r2, [r3, #8]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f042 0201 	orr.w	r2, r2, #1
 800303a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800303c:	4b50      	ldr	r3, [pc, #320]	; (8003180 <HAL_ADC_Start+0x184>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4a50      	ldr	r2, [pc, #320]	; (8003184 <HAL_ADC_Start+0x188>)
 8003042:	fba2 2303 	umull	r2, r3, r2, r3
 8003046:	0c9a      	lsrs	r2, r3, #18
 8003048:	4613      	mov	r3, r2
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	4413      	add	r3, r2
 800304e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003050:	e002      	b.n	8003058 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	3b01      	subs	r3, #1
 8003056:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	2b00      	cmp	r3, #0
 800305c:	d1f9      	bne.n	8003052 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	689b      	ldr	r3, [r3, #8]
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b01      	cmp	r3, #1
 800306a:	d175      	bne.n	8003158 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003070:	4b45      	ldr	r3, [pc, #276]	; (8003188 <HAL_ADC_Start+0x18c>)
 8003072:	4013      	ands	r3, r2
 8003074:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003086:	2b00      	cmp	r3, #0
 8003088:	d007      	beq.n	800309a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003092:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80030a6:	d106      	bne.n	80030b6 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ac:	f023 0206 	bic.w	r2, r3, #6
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	645a      	str	r2, [r3, #68]	; 0x44
 80030b4:	e002      	b.n	80030bc <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2200      	movs	r2, #0
 80030c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80030cc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80030ce:	4b2f      	ldr	r3, [pc, #188]	; (800318c <HAL_ADC_Start+0x190>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	f003 031f 	and.w	r3, r3, #31
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d10f      	bne.n	80030fa <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d143      	bne.n	8003170 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	689a      	ldr	r2, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030f6:	609a      	str	r2, [r3, #8]
 80030f8:	e03a      	b.n	8003170 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a24      	ldr	r2, [pc, #144]	; (8003190 <HAL_ADC_Start+0x194>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10e      	bne.n	8003122 <HAL_ADC_Start+0x126>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689b      	ldr	r3, [r3, #8]
 800310a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d107      	bne.n	8003122 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	689a      	ldr	r2, [r3, #8]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003120:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8003122:	4b1a      	ldr	r3, [pc, #104]	; (800318c <HAL_ADC_Start+0x190>)
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b00      	cmp	r3, #0
 800312c:	d120      	bne.n	8003170 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	4a18      	ldr	r2, [pc, #96]	; (8003194 <HAL_ADC_Start+0x198>)
 8003134:	4293      	cmp	r3, r2
 8003136:	d11b      	bne.n	8003170 <HAL_ADC_Start+0x174>
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	689b      	ldr	r3, [r3, #8]
 800313e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d114      	bne.n	8003170 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003154:	609a      	str	r2, [r3, #8]
 8003156:	e00b      	b.n	8003170 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315c:	f043 0210 	orr.w	r2, r3, #16
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003168:	f043 0201 	orr.w	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3714      	adds	r7, #20
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr
 800317e:	bf00      	nop
 8003180:	20000000 	.word	0x20000000
 8003184:	431bde83 	.word	0x431bde83
 8003188:	fffff8fe 	.word	0xfffff8fe
 800318c:	40012300 	.word	0x40012300
 8003190:	40012000 	.word	0x40012000
 8003194:	40012200 	.word	0x40012200

08003198 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b084      	sub	sp, #16
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
 80031a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031a2:	2300      	movs	r3, #0
 80031a4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031b4:	d113      	bne.n	80031de <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	689b      	ldr	r3, [r3, #8]
 80031bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80031c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031c4:	d10b      	bne.n	80031de <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ca:	f043 0220 	orr.w	r2, r3, #32
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e063      	b.n	80032a6 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80031de:	f7ff fe99 	bl	8002f14 <HAL_GetTick>
 80031e2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031e4:	e021      	b.n	800322a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031ec:	d01d      	beq.n	800322a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80031ee:	683b      	ldr	r3, [r7, #0]
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d007      	beq.n	8003204 <HAL_ADC_PollForConversion+0x6c>
 80031f4:	f7ff fe8e 	bl	8002f14 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	683a      	ldr	r2, [r7, #0]
 8003200:	429a      	cmp	r2, r3
 8003202:	d212      	bcs.n	800322a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f003 0302 	and.w	r3, r3, #2
 800320e:	2b02      	cmp	r3, #2
 8003210:	d00b      	beq.n	800322a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003216:	f043 0204 	orr.w	r2, r3, #4
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2200      	movs	r2, #0
 8003222:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e03d      	b.n	80032a6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0302 	and.w	r3, r3, #2
 8003234:	2b02      	cmp	r3, #2
 8003236:	d1d6      	bne.n	80031e6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f06f 0212 	mvn.w	r2, #18
 8003240:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003246:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003258:	2b00      	cmp	r3, #0
 800325a:	d123      	bne.n	80032a4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8003260:	2b00      	cmp	r3, #0
 8003262:	d11f      	bne.n	80032a4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800326a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	689b      	ldr	r3, [r3, #8]
 8003278:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800327c:	2b00      	cmp	r3, #0
 800327e:	d111      	bne.n	80032a4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003284:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003290:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003294:	2b00      	cmp	r3, #0
 8003296:	d105      	bne.n	80032a4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800329c:	f043 0201 	orr.w	r2, r3, #1
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80032ae:	b480      	push	{r7}
 80032b0:	b083      	sub	sp, #12
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80032bc:	4618      	mov	r0, r3
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr

080032c8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80032d2:	2300      	movs	r3, #0
 80032d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032dc:	2b01      	cmp	r3, #1
 80032de:	d101      	bne.n	80032e4 <HAL_ADC_ConfigChannel+0x1c>
 80032e0:	2302      	movs	r3, #2
 80032e2:	e12a      	b.n	800353a <HAL_ADC_ConfigChannel+0x272>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2201      	movs	r2, #1
 80032e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	2b09      	cmp	r3, #9
 80032f2:	d93a      	bls.n	800336a <HAL_ADC_ConfigChannel+0xa2>
 80032f4:	683b      	ldr	r3, [r7, #0]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80032fc:	d035      	beq.n	800336a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	68d9      	ldr	r1, [r3, #12]
 8003304:	683b      	ldr	r3, [r7, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	b29b      	uxth	r3, r3
 800330a:	461a      	mov	r2, r3
 800330c:	4613      	mov	r3, r2
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	4413      	add	r3, r2
 8003312:	3b1e      	subs	r3, #30
 8003314:	2207      	movs	r2, #7
 8003316:	fa02 f303 	lsl.w	r3, r2, r3
 800331a:	43da      	mvns	r2, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	400a      	ands	r2, r1
 8003322:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a87      	ldr	r2, [pc, #540]	; (8003548 <HAL_ADC_ConfigChannel+0x280>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d10a      	bne.n	8003344 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	68d9      	ldr	r1, [r3, #12]
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	061a      	lsls	r2, r3, #24
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	430a      	orrs	r2, r1
 8003340:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003342:	e035      	b.n	80033b0 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	68d9      	ldr	r1, [r3, #12]
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	689a      	ldr	r2, [r3, #8]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	b29b      	uxth	r3, r3
 8003354:	4618      	mov	r0, r3
 8003356:	4603      	mov	r3, r0
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	4403      	add	r3, r0
 800335c:	3b1e      	subs	r3, #30
 800335e:	409a      	lsls	r2, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	430a      	orrs	r2, r1
 8003366:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003368:	e022      	b.n	80033b0 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	6919      	ldr	r1, [r3, #16]
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	b29b      	uxth	r3, r3
 8003376:	461a      	mov	r2, r3
 8003378:	4613      	mov	r3, r2
 800337a:	005b      	lsls	r3, r3, #1
 800337c:	4413      	add	r3, r2
 800337e:	2207      	movs	r2, #7
 8003380:	fa02 f303 	lsl.w	r3, r2, r3
 8003384:	43da      	mvns	r2, r3
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	400a      	ands	r2, r1
 800338c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	6919      	ldr	r1, [r3, #16]
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	689a      	ldr	r2, [r3, #8]
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	4603      	mov	r3, r0
 80033a2:	005b      	lsls	r3, r3, #1
 80033a4:	4403      	add	r3, r0
 80033a6:	409a      	lsls	r2, r3
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80033b0:	683b      	ldr	r3, [r7, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	2b06      	cmp	r3, #6
 80033b6:	d824      	bhi.n	8003402 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	4613      	mov	r3, r2
 80033c4:	009b      	lsls	r3, r3, #2
 80033c6:	4413      	add	r3, r2
 80033c8:	3b05      	subs	r3, #5
 80033ca:	221f      	movs	r2, #31
 80033cc:	fa02 f303 	lsl.w	r3, r2, r3
 80033d0:	43da      	mvns	r2, r3
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	400a      	ands	r2, r1
 80033d8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	b29b      	uxth	r3, r3
 80033e6:	4618      	mov	r0, r3
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685a      	ldr	r2, [r3, #4]
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	3b05      	subs	r3, #5
 80033f4:	fa00 f203 	lsl.w	r2, r0, r3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	430a      	orrs	r2, r1
 80033fe:	635a      	str	r2, [r3, #52]	; 0x34
 8003400:	e04c      	b.n	800349c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003402:	683b      	ldr	r3, [r7, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b0c      	cmp	r3, #12
 8003408:	d824      	bhi.n	8003454 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	685a      	ldr	r2, [r3, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	4413      	add	r3, r2
 800341a:	3b23      	subs	r3, #35	; 0x23
 800341c:	221f      	movs	r2, #31
 800341e:	fa02 f303 	lsl.w	r3, r2, r3
 8003422:	43da      	mvns	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	400a      	ands	r2, r1
 800342a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	b29b      	uxth	r3, r3
 8003438:	4618      	mov	r0, r3
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685a      	ldr	r2, [r3, #4]
 800343e:	4613      	mov	r3, r2
 8003440:	009b      	lsls	r3, r3, #2
 8003442:	4413      	add	r3, r2
 8003444:	3b23      	subs	r3, #35	; 0x23
 8003446:	fa00 f203 	lsl.w	r2, r0, r3
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	430a      	orrs	r2, r1
 8003450:	631a      	str	r2, [r3, #48]	; 0x30
 8003452:	e023      	b.n	800349c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	685a      	ldr	r2, [r3, #4]
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	3b41      	subs	r3, #65	; 0x41
 8003466:	221f      	movs	r2, #31
 8003468:	fa02 f303 	lsl.w	r3, r2, r3
 800346c:	43da      	mvns	r2, r3
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	400a      	ands	r2, r1
 8003474:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	b29b      	uxth	r3, r3
 8003482:	4618      	mov	r0, r3
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685a      	ldr	r2, [r3, #4]
 8003488:	4613      	mov	r3, r2
 800348a:	009b      	lsls	r3, r3, #2
 800348c:	4413      	add	r3, r2
 800348e:	3b41      	subs	r3, #65	; 0x41
 8003490:	fa00 f203 	lsl.w	r2, r0, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a2a      	ldr	r2, [pc, #168]	; (800354c <HAL_ADC_ConfigChannel+0x284>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d10a      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1f4>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034ae:	d105      	bne.n	80034bc <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 80034b0:	4b27      	ldr	r3, [pc, #156]	; (8003550 <HAL_ADC_ConfigChannel+0x288>)
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	4a26      	ldr	r2, [pc, #152]	; (8003550 <HAL_ADC_ConfigChannel+0x288>)
 80034b6:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 80034ba:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	4a22      	ldr	r2, [pc, #136]	; (800354c <HAL_ADC_ConfigChannel+0x284>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d109      	bne.n	80034da <HAL_ADC_ConfigChannel+0x212>
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b12      	cmp	r3, #18
 80034cc:	d105      	bne.n	80034da <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_ADC_ConfigChannel+0x288>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <HAL_ADC_ConfigChannel+0x288>)
 80034d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80034d8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a1b      	ldr	r2, [pc, #108]	; (800354c <HAL_ADC_ConfigChannel+0x284>)
 80034e0:	4293      	cmp	r3, r2
 80034e2:	d125      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x268>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a17      	ldr	r2, [pc, #92]	; (8003548 <HAL_ADC_ConfigChannel+0x280>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d003      	beq.n	80034f6 <HAL_ADC_ConfigChannel+0x22e>
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2b11      	cmp	r3, #17
 80034f4:	d11c      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <HAL_ADC_ConfigChannel+0x288>)
 80034f8:	685b      	ldr	r3, [r3, #4]
 80034fa:	4a15      	ldr	r2, [pc, #84]	; (8003550 <HAL_ADC_ConfigChannel+0x288>)
 80034fc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003500:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a10      	ldr	r2, [pc, #64]	; (8003548 <HAL_ADC_ConfigChannel+0x280>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800350c:	4b11      	ldr	r3, [pc, #68]	; (8003554 <HAL_ADC_ConfigChannel+0x28c>)
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	4a11      	ldr	r2, [pc, #68]	; (8003558 <HAL_ADC_ConfigChannel+0x290>)
 8003512:	fba2 2303 	umull	r2, r3, r2, r3
 8003516:	0c9a      	lsrs	r2, r3, #18
 8003518:	4613      	mov	r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	4413      	add	r3, r2
 800351e:	005b      	lsls	r3, r3, #1
 8003520:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003522:	e002      	b.n	800352a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	3b01      	subs	r3, #1
 8003528:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d1f9      	bne.n	8003524 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003538:	2300      	movs	r3, #0
}
 800353a:	4618      	mov	r0, r3
 800353c:	3714      	adds	r7, #20
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr
 8003546:	bf00      	nop
 8003548:	10000012 	.word	0x10000012
 800354c:	40012000 	.word	0x40012000
 8003550:	40012300 	.word	0x40012300
 8003554:	20000000 	.word	0x20000000
 8003558:	431bde83 	.word	0x431bde83

0800355c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003564:	4b78      	ldr	r3, [pc, #480]	; (8003748 <ADC_Init+0x1ec>)
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	4a77      	ldr	r2, [pc, #476]	; (8003748 <ADC_Init+0x1ec>)
 800356a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800356e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8003570:	4b75      	ldr	r3, [pc, #468]	; (8003748 <ADC_Init+0x1ec>)
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	4973      	ldr	r1, [pc, #460]	; (8003748 <ADC_Init+0x1ec>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	685a      	ldr	r2, [r3, #4]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800358c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6859      	ldr	r1, [r3, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	691b      	ldr	r3, [r3, #16]
 8003598:	021a      	lsls	r2, r3, #8
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	430a      	orrs	r2, r1
 80035a0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685a      	ldr	r2, [r3, #4]
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80035b0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	6859      	ldr	r1, [r3, #4]
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689a      	ldr	r2, [r3, #8]
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	430a      	orrs	r2, r1
 80035c2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	689a      	ldr	r2, [r3, #8]
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80035d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	6899      	ldr	r1, [r3, #8]
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68da      	ldr	r2, [r3, #12]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	430a      	orrs	r2, r1
 80035e4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ea:	4a58      	ldr	r2, [pc, #352]	; (800374c <ADC_Init+0x1f0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d022      	beq.n	8003636 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	689a      	ldr	r2, [r3, #8]
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80035fe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6899      	ldr	r1, [r3, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	430a      	orrs	r2, r1
 8003610:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003620:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	6899      	ldr	r1, [r3, #8]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	609a      	str	r2, [r3, #8]
 8003634:	e00f      	b.n	8003656 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003644:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689a      	ldr	r2, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003654:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f022 0202 	bic.w	r2, r2, #2
 8003664:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	6899      	ldr	r1, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	005a      	lsls	r2, r3, #1
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	430a      	orrs	r2, r1
 8003678:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d01b      	beq.n	80036bc <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	685a      	ldr	r2, [r3, #4]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003692:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	685a      	ldr	r2, [r3, #4]
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80036a2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	6859      	ldr	r1, [r3, #4]
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ae:	3b01      	subs	r3, #1
 80036b0:	035a      	lsls	r2, r3, #13
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	605a      	str	r2, [r3, #4]
 80036ba:	e007      	b.n	80036cc <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80036ca:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80036da:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	69db      	ldr	r3, [r3, #28]
 80036e6:	3b01      	subs	r3, #1
 80036e8:	051a      	lsls	r2, r3, #20
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	430a      	orrs	r2, r1
 80036f0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	689a      	ldr	r2, [r3, #8]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003700:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	6899      	ldr	r1, [r3, #8]
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800370e:	025a      	lsls	r2, r3, #9
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	689a      	ldr	r2, [r3, #8]
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003726:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6899      	ldr	r1, [r3, #8]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	029a      	lsls	r2, r3, #10
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
}
 800373c:	bf00      	nop
 800373e:	370c      	adds	r7, #12
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr
 8003748:	40012300 	.word	0x40012300
 800374c:	0f000001 	.word	0x0f000001

08003750 <__NVIC_SetPriorityGrouping>:
{
 8003750:	b480      	push	{r7}
 8003752:	b085      	sub	sp, #20
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f003 0307 	and.w	r3, r3, #7
 800375e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003760:	4b0b      	ldr	r3, [pc, #44]	; (8003790 <__NVIC_SetPriorityGrouping+0x40>)
 8003762:	68db      	ldr	r3, [r3, #12]
 8003764:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800376c:	4013      	ands	r3, r2
 800376e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003778:	4b06      	ldr	r3, [pc, #24]	; (8003794 <__NVIC_SetPriorityGrouping+0x44>)
 800377a:	4313      	orrs	r3, r2
 800377c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800377e:	4a04      	ldr	r2, [pc, #16]	; (8003790 <__NVIC_SetPriorityGrouping+0x40>)
 8003780:	68bb      	ldr	r3, [r7, #8]
 8003782:	60d3      	str	r3, [r2, #12]
}
 8003784:	bf00      	nop
 8003786:	3714      	adds	r7, #20
 8003788:	46bd      	mov	sp, r7
 800378a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800378e:	4770      	bx	lr
 8003790:	e000ed00 	.word	0xe000ed00
 8003794:	05fa0000 	.word	0x05fa0000

08003798 <__NVIC_GetPriorityGrouping>:
{
 8003798:	b480      	push	{r7}
 800379a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800379c:	4b04      	ldr	r3, [pc, #16]	; (80037b0 <__NVIC_GetPriorityGrouping+0x18>)
 800379e:	68db      	ldr	r3, [r3, #12]
 80037a0:	0a1b      	lsrs	r3, r3, #8
 80037a2:	f003 0307 	and.w	r3, r3, #7
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	e000ed00 	.word	0xe000ed00

080037b4 <__NVIC_EnableIRQ>:
{
 80037b4:	b480      	push	{r7}
 80037b6:	b083      	sub	sp, #12
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	4603      	mov	r3, r0
 80037bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	db0b      	blt.n	80037de <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80037c6:	79fb      	ldrb	r3, [r7, #7]
 80037c8:	f003 021f 	and.w	r2, r3, #31
 80037cc:	4907      	ldr	r1, [pc, #28]	; (80037ec <__NVIC_EnableIRQ+0x38>)
 80037ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80037d2:	095b      	lsrs	r3, r3, #5
 80037d4:	2001      	movs	r0, #1
 80037d6:	fa00 f202 	lsl.w	r2, r0, r2
 80037da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80037de:	bf00      	nop
 80037e0:	370c      	adds	r7, #12
 80037e2:	46bd      	mov	sp, r7
 80037e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e8:	4770      	bx	lr
 80037ea:	bf00      	nop
 80037ec:	e000e100 	.word	0xe000e100

080037f0 <__NVIC_SetPriority>:
{
 80037f0:	b480      	push	{r7}
 80037f2:	b083      	sub	sp, #12
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	4603      	mov	r3, r0
 80037f8:	6039      	str	r1, [r7, #0]
 80037fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80037fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003800:	2b00      	cmp	r3, #0
 8003802:	db0a      	blt.n	800381a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	b2da      	uxtb	r2, r3
 8003808:	490c      	ldr	r1, [pc, #48]	; (800383c <__NVIC_SetPriority+0x4c>)
 800380a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800380e:	0112      	lsls	r2, r2, #4
 8003810:	b2d2      	uxtb	r2, r2
 8003812:	440b      	add	r3, r1
 8003814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003818:	e00a      	b.n	8003830 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800381a:	683b      	ldr	r3, [r7, #0]
 800381c:	b2da      	uxtb	r2, r3
 800381e:	4908      	ldr	r1, [pc, #32]	; (8003840 <__NVIC_SetPriority+0x50>)
 8003820:	79fb      	ldrb	r3, [r7, #7]
 8003822:	f003 030f 	and.w	r3, r3, #15
 8003826:	3b04      	subs	r3, #4
 8003828:	0112      	lsls	r2, r2, #4
 800382a:	b2d2      	uxtb	r2, r2
 800382c:	440b      	add	r3, r1
 800382e:	761a      	strb	r2, [r3, #24]
}
 8003830:	bf00      	nop
 8003832:	370c      	adds	r7, #12
 8003834:	46bd      	mov	sp, r7
 8003836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383a:	4770      	bx	lr
 800383c:	e000e100 	.word	0xe000e100
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <NVIC_EncodePriority>:
{
 8003844:	b480      	push	{r7}
 8003846:	b089      	sub	sp, #36	; 0x24
 8003848:	af00      	add	r7, sp, #0
 800384a:	60f8      	str	r0, [r7, #12]
 800384c:	60b9      	str	r1, [r7, #8]
 800384e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003858:	69fb      	ldr	r3, [r7, #28]
 800385a:	f1c3 0307 	rsb	r3, r3, #7
 800385e:	2b04      	cmp	r3, #4
 8003860:	bf28      	it	cs
 8003862:	2304      	movcs	r3, #4
 8003864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	3304      	adds	r3, #4
 800386a:	2b06      	cmp	r3, #6
 800386c:	d902      	bls.n	8003874 <NVIC_EncodePriority+0x30>
 800386e:	69fb      	ldr	r3, [r7, #28]
 8003870:	3b03      	subs	r3, #3
 8003872:	e000      	b.n	8003876 <NVIC_EncodePriority+0x32>
 8003874:	2300      	movs	r3, #0
 8003876:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	69bb      	ldr	r3, [r7, #24]
 800387e:	fa02 f303 	lsl.w	r3, r2, r3
 8003882:	43da      	mvns	r2, r3
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	401a      	ands	r2, r3
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800388c:	f04f 31ff 	mov.w	r1, #4294967295
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	fa01 f303 	lsl.w	r3, r1, r3
 8003896:	43d9      	mvns	r1, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800389c:	4313      	orrs	r3, r2
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3724      	adds	r7, #36	; 0x24
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
	...

080038ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	3b01      	subs	r3, #1
 80038b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80038bc:	d301      	bcc.n	80038c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80038be:	2301      	movs	r3, #1
 80038c0:	e00f      	b.n	80038e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80038c2:	4a0a      	ldr	r2, [pc, #40]	; (80038ec <SysTick_Config+0x40>)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	3b01      	subs	r3, #1
 80038c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80038ca:	210f      	movs	r1, #15
 80038cc:	f04f 30ff 	mov.w	r0, #4294967295
 80038d0:	f7ff ff8e 	bl	80037f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80038d4:	4b05      	ldr	r3, [pc, #20]	; (80038ec <SysTick_Config+0x40>)
 80038d6:	2200      	movs	r2, #0
 80038d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038da:	4b04      	ldr	r3, [pc, #16]	; (80038ec <SysTick_Config+0x40>)
 80038dc:	2207      	movs	r2, #7
 80038de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3708      	adds	r7, #8
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	e000e010 	.word	0xe000e010

080038f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b082      	sub	sp, #8
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f7ff ff29 	bl	8003750 <__NVIC_SetPriorityGrouping>
}
 80038fe:	bf00      	nop
 8003900:	3708      	adds	r7, #8
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}

08003906 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003906:	b580      	push	{r7, lr}
 8003908:	b086      	sub	sp, #24
 800390a:	af00      	add	r7, sp, #0
 800390c:	4603      	mov	r3, r0
 800390e:	60b9      	str	r1, [r7, #8]
 8003910:	607a      	str	r2, [r7, #4]
 8003912:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003914:	2300      	movs	r3, #0
 8003916:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003918:	f7ff ff3e 	bl	8003798 <__NVIC_GetPriorityGrouping>
 800391c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800391e:	687a      	ldr	r2, [r7, #4]
 8003920:	68b9      	ldr	r1, [r7, #8]
 8003922:	6978      	ldr	r0, [r7, #20]
 8003924:	f7ff ff8e 	bl	8003844 <NVIC_EncodePriority>
 8003928:	4602      	mov	r2, r0
 800392a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800392e:	4611      	mov	r1, r2
 8003930:	4618      	mov	r0, r3
 8003932:	f7ff ff5d 	bl	80037f0 <__NVIC_SetPriority>
}
 8003936:	bf00      	nop
 8003938:	3718      	adds	r7, #24
 800393a:	46bd      	mov	sp, r7
 800393c:	bd80      	pop	{r7, pc}

0800393e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800393e:	b580      	push	{r7, lr}
 8003940:	b082      	sub	sp, #8
 8003942:	af00      	add	r7, sp, #0
 8003944:	4603      	mov	r3, r0
 8003946:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003948:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800394c:	4618      	mov	r0, r3
 800394e:	f7ff ff31 	bl	80037b4 <__NVIC_EnableIRQ>
}
 8003952:	bf00      	nop
 8003954:	3708      	adds	r7, #8
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}

0800395a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800395a:	b580      	push	{r7, lr}
 800395c:	b082      	sub	sp, #8
 800395e:	af00      	add	r7, sp, #0
 8003960:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003962:	6878      	ldr	r0, [r7, #4]
 8003964:	f7ff ffa2 	bl	80038ac <SysTick_Config>
 8003968:	4603      	mov	r3, r0
}
 800396a:	4618      	mov	r0, r3
 800396c:	3708      	adds	r7, #8
 800396e:	46bd      	mov	sp, r7
 8003970:	bd80      	pop	{r7, pc}
	...

08003974 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003974:	b480      	push	{r7}
 8003976:	b089      	sub	sp, #36	; 0x24
 8003978:	af00      	add	r7, sp, #0
 800397a:	6078      	str	r0, [r7, #4]
 800397c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800397e:	2300      	movs	r3, #0
 8003980:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8003982:	2300      	movs	r3, #0
 8003984:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8003986:	2300      	movs	r3, #0
 8003988:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800398a:	2300      	movs	r3, #0
 800398c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800398e:	2300      	movs	r3, #0
 8003990:	61fb      	str	r3, [r7, #28]
 8003992:	e175      	b.n	8003c80 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8003994:	2201      	movs	r2, #1
 8003996:	69fb      	ldr	r3, [r7, #28]
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800399e:	683b      	ldr	r3, [r7, #0]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	697a      	ldr	r2, [r7, #20]
 80039a4:	4013      	ands	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	697b      	ldr	r3, [r7, #20]
 80039ac:	429a      	cmp	r2, r3
 80039ae:	f040 8164 	bne.w	8003c7a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	2b01      	cmp	r3, #1
 80039b8:	d00b      	beq.n	80039d2 <HAL_GPIO_Init+0x5e>
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	2b02      	cmp	r3, #2
 80039c0:	d007      	beq.n	80039d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039c2:	683b      	ldr	r3, [r7, #0]
 80039c4:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80039c6:	2b11      	cmp	r3, #17
 80039c8:	d003      	beq.n	80039d2 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	2b12      	cmp	r3, #18
 80039d0:	d130      	bne.n	8003a34 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80039d8:	69fb      	ldr	r3, [r7, #28]
 80039da:	005b      	lsls	r3, r3, #1
 80039dc:	2203      	movs	r2, #3
 80039de:	fa02 f303 	lsl.w	r3, r2, r3
 80039e2:	43db      	mvns	r3, r3
 80039e4:	69ba      	ldr	r2, [r7, #24]
 80039e6:	4013      	ands	r3, r2
 80039e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	005b      	lsls	r3, r3, #1
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	69ba      	ldr	r2, [r7, #24]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	69ba      	ldr	r2, [r7, #24]
 8003a00:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	685b      	ldr	r3, [r3, #4]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a08:	2201      	movs	r2, #1
 8003a0a:	69fb      	ldr	r3, [r7, #28]
 8003a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a10:	43db      	mvns	r3, r3
 8003a12:	69ba      	ldr	r2, [r7, #24]
 8003a14:	4013      	ands	r3, r2
 8003a16:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	685b      	ldr	r3, [r3, #4]
 8003a1c:	091b      	lsrs	r3, r3, #4
 8003a1e:	f003 0201 	and.w	r2, r3, #1
 8003a22:	69fb      	ldr	r3, [r7, #28]
 8003a24:	fa02 f303 	lsl.w	r3, r2, r3
 8003a28:	69ba      	ldr	r2, [r7, #24]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	69ba      	ldr	r2, [r7, #24]
 8003a32:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	68db      	ldr	r3, [r3, #12]
 8003a38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	005b      	lsls	r3, r3, #1
 8003a3e:	2203      	movs	r2, #3
 8003a40:	fa02 f303 	lsl.w	r3, r2, r3
 8003a44:	43db      	mvns	r3, r3
 8003a46:	69ba      	ldr	r2, [r7, #24]
 8003a48:	4013      	ands	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	689a      	ldr	r2, [r3, #8]
 8003a50:	69fb      	ldr	r3, [r7, #28]
 8003a52:	005b      	lsls	r3, r3, #1
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d003      	beq.n	8003a74 <HAL_GPIO_Init+0x100>
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	685b      	ldr	r3, [r3, #4]
 8003a70:	2b12      	cmp	r3, #18
 8003a72:	d123      	bne.n	8003abc <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8003a74:	69fb      	ldr	r3, [r7, #28]
 8003a76:	08da      	lsrs	r2, r3, #3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	3208      	adds	r2, #8
 8003a7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	f003 0307 	and.w	r3, r3, #7
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	220f      	movs	r2, #15
 8003a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a90:	43db      	mvns	r3, r3
 8003a92:	69ba      	ldr	r2, [r7, #24]
 8003a94:	4013      	ands	r3, r2
 8003a96:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8003a98:	683b      	ldr	r3, [r7, #0]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
 8003a9e:	f003 0307 	and.w	r3, r3, #7
 8003aa2:	009b      	lsls	r3, r3, #2
 8003aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8003aa8:	69ba      	ldr	r2, [r7, #24]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	08da      	lsrs	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	3208      	adds	r2, #8
 8003ab6:	69b9      	ldr	r1, [r7, #24]
 8003ab8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8003ac2:	69fb      	ldr	r3, [r7, #28]
 8003ac4:	005b      	lsls	r3, r3, #1
 8003ac6:	2203      	movs	r2, #3
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43db      	mvns	r3, r3
 8003ace:	69ba      	ldr	r2, [r7, #24]
 8003ad0:	4013      	ands	r3, r2
 8003ad2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	f003 0203 	and.w	r2, r3, #3
 8003adc:	69fb      	ldr	r3, [r7, #28]
 8003ade:	005b      	lsls	r3, r3, #1
 8003ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	69ba      	ldr	r2, [r7, #24]
 8003aee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	f000 80be 	beq.w	8003c7a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003afe:	4b66      	ldr	r3, [pc, #408]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b02:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003b04:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b08:	6453      	str	r3, [r2, #68]	; 0x44
 8003b0a:	4b63      	ldr	r3, [pc, #396]	; (8003c98 <HAL_GPIO_Init+0x324>)
 8003b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b0e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b12:	60fb      	str	r3, [r7, #12]
 8003b14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003b16:	4a61      	ldr	r2, [pc, #388]	; (8003c9c <HAL_GPIO_Init+0x328>)
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	089b      	lsrs	r3, r3, #2
 8003b1c:	3302      	adds	r3, #2
 8003b1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b22:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	f003 0303 	and.w	r3, r3, #3
 8003b2a:	009b      	lsls	r3, r3, #2
 8003b2c:	220f      	movs	r2, #15
 8003b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b32:	43db      	mvns	r3, r3
 8003b34:	69ba      	ldr	r2, [r7, #24]
 8003b36:	4013      	ands	r3, r2
 8003b38:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	4a58      	ldr	r2, [pc, #352]	; (8003ca0 <HAL_GPIO_Init+0x32c>)
 8003b3e:	4293      	cmp	r3, r2
 8003b40:	d037      	beq.n	8003bb2 <HAL_GPIO_Init+0x23e>
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	4a57      	ldr	r2, [pc, #348]	; (8003ca4 <HAL_GPIO_Init+0x330>)
 8003b46:	4293      	cmp	r3, r2
 8003b48:	d031      	beq.n	8003bae <HAL_GPIO_Init+0x23a>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a56      	ldr	r2, [pc, #344]	; (8003ca8 <HAL_GPIO_Init+0x334>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d02b      	beq.n	8003baa <HAL_GPIO_Init+0x236>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a55      	ldr	r2, [pc, #340]	; (8003cac <HAL_GPIO_Init+0x338>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d025      	beq.n	8003ba6 <HAL_GPIO_Init+0x232>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a54      	ldr	r2, [pc, #336]	; (8003cb0 <HAL_GPIO_Init+0x33c>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d01f      	beq.n	8003ba2 <HAL_GPIO_Init+0x22e>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a53      	ldr	r2, [pc, #332]	; (8003cb4 <HAL_GPIO_Init+0x340>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d019      	beq.n	8003b9e <HAL_GPIO_Init+0x22a>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a52      	ldr	r2, [pc, #328]	; (8003cb8 <HAL_GPIO_Init+0x344>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d013      	beq.n	8003b9a <HAL_GPIO_Init+0x226>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a51      	ldr	r2, [pc, #324]	; (8003cbc <HAL_GPIO_Init+0x348>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d00d      	beq.n	8003b96 <HAL_GPIO_Init+0x222>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a50      	ldr	r2, [pc, #320]	; (8003cc0 <HAL_GPIO_Init+0x34c>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d007      	beq.n	8003b92 <HAL_GPIO_Init+0x21e>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a4f      	ldr	r2, [pc, #316]	; (8003cc4 <HAL_GPIO_Init+0x350>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d101      	bne.n	8003b8e <HAL_GPIO_Init+0x21a>
 8003b8a:	2309      	movs	r3, #9
 8003b8c:	e012      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b8e:	230a      	movs	r3, #10
 8003b90:	e010      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b92:	2308      	movs	r3, #8
 8003b94:	e00e      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b96:	2307      	movs	r3, #7
 8003b98:	e00c      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9a:	2306      	movs	r3, #6
 8003b9c:	e00a      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003b9e:	2305      	movs	r3, #5
 8003ba0:	e008      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba2:	2304      	movs	r3, #4
 8003ba4:	e006      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e004      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003baa:	2302      	movs	r3, #2
 8003bac:	e002      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bae:	2301      	movs	r3, #1
 8003bb0:	e000      	b.n	8003bb4 <HAL_GPIO_Init+0x240>
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	69fa      	ldr	r2, [r7, #28]
 8003bb6:	f002 0203 	and.w	r2, r2, #3
 8003bba:	0092      	lsls	r2, r2, #2
 8003bbc:	4093      	lsls	r3, r2
 8003bbe:	69ba      	ldr	r2, [r7, #24]
 8003bc0:	4313      	orrs	r3, r2
 8003bc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003bc4:	4935      	ldr	r1, [pc, #212]	; (8003c9c <HAL_GPIO_Init+0x328>)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	089b      	lsrs	r3, r3, #2
 8003bca:	3302      	adds	r3, #2
 8003bcc:	69ba      	ldr	r2, [r7, #24]
 8003bce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003bd2:	4b3d      	ldr	r3, [pc, #244]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	43db      	mvns	r3, r3
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	4013      	ands	r3, r2
 8003be0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d003      	beq.n	8003bf6 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bee:	69ba      	ldr	r2, [r7, #24]
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003bf6:	4a34      	ldr	r2, [pc, #208]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003bfc:	4b32      	ldr	r3, [pc, #200]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	43db      	mvns	r3, r3
 8003c06:	69ba      	ldr	r2, [r7, #24]
 8003c08:	4013      	ands	r3, r2
 8003c0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003c0c:	683b      	ldr	r3, [r7, #0]
 8003c0e:	685b      	ldr	r3, [r3, #4]
 8003c10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c20:	4a29      	ldr	r2, [pc, #164]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c22:	69bb      	ldr	r3, [r7, #24]
 8003c24:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c26:	4b28      	ldr	r3, [pc, #160]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c28:	689b      	ldr	r3, [r3, #8]
 8003c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	43db      	mvns	r3, r3
 8003c30:	69ba      	ldr	r2, [r7, #24]
 8003c32:	4013      	ands	r3, r2
 8003c34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	693b      	ldr	r3, [r7, #16]
 8003c46:	4313      	orrs	r3, r2
 8003c48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c4a:	4a1f      	ldr	r2, [pc, #124]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c4c:	69bb      	ldr	r3, [r7, #24]
 8003c4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c50:	4b1d      	ldr	r3, [pc, #116]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	43db      	mvns	r3, r3
 8003c5a:	69ba      	ldr	r2, [r7, #24]
 8003c5c:	4013      	ands	r3, r2
 8003c5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d003      	beq.n	8003c74 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	4313      	orrs	r3, r2
 8003c72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c74:	4a14      	ldr	r2, [pc, #80]	; (8003cc8 <HAL_GPIO_Init+0x354>)
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	3301      	adds	r3, #1
 8003c7e:	61fb      	str	r3, [r7, #28]
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b0f      	cmp	r3, #15
 8003c84:	f67f ae86 	bls.w	8003994 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003c88:	bf00      	nop
 8003c8a:	bf00      	nop
 8003c8c:	3724      	adds	r7, #36	; 0x24
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c94:	4770      	bx	lr
 8003c96:	bf00      	nop
 8003c98:	40023800 	.word	0x40023800
 8003c9c:	40013800 	.word	0x40013800
 8003ca0:	40020000 	.word	0x40020000
 8003ca4:	40020400 	.word	0x40020400
 8003ca8:	40020800 	.word	0x40020800
 8003cac:	40020c00 	.word	0x40020c00
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40021400 	.word	0x40021400
 8003cb8:	40021800 	.word	0x40021800
 8003cbc:	40021c00 	.word	0x40021c00
 8003cc0:	40022000 	.word	0x40022000
 8003cc4:	40022400 	.word	0x40022400
 8003cc8:	40013c00 	.word	0x40013c00

08003ccc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ccc:	b480      	push	{r7}
 8003cce:	b085      	sub	sp, #20
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	460b      	mov	r3, r1
 8003cd6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	691a      	ldr	r2, [r3, #16]
 8003cdc:	887b      	ldrh	r3, [r7, #2]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	2b00      	cmp	r3, #0
 8003ce2:	d002      	beq.n	8003cea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ce4:	2301      	movs	r3, #1
 8003ce6:	73fb      	strb	r3, [r7, #15]
 8003ce8:	e001      	b.n	8003cee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003cea:	2300      	movs	r3, #0
 8003cec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	3714      	adds	r7, #20
 8003cf4:	46bd      	mov	sp, r7
 8003cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfa:	4770      	bx	lr

08003cfc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	b083      	sub	sp, #12
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	6078      	str	r0, [r7, #4]
 8003d04:	460b      	mov	r3, r1
 8003d06:	807b      	strh	r3, [r7, #2]
 8003d08:	4613      	mov	r3, r2
 8003d0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d0c:	787b      	ldrb	r3, [r7, #1]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d003      	beq.n	8003d1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d12:	887a      	ldrh	r2, [r7, #2]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003d18:	e003      	b.n	8003d22 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003d1a:	887b      	ldrh	r3, [r7, #2]
 8003d1c:	041a      	lsls	r2, r3, #16
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	619a      	str	r2, [r3, #24]
}
 8003d22:	bf00      	nop
 8003d24:	370c      	adds	r7, #12
 8003d26:	46bd      	mov	sp, r7
 8003d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2c:	4770      	bx	lr
	...

08003d30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	b082      	sub	sp, #8
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d101      	bne.n	8003d42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003d3e:	2301      	movs	r3, #1
 8003d40:	e07f      	b.n	8003e42 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d48:	b2db      	uxtb	r3, r3
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d106      	bne.n	8003d5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003d56:	6878      	ldr	r0, [r7, #4]
 8003d58:	f7fc fefe 	bl	8000b58 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2224      	movs	r2, #36	; 0x24
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f022 0201 	bic.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003d80:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689a      	ldr	r2, [r3, #8]
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003d90:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d107      	bne.n	8003daa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003da6:	609a      	str	r2, [r3, #8]
 8003da8:	e006      	b.n	8003db8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	689a      	ldr	r2, [r3, #8]
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003db6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b02      	cmp	r3, #2
 8003dbe:	d104      	bne.n	8003dca <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	6859      	ldr	r1, [r3, #4]
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	4b1d      	ldr	r3, [pc, #116]	; (8003e4c <HAL_I2C_Init+0x11c>)
 8003dd6:	430b      	orrs	r3, r1
 8003dd8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68da      	ldr	r2, [r3, #12]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003de8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	691a      	ldr	r2, [r3, #16]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	ea42 0103 	orr.w	r1, r2, r3
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	699b      	ldr	r3, [r3, #24]
 8003dfa:	021a      	lsls	r2, r3, #8
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	430a      	orrs	r2, r1
 8003e02:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	69d9      	ldr	r1, [r3, #28]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1a      	ldr	r2, [r3, #32]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	681a      	ldr	r2, [r3, #0]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f042 0201 	orr.w	r2, r2, #1
 8003e22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2200      	movs	r2, #0
 8003e36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3708      	adds	r7, #8
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	02008000 	.word	0x02008000

08003e50 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b088      	sub	sp, #32
 8003e54:	af02      	add	r7, sp, #8
 8003e56:	60f8      	str	r0, [r7, #12]
 8003e58:	607a      	str	r2, [r7, #4]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	460b      	mov	r3, r1
 8003e5e:	817b      	strh	r3, [r7, #10]
 8003e60:	4613      	mov	r3, r2
 8003e62:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	f040 80da 	bne.w	8004026 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	d101      	bne.n	8003e80 <HAL_I2C_Master_Transmit+0x30>
 8003e7c:	2302      	movs	r3, #2
 8003e7e:	e0d3      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1d8>
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	2201      	movs	r2, #1
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003e88:	f7ff f844 	bl	8002f14 <HAL_GetTick>
 8003e8c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	9300      	str	r3, [sp, #0]
 8003e92:	2319      	movs	r3, #25
 8003e94:	2201      	movs	r2, #1
 8003e96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003e9a:	68f8      	ldr	r0, [r7, #12]
 8003e9c:	f000 f9e6 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d001      	beq.n	8003eaa <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e0be      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2221      	movs	r2, #33	; 0x21
 8003eae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2210      	movs	r2, #16
 8003eb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	687a      	ldr	r2, [r7, #4]
 8003ec4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	893a      	ldrh	r2, [r7, #8]
 8003eca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed6:	b29b      	uxth	r3, r3
 8003ed8:	2bff      	cmp	r3, #255	; 0xff
 8003eda:	d90e      	bls.n	8003efa <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	22ff      	movs	r2, #255	; 0xff
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ee6:	b2da      	uxtb	r2, r3
 8003ee8:	8979      	ldrh	r1, [r7, #10]
 8003eea:	4b51      	ldr	r3, [pc, #324]	; (8004030 <HAL_I2C_Master_Transmit+0x1e0>)
 8003eec:	9300      	str	r3, [sp, #0]
 8003eee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f000 fb48 	bl	8004588 <I2C_TransferConfig>
 8003ef8:	e06c      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003efe:	b29a      	uxth	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f08:	b2da      	uxtb	r2, r3
 8003f0a:	8979      	ldrh	r1, [r7, #10]
 8003f0c:	4b48      	ldr	r3, [pc, #288]	; (8004030 <HAL_I2C_Master_Transmit+0x1e0>)
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003f14:	68f8      	ldr	r0, [r7, #12]
 8003f16:	f000 fb37 	bl	8004588 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8003f1a:	e05b      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	6a39      	ldr	r1, [r7, #32]
 8003f20:	68f8      	ldr	r0, [r7, #12]
 8003f22:	f000 f9e3 	bl	80042ec <I2C_WaitOnTXISFlagUntilTimeout>
 8003f26:	4603      	mov	r3, r0
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d001      	beq.n	8003f30 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8003f2c:	2301      	movs	r3, #1
 8003f2e:	e07b      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f34:	781a      	ldrb	r2, [r3, #0]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f40:	1c5a      	adds	r2, r3, #1
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f4a:	b29b      	uxth	r3, r3
 8003f4c:	3b01      	subs	r3, #1
 8003f4e:	b29a      	uxth	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f58:	3b01      	subs	r3, #1
 8003f5a:	b29a      	uxth	r2, r3
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f64:	b29b      	uxth	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d034      	beq.n	8003fd4 <HAL_I2C_Master_Transmit+0x184>
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d130      	bne.n	8003fd4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	9300      	str	r3, [sp, #0]
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	2180      	movs	r1, #128	; 0x80
 8003f7c:	68f8      	ldr	r0, [r7, #12]
 8003f7e:	f000 f975 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8003f82:	4603      	mov	r3, r0
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d001      	beq.n	8003f8c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	e04d      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f90:	b29b      	uxth	r3, r3
 8003f92:	2bff      	cmp	r3, #255	; 0xff
 8003f94:	d90e      	bls.n	8003fb4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	22ff      	movs	r2, #255	; 0xff
 8003f9a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	8979      	ldrh	r1, [r7, #10]
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	9300      	str	r3, [sp, #0]
 8003fa8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fac:	68f8      	ldr	r0, [r7, #12]
 8003fae:	f000 faeb 	bl	8004588 <I2C_TransferConfig>
 8003fb2:	e00f      	b.n	8003fd4 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fb8:	b29a      	uxth	r2, r3
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fc2:	b2da      	uxtb	r2, r3
 8003fc4:	8979      	ldrh	r1, [r7, #10]
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	9300      	str	r3, [sp, #0]
 8003fca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003fce:	68f8      	ldr	r0, [r7, #12]
 8003fd0:	f000 fada 	bl	8004588 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d19e      	bne.n	8003f1c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	6a39      	ldr	r1, [r7, #32]
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 f9c2 	bl	800436c <I2C_WaitOnSTOPFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e01a      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	2220      	movs	r2, #32
 8003ff8:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6859      	ldr	r1, [r3, #4]
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681a      	ldr	r2, [r3, #0]
 8004004:	4b0b      	ldr	r3, [pc, #44]	; (8004034 <HAL_I2C_Master_Transmit+0x1e4>)
 8004006:	400b      	ands	r3, r1
 8004008:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	2220      	movs	r2, #32
 800400e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004022:	2300      	movs	r3, #0
 8004024:	e000      	b.n	8004028 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8004026:	2302      	movs	r3, #2
  }
}
 8004028:	4618      	mov	r0, r3
 800402a:	3718      	adds	r7, #24
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}
 8004030:	80002000 	.word	0x80002000
 8004034:	fe00e800 	.word	0xfe00e800

08004038 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size,
                                         uint32_t Timeout)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	60f8      	str	r0, [r7, #12]
 8004040:	607a      	str	r2, [r7, #4]
 8004042:	461a      	mov	r2, r3
 8004044:	460b      	mov	r3, r1
 8004046:	817b      	strh	r3, [r7, #10]
 8004048:	4613      	mov	r3, r2
 800404a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004052:	b2db      	uxtb	r3, r3
 8004054:	2b20      	cmp	r3, #32
 8004056:	f040 80db 	bne.w	8004210 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004060:	2b01      	cmp	r3, #1
 8004062:	d101      	bne.n	8004068 <HAL_I2C_Master_Receive+0x30>
 8004064:	2302      	movs	r3, #2
 8004066:	e0d4      	b.n	8004212 <HAL_I2C_Master_Receive+0x1da>
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	2201      	movs	r2, #1
 800406c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004070:	f7fe ff50 	bl	8002f14 <HAL_GetTick>
 8004074:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	9300      	str	r3, [sp, #0]
 800407a:	2319      	movs	r3, #25
 800407c:	2201      	movs	r2, #1
 800407e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004082:	68f8      	ldr	r0, [r7, #12]
 8004084:	f000 f8f2 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 8004088:	4603      	mov	r3, r0
 800408a:	2b00      	cmp	r3, #0
 800408c:	d001      	beq.n	8004092 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800408e:	2301      	movs	r3, #1
 8004090:	e0bf      	b.n	8004212 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2222      	movs	r2, #34	; 0x22
 8004096:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	2210      	movs	r2, #16
 800409e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	2200      	movs	r2, #0
 80040a6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	893a      	ldrh	r2, [r7, #8]
 80040b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2200      	movs	r2, #0
 80040b8:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040be:	b29b      	uxth	r3, r3
 80040c0:	2bff      	cmp	r3, #255	; 0xff
 80040c2:	d90e      	bls.n	80040e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	22ff      	movs	r2, #255	; 0xff
 80040c8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040ce:	b2da      	uxtb	r2, r3
 80040d0:	8979      	ldrh	r1, [r7, #10]
 80040d2:	4b52      	ldr	r3, [pc, #328]	; (800421c <HAL_I2C_Master_Receive+0x1e4>)
 80040d4:	9300      	str	r3, [sp, #0]
 80040d6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fa54 	bl	8004588 <I2C_TransferConfig>
 80040e0:	e06d      	b.n	80041be <HAL_I2C_Master_Receive+0x186>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040e6:	b29a      	uxth	r2, r3
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80040f0:	b2da      	uxtb	r2, r3
 80040f2:	8979      	ldrh	r1, [r7, #10]
 80040f4:	4b49      	ldr	r3, [pc, #292]	; (800421c <HAL_I2C_Master_Receive+0x1e4>)
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fa43 	bl	8004588 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8004102:	e05c      	b.n	80041be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004104:	697a      	ldr	r2, [r7, #20]
 8004106:	6a39      	ldr	r1, [r7, #32]
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f96b 	bl	80043e4 <I2C_WaitOnRXNEFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d001      	beq.n	8004118 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e07c      	b.n	8004212 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004122:	b2d2      	uxtb	r2, r2
 8004124:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800412a:	1c5a      	adds	r2, r3, #1
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004134:	3b01      	subs	r3, #1
 8004136:	b29a      	uxth	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004140:	b29b      	uxth	r3, r3
 8004142:	3b01      	subs	r3, #1
 8004144:	b29a      	uxth	r2, r3
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d034      	beq.n	80041be <HAL_I2C_Master_Receive+0x186>
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004158:	2b00      	cmp	r3, #0
 800415a:	d130      	bne.n	80041be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	6a3b      	ldr	r3, [r7, #32]
 8004162:	2200      	movs	r2, #0
 8004164:	2180      	movs	r1, #128	; 0x80
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f880 	bl	800426c <I2C_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e04d      	b.n	8004212 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800417a:	b29b      	uxth	r3, r3
 800417c:	2bff      	cmp	r3, #255	; 0xff
 800417e:	d90e      	bls.n	800419e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	22ff      	movs	r2, #255	; 0xff
 8004184:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800418a:	b2da      	uxtb	r2, r3
 800418c:	8979      	ldrh	r1, [r7, #10]
 800418e:	2300      	movs	r3, #0
 8004190:	9300      	str	r3, [sp, #0]
 8004192:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f9f6 	bl	8004588 <I2C_TransferConfig>
 800419c:	e00f      	b.n	80041be <HAL_I2C_Master_Receive+0x186>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041a2:	b29a      	uxth	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ac:	b2da      	uxtb	r2, r3
 80041ae:	8979      	ldrh	r1, [r7, #10]
 80041b0:	2300      	movs	r3, #0
 80041b2:	9300      	str	r3, [sp, #0]
 80041b4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f9e5 	bl	8004588 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d19d      	bne.n	8004104 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	6a39      	ldr	r1, [r7, #32]
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f8cd 	bl	800436c <I2C_WaitOnSTOPFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e01a      	b.n	8004212 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	2220      	movs	r2, #32
 80041e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	6859      	ldr	r1, [r3, #4]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	4b0c      	ldr	r3, [pc, #48]	; (8004220 <HAL_I2C_Master_Receive+0x1e8>)
 80041f0:	400b      	ands	r3, r1
 80041f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800420c:	2300      	movs	r3, #0
 800420e:	e000      	b.n	8004212 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004210:	2302      	movs	r3, #2
  }
}
 8004212:	4618      	mov	r0, r3
 8004214:	3718      	adds	r7, #24
 8004216:	46bd      	mov	sp, r7
 8004218:	bd80      	pop	{r7, pc}
 800421a:	bf00      	nop
 800421c:	80002400 	.word	0x80002400
 8004220:	fe00e800 	.word	0xfe00e800

08004224 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	699b      	ldr	r3, [r3, #24]
 8004232:	f003 0302 	and.w	r3, r3, #2
 8004236:	2b02      	cmp	r3, #2
 8004238:	d103      	bne.n	8004242 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2200      	movs	r2, #0
 8004240:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	f003 0301 	and.w	r3, r3, #1
 800424c:	2b01      	cmp	r3, #1
 800424e:	d007      	beq.n	8004260 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	699a      	ldr	r2, [r3, #24]
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f042 0201 	orr.w	r2, r2, #1
 800425e:	619a      	str	r2, [r3, #24]
  }
}
 8004260:	bf00      	nop
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b084      	sub	sp, #16
 8004270:	af00      	add	r7, sp, #0
 8004272:	60f8      	str	r0, [r7, #12]
 8004274:	60b9      	str	r1, [r7, #8]
 8004276:	603b      	str	r3, [r7, #0]
 8004278:	4613      	mov	r3, r2
 800427a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800427c:	e022      	b.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004284:	d01e      	beq.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004286:	f7fe fe45 	bl	8002f14 <HAL_GetTick>
 800428a:	4602      	mov	r2, r0
 800428c:	69bb      	ldr	r3, [r7, #24]
 800428e:	1ad3      	subs	r3, r2, r3
 8004290:	683a      	ldr	r2, [r7, #0]
 8004292:	429a      	cmp	r2, r3
 8004294:	d302      	bcc.n	800429c <I2C_WaitOnFlagUntilTimeout+0x30>
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d113      	bne.n	80042c4 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042a0:	f043 0220 	orr.w	r2, r3, #32
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	2220      	movs	r2, #32
 80042ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2200      	movs	r2, #0
 80042b4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2200      	movs	r2, #0
 80042bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80042c0:	2301      	movs	r3, #1
 80042c2:	e00f      	b.n	80042e4 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	699a      	ldr	r2, [r3, #24]
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	4013      	ands	r3, r2
 80042ce:	68ba      	ldr	r2, [r7, #8]
 80042d0:	429a      	cmp	r2, r3
 80042d2:	bf0c      	ite	eq
 80042d4:	2301      	moveq	r3, #1
 80042d6:	2300      	movne	r3, #0
 80042d8:	b2db      	uxtb	r3, r3
 80042da:	461a      	mov	r2, r3
 80042dc:	79fb      	ldrb	r3, [r7, #7]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d0cd      	beq.n	800427e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3710      	adds	r7, #16
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b084      	sub	sp, #16
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	60f8      	str	r0, [r7, #12]
 80042f4:	60b9      	str	r1, [r7, #8]
 80042f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80042f8:	e02c      	b.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80042fa:	687a      	ldr	r2, [r7, #4]
 80042fc:	68b9      	ldr	r1, [r7, #8]
 80042fe:	68f8      	ldr	r0, [r7, #12]
 8004300:	f000 f8dc 	bl	80044bc <I2C_IsAcknowledgeFailed>
 8004304:	4603      	mov	r3, r0
 8004306:	2b00      	cmp	r3, #0
 8004308:	d001      	beq.n	800430e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800430a:	2301      	movs	r3, #1
 800430c:	e02a      	b.n	8004364 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004314:	d01e      	beq.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004316:	f7fe fdfd 	bl	8002f14 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	68ba      	ldr	r2, [r7, #8]
 8004322:	429a      	cmp	r2, r3
 8004324:	d302      	bcc.n	800432c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004326:	68bb      	ldr	r3, [r7, #8]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d113      	bne.n	8004354 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004330:	f043 0220 	orr.w	r2, r3, #32
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	2220      	movs	r2, #32
 800433c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	2200      	movs	r2, #0
 8004344:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e007      	b.n	8004364 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	699b      	ldr	r3, [r3, #24]
 800435a:	f003 0302 	and.w	r3, r3, #2
 800435e:	2b02      	cmp	r3, #2
 8004360:	d1cb      	bne.n	80042fa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004362:	2300      	movs	r3, #0
}
 8004364:	4618      	mov	r0, r3
 8004366:	3710      	adds	r7, #16
 8004368:	46bd      	mov	sp, r7
 800436a:	bd80      	pop	{r7, pc}

0800436c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b084      	sub	sp, #16
 8004370:	af00      	add	r7, sp, #0
 8004372:	60f8      	str	r0, [r7, #12]
 8004374:	60b9      	str	r1, [r7, #8]
 8004376:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004378:	e028      	b.n	80043cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	68b9      	ldr	r1, [r7, #8]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f89c 	bl	80044bc <I2C_IsAcknowledgeFailed>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e026      	b.n	80043dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800438e:	f7fe fdc1 	bl	8002f14 <HAL_GetTick>
 8004392:	4602      	mov	r2, r0
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	1ad3      	subs	r3, r2, r3
 8004398:	68ba      	ldr	r2, [r7, #8]
 800439a:	429a      	cmp	r2, r3
 800439c:	d302      	bcc.n	80043a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d113      	bne.n	80043cc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80043a8:	f043 0220 	orr.w	r2, r3, #32
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2220      	movs	r2, #32
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80043c8:	2301      	movs	r3, #1
 80043ca:	e007      	b.n	80043dc <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	699b      	ldr	r3, [r3, #24]
 80043d2:	f003 0320 	and.w	r3, r3, #32
 80043d6:	2b20      	cmp	r3, #32
 80043d8:	d1cf      	bne.n	800437a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80043da:	2300      	movs	r3, #0
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80043f0:	e055      	b.n	800449e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	68b9      	ldr	r1, [r7, #8]
 80043f6:	68f8      	ldr	r0, [r7, #12]
 80043f8:	f000 f860 	bl	80044bc <I2C_IsAcknowledgeFailed>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d001      	beq.n	8004406 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004402:	2301      	movs	r3, #1
 8004404:	e053      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	699b      	ldr	r3, [r3, #24]
 800440c:	f003 0320 	and.w	r3, r3, #32
 8004410:	2b20      	cmp	r3, #32
 8004412:	d129      	bne.n	8004468 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	699b      	ldr	r3, [r3, #24]
 800441a:	f003 0304 	and.w	r3, r3, #4
 800441e:	2b04      	cmp	r3, #4
 8004420:	d105      	bne.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004426:	2b00      	cmp	r3, #0
 8004428:	d001      	beq.n	800442e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800442a:	2300      	movs	r3, #0
 800442c:	e03f      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	2220      	movs	r2, #32
 8004434:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	6859      	ldr	r1, [r3, #4]
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	681a      	ldr	r2, [r3, #0]
 8004440:	4b1d      	ldr	r3, [pc, #116]	; (80044b8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8004442:	400b      	ands	r3, r1
 8004444:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	2200      	movs	r2, #0
 800444a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	2200      	movs	r2, #0
 8004458:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	2200      	movs	r2, #0
 8004460:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004464:	2301      	movs	r3, #1
 8004466:	e022      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004468:	f7fe fd54 	bl	8002f14 <HAL_GetTick>
 800446c:	4602      	mov	r2, r0
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	1ad3      	subs	r3, r2, r3
 8004472:	68ba      	ldr	r2, [r7, #8]
 8004474:	429a      	cmp	r2, r3
 8004476:	d302      	bcc.n	800447e <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d10f      	bne.n	800449e <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004482:	f043 0220 	orr.w	r2, r3, #32
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	2220      	movs	r2, #32
 800448e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2200      	movs	r2, #0
 8004496:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e007      	b.n	80044ae <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	699b      	ldr	r3, [r3, #24]
 80044a4:	f003 0304 	and.w	r3, r3, #4
 80044a8:	2b04      	cmp	r3, #4
 80044aa:	d1a2      	bne.n	80043f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80044ac:	2300      	movs	r3, #0
}
 80044ae:	4618      	mov	r0, r3
 80044b0:	3710      	adds	r7, #16
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}
 80044b6:	bf00      	nop
 80044b8:	fe00e800 	.word	0xfe00e800

080044bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b084      	sub	sp, #16
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	60f8      	str	r0, [r7, #12]
 80044c4:	60b9      	str	r1, [r7, #8]
 80044c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	699b      	ldr	r3, [r3, #24]
 80044ce:	f003 0310 	and.w	r3, r3, #16
 80044d2:	2b10      	cmp	r3, #16
 80044d4:	d151      	bne.n	800457a <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80044d6:	e022      	b.n	800451e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80044d8:	68bb      	ldr	r3, [r7, #8]
 80044da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044de:	d01e      	beq.n	800451e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044e0:	f7fe fd18 	bl	8002f14 <HAL_GetTick>
 80044e4:	4602      	mov	r2, r0
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	1ad3      	subs	r3, r2, r3
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d302      	bcc.n	80044f6 <I2C_IsAcknowledgeFailed+0x3a>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d113      	bne.n	800451e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044fa:	f043 0220 	orr.w	r2, r3, #32
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	2220      	movs	r2, #32
 8004506:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e02e      	b.n	800457c <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	f003 0320 	and.w	r3, r3, #32
 8004528:	2b20      	cmp	r3, #32
 800452a:	d1d5      	bne.n	80044d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	2210      	movs	r2, #16
 8004532:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2220      	movs	r2, #32
 800453a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800453c:	68f8      	ldr	r0, [r7, #12]
 800453e:	f7ff fe71 	bl	8004224 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	6859      	ldr	r1, [r3, #4]
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	4b0d      	ldr	r3, [pc, #52]	; (8004584 <I2C_IsAcknowledgeFailed+0xc8>)
 800454e:	400b      	ands	r3, r1
 8004550:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004556:	f043 0204 	orr.w	r2, r3, #4
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2220      	movs	r2, #32
 8004562:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	2200      	movs	r2, #0
 800456a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	2200      	movs	r2, #0
 8004572:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e000      	b.n	800457c <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 800457a:	2300      	movs	r3, #0
}
 800457c:	4618      	mov	r0, r3
 800457e:	3710      	adds	r7, #16
 8004580:	46bd      	mov	sp, r7
 8004582:	bd80      	pop	{r7, pc}
 8004584:	fe00e800 	.word	0xfe00e800

08004588 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004588:	b480      	push	{r7}
 800458a:	b085      	sub	sp, #20
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	607b      	str	r3, [r7, #4]
 8004592:	460b      	mov	r3, r1
 8004594:	817b      	strh	r3, [r7, #10]
 8004596:	4613      	mov	r3, r2
 8004598:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2,
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	0d5b      	lsrs	r3, r3, #21
 80045a4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80045a8:	4b0d      	ldr	r3, [pc, #52]	; (80045e0 <I2C_TransferConfig+0x58>)
 80045aa:	430b      	orrs	r3, r1
 80045ac:	43db      	mvns	r3, r3
 80045ae:	ea02 0103 	and.w	r1, r2, r3
 80045b2:	897b      	ldrh	r3, [r7, #10]
 80045b4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80045b8:	7a7b      	ldrb	r3, [r7, #9]
 80045ba:	041b      	lsls	r3, r3, #16
 80045bc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80045c0:	431a      	orrs	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	431a      	orrs	r2, r3
 80045c6:	69bb      	ldr	r3, [r7, #24]
 80045c8:	431a      	orrs	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) |
                        (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80045d2:	bf00      	nop
 80045d4:	3714      	adds	r7, #20
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
 80045de:	bf00      	nop
 80045e0:	03ff63ff 	.word	0x03ff63ff

080045e4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b083      	sub	sp, #12
 80045e8:	af00      	add	r7, sp, #0
 80045ea:	6078      	str	r0, [r7, #4]
 80045ec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045f4:	b2db      	uxtb	r3, r3
 80045f6:	2b20      	cmp	r3, #32
 80045f8:	d138      	bne.n	800466c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004600:	2b01      	cmp	r3, #1
 8004602:	d101      	bne.n	8004608 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004604:	2302      	movs	r3, #2
 8004606:	e032      	b.n	800466e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2224      	movs	r2, #36	; 0x24
 8004614:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	681a      	ldr	r2, [r3, #0]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	f022 0201 	bic.w	r2, r2, #1
 8004626:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004636:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	6819      	ldr	r1, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	430a      	orrs	r2, r1
 8004646:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	681a      	ldr	r2, [r3, #0]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f042 0201 	orr.w	r2, r2, #1
 8004656:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2220      	movs	r2, #32
 800465c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004668:	2300      	movs	r3, #0
 800466a:	e000      	b.n	800466e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800466c:	2302      	movs	r3, #2
  }
}
 800466e:	4618      	mov	r0, r3
 8004670:	370c      	adds	r7, #12
 8004672:	46bd      	mov	sp, r7
 8004674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004678:	4770      	bx	lr

0800467a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800467a:	b480      	push	{r7}
 800467c:	b085      	sub	sp, #20
 800467e:	af00      	add	r7, sp, #0
 8004680:	6078      	str	r0, [r7, #4]
 8004682:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800468a:	b2db      	uxtb	r3, r3
 800468c:	2b20      	cmp	r3, #32
 800468e:	d139      	bne.n	8004704 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004696:	2b01      	cmp	r3, #1
 8004698:	d101      	bne.n	800469e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800469a:	2302      	movs	r3, #2
 800469c:	e033      	b.n	8004706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2201      	movs	r2, #1
 80046a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2224      	movs	r2, #36	; 0x24
 80046aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0201 	bic.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80046cc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	021b      	lsls	r3, r3, #8
 80046d2:	68fa      	ldr	r2, [r7, #12]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	68fa      	ldr	r2, [r7, #12]
 80046de:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f042 0201 	orr.w	r2, r2, #1
 80046ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2220      	movs	r2, #32
 80046f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
	...

08004714 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004714:	b480      	push	{r7}
 8004716:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004718:	4b05      	ldr	r3, [pc, #20]	; (8004730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a04      	ldr	r2, [pc, #16]	; (8004730 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800471e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004722:	6013      	str	r3, [r2, #0]
}
 8004724:	bf00      	nop
 8004726:	46bd      	mov	sp, r7
 8004728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472c:	4770      	bx	lr
 800472e:	bf00      	nop
 8004730:	40007000 	.word	0x40007000

08004734 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004734:	b580      	push	{r7, lr}
 8004736:	b082      	sub	sp, #8
 8004738:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800473a:	2300      	movs	r3, #0
 800473c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800473e:	4b23      	ldr	r3, [pc, #140]	; (80047cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004740:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004742:	4a22      	ldr	r2, [pc, #136]	; (80047cc <HAL_PWREx_EnableOverDrive+0x98>)
 8004744:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004748:	6413      	str	r3, [r2, #64]	; 0x40
 800474a:	4b20      	ldr	r3, [pc, #128]	; (80047cc <HAL_PWREx_EnableOverDrive+0x98>)
 800474c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800474e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004752:	603b      	str	r3, [r7, #0]
 8004754:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004756:	4b1e      	ldr	r3, [pc, #120]	; (80047d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a1d      	ldr	r2, [pc, #116]	; (80047d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800475c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004760:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004762:	f7fe fbd7 	bl	8002f14 <HAL_GetTick>
 8004766:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004768:	e009      	b.n	800477e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800476a:	f7fe fbd3 	bl	8002f14 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004778:	d901      	bls.n	800477e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800477a:	2303      	movs	r3, #3
 800477c:	e022      	b.n	80047c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800477e:	4b14      	ldr	r3, [pc, #80]	; (80047d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004786:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800478a:	d1ee      	bne.n	800476a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800478c:	4b10      	ldr	r3, [pc, #64]	; (80047d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	4a0f      	ldr	r2, [pc, #60]	; (80047d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8004792:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004796:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004798:	f7fe fbbc 	bl	8002f14 <HAL_GetTick>
 800479c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800479e:	e009      	b.n	80047b4 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80047a0:	f7fe fbb8 	bl	8002f14 <HAL_GetTick>
 80047a4:	4602      	mov	r2, r0
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80047ae:	d901      	bls.n	80047b4 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80047b0:	2303      	movs	r3, #3
 80047b2:	e007      	b.n	80047c4 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80047b4:	4b06      	ldr	r3, [pc, #24]	; (80047d0 <HAL_PWREx_EnableOverDrive+0x9c>)
 80047b6:	685b      	ldr	r3, [r3, #4]
 80047b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80047c0:	d1ee      	bne.n	80047a0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40023800 	.word	0x40023800
 80047d0:	40007000 	.word	0x40007000

080047d4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b086      	sub	sp, #24
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80047dc:	2300      	movs	r3, #0
 80047de:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d101      	bne.n	80047ea <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80047e6:	2301      	movs	r3, #1
 80047e8:	e29b      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f003 0301 	and.w	r3, r3, #1
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	f000 8087 	beq.w	8004906 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80047f8:	4b96      	ldr	r3, [pc, #600]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	f003 030c 	and.w	r3, r3, #12
 8004800:	2b04      	cmp	r3, #4
 8004802:	d00c      	beq.n	800481e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004804:	4b93      	ldr	r3, [pc, #588]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004806:	689b      	ldr	r3, [r3, #8]
 8004808:	f003 030c 	and.w	r3, r3, #12
 800480c:	2b08      	cmp	r3, #8
 800480e:	d112      	bne.n	8004836 <HAL_RCC_OscConfig+0x62>
 8004810:	4b90      	ldr	r3, [pc, #576]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004818:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800481c:	d10b      	bne.n	8004836 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800481e:	4b8d      	ldr	r3, [pc, #564]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004826:	2b00      	cmp	r3, #0
 8004828:	d06c      	beq.n	8004904 <HAL_RCC_OscConfig+0x130>
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	685b      	ldr	r3, [r3, #4]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d168      	bne.n	8004904 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e275      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	685b      	ldr	r3, [r3, #4]
 800483a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800483e:	d106      	bne.n	800484e <HAL_RCC_OscConfig+0x7a>
 8004840:	4b84      	ldr	r3, [pc, #528]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a83      	ldr	r2, [pc, #524]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004846:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800484a:	6013      	str	r3, [r2, #0]
 800484c:	e02e      	b.n	80048ac <HAL_RCC_OscConfig+0xd8>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d10c      	bne.n	8004870 <HAL_RCC_OscConfig+0x9c>
 8004856:	4b7f      	ldr	r3, [pc, #508]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	4a7e      	ldr	r2, [pc, #504]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800485c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004860:	6013      	str	r3, [r2, #0]
 8004862:	4b7c      	ldr	r3, [pc, #496]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a7b      	ldr	r2, [pc, #492]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004868:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800486c:	6013      	str	r3, [r2, #0]
 800486e:	e01d      	b.n	80048ac <HAL_RCC_OscConfig+0xd8>
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	685b      	ldr	r3, [r3, #4]
 8004874:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004878:	d10c      	bne.n	8004894 <HAL_RCC_OscConfig+0xc0>
 800487a:	4b76      	ldr	r3, [pc, #472]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4a75      	ldr	r2, [pc, #468]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004880:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004884:	6013      	str	r3, [r2, #0]
 8004886:	4b73      	ldr	r3, [pc, #460]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4a72      	ldr	r2, [pc, #456]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800488c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004890:	6013      	str	r3, [r2, #0]
 8004892:	e00b      	b.n	80048ac <HAL_RCC_OscConfig+0xd8>
 8004894:	4b6f      	ldr	r3, [pc, #444]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	4a6e      	ldr	r2, [pc, #440]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800489a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800489e:	6013      	str	r3, [r2, #0]
 80048a0:	4b6c      	ldr	r3, [pc, #432]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	4a6b      	ldr	r2, [pc, #428]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80048a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d013      	beq.n	80048dc <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048b4:	f7fe fb2e 	bl	8002f14 <HAL_GetTick>
 80048b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ba:	e008      	b.n	80048ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048bc:	f7fe fb2a 	bl	8002f14 <HAL_GetTick>
 80048c0:	4602      	mov	r2, r0
 80048c2:	693b      	ldr	r3, [r7, #16]
 80048c4:	1ad3      	subs	r3, r2, r3
 80048c6:	2b64      	cmp	r3, #100	; 0x64
 80048c8:	d901      	bls.n	80048ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80048ca:	2303      	movs	r3, #3
 80048cc:	e229      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048ce:	4b61      	ldr	r3, [pc, #388]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d0f0      	beq.n	80048bc <HAL_RCC_OscConfig+0xe8>
 80048da:	e014      	b.n	8004906 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80048dc:	f7fe fb1a 	bl	8002f14 <HAL_GetTick>
 80048e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048e2:	e008      	b.n	80048f6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048e4:	f7fe fb16 	bl	8002f14 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	2b64      	cmp	r3, #100	; 0x64
 80048f0:	d901      	bls.n	80048f6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80048f2:	2303      	movs	r3, #3
 80048f4:	e215      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048f6:	4b57      	ldr	r3, [pc, #348]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d1f0      	bne.n	80048e4 <HAL_RCC_OscConfig+0x110>
 8004902:	e000      	b.n	8004906 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	f003 0302 	and.w	r3, r3, #2
 800490e:	2b00      	cmp	r3, #0
 8004910:	d069      	beq.n	80049e6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004912:	4b50      	ldr	r3, [pc, #320]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004914:	689b      	ldr	r3, [r3, #8]
 8004916:	f003 030c 	and.w	r3, r3, #12
 800491a:	2b00      	cmp	r3, #0
 800491c:	d00b      	beq.n	8004936 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800491e:	4b4d      	ldr	r3, [pc, #308]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	f003 030c 	and.w	r3, r3, #12
 8004926:	2b08      	cmp	r3, #8
 8004928:	d11c      	bne.n	8004964 <HAL_RCC_OscConfig+0x190>
 800492a:	4b4a      	ldr	r3, [pc, #296]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004932:	2b00      	cmp	r3, #0
 8004934:	d116      	bne.n	8004964 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004936:	4b47      	ldr	r3, [pc, #284]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0302 	and.w	r3, r3, #2
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <HAL_RCC_OscConfig+0x17a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	2b01      	cmp	r3, #1
 8004948:	d001      	beq.n	800494e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800494a:	2301      	movs	r3, #1
 800494c:	e1e9      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800494e:	4b41      	ldr	r3, [pc, #260]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	00db      	lsls	r3, r3, #3
 800495c:	493d      	ldr	r1, [pc, #244]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800495e:	4313      	orrs	r3, r2
 8004960:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004962:	e040      	b.n	80049e6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	68db      	ldr	r3, [r3, #12]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d023      	beq.n	80049b4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800496c:	4b39      	ldr	r3, [pc, #228]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004972:	f043 0301 	orr.w	r3, r3, #1
 8004976:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004978:	f7fe facc 	bl	8002f14 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004980:	f7fe fac8 	bl	8002f14 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b02      	cmp	r3, #2
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e1c7      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004992:	4b30      	ldr	r3, [pc, #192]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f003 0302 	and.w	r3, r3, #2
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800499e:	4b2d      	ldr	r3, [pc, #180]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	00db      	lsls	r3, r3, #3
 80049ac:	4929      	ldr	r1, [pc, #164]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80049ae:	4313      	orrs	r3, r2
 80049b0:	600b      	str	r3, [r1, #0]
 80049b2:	e018      	b.n	80049e6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b4:	4b27      	ldr	r3, [pc, #156]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80049ba:	f023 0301 	bic.w	r3, r3, #1
 80049be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049c0:	f7fe faa8 	bl	8002f14 <HAL_GetTick>
 80049c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c6:	e008      	b.n	80049da <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c8:	f7fe faa4 	bl	8002f14 <HAL_GetTick>
 80049cc:	4602      	mov	r2, r0
 80049ce:	693b      	ldr	r3, [r7, #16]
 80049d0:	1ad3      	subs	r3, r2, r3
 80049d2:	2b02      	cmp	r3, #2
 80049d4:	d901      	bls.n	80049da <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80049d6:	2303      	movs	r3, #3
 80049d8:	e1a3      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049da:	4b1e      	ldr	r3, [pc, #120]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f003 0302 	and.w	r3, r3, #2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1f0      	bne.n	80049c8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	f003 0308 	and.w	r3, r3, #8
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d038      	beq.n	8004a64 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d019      	beq.n	8004a2e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049fa:	4b16      	ldr	r3, [pc, #88]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 80049fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80049fe:	4a15      	ldr	r2, [pc, #84]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004a00:	f043 0301 	orr.w	r3, r3, #1
 8004a04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a06:	f7fe fa85 	bl	8002f14 <HAL_GetTick>
 8004a0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a0c:	e008      	b.n	8004a20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a0e:	f7fe fa81 	bl	8002f14 <HAL_GetTick>
 8004a12:	4602      	mov	r2, r0
 8004a14:	693b      	ldr	r3, [r7, #16]
 8004a16:	1ad3      	subs	r3, r2, r3
 8004a18:	2b02      	cmp	r3, #2
 8004a1a:	d901      	bls.n	8004a20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e180      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a20:	4b0c      	ldr	r3, [pc, #48]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004a22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a24:	f003 0302 	and.w	r3, r3, #2
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d0f0      	beq.n	8004a0e <HAL_RCC_OscConfig+0x23a>
 8004a2c:	e01a      	b.n	8004a64 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2e:	4b09      	ldr	r3, [pc, #36]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004a30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a32:	4a08      	ldr	r2, [pc, #32]	; (8004a54 <HAL_RCC_OscConfig+0x280>)
 8004a34:	f023 0301 	bic.w	r3, r3, #1
 8004a38:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a3a:	f7fe fa6b 	bl	8002f14 <HAL_GetTick>
 8004a3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a40:	e00a      	b.n	8004a58 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a42:	f7fe fa67 	bl	8002f14 <HAL_GetTick>
 8004a46:	4602      	mov	r2, r0
 8004a48:	693b      	ldr	r3, [r7, #16]
 8004a4a:	1ad3      	subs	r3, r2, r3
 8004a4c:	2b02      	cmp	r3, #2
 8004a4e:	d903      	bls.n	8004a58 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004a50:	2303      	movs	r3, #3
 8004a52:	e166      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
 8004a54:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	4b92      	ldr	r3, [pc, #584]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004a5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1ee      	bne.n	8004a42 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a4 	beq.w	8004bba <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a72:	4b8c      	ldr	r3, [pc, #560]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d10d      	bne.n	8004a9a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a7e:	4b89      	ldr	r3, [pc, #548]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a82:	4a88      	ldr	r2, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004a84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a88:	6413      	str	r3, [r2, #64]	; 0x40
 8004a8a:	4b86      	ldr	r3, [pc, #536]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004a8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a92:	60bb      	str	r3, [r7, #8]
 8004a94:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004a9a:	4b83      	ldr	r3, [pc, #524]	; (8004ca8 <HAL_RCC_OscConfig+0x4d4>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d118      	bne.n	8004ad8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004aa6:	4b80      	ldr	r3, [pc, #512]	; (8004ca8 <HAL_RCC_OscConfig+0x4d4>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	4a7f      	ldr	r2, [pc, #508]	; (8004ca8 <HAL_RCC_OscConfig+0x4d4>)
 8004aac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab2:	f7fe fa2f 	bl	8002f14 <HAL_GetTick>
 8004ab6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004ab8:	e008      	b.n	8004acc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004aba:	f7fe fa2b 	bl	8002f14 <HAL_GetTick>
 8004abe:	4602      	mov	r2, r0
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	1ad3      	subs	r3, r2, r3
 8004ac4:	2b64      	cmp	r3, #100	; 0x64
 8004ac6:	d901      	bls.n	8004acc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004ac8:	2303      	movs	r3, #3
 8004aca:	e12a      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004acc:	4b76      	ldr	r3, [pc, #472]	; (8004ca8 <HAL_RCC_OscConfig+0x4d4>)
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d0f0      	beq.n	8004aba <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b01      	cmp	r3, #1
 8004ade:	d106      	bne.n	8004aee <HAL_RCC_OscConfig+0x31a>
 8004ae0:	4b70      	ldr	r3, [pc, #448]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004ae2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ae4:	4a6f      	ldr	r2, [pc, #444]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004ae6:	f043 0301 	orr.w	r3, r3, #1
 8004aea:	6713      	str	r3, [r2, #112]	; 0x70
 8004aec:	e02d      	b.n	8004b4a <HAL_RCC_OscConfig+0x376>
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	689b      	ldr	r3, [r3, #8]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d10c      	bne.n	8004b10 <HAL_RCC_OscConfig+0x33c>
 8004af6:	4b6b      	ldr	r3, [pc, #428]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004af8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004afa:	4a6a      	ldr	r2, [pc, #424]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004afc:	f023 0301 	bic.w	r3, r3, #1
 8004b00:	6713      	str	r3, [r2, #112]	; 0x70
 8004b02:	4b68      	ldr	r3, [pc, #416]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b06:	4a67      	ldr	r2, [pc, #412]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b08:	f023 0304 	bic.w	r3, r3, #4
 8004b0c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b0e:	e01c      	b.n	8004b4a <HAL_RCC_OscConfig+0x376>
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2b05      	cmp	r3, #5
 8004b16:	d10c      	bne.n	8004b32 <HAL_RCC_OscConfig+0x35e>
 8004b18:	4b62      	ldr	r3, [pc, #392]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b1c:	4a61      	ldr	r2, [pc, #388]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b1e:	f043 0304 	orr.w	r3, r3, #4
 8004b22:	6713      	str	r3, [r2, #112]	; 0x70
 8004b24:	4b5f      	ldr	r3, [pc, #380]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b28:	4a5e      	ldr	r2, [pc, #376]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b2a:	f043 0301 	orr.w	r3, r3, #1
 8004b2e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b30:	e00b      	b.n	8004b4a <HAL_RCC_OscConfig+0x376>
 8004b32:	4b5c      	ldr	r3, [pc, #368]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b36:	4a5b      	ldr	r2, [pc, #364]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b38:	f023 0301 	bic.w	r3, r3, #1
 8004b3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004b3e:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b42:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b44:	f023 0304 	bic.w	r3, r3, #4
 8004b48:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	689b      	ldr	r3, [r3, #8]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d015      	beq.n	8004b7e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b52:	f7fe f9df 	bl	8002f14 <HAL_GetTick>
 8004b56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b58:	e00a      	b.n	8004b70 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5a:	f7fe f9db 	bl	8002f14 <HAL_GetTick>
 8004b5e:	4602      	mov	r2, r0
 8004b60:	693b      	ldr	r3, [r7, #16]
 8004b62:	1ad3      	subs	r3, r2, r3
 8004b64:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b68:	4293      	cmp	r3, r2
 8004b6a:	d901      	bls.n	8004b70 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004b6c:	2303      	movs	r3, #3
 8004b6e:	e0d8      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b70:	4b4c      	ldr	r3, [pc, #304]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b74:	f003 0302 	and.w	r3, r3, #2
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d0ee      	beq.n	8004b5a <HAL_RCC_OscConfig+0x386>
 8004b7c:	e014      	b.n	8004ba8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b7e:	f7fe f9c9 	bl	8002f14 <HAL_GetTick>
 8004b82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b84:	e00a      	b.n	8004b9c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b86:	f7fe f9c5 	bl	8002f14 <HAL_GetTick>
 8004b8a:	4602      	mov	r2, r0
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	1ad3      	subs	r3, r2, r3
 8004b90:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d901      	bls.n	8004b9c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004b98:	2303      	movs	r3, #3
 8004b9a:	e0c2      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b9c:	4b41      	ldr	r3, [pc, #260]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d1ee      	bne.n	8004b86 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004ba8:	7dfb      	ldrb	r3, [r7, #23]
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d105      	bne.n	8004bba <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a3c      	ldr	r2, [pc, #240]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004bb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	f000 80ae 	beq.w	8004d20 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc4:	4b37      	ldr	r3, [pc, #220]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f003 030c 	and.w	r3, r3, #12
 8004bcc:	2b08      	cmp	r3, #8
 8004bce:	d06d      	beq.n	8004cac <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	699b      	ldr	r3, [r3, #24]
 8004bd4:	2b02      	cmp	r3, #2
 8004bd6:	d14b      	bne.n	8004c70 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bd8:	4b32      	ldr	r3, [pc, #200]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	4a31      	ldr	r2, [pc, #196]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004bde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004be2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004be4:	f7fe f996 	bl	8002f14 <HAL_GetTick>
 8004be8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bea:	e008      	b.n	8004bfe <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bec:	f7fe f992 	bl	8002f14 <HAL_GetTick>
 8004bf0:	4602      	mov	r2, r0
 8004bf2:	693b      	ldr	r3, [r7, #16]
 8004bf4:	1ad3      	subs	r3, r2, r3
 8004bf6:	2b02      	cmp	r3, #2
 8004bf8:	d901      	bls.n	8004bfe <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004bfa:	2303      	movs	r3, #3
 8004bfc:	e091      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004bfe:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1f0      	bne.n	8004bec <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	69da      	ldr	r2, [r3, #28]
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a1b      	ldr	r3, [r3, #32]
 8004c12:	431a      	orrs	r2, r3
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c18:	019b      	lsls	r3, r3, #6
 8004c1a:	431a      	orrs	r2, r3
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c20:	085b      	lsrs	r3, r3, #1
 8004c22:	3b01      	subs	r3, #1
 8004c24:	041b      	lsls	r3, r3, #16
 8004c26:	431a      	orrs	r2, r3
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	061b      	lsls	r3, r3, #24
 8004c2e:	431a      	orrs	r2, r3
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	071b      	lsls	r3, r3, #28
 8004c36:	491b      	ldr	r1, [pc, #108]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c48:	f7fe f964 	bl	8002f14 <HAL_GetTick>
 8004c4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c4e:	e008      	b.n	8004c62 <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c50:	f7fe f960 	bl	8002f14 <HAL_GetTick>
 8004c54:	4602      	mov	r2, r0
 8004c56:	693b      	ldr	r3, [r7, #16]
 8004c58:	1ad3      	subs	r3, r2, r3
 8004c5a:	2b02      	cmp	r3, #2
 8004c5c:	d901      	bls.n	8004c62 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8004c5e:	2303      	movs	r3, #3
 8004c60:	e05f      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c62:	4b10      	ldr	r3, [pc, #64]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d0f0      	beq.n	8004c50 <HAL_RCC_OscConfig+0x47c>
 8004c6e:	e057      	b.n	8004d20 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c70:	4b0c      	ldr	r3, [pc, #48]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c7c:	f7fe f94a 	bl	8002f14 <HAL_GetTick>
 8004c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c82:	e008      	b.n	8004c96 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c84:	f7fe f946 	bl	8002f14 <HAL_GetTick>
 8004c88:	4602      	mov	r2, r0
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	1ad3      	subs	r3, r2, r3
 8004c8e:	2b02      	cmp	r3, #2
 8004c90:	d901      	bls.n	8004c96 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8004c92:	2303      	movs	r3, #3
 8004c94:	e045      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c96:	4b03      	ldr	r3, [pc, #12]	; (8004ca4 <HAL_RCC_OscConfig+0x4d0>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d1f0      	bne.n	8004c84 <HAL_RCC_OscConfig+0x4b0>
 8004ca2:	e03d      	b.n	8004d20 <HAL_RCC_OscConfig+0x54c>
 8004ca4:	40023800 	.word	0x40023800
 8004ca8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004cac:	4b1f      	ldr	r3, [pc, #124]	; (8004d2c <HAL_RCC_OscConfig+0x558>)
 8004cae:	685b      	ldr	r3, [r3, #4]
 8004cb0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	699b      	ldr	r3, [r3, #24]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d030      	beq.n	8004d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004cc4:	429a      	cmp	r2, r3
 8004cc6:	d129      	bne.n	8004d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cd2:	429a      	cmp	r2, r3
 8004cd4:	d122      	bne.n	8004d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004cdc:	4013      	ands	r3, r2
 8004cde:	687a      	ldr	r2, [r7, #4]
 8004ce0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004ce2:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004ce4:	4293      	cmp	r3, r2
 8004ce6:	d119      	bne.n	8004d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cf2:	085b      	lsrs	r3, r3, #1
 8004cf4:	3b01      	subs	r3, #1
 8004cf6:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004cf8:	429a      	cmp	r2, r3
 8004cfa:	d10f      	bne.n	8004d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d06:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d107      	bne.n	8004d1c <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d16:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	d001      	beq.n	8004d20 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e000      	b.n	8004d22 <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8004d20:	2300      	movs	r3, #0
}
 8004d22:	4618      	mov	r0, r3
 8004d24:	3718      	adds	r7, #24
 8004d26:	46bd      	mov	sp, r7
 8004d28:	bd80      	pop	{r7, pc}
 8004d2a:	bf00      	nop
 8004d2c:	40023800 	.word	0x40023800

08004d30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004d30:	b580      	push	{r7, lr}
 8004d32:	b084      	sub	sp, #16
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	6078      	str	r0, [r7, #4]
 8004d38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d101      	bne.n	8004d48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004d44:	2301      	movs	r3, #1
 8004d46:	e0d0      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004d48:	4b6a      	ldr	r3, [pc, #424]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	f003 030f 	and.w	r3, r3, #15
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	429a      	cmp	r2, r3
 8004d54:	d910      	bls.n	8004d78 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d56:	4b67      	ldr	r3, [pc, #412]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f023 020f 	bic.w	r2, r3, #15
 8004d5e:	4965      	ldr	r1, [pc, #404]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d66:	4b63      	ldr	r3, [pc, #396]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f003 030f 	and.w	r3, r3, #15
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	d001      	beq.n	8004d78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004d74:	2301      	movs	r3, #1
 8004d76:	e0b8      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	f003 0302 	and.w	r3, r3, #2
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d020      	beq.n	8004dc6 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f003 0304 	and.w	r3, r3, #4
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d005      	beq.n	8004d9c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d90:	4b59      	ldr	r3, [pc, #356]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d92:	689b      	ldr	r3, [r3, #8]
 8004d94:	4a58      	ldr	r2, [pc, #352]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004d96:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004d9a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f003 0308 	and.w	r3, r3, #8
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d005      	beq.n	8004db4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004da8:	4b53      	ldr	r3, [pc, #332]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004daa:	689b      	ldr	r3, [r3, #8]
 8004dac:	4a52      	ldr	r2, [pc, #328]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dae:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004db2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004db4:	4b50      	ldr	r3, [pc, #320]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004db6:	689b      	ldr	r3, [r3, #8]
 8004db8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	689b      	ldr	r3, [r3, #8]
 8004dc0:	494d      	ldr	r1, [pc, #308]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	f003 0301 	and.w	r3, r3, #1
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d040      	beq.n	8004e54 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2b01      	cmp	r3, #1
 8004dd8:	d107      	bne.n	8004dea <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004dda:	4b47      	ldr	r3, [pc, #284]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d115      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004de6:	2301      	movs	r3, #1
 8004de8:	e07f      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	685b      	ldr	r3, [r3, #4]
 8004dee:	2b02      	cmp	r3, #2
 8004df0:	d107      	bne.n	8004e02 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004df2:	4b41      	ldr	r3, [pc, #260]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d109      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004dfe:	2301      	movs	r3, #1
 8004e00:	e073      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e02:	4b3d      	ldr	r3, [pc, #244]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 0302 	and.w	r3, r3, #2
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d101      	bne.n	8004e12 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	e06b      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e12:	4b39      	ldr	r3, [pc, #228]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	f023 0203 	bic.w	r2, r3, #3
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	4936      	ldr	r1, [pc, #216]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e20:	4313      	orrs	r3, r2
 8004e22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e24:	f7fe f876 	bl	8002f14 <HAL_GetTick>
 8004e28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e2a:	e00a      	b.n	8004e42 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004e2c:	f7fe f872 	bl	8002f14 <HAL_GetTick>
 8004e30:	4602      	mov	r2, r0
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	1ad3      	subs	r3, r2, r3
 8004e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e3a:	4293      	cmp	r3, r2
 8004e3c:	d901      	bls.n	8004e42 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	e053      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004e42:	4b2d      	ldr	r3, [pc, #180]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e44:	689b      	ldr	r3, [r3, #8]
 8004e46:	f003 020c 	and.w	r2, r3, #12
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	685b      	ldr	r3, [r3, #4]
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d1eb      	bne.n	8004e2c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e54:	4b27      	ldr	r3, [pc, #156]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	f003 030f 	and.w	r3, r3, #15
 8004e5c:	683a      	ldr	r2, [r7, #0]
 8004e5e:	429a      	cmp	r2, r3
 8004e60:	d210      	bcs.n	8004e84 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e62:	4b24      	ldr	r3, [pc, #144]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	f023 020f 	bic.w	r2, r3, #15
 8004e6a:	4922      	ldr	r1, [pc, #136]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e72:	4b20      	ldr	r3, [pc, #128]	; (8004ef4 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	683a      	ldr	r2, [r7, #0]
 8004e7c:	429a      	cmp	r2, r3
 8004e7e:	d001      	beq.n	8004e84 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004e80:	2301      	movs	r3, #1
 8004e82:	e032      	b.n	8004eea <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	f003 0304 	and.w	r3, r3, #4
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d008      	beq.n	8004ea2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e90:	4b19      	ldr	r3, [pc, #100]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	68db      	ldr	r3, [r3, #12]
 8004e9c:	4916      	ldr	r1, [pc, #88]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004e9e:	4313      	orrs	r3, r2
 8004ea0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f003 0308 	and.w	r3, r3, #8
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d009      	beq.n	8004ec2 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004eae:	4b12      	ldr	r3, [pc, #72]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb0:	689b      	ldr	r3, [r3, #8]
 8004eb2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	691b      	ldr	r3, [r3, #16]
 8004eba:	00db      	lsls	r3, r3, #3
 8004ebc:	490e      	ldr	r1, [pc, #56]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004ebe:	4313      	orrs	r3, r2
 8004ec0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004ec2:	f000 f821 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	4b0b      	ldr	r3, [pc, #44]	; (8004ef8 <HAL_RCC_ClockConfig+0x1c8>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 030f 	and.w	r3, r3, #15
 8004ed2:	490a      	ldr	r1, [pc, #40]	; (8004efc <HAL_RCC_ClockConfig+0x1cc>)
 8004ed4:	5ccb      	ldrb	r3, [r1, r3]
 8004ed6:	fa22 f303 	lsr.w	r3, r2, r3
 8004eda:	4a09      	ldr	r2, [pc, #36]	; (8004f00 <HAL_RCC_ClockConfig+0x1d0>)
 8004edc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ede:	4b09      	ldr	r3, [pc, #36]	; (8004f04 <HAL_RCC_ClockConfig+0x1d4>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	4618      	mov	r0, r3
 8004ee4:	f7fd ffd2 	bl	8002e8c <HAL_InitTick>

  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3710      	adds	r7, #16
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
 8004ef2:	bf00      	nop
 8004ef4:	40023c00 	.word	0x40023c00
 8004ef8:	40023800 	.word	0x40023800
 8004efc:	0800ffd0 	.word	0x0800ffd0
 8004f00:	20000000 	.word	0x20000000
 8004f04:	20000008 	.word	0x20000008

08004f08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f0c:	b094      	sub	sp, #80	; 0x50
 8004f0e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f10:	2300      	movs	r3, #0
 8004f12:	647b      	str	r3, [r7, #68]	; 0x44
 8004f14:	2300      	movs	r3, #0
 8004f16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f18:	2300      	movs	r3, #0
 8004f1a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004f1c:	2300      	movs	r3, #0
 8004f1e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f20:	4b79      	ldr	r3, [pc, #484]	; (8005108 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f22:	689b      	ldr	r3, [r3, #8]
 8004f24:	f003 030c 	and.w	r3, r3, #12
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d00d      	beq.n	8004f48 <HAL_RCC_GetSysClockFreq+0x40>
 8004f2c:	2b08      	cmp	r3, #8
 8004f2e:	f200 80e1 	bhi.w	80050f4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d002      	beq.n	8004f3c <HAL_RCC_GetSysClockFreq+0x34>
 8004f36:	2b04      	cmp	r3, #4
 8004f38:	d003      	beq.n	8004f42 <HAL_RCC_GetSysClockFreq+0x3a>
 8004f3a:	e0db      	b.n	80050f4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004f3c:	4b73      	ldr	r3, [pc, #460]	; (800510c <HAL_RCC_GetSysClockFreq+0x204>)
 8004f3e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f40:	e0db      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004f42:	4b73      	ldr	r3, [pc, #460]	; (8005110 <HAL_RCC_GetSysClockFreq+0x208>)
 8004f44:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f46:	e0d8      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004f48:	4b6f      	ldr	r3, [pc, #444]	; (8005108 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f4a:	685b      	ldr	r3, [r3, #4]
 8004f4c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004f50:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004f52:	4b6d      	ldr	r3, [pc, #436]	; (8005108 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d063      	beq.n	8005026 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004f5e:	4b6a      	ldr	r3, [pc, #424]	; (8005108 <HAL_RCC_GetSysClockFreq+0x200>)
 8004f60:	685b      	ldr	r3, [r3, #4]
 8004f62:	099b      	lsrs	r3, r3, #6
 8004f64:	2200      	movs	r2, #0
 8004f66:	63bb      	str	r3, [r7, #56]	; 0x38
 8004f68:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004f6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f6c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f70:	633b      	str	r3, [r7, #48]	; 0x30
 8004f72:	2300      	movs	r3, #0
 8004f74:	637b      	str	r3, [r7, #52]	; 0x34
 8004f76:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004f7a:	4622      	mov	r2, r4
 8004f7c:	462b      	mov	r3, r5
 8004f7e:	f04f 0000 	mov.w	r0, #0
 8004f82:	f04f 0100 	mov.w	r1, #0
 8004f86:	0159      	lsls	r1, r3, #5
 8004f88:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004f8c:	0150      	lsls	r0, r2, #5
 8004f8e:	4602      	mov	r2, r0
 8004f90:	460b      	mov	r3, r1
 8004f92:	4621      	mov	r1, r4
 8004f94:	1a51      	subs	r1, r2, r1
 8004f96:	6139      	str	r1, [r7, #16]
 8004f98:	4629      	mov	r1, r5
 8004f9a:	eb63 0301 	sbc.w	r3, r3, r1
 8004f9e:	617b      	str	r3, [r7, #20]
 8004fa0:	f04f 0200 	mov.w	r2, #0
 8004fa4:	f04f 0300 	mov.w	r3, #0
 8004fa8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fac:	4659      	mov	r1, fp
 8004fae:	018b      	lsls	r3, r1, #6
 8004fb0:	4651      	mov	r1, sl
 8004fb2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004fb6:	4651      	mov	r1, sl
 8004fb8:	018a      	lsls	r2, r1, #6
 8004fba:	4651      	mov	r1, sl
 8004fbc:	ebb2 0801 	subs.w	r8, r2, r1
 8004fc0:	4659      	mov	r1, fp
 8004fc2:	eb63 0901 	sbc.w	r9, r3, r1
 8004fc6:	f04f 0200 	mov.w	r2, #0
 8004fca:	f04f 0300 	mov.w	r3, #0
 8004fce:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004fd2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004fd6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004fda:	4690      	mov	r8, r2
 8004fdc:	4699      	mov	r9, r3
 8004fde:	4623      	mov	r3, r4
 8004fe0:	eb18 0303 	adds.w	r3, r8, r3
 8004fe4:	60bb      	str	r3, [r7, #8]
 8004fe6:	462b      	mov	r3, r5
 8004fe8:	eb49 0303 	adc.w	r3, r9, r3
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	f04f 0200 	mov.w	r2, #0
 8004ff2:	f04f 0300 	mov.w	r3, #0
 8004ff6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004ffa:	4629      	mov	r1, r5
 8004ffc:	024b      	lsls	r3, r1, #9
 8004ffe:	4621      	mov	r1, r4
 8005000:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005004:	4621      	mov	r1, r4
 8005006:	024a      	lsls	r2, r1, #9
 8005008:	4610      	mov	r0, r2
 800500a:	4619      	mov	r1, r3
 800500c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800500e:	2200      	movs	r2, #0
 8005010:	62bb      	str	r3, [r7, #40]	; 0x28
 8005012:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005014:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005018:	f7fb f96a 	bl	80002f0 <__aeabi_uldivmod>
 800501c:	4602      	mov	r2, r0
 800501e:	460b      	mov	r3, r1
 8005020:	4613      	mov	r3, r2
 8005022:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005024:	e058      	b.n	80050d8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005026:	4b38      	ldr	r3, [pc, #224]	; (8005108 <HAL_RCC_GetSysClockFreq+0x200>)
 8005028:	685b      	ldr	r3, [r3, #4]
 800502a:	099b      	lsrs	r3, r3, #6
 800502c:	2200      	movs	r2, #0
 800502e:	4618      	mov	r0, r3
 8005030:	4611      	mov	r1, r2
 8005032:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005036:	623b      	str	r3, [r7, #32]
 8005038:	2300      	movs	r3, #0
 800503a:	627b      	str	r3, [r7, #36]	; 0x24
 800503c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005040:	4642      	mov	r2, r8
 8005042:	464b      	mov	r3, r9
 8005044:	f04f 0000 	mov.w	r0, #0
 8005048:	f04f 0100 	mov.w	r1, #0
 800504c:	0159      	lsls	r1, r3, #5
 800504e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005052:	0150      	lsls	r0, r2, #5
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	4641      	mov	r1, r8
 800505a:	ebb2 0a01 	subs.w	sl, r2, r1
 800505e:	4649      	mov	r1, r9
 8005060:	eb63 0b01 	sbc.w	fp, r3, r1
 8005064:	f04f 0200 	mov.w	r2, #0
 8005068:	f04f 0300 	mov.w	r3, #0
 800506c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005070:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005074:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005078:	ebb2 040a 	subs.w	r4, r2, sl
 800507c:	eb63 050b 	sbc.w	r5, r3, fp
 8005080:	f04f 0200 	mov.w	r2, #0
 8005084:	f04f 0300 	mov.w	r3, #0
 8005088:	00eb      	lsls	r3, r5, #3
 800508a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800508e:	00e2      	lsls	r2, r4, #3
 8005090:	4614      	mov	r4, r2
 8005092:	461d      	mov	r5, r3
 8005094:	4643      	mov	r3, r8
 8005096:	18e3      	adds	r3, r4, r3
 8005098:	603b      	str	r3, [r7, #0]
 800509a:	464b      	mov	r3, r9
 800509c:	eb45 0303 	adc.w	r3, r5, r3
 80050a0:	607b      	str	r3, [r7, #4]
 80050a2:	f04f 0200 	mov.w	r2, #0
 80050a6:	f04f 0300 	mov.w	r3, #0
 80050aa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80050ae:	4629      	mov	r1, r5
 80050b0:	028b      	lsls	r3, r1, #10
 80050b2:	4621      	mov	r1, r4
 80050b4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80050b8:	4621      	mov	r1, r4
 80050ba:	028a      	lsls	r2, r1, #10
 80050bc:	4610      	mov	r0, r2
 80050be:	4619      	mov	r1, r3
 80050c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80050c2:	2200      	movs	r2, #0
 80050c4:	61bb      	str	r3, [r7, #24]
 80050c6:	61fa      	str	r2, [r7, #28]
 80050c8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050cc:	f7fb f910 	bl	80002f0 <__aeabi_uldivmod>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	4613      	mov	r3, r2
 80050d6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80050d8:	4b0b      	ldr	r3, [pc, #44]	; (8005108 <HAL_RCC_GetSysClockFreq+0x200>)
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	0c1b      	lsrs	r3, r3, #16
 80050de:	f003 0303 	and.w	r3, r3, #3
 80050e2:	3301      	adds	r3, #1
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80050e8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80050ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80050ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80050f0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050f2:	e002      	b.n	80050fa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80050f4:	4b05      	ldr	r3, [pc, #20]	; (800510c <HAL_RCC_GetSysClockFreq+0x204>)
 80050f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80050f8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80050fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3750      	adds	r7, #80	; 0x50
 8005100:	46bd      	mov	sp, r7
 8005102:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005106:	bf00      	nop
 8005108:	40023800 	.word	0x40023800
 800510c:	00f42400 	.word	0x00f42400
 8005110:	007a1200 	.word	0x007a1200

08005114 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005118:	4b03      	ldr	r3, [pc, #12]	; (8005128 <HAL_RCC_GetHCLKFreq+0x14>)
 800511a:	681b      	ldr	r3, [r3, #0]
}
 800511c:	4618      	mov	r0, r3
 800511e:	46bd      	mov	sp, r7
 8005120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005124:	4770      	bx	lr
 8005126:	bf00      	nop
 8005128:	20000000 	.word	0x20000000

0800512c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005130:	f7ff fff0 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 8005134:	4602      	mov	r2, r0
 8005136:	4b05      	ldr	r3, [pc, #20]	; (800514c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	0a9b      	lsrs	r3, r3, #10
 800513c:	f003 0307 	and.w	r3, r3, #7
 8005140:	4903      	ldr	r1, [pc, #12]	; (8005150 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005142:	5ccb      	ldrb	r3, [r1, r3]
 8005144:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005148:	4618      	mov	r0, r3
 800514a:	bd80      	pop	{r7, pc}
 800514c:	40023800 	.word	0x40023800
 8005150:	0800ffe0 	.word	0x0800ffe0

08005154 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005158:	f7ff ffdc 	bl	8005114 <HAL_RCC_GetHCLKFreq>
 800515c:	4602      	mov	r2, r0
 800515e:	4b05      	ldr	r3, [pc, #20]	; (8005174 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	0b5b      	lsrs	r3, r3, #13
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	4903      	ldr	r1, [pc, #12]	; (8005178 <HAL_RCC_GetPCLK2Freq+0x24>)
 800516a:	5ccb      	ldrb	r3, [r1, r3]
 800516c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005170:	4618      	mov	r0, r3
 8005172:	bd80      	pop	{r7, pc}
 8005174:	40023800 	.word	0x40023800
 8005178:	0800ffe0 	.word	0x0800ffe0

0800517c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b088      	sub	sp, #32
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005184:	2300      	movs	r3, #0
 8005186:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005188:	2300      	movs	r3, #0
 800518a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800518c:	2300      	movs	r3, #0
 800518e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005190:	2300      	movs	r3, #0
 8005192:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005194:	2300      	movs	r3, #0
 8005196:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f003 0301 	and.w	r3, r3, #1
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d012      	beq.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80051a4:	4b69      	ldr	r3, [pc, #420]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	4a68      	ldr	r2, [pc, #416]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051aa:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80051ae:	6093      	str	r3, [r2, #8]
 80051b0:	4b66      	ldr	r3, [pc, #408]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051b2:	689a      	ldr	r2, [r3, #8]
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051b8:	4964      	ldr	r1, [pc, #400]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d101      	bne.n	80051ca <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80051c6:	2301      	movs	r3, #1
 80051c8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d017      	beq.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80051d6:	4b5d      	ldr	r3, [pc, #372]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051dc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051e4:	4959      	ldr	r1, [pc, #356]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80051e6:	4313      	orrs	r3, r2
 80051e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051f0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80051f4:	d101      	bne.n	80051fa <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80051f6:	2301      	movs	r3, #1
 80051f8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d101      	bne.n	8005206 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005202:	2301      	movs	r3, #1
 8005204:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800520e:	2b00      	cmp	r3, #0
 8005210:	d017      	beq.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005212:	4b4e      	ldr	r3, [pc, #312]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005214:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005218:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005220:	494a      	ldr	r1, [pc, #296]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005222:	4313      	orrs	r3, r2
 8005224:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800522c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005230:	d101      	bne.n	8005236 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8005232:	2301      	movs	r3, #1
 8005234:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800523a:	2b00      	cmp	r3, #0
 800523c:	d101      	bne.n	8005242 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800523e:	2301      	movs	r3, #1
 8005240:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800524a:	2b00      	cmp	r3, #0
 800524c:	d001      	beq.n	8005252 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800524e:	2301      	movs	r3, #1
 8005250:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	f000 808b 	beq.w	8005376 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005260:	4b3a      	ldr	r3, [pc, #232]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	4a39      	ldr	r2, [pc, #228]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800526a:	6413      	str	r3, [r2, #64]	; 0x40
 800526c:	4b37      	ldr	r3, [pc, #220]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800526e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005274:	60bb      	str	r3, [r7, #8]
 8005276:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005278:	4b35      	ldr	r3, [pc, #212]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	4a34      	ldr	r2, [pc, #208]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800527e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005282:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005284:	f7fd fe46 	bl	8002f14 <HAL_GetTick>
 8005288:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800528a:	e008      	b.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800528c:	f7fd fe42 	bl	8002f14 <HAL_GetTick>
 8005290:	4602      	mov	r2, r0
 8005292:	697b      	ldr	r3, [r7, #20]
 8005294:	1ad3      	subs	r3, r2, r3
 8005296:	2b64      	cmp	r3, #100	; 0x64
 8005298:	d901      	bls.n	800529e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800529a:	2303      	movs	r3, #3
 800529c:	e38f      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800529e:	4b2c      	ldr	r3, [pc, #176]	; (8005350 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d0f0      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80052aa:	4b28      	ldr	r3, [pc, #160]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052b2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d035      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d02e      	beq.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80052c8:	4b20      	ldr	r3, [pc, #128]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052d0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80052d2:	4b1e      	ldr	r3, [pc, #120]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052d6:	4a1d      	ldr	r2, [pc, #116]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052dc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80052de:	4b1b      	ldr	r3, [pc, #108]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052e2:	4a1a      	ldr	r2, [pc, #104]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e8:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80052ea:	4a18      	ldr	r2, [pc, #96]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80052f0:	4b16      	ldr	r3, [pc, #88]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80052f4:	f003 0301 	and.w	r3, r3, #1
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d114      	bne.n	8005326 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052fc:	f7fd fe0a 	bl	8002f14 <HAL_GetTick>
 8005300:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005302:	e00a      	b.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005304:	f7fd fe06 	bl	8002f14 <HAL_GetTick>
 8005308:	4602      	mov	r2, r0
 800530a:	697b      	ldr	r3, [r7, #20]
 800530c:	1ad3      	subs	r3, r2, r3
 800530e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005312:	4293      	cmp	r3, r2
 8005314:	d901      	bls.n	800531a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005316:	2303      	movs	r3, #3
 8005318:	e351      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800531a:	4b0c      	ldr	r3, [pc, #48]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800531c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800531e:	f003 0302 	and.w	r3, r3, #2
 8005322:	2b00      	cmp	r3, #0
 8005324:	d0ee      	beq.n	8005304 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800532a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800532e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005332:	d111      	bne.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005334:	4b05      	ldr	r3, [pc, #20]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005336:	689b      	ldr	r3, [r3, #8]
 8005338:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8005342:	400b      	ands	r3, r1
 8005344:	4901      	ldr	r1, [pc, #4]	; (800534c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005346:	4313      	orrs	r3, r2
 8005348:	608b      	str	r3, [r1, #8]
 800534a:	e00b      	b.n	8005364 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800534c:	40023800 	.word	0x40023800
 8005350:	40007000 	.word	0x40007000
 8005354:	0ffffcff 	.word	0x0ffffcff
 8005358:	4bac      	ldr	r3, [pc, #688]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535a:	689b      	ldr	r3, [r3, #8]
 800535c:	4aab      	ldr	r2, [pc, #684]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800535e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8005362:	6093      	str	r3, [r2, #8]
 8005364:	4ba9      	ldr	r3, [pc, #676]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005366:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005370:	49a6      	ldr	r1, [pc, #664]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005372:	4313      	orrs	r3, r2
 8005374:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0310 	and.w	r3, r3, #16
 800537e:	2b00      	cmp	r3, #0
 8005380:	d010      	beq.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005382:	4ba2      	ldr	r3, [pc, #648]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005384:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005388:	4aa0      	ldr	r2, [pc, #640]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800538a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800538e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005392:	4b9e      	ldr	r3, [pc, #632]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005394:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539c:	499b      	ldr	r1, [pc, #620]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800539e:	4313      	orrs	r3, r2
 80053a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d00a      	beq.n	80053c6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80053b0:	4b96      	ldr	r3, [pc, #600]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80053be:	4993      	ldr	r1, [pc, #588]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053c0:	4313      	orrs	r3, r2
 80053c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d00a      	beq.n	80053e8 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80053d2:	4b8e      	ldr	r3, [pc, #568]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053e0:	498a      	ldr	r1, [pc, #552]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053e2:	4313      	orrs	r3, r2
 80053e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d00a      	beq.n	800540a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80053f4:	4b85      	ldr	r3, [pc, #532]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80053f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005402:	4982      	ldr	r1, [pc, #520]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005404:	4313      	orrs	r3, r2
 8005406:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005412:	2b00      	cmp	r3, #0
 8005414:	d00a      	beq.n	800542c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005416:	4b7d      	ldr	r3, [pc, #500]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005418:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800541c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005424:	4979      	ldr	r1, [pc, #484]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005426:	4313      	orrs	r3, r2
 8005428:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005434:	2b00      	cmp	r3, #0
 8005436:	d00a      	beq.n	800544e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005438:	4b74      	ldr	r3, [pc, #464]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800543a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800543e:	f023 0203 	bic.w	r2, r3, #3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005446:	4971      	ldr	r1, [pc, #452]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005448:	4313      	orrs	r3, r2
 800544a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00a      	beq.n	8005470 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800545a:	4b6c      	ldr	r3, [pc, #432]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800545c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005460:	f023 020c 	bic.w	r2, r3, #12
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005468:	4968      	ldr	r1, [pc, #416]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800546a:	4313      	orrs	r3, r2
 800546c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005478:	2b00      	cmp	r3, #0
 800547a:	d00a      	beq.n	8005492 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800547c:	4b63      	ldr	r3, [pc, #396]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800547e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005482:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800548a:	4960      	ldr	r1, [pc, #384]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800548c:	4313      	orrs	r3, r2
 800548e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800549a:	2b00      	cmp	r3, #0
 800549c:	d00a      	beq.n	80054b4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800549e:	4b5b      	ldr	r3, [pc, #364]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054a4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054ac:	4957      	ldr	r1, [pc, #348]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054ae:	4313      	orrs	r3, r2
 80054b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d00a      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80054c0:	4b52      	ldr	r3, [pc, #328]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ce:	494f      	ldr	r1, [pc, #316]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d00a      	beq.n	80054f8 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80054e2:	4b4a      	ldr	r3, [pc, #296]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e8:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80054f0:	4946      	ldr	r1, [pc, #280]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80054f2:	4313      	orrs	r3, r2
 80054f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005500:	2b00      	cmp	r3, #0
 8005502:	d00a      	beq.n	800551a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005504:	4b41      	ldr	r3, [pc, #260]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800550a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005512:	493e      	ldr	r1, [pc, #248]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005514:	4313      	orrs	r3, r2
 8005516:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005522:	2b00      	cmp	r3, #0
 8005524:	d00a      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005526:	4b39      	ldr	r3, [pc, #228]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005528:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800552c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005534:	4935      	ldr	r1, [pc, #212]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005544:	2b00      	cmp	r3, #0
 8005546:	d00a      	beq.n	800555e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005548:	4b30      	ldr	r3, [pc, #192]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800554a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800554e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005556:	492d      	ldr	r1, [pc, #180]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005558:	4313      	orrs	r3, r2
 800555a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005566:	2b00      	cmp	r3, #0
 8005568:	d011      	beq.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800556a:	4b28      	ldr	r3, [pc, #160]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800556c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005570:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005578:	4924      	ldr	r1, [pc, #144]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800557a:	4313      	orrs	r3, r2
 800557c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005584:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005588:	d101      	bne.n	800558e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800558a:	2301      	movs	r3, #1
 800558c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f003 0308 	and.w	r3, r3, #8
 8005596:	2b00      	cmp	r3, #0
 8005598:	d001      	beq.n	800559e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800559a:	2301      	movs	r3, #1
 800559c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80055aa:	4b18      	ldr	r3, [pc, #96]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055b0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055b8:	4914      	ldr	r1, [pc, #80]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ba:	4313      	orrs	r3, r2
 80055bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d00b      	beq.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055d2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80055dc:	490b      	ldr	r1, [pc, #44]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055de:	4313      	orrs	r3, r2
 80055e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00f      	beq.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80055f0:	4b06      	ldr	r3, [pc, #24]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80055f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005600:	4902      	ldr	r1, [pc, #8]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8005602:	4313      	orrs	r3, r2
 8005604:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005608:	e002      	b.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x494>
 800560a:	bf00      	nop
 800560c:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005618:	2b00      	cmp	r3, #0
 800561a:	d00b      	beq.n	8005634 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800561c:	4b8a      	ldr	r3, [pc, #552]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800561e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005622:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800562c:	4986      	ldr	r1, [pc, #536]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800562e:	4313      	orrs	r3, r2
 8005630:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00b      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005640:	4b81      	ldr	r3, [pc, #516]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005646:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005650:	497d      	ldr	r1, [pc, #500]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005658:	69fb      	ldr	r3, [r7, #28]
 800565a:	2b01      	cmp	r3, #1
 800565c:	d006      	beq.n	800566c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005666:	2b00      	cmp	r3, #0
 8005668:	f000 80d6 	beq.w	8005818 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800566c:	4b76      	ldr	r3, [pc, #472]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a75      	ldr	r2, [pc, #468]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005672:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005676:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005678:	f7fd fc4c 	bl	8002f14 <HAL_GetTick>
 800567c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800567e:	e008      	b.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005680:	f7fd fc48 	bl	8002f14 <HAL_GetTick>
 8005684:	4602      	mov	r2, r0
 8005686:	697b      	ldr	r3, [r7, #20]
 8005688:	1ad3      	subs	r3, r2, r3
 800568a:	2b64      	cmp	r3, #100	; 0x64
 800568c:	d901      	bls.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800568e:	2303      	movs	r3, #3
 8005690:	e195      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005692:	4b6d      	ldr	r3, [pc, #436]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1f0      	bne.n	8005680 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0301 	and.w	r3, r3, #1
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d021      	beq.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x572>
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d11d      	bne.n	80056ee <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056b2:	4b65      	ldr	r3, [pc, #404]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056c0:	4b61      	ldr	r3, [pc, #388]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056c6:	0e1b      	lsrs	r3, r3, #24
 80056c8:	f003 030f 	and.w	r3, r3, #15
 80056cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	019a      	lsls	r2, r3, #6
 80056d4:	693b      	ldr	r3, [r7, #16]
 80056d6:	041b      	lsls	r3, r3, #16
 80056d8:	431a      	orrs	r2, r3
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	061b      	lsls	r3, r3, #24
 80056de:	431a      	orrs	r2, r3
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	071b      	lsls	r3, r3, #28
 80056e6:	4958      	ldr	r1, [pc, #352]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80056e8:	4313      	orrs	r3, r2
 80056ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d004      	beq.n	8005704 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005702:	d00a      	beq.n	800571a <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800570c:	2b00      	cmp	r3, #0
 800570e:	d02e      	beq.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005714:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005718:	d129      	bne.n	800576e <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800571a:	4b4b      	ldr	r3, [pc, #300]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800571c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005720:	0c1b      	lsrs	r3, r3, #16
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005728:	4b47      	ldr	r3, [pc, #284]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800572a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800572e:	0f1b      	lsrs	r3, r3, #28
 8005730:	f003 0307 	and.w	r3, r3, #7
 8005734:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	685b      	ldr	r3, [r3, #4]
 800573a:	019a      	lsls	r2, r3, #6
 800573c:	693b      	ldr	r3, [r7, #16]
 800573e:	041b      	lsls	r3, r3, #16
 8005740:	431a      	orrs	r2, r3
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	68db      	ldr	r3, [r3, #12]
 8005746:	061b      	lsls	r3, r3, #24
 8005748:	431a      	orrs	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	071b      	lsls	r3, r3, #28
 800574e:	493e      	ldr	r1, [pc, #248]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005750:	4313      	orrs	r3, r2
 8005752:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005756:	4b3c      	ldr	r3, [pc, #240]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005758:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800575c:	f023 021f 	bic.w	r2, r3, #31
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005764:	3b01      	subs	r3, #1
 8005766:	4938      	ldr	r1, [pc, #224]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005768:	4313      	orrs	r3, r2
 800576a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005776:	2b00      	cmp	r3, #0
 8005778:	d01d      	beq.n	80057b6 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800577a:	4b33      	ldr	r3, [pc, #204]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800577c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005780:	0e1b      	lsrs	r3, r3, #24
 8005782:	f003 030f 	and.w	r3, r3, #15
 8005786:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005788:	4b2f      	ldr	r3, [pc, #188]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800578a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800578e:	0f1b      	lsrs	r3, r3, #28
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	685b      	ldr	r3, [r3, #4]
 800579a:	019a      	lsls	r2, r3, #6
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	041b      	lsls	r3, r3, #16
 80057a2:	431a      	orrs	r2, r3
 80057a4:	693b      	ldr	r3, [r7, #16]
 80057a6:	061b      	lsls	r3, r3, #24
 80057a8:	431a      	orrs	r2, r3
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	071b      	lsls	r3, r3, #28
 80057ae:	4926      	ldr	r1, [pc, #152]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057b0:	4313      	orrs	r3, r2
 80057b2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d011      	beq.n	80057e6 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	019a      	lsls	r2, r3, #6
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	691b      	ldr	r3, [r3, #16]
 80057cc:	041b      	lsls	r3, r3, #16
 80057ce:	431a      	orrs	r2, r3
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	061b      	lsls	r3, r3, #24
 80057d6:	431a      	orrs	r2, r3
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	071b      	lsls	r3, r3, #28
 80057de:	491a      	ldr	r1, [pc, #104]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e0:	4313      	orrs	r3, r2
 80057e2:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057e6:	4b18      	ldr	r3, [pc, #96]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4a17      	ldr	r2, [pc, #92]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80057ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80057f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80057f2:	f7fd fb8f 	bl	8002f14 <HAL_GetTick>
 80057f6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80057f8:	e008      	b.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80057fa:	f7fd fb8b 	bl	8002f14 <HAL_GetTick>
 80057fe:	4602      	mov	r2, r0
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	1ad3      	subs	r3, r2, r3
 8005804:	2b64      	cmp	r3, #100	; 0x64
 8005806:	d901      	bls.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005808:	2303      	movs	r3, #3
 800580a:	e0d8      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800580c:	4b0e      	ldr	r3, [pc, #56]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005814:	2b00      	cmp	r3, #0
 8005816:	d0f0      	beq.n	80057fa <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	2b01      	cmp	r3, #1
 800581c:	f040 80ce 	bne.w	80059bc <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005820:	4b09      	ldr	r3, [pc, #36]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a08      	ldr	r2, [pc, #32]	; (8005848 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8005826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800582a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800582c:	f7fd fb72 	bl	8002f14 <HAL_GetTick>
 8005830:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005832:	e00b      	b.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005834:	f7fd fb6e 	bl	8002f14 <HAL_GetTick>
 8005838:	4602      	mov	r2, r0
 800583a:	697b      	ldr	r3, [r7, #20]
 800583c:	1ad3      	subs	r3, r2, r3
 800583e:	2b64      	cmp	r3, #100	; 0x64
 8005840:	d904      	bls.n	800584c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005842:	2303      	movs	r3, #3
 8005844:	e0bb      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x842>
 8005846:	bf00      	nop
 8005848:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800584c:	4b5e      	ldr	r3, [pc, #376]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005854:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005858:	d0ec      	beq.n	8005834 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d003      	beq.n	800586e <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800586a:	2b00      	cmp	r3, #0
 800586c:	d009      	beq.n	8005882 <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005876:	2b00      	cmp	r3, #0
 8005878:	d02e      	beq.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800587e:	2b00      	cmp	r3, #0
 8005880:	d12a      	bne.n	80058d8 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005882:	4b51      	ldr	r3, [pc, #324]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005884:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005888:	0c1b      	lsrs	r3, r3, #16
 800588a:	f003 0303 	and.w	r3, r3, #3
 800588e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005890:	4b4d      	ldr	r3, [pc, #308]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005892:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005896:	0f1b      	lsrs	r3, r3, #28
 8005898:	f003 0307 	and.w	r3, r3, #7
 800589c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	695b      	ldr	r3, [r3, #20]
 80058a2:	019a      	lsls	r2, r3, #6
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	041b      	lsls	r3, r3, #16
 80058a8:	431a      	orrs	r2, r3
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	699b      	ldr	r3, [r3, #24]
 80058ae:	061b      	lsls	r3, r3, #24
 80058b0:	431a      	orrs	r2, r3
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	071b      	lsls	r3, r3, #28
 80058b6:	4944      	ldr	r1, [pc, #272]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058b8:	4313      	orrs	r3, r2
 80058ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058be:	4b42      	ldr	r3, [pc, #264]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058c4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058cc:	3b01      	subs	r3, #1
 80058ce:	021b      	lsls	r3, r3, #8
 80058d0:	493d      	ldr	r1, [pc, #244]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058d2:	4313      	orrs	r3, r2
 80058d4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d022      	beq.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058e8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058ec:	d11d      	bne.n	800592a <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058ee:	4b36      	ldr	r3, [pc, #216]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	0e1b      	lsrs	r3, r3, #24
 80058f6:	f003 030f 	and.w	r3, r3, #15
 80058fa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058fc:	4b32      	ldr	r3, [pc, #200]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80058fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005902:	0f1b      	lsrs	r3, r3, #28
 8005904:	f003 0307 	and.w	r3, r3, #7
 8005908:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	695b      	ldr	r3, [r3, #20]
 800590e:	019a      	lsls	r2, r3, #6
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	6a1b      	ldr	r3, [r3, #32]
 8005914:	041b      	lsls	r3, r3, #16
 8005916:	431a      	orrs	r2, r3
 8005918:	693b      	ldr	r3, [r7, #16]
 800591a:	061b      	lsls	r3, r3, #24
 800591c:	431a      	orrs	r2, r3
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	071b      	lsls	r3, r3, #28
 8005922:	4929      	ldr	r1, [pc, #164]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005924:	4313      	orrs	r3, r2
 8005926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f003 0308 	and.w	r3, r3, #8
 8005932:	2b00      	cmp	r3, #0
 8005934:	d028      	beq.n	8005988 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005936:	4b24      	ldr	r3, [pc, #144]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800593c:	0e1b      	lsrs	r3, r3, #24
 800593e:	f003 030f 	and.w	r3, r3, #15
 8005942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005944:	4b20      	ldr	r3, [pc, #128]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005946:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594a:	0c1b      	lsrs	r3, r3, #16
 800594c:	f003 0303 	and.w	r3, r3, #3
 8005950:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	019a      	lsls	r2, r3, #6
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	041b      	lsls	r3, r3, #16
 800595c:	431a      	orrs	r2, r3
 800595e:	693b      	ldr	r3, [r7, #16]
 8005960:	061b      	lsls	r3, r3, #24
 8005962:	431a      	orrs	r2, r3
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	69db      	ldr	r3, [r3, #28]
 8005968:	071b      	lsls	r3, r3, #28
 800596a:	4917      	ldr	r1, [pc, #92]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800596c:	4313      	orrs	r3, r2
 800596e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005972:	4b15      	ldr	r3, [pc, #84]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005980:	4911      	ldr	r1, [pc, #68]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8005982:	4313      	orrs	r3, r2
 8005984:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005988:	4b0f      	ldr	r3, [pc, #60]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	4a0e      	ldr	r2, [pc, #56]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800598e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005992:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005994:	f7fd fabe 	bl	8002f14 <HAL_GetTick>
 8005998:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800599a:	e008      	b.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800599c:	f7fd faba 	bl	8002f14 <HAL_GetTick>
 80059a0:	4602      	mov	r2, r0
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	1ad3      	subs	r3, r2, r3
 80059a6:	2b64      	cmp	r3, #100	; 0x64
 80059a8:	d901      	bls.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e007      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059ae:	4b06      	ldr	r3, [pc, #24]	; (80059c8 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ba:	d1ef      	bne.n	800599c <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80059bc:	2300      	movs	r3, #0
}
 80059be:	4618      	mov	r0, r3
 80059c0:	3720      	adds	r7, #32
 80059c2:	46bd      	mov	sp, r7
 80059c4:	bd80      	pop	{r7, pc}
 80059c6:	bf00      	nop
 80059c8:	40023800 	.word	0x40023800

080059cc <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b082      	sub	sp, #8
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d101      	bne.n	80059de <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	e01c      	b.n	8005a18 <HAL_RNG_Init+0x4c>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	795b      	ldrb	r3, [r3, #5]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d105      	bne.n	80059f4 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	711a      	strb	r2, [r3, #4]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7fb fd60 	bl	80014b4 <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2202      	movs	r2, #2
 80059f8:	715a      	strb	r2, [r3, #5]


  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f042 0204 	orr.w	r2, r2, #4
 8005a08:	601a      	str	r2, [r3, #0]

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2201      	movs	r2, #1
 8005a0e:	715a      	strb	r2, [r3, #5]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2200      	movs	r2, #0
 8005a14:	609a      	str	r2, [r3, #8]

  /* Return function status */
  return HAL_OK;
 8005a16:	2300      	movs	r3, #0
}
 8005a18:	4618      	mov	r0, r3
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d101      	bne.n	8005a32 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a2e:	2301      	movs	r3, #1
 8005a30:	e09d      	b.n	8005b6e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d108      	bne.n	8005a4c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	685b      	ldr	r3, [r3, #4]
 8005a3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a42:	d009      	beq.n	8005a58 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	61da      	str	r2, [r3, #28]
 8005a4a:	e005      	b.n	8005a58 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	2200      	movs	r2, #0
 8005a50:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	2200      	movs	r2, #0
 8005a56:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a64:	b2db      	uxtb	r3, r3
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d106      	bne.n	8005a78 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7fb fd7c 	bl	8001570 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2202      	movs	r2, #2
 8005a7c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a8e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	68db      	ldr	r3, [r3, #12]
 8005a94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a98:	d902      	bls.n	8005aa0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
 8005a9e:	e002      	b.n	8005aa6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005aa0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005aa4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	68db      	ldr	r3, [r3, #12]
 8005aaa:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005aae:	d007      	beq.n	8005ac0 <HAL_SPI_Init+0xa0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	68db      	ldr	r3, [r3, #12]
 8005ab4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005ab8:	d002      	beq.n	8005ac0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2200      	movs	r2, #0
 8005abe:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	685b      	ldr	r3, [r3, #4]
 8005ac4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	689b      	ldr	r3, [r3, #8]
 8005acc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005ad0:	431a      	orrs	r2, r3
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	f003 0302 	and.w	r3, r3, #2
 8005ada:	431a      	orrs	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	695b      	ldr	r3, [r3, #20]
 8005ae0:	f003 0301 	and.w	r3, r3, #1
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	699b      	ldr	r3, [r3, #24]
 8005aea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	69db      	ldr	r3, [r3, #28]
 8005af4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005af8:	431a      	orrs	r2, r3
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6a1b      	ldr	r3, [r3, #32]
 8005afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b02:	ea42 0103 	orr.w	r1, r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b0a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	430a      	orrs	r2, r1
 8005b14:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	699b      	ldr	r3, [r3, #24]
 8005b1a:	0c1b      	lsrs	r3, r3, #16
 8005b1c:	f003 0204 	and.w	r2, r3, #4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b24:	f003 0310 	and.w	r3, r3, #16
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	f003 0308 	and.w	r3, r3, #8
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	68db      	ldr	r3, [r3, #12]
 8005b38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b3c:	ea42 0103 	orr.w	r1, r2, r3
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	430a      	orrs	r2, r1
 8005b4c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69da      	ldr	r2, [r3, #28]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b5c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	2200      	movs	r2, #0
 8005b62:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2201      	movs	r2, #1
 8005b68:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3710      	adds	r7, #16
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b088      	sub	sp, #32
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	60f8      	str	r0, [r7, #12]
 8005b7e:	60b9      	str	r1, [r7, #8]
 8005b80:	603b      	str	r3, [r7, #0]
 8005b82:	4613      	mov	r3, r2
 8005b84:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b86:	2300      	movs	r3, #0
 8005b88:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005b90:	2b01      	cmp	r3, #1
 8005b92:	d101      	bne.n	8005b98 <HAL_SPI_Transmit+0x22>
 8005b94:	2302      	movs	r3, #2
 8005b96:	e158      	b.n	8005e4a <HAL_SPI_Transmit+0x2d4>
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005ba0:	f7fd f9b8 	bl	8002f14 <HAL_GetTick>
 8005ba4:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005ba6:	88fb      	ldrh	r3, [r7, #6]
 8005ba8:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	2b01      	cmp	r3, #1
 8005bb4:	d002      	beq.n	8005bbc <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bba:	e13d      	b.n	8005e38 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d002      	beq.n	8005bc8 <HAL_SPI_Transmit+0x52>
 8005bc2:	88fb      	ldrh	r3, [r7, #6]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d102      	bne.n	8005bce <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005bc8:	2301      	movs	r3, #1
 8005bca:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005bcc:	e134      	b.n	8005e38 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2203      	movs	r2, #3
 8005bd2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	68ba      	ldr	r2, [r7, #8]
 8005be0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	88fa      	ldrh	r2, [r7, #6]
 8005be6:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	88fa      	ldrh	r2, [r7, #6]
 8005bec:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	2200      	movs	r2, #0
 8005c00:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	2200      	movs	r2, #0
 8005c08:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2200      	movs	r2, #0
 8005c0e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	689b      	ldr	r3, [r3, #8]
 8005c14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005c18:	d10f      	bne.n	8005c3a <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c28:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	681a      	ldr	r2, [r3, #0]
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c38:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b40      	cmp	r3, #64	; 0x40
 8005c46:	d007      	beq.n	8005c58 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	681a      	ldr	r2, [r3, #0]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005c56:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	68db      	ldr	r3, [r3, #12]
 8005c5c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005c60:	d94b      	bls.n	8005cfa <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	685b      	ldr	r3, [r3, #4]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d002      	beq.n	8005c70 <HAL_SPI_Transmit+0xfa>
 8005c6a:	8afb      	ldrh	r3, [r7, #22]
 8005c6c:	2b01      	cmp	r3, #1
 8005c6e:	d13e      	bne.n	8005cee <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c74:	881a      	ldrh	r2, [r3, #0]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	1c9a      	adds	r2, r3, #2
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	3b01      	subs	r3, #1
 8005c8e:	b29a      	uxth	r2, r3
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c94:	e02b      	b.n	8005cee <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	f003 0302 	and.w	r3, r3, #2
 8005ca0:	2b02      	cmp	r3, #2
 8005ca2:	d112      	bne.n	8005cca <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca8:	881a      	ldrh	r2, [r3, #0]
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb4:	1c9a      	adds	r2, r3, #2
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005cc8:	e011      	b.n	8005cee <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cca:	f7fd f923 	bl	8002f14 <HAL_GetTick>
 8005cce:	4602      	mov	r2, r0
 8005cd0:	69bb      	ldr	r3, [r7, #24]
 8005cd2:	1ad3      	subs	r3, r2, r3
 8005cd4:	683a      	ldr	r2, [r7, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d803      	bhi.n	8005ce2 <HAL_SPI_Transmit+0x16c>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ce0:	d102      	bne.n	8005ce8 <HAL_SPI_Transmit+0x172>
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d102      	bne.n	8005cee <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8005ce8:	2303      	movs	r3, #3
 8005cea:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005cec:	e0a4      	b.n	8005e38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d1ce      	bne.n	8005c96 <HAL_SPI_Transmit+0x120>
 8005cf8:	e07c      	b.n	8005df4 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d002      	beq.n	8005d08 <HAL_SPI_Transmit+0x192>
 8005d02:	8afb      	ldrh	r3, [r7, #22]
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d170      	bne.n	8005dea <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d0c:	b29b      	uxth	r3, r3
 8005d0e:	2b01      	cmp	r3, #1
 8005d10:	d912      	bls.n	8005d38 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d16:	881a      	ldrh	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	1c9a      	adds	r2, r3, #2
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d2c:	b29b      	uxth	r3, r3
 8005d2e:	3b02      	subs	r3, #2
 8005d30:	b29a      	uxth	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d36:	e058      	b.n	8005dea <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	330c      	adds	r3, #12
 8005d42:	7812      	ldrb	r2, [r2, #0]
 8005d44:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d4a:	1c5a      	adds	r2, r3, #1
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d54:	b29b      	uxth	r3, r3
 8005d56:	3b01      	subs	r3, #1
 8005d58:	b29a      	uxth	r2, r3
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8005d5e:	e044      	b.n	8005dea <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d12b      	bne.n	8005dc6 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d72:	b29b      	uxth	r3, r3
 8005d74:	2b01      	cmp	r3, #1
 8005d76:	d912      	bls.n	8005d9e <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d7c:	881a      	ldrh	r2, [r3, #0]
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d88:	1c9a      	adds	r2, r3, #2
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005d92:	b29b      	uxth	r3, r3
 8005d94:	3b02      	subs	r3, #2
 8005d96:	b29a      	uxth	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005d9c:	e025      	b.n	8005dea <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	330c      	adds	r3, #12
 8005da8:	7812      	ldrb	r2, [r2, #0]
 8005daa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005db0:	1c5a      	adds	r2, r3, #1
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dba:	b29b      	uxth	r3, r3
 8005dbc:	3b01      	subs	r3, #1
 8005dbe:	b29a      	uxth	r2, r3
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005dc4:	e011      	b.n	8005dea <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005dc6:	f7fd f8a5 	bl	8002f14 <HAL_GetTick>
 8005dca:	4602      	mov	r2, r0
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	1ad3      	subs	r3, r2, r3
 8005dd0:	683a      	ldr	r2, [r7, #0]
 8005dd2:	429a      	cmp	r2, r3
 8005dd4:	d803      	bhi.n	8005dde <HAL_SPI_Transmit+0x268>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ddc:	d102      	bne.n	8005de4 <HAL_SPI_Transmit+0x26e>
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d102      	bne.n	8005dea <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8005de4:	2303      	movs	r3, #3
 8005de6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005de8:	e026      	b.n	8005e38 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d1b5      	bne.n	8005d60 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005df4:	69ba      	ldr	r2, [r7, #24]
 8005df6:	6839      	ldr	r1, [r7, #0]
 8005df8:	68f8      	ldr	r0, [r7, #12]
 8005dfa:	f000 f945 	bl	8006088 <SPI_EndRxTxTransaction>
 8005dfe:	4603      	mov	r3, r0
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d002      	beq.n	8005e0a <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	2220      	movs	r2, #32
 8005e08:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	689b      	ldr	r3, [r3, #8]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d10a      	bne.n	8005e28 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005e12:	2300      	movs	r3, #0
 8005e14:	613b      	str	r3, [r7, #16]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	613b      	str	r3, [r7, #16]
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	689b      	ldr	r3, [r3, #8]
 8005e24:	613b      	str	r3, [r7, #16]
 8005e26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d002      	beq.n	8005e36 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8005e30:	2301      	movs	r3, #1
 8005e32:	77fb      	strb	r3, [r7, #31]
 8005e34:	e000      	b.n	8005e38 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8005e36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005e48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005e4a:	4618      	mov	r0, r3
 8005e4c:	3720      	adds	r7, #32
 8005e4e:	46bd      	mov	sp, r7
 8005e50:	bd80      	pop	{r7, pc}
	...

08005e54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b088      	sub	sp, #32
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	60f8      	str	r0, [r7, #12]
 8005e5c:	60b9      	str	r1, [r7, #8]
 8005e5e:	603b      	str	r3, [r7, #0]
 8005e60:	4613      	mov	r3, r2
 8005e62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005e64:	f7fd f856 	bl	8002f14 <HAL_GetTick>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e6c:	1a9b      	subs	r3, r3, r2
 8005e6e:	683a      	ldr	r2, [r7, #0]
 8005e70:	4413      	add	r3, r2
 8005e72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005e74:	f7fd f84e 	bl	8002f14 <HAL_GetTick>
 8005e78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005e7a:	4b39      	ldr	r3, [pc, #228]	; (8005f60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	015b      	lsls	r3, r3, #5
 8005e80:	0d1b      	lsrs	r3, r3, #20
 8005e82:	69fa      	ldr	r2, [r7, #28]
 8005e84:	fb02 f303 	mul.w	r3, r2, r3
 8005e88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e8a:	e054      	b.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e92:	d050      	beq.n	8005f36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005e94:	f7fd f83e 	bl	8002f14 <HAL_GetTick>
 8005e98:	4602      	mov	r2, r0
 8005e9a:	69bb      	ldr	r3, [r7, #24]
 8005e9c:	1ad3      	subs	r3, r2, r3
 8005e9e:	69fa      	ldr	r2, [r7, #28]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d902      	bls.n	8005eaa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ea4:	69fb      	ldr	r3, [r7, #28]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d13d      	bne.n	8005f26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	685a      	ldr	r2, [r3, #4]
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005eb8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec2:	d111      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ecc:	d004      	beq.n	8005ed8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ed6:	d107      	bne.n	8005ee8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ee6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ef0:	d10f      	bne.n	8005f12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	681a      	ldr	r2, [r3, #0]
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005f10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	2201      	movs	r2, #1
 8005f16:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005f22:	2303      	movs	r3, #3
 8005f24:	e017      	b.n	8005f56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005f26:	697b      	ldr	r3, [r7, #20]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	d101      	bne.n	8005f30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005f30:	697b      	ldr	r3, [r7, #20]
 8005f32:	3b01      	subs	r3, #1
 8005f34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	689a      	ldr	r2, [r3, #8]
 8005f3c:	68bb      	ldr	r3, [r7, #8]
 8005f3e:	4013      	ands	r3, r2
 8005f40:	68ba      	ldr	r2, [r7, #8]
 8005f42:	429a      	cmp	r2, r3
 8005f44:	bf0c      	ite	eq
 8005f46:	2301      	moveq	r3, #1
 8005f48:	2300      	movne	r3, #0
 8005f4a:	b2db      	uxtb	r3, r3
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	79fb      	ldrb	r3, [r7, #7]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d19b      	bne.n	8005e8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005f54:	2300      	movs	r3, #0
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3720      	adds	r7, #32
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20000000 	.word	0x20000000

08005f64 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
 8005f70:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8005f72:	f7fc ffcf 	bl	8002f14 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f7a:	1a9b      	subs	r3, r3, r2
 8005f7c:	683a      	ldr	r2, [r7, #0]
 8005f7e:	4413      	add	r3, r2
 8005f80:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005f82:	f7fc ffc7 	bl	8002f14 <HAL_GetTick>
 8005f86:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8005f88:	4b3e      	ldr	r3, [pc, #248]	; (8006084 <SPI_WaitFifoStateUntilTimeout+0x120>)
 8005f8a:	681a      	ldr	r2, [r3, #0]
 8005f8c:	4613      	mov	r3, r2
 8005f8e:	009b      	lsls	r3, r3, #2
 8005f90:	4413      	add	r3, r2
 8005f92:	00da      	lsls	r2, r3, #3
 8005f94:	1ad3      	subs	r3, r2, r3
 8005f96:	0d1b      	lsrs	r3, r3, #20
 8005f98:	69fa      	ldr	r2, [r7, #28]
 8005f9a:	fb02 f303 	mul.w	r3, r2, r3
 8005f9e:	613b      	str	r3, [r7, #16]

  while ((hspi->Instance->SR & Fifo) != State)
 8005fa0:	e062      	b.n	8006068 <SPI_WaitFifoStateUntilTimeout+0x104>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8005fa2:	68bb      	ldr	r3, [r7, #8]
 8005fa4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8005fa8:	d109      	bne.n	8005fbe <SPI_WaitFifoStateUntilTimeout+0x5a>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d106      	bne.n	8005fbe <SPI_WaitFifoStateUntilTimeout+0x5a>
    {
      /* Flush Data Register by a blank read */
      tmpreg = READ_REG(*((__IO uint8_t *)&hspi->Instance->DR));
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	330c      	adds	r3, #12
 8005fb6:	781b      	ldrb	r3, [r3, #0]
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	617b      	str	r3, [r7, #20]
      /* To avoid GCC warning */
      UNUSED(tmpreg);
 8005fbc:	697b      	ldr	r3, [r7, #20]
    }

    if (Timeout != HAL_MAX_DELAY)
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d050      	beq.n	8006068 <SPI_WaitFifoStateUntilTimeout+0x104>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005fc6:	f7fc ffa5 	bl	8002f14 <HAL_GetTick>
 8005fca:	4602      	mov	r2, r0
 8005fcc:	69bb      	ldr	r3, [r7, #24]
 8005fce:	1ad3      	subs	r3, r2, r3
 8005fd0:	69fa      	ldr	r2, [r7, #28]
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d902      	bls.n	8005fdc <SPI_WaitFifoStateUntilTimeout+0x78>
 8005fd6:	69fb      	ldr	r3, [r7, #28]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d13d      	bne.n	8006058 <SPI_WaitFifoStateUntilTimeout+0xf4>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	685a      	ldr	r2, [r3, #4]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005fea:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	685b      	ldr	r3, [r3, #4]
 8005ff0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ff4:	d111      	bne.n	800601a <SPI_WaitFifoStateUntilTimeout+0xb6>
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ffe:	d004      	beq.n	800600a <SPI_WaitFifoStateUntilTimeout+0xa6>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	689b      	ldr	r3, [r3, #8]
 8006004:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006008:	d107      	bne.n	800601a <SPI_WaitFifoStateUntilTimeout+0xb6>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006018:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006022:	d10f      	bne.n	8006044 <SPI_WaitFifoStateUntilTimeout+0xe0>
        {
          SPI_RESET_CRC(hspi);
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006032:	601a      	str	r2, [r3, #0]
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006042:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006044:	68fb      	ldr	r3, [r7, #12]
 8006046:	2201      	movs	r2, #1
 8006048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	2200      	movs	r2, #0
 8006050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006054:	2303      	movs	r3, #3
 8006056:	e010      	b.n	800607a <SPI_WaitFifoStateUntilTimeout+0x116>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8006058:	693b      	ldr	r3, [r7, #16]
 800605a:	2b00      	cmp	r3, #0
 800605c:	d101      	bne.n	8006062 <SPI_WaitFifoStateUntilTimeout+0xfe>
      {
        tmp_timeout = 0U;
 800605e:	2300      	movs	r3, #0
 8006060:	61fb      	str	r3, [r7, #28]
      }      
      count--;
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	3b01      	subs	r3, #1
 8006066:	613b      	str	r3, [r7, #16]
  while ((hspi->Instance->SR & Fifo) != State)
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	689a      	ldr	r2, [r3, #8]
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4013      	ands	r3, r2
 8006072:	687a      	ldr	r2, [r7, #4]
 8006074:	429a      	cmp	r2, r3
 8006076:	d194      	bne.n	8005fa2 <SPI_WaitFifoStateUntilTimeout+0x3e>
    }
  }

  return HAL_OK;
 8006078:	2300      	movs	r3, #0
}
 800607a:	4618      	mov	r0, r3
 800607c:	3720      	adds	r7, #32
 800607e:	46bd      	mov	sp, r7
 8006080:	bd80      	pop	{r7, pc}
 8006082:	bf00      	nop
 8006084:	20000000 	.word	0x20000000

08006088 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b086      	sub	sp, #24
 800608c:	af02      	add	r7, sp, #8
 800608e:	60f8      	str	r0, [r7, #12]
 8006090:	60b9      	str	r1, [r7, #8]
 8006092:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	9300      	str	r3, [sp, #0]
 8006098:	68bb      	ldr	r3, [r7, #8]
 800609a:	2200      	movs	r2, #0
 800609c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 80060a0:	68f8      	ldr	r0, [r7, #12]
 80060a2:	f7ff ff5f 	bl	8005f64 <SPI_WaitFifoStateUntilTimeout>
 80060a6:	4603      	mov	r3, r0
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d007      	beq.n	80060bc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060b0:	f043 0220 	orr.w	r2, r3, #32
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e027      	b.n	800610c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	2200      	movs	r2, #0
 80060c4:	2180      	movs	r1, #128	; 0x80
 80060c6:	68f8      	ldr	r0, [r7, #12]
 80060c8:	f7ff fec4 	bl	8005e54 <SPI_WaitFlagStateUntilTimeout>
 80060cc:	4603      	mov	r3, r0
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d007      	beq.n	80060e2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060d6:	f043 0220 	orr.w	r2, r3, #32
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80060de:	2303      	movs	r3, #3
 80060e0:	e014      	b.n	800610c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	9300      	str	r3, [sp, #0]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	2200      	movs	r2, #0
 80060ea:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80060ee:	68f8      	ldr	r0, [r7, #12]
 80060f0:	f7ff ff38 	bl	8005f64 <SPI_WaitFifoStateUntilTimeout>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d007      	beq.n	800610a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80060fe:	f043 0220 	orr.w	r2, r3, #32
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006106:	2303      	movs	r3, #3
 8006108:	e000      	b.n	800610c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800610a:	2300      	movs	r3, #0
}
 800610c:	4618      	mov	r0, r3
 800610e:	3710      	adds	r7, #16
 8006110:	46bd      	mov	sp, r7
 8006112:	bd80      	pop	{r7, pc}

08006114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006114:	b580      	push	{r7, lr}
 8006116:	b082      	sub	sp, #8
 8006118:	af00      	add	r7, sp, #0
 800611a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	2b00      	cmp	r3, #0
 8006120:	d101      	bne.n	8006126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e049      	b.n	80061ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800612c:	b2db      	uxtb	r3, r3
 800612e:	2b00      	cmp	r3, #0
 8006130:	d106      	bne.n	8006140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2200      	movs	r2, #0
 8006136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f7fb fc94 	bl	8001a68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2202      	movs	r2, #2
 8006144:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	681a      	ldr	r2, [r3, #0]
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	3304      	adds	r3, #4
 8006150:	4619      	mov	r1, r3
 8006152:	4610      	mov	r0, r2
 8006154:	f000 fd28 	bl	8006ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	2201      	movs	r2, #1
 800615c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2201      	movs	r2, #1
 8006164:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	2201      	movs	r2, #1
 800616c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2201      	movs	r2, #1
 8006174:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061b8:	2300      	movs	r3, #0
}
 80061ba:	4618      	mov	r0, r3
 80061bc:	3708      	adds	r7, #8
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
	...

080061c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80061c4:	b480      	push	{r7}
 80061c6:	b085      	sub	sp, #20
 80061c8:	af00      	add	r7, sp, #0
 80061ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	2b01      	cmp	r3, #1
 80061d6:	d001      	beq.n	80061dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e054      	b.n	8006286 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2202      	movs	r2, #2
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	68da      	ldr	r2, [r3, #12]
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	f042 0201 	orr.w	r2, r2, #1
 80061f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a26      	ldr	r2, [pc, #152]	; (8006294 <HAL_TIM_Base_Start_IT+0xd0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d022      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006206:	d01d      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a22      	ldr	r2, [pc, #136]	; (8006298 <HAL_TIM_Base_Start_IT+0xd4>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d018      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	4a21      	ldr	r2, [pc, #132]	; (800629c <HAL_TIM_Base_Start_IT+0xd8>)
 8006218:	4293      	cmp	r3, r2
 800621a:	d013      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006222:	4293      	cmp	r3, r2
 8006224:	d00e      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a1e      	ldr	r2, [pc, #120]	; (80062a4 <HAL_TIM_Base_Start_IT+0xe0>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d009      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	4a1c      	ldr	r2, [pc, #112]	; (80062a8 <HAL_TIM_Base_Start_IT+0xe4>)
 8006236:	4293      	cmp	r3, r2
 8006238:	d004      	beq.n	8006244 <HAL_TIM_Base_Start_IT+0x80>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1b      	ldr	r2, [pc, #108]	; (80062ac <HAL_TIM_Base_Start_IT+0xe8>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d115      	bne.n	8006270 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	689a      	ldr	r2, [r3, #8]
 800624a:	4b19      	ldr	r3, [pc, #100]	; (80062b0 <HAL_TIM_Base_Start_IT+0xec>)
 800624c:	4013      	ands	r3, r2
 800624e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2b06      	cmp	r3, #6
 8006254:	d015      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xbe>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800625c:	d011      	beq.n	8006282 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f042 0201 	orr.w	r2, r2, #1
 800626c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800626e:	e008      	b.n	8006282 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	681a      	ldr	r2, [r3, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	f042 0201 	orr.w	r2, r2, #1
 800627e:	601a      	str	r2, [r3, #0]
 8006280:	e000      	b.n	8006284 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006282:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006284:	2300      	movs	r3, #0
}
 8006286:	4618      	mov	r0, r3
 8006288:	3714      	adds	r7, #20
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	40010000 	.word	0x40010000
 8006298:	40000400 	.word	0x40000400
 800629c:	40000800 	.word	0x40000800
 80062a0:	40000c00 	.word	0x40000c00
 80062a4:	40010400 	.word	0x40010400
 80062a8:	40014000 	.word	0x40014000
 80062ac:	40001800 	.word	0x40001800
 80062b0:	00010007 	.word	0x00010007

080062b4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b082      	sub	sp, #8
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e049      	b.n	800635a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d106      	bne.n	80062e0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2200      	movs	r2, #0
 80062d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f7fb fbfe 	bl	8001adc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2202      	movs	r2, #2
 80062e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681a      	ldr	r2, [r3, #0]
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	3304      	adds	r3, #4
 80062f0:	4619      	mov	r1, r3
 80062f2:	4610      	mov	r0, r2
 80062f4:	f000 fc58 	bl	8006ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2201      	movs	r2, #1
 8006304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2201      	movs	r2, #1
 800630c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2201      	movs	r2, #1
 8006314:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2201      	movs	r2, #1
 800631c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	2201      	movs	r2, #1
 8006324:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2201      	movs	r2, #1
 800632c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	2201      	movs	r2, #1
 8006334:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2201      	movs	r2, #1
 800633c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	2201      	movs	r2, #1
 8006344:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	2201      	movs	r2, #1
 800634c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	2201      	movs	r2, #1
 8006354:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006358:	2300      	movs	r3, #0
}
 800635a:	4618      	mov	r0, r3
 800635c:	3708      	adds	r7, #8
 800635e:	46bd      	mov	sp, r7
 8006360:	bd80      	pop	{r7, pc}
	...

08006364 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
 800636c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b00      	cmp	r3, #0
 8006372:	d109      	bne.n	8006388 <HAL_TIM_PWM_Start+0x24>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b01      	cmp	r3, #1
 800637e:	bf14      	ite	ne
 8006380:	2301      	movne	r3, #1
 8006382:	2300      	moveq	r3, #0
 8006384:	b2db      	uxtb	r3, r3
 8006386:	e03c      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	2b04      	cmp	r3, #4
 800638c:	d109      	bne.n	80063a2 <HAL_TIM_PWM_Start+0x3e>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	2b01      	cmp	r3, #1
 8006398:	bf14      	ite	ne
 800639a:	2301      	movne	r3, #1
 800639c:	2300      	moveq	r3, #0
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	e02f      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063a2:	683b      	ldr	r3, [r7, #0]
 80063a4:	2b08      	cmp	r3, #8
 80063a6:	d109      	bne.n	80063bc <HAL_TIM_PWM_Start+0x58>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	bf14      	ite	ne
 80063b4:	2301      	movne	r3, #1
 80063b6:	2300      	moveq	r3, #0
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	e022      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	2b0c      	cmp	r3, #12
 80063c0:	d109      	bne.n	80063d6 <HAL_TIM_PWM_Start+0x72>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b01      	cmp	r3, #1
 80063cc:	bf14      	ite	ne
 80063ce:	2301      	movne	r3, #1
 80063d0:	2300      	moveq	r3, #0
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	e015      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	2b10      	cmp	r3, #16
 80063da:	d109      	bne.n	80063f0 <HAL_TIM_PWM_Start+0x8c>
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	bf14      	ite	ne
 80063e8:	2301      	movne	r3, #1
 80063ea:	2300      	moveq	r3, #0
 80063ec:	b2db      	uxtb	r3, r3
 80063ee:	e008      	b.n	8006402 <HAL_TIM_PWM_Start+0x9e>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80063f6:	b2db      	uxtb	r3, r3
 80063f8:	2b01      	cmp	r3, #1
 80063fa:	bf14      	ite	ne
 80063fc:	2301      	movne	r3, #1
 80063fe:	2300      	moveq	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	2b00      	cmp	r3, #0
 8006404:	d001      	beq.n	800640a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8006406:	2301      	movs	r3, #1
 8006408:	e092      	b.n	8006530 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800640a:	683b      	ldr	r3, [r7, #0]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d104      	bne.n	800641a <HAL_TIM_PWM_Start+0xb6>
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2202      	movs	r2, #2
 8006414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006418:	e023      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	2b04      	cmp	r3, #4
 800641e:	d104      	bne.n	800642a <HAL_TIM_PWM_Start+0xc6>
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2202      	movs	r2, #2
 8006424:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006428:	e01b      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	2b08      	cmp	r3, #8
 800642e:	d104      	bne.n	800643a <HAL_TIM_PWM_Start+0xd6>
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2202      	movs	r2, #2
 8006434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006438:	e013      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	2b0c      	cmp	r3, #12
 800643e:	d104      	bne.n	800644a <HAL_TIM_PWM_Start+0xe6>
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2202      	movs	r2, #2
 8006444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006448:	e00b      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	2b10      	cmp	r3, #16
 800644e:	d104      	bne.n	800645a <HAL_TIM_PWM_Start+0xf6>
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2202      	movs	r2, #2
 8006454:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006458:	e003      	b.n	8006462 <HAL_TIM_PWM_Start+0xfe>
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	2202      	movs	r2, #2
 800645e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	2201      	movs	r2, #1
 8006468:	6839      	ldr	r1, [r7, #0]
 800646a:	4618      	mov	r0, r3
 800646c:	f000 ff34 	bl	80072d8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a30      	ldr	r2, [pc, #192]	; (8006538 <HAL_TIM_PWM_Start+0x1d4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d004      	beq.n	8006484 <HAL_TIM_PWM_Start+0x120>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	4a2f      	ldr	r2, [pc, #188]	; (800653c <HAL_TIM_PWM_Start+0x1d8>)
 8006480:	4293      	cmp	r3, r2
 8006482:	d101      	bne.n	8006488 <HAL_TIM_PWM_Start+0x124>
 8006484:	2301      	movs	r3, #1
 8006486:	e000      	b.n	800648a <HAL_TIM_PWM_Start+0x126>
 8006488:	2300      	movs	r3, #0
 800648a:	2b00      	cmp	r3, #0
 800648c:	d007      	beq.n	800649e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800649c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	4a25      	ldr	r2, [pc, #148]	; (8006538 <HAL_TIM_PWM_Start+0x1d4>)
 80064a4:	4293      	cmp	r3, r2
 80064a6:	d022      	beq.n	80064ee <HAL_TIM_PWM_Start+0x18a>
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b0:	d01d      	beq.n	80064ee <HAL_TIM_PWM_Start+0x18a>
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4a22      	ldr	r2, [pc, #136]	; (8006540 <HAL_TIM_PWM_Start+0x1dc>)
 80064b8:	4293      	cmp	r3, r2
 80064ba:	d018      	beq.n	80064ee <HAL_TIM_PWM_Start+0x18a>
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	4a20      	ldr	r2, [pc, #128]	; (8006544 <HAL_TIM_PWM_Start+0x1e0>)
 80064c2:	4293      	cmp	r3, r2
 80064c4:	d013      	beq.n	80064ee <HAL_TIM_PWM_Start+0x18a>
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	4a1f      	ldr	r2, [pc, #124]	; (8006548 <HAL_TIM_PWM_Start+0x1e4>)
 80064cc:	4293      	cmp	r3, r2
 80064ce:	d00e      	beq.n	80064ee <HAL_TIM_PWM_Start+0x18a>
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a19      	ldr	r2, [pc, #100]	; (800653c <HAL_TIM_PWM_Start+0x1d8>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d009      	beq.n	80064ee <HAL_TIM_PWM_Start+0x18a>
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	4a1b      	ldr	r2, [pc, #108]	; (800654c <HAL_TIM_PWM_Start+0x1e8>)
 80064e0:	4293      	cmp	r3, r2
 80064e2:	d004      	beq.n	80064ee <HAL_TIM_PWM_Start+0x18a>
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	4a19      	ldr	r2, [pc, #100]	; (8006550 <HAL_TIM_PWM_Start+0x1ec>)
 80064ea:	4293      	cmp	r3, r2
 80064ec:	d115      	bne.n	800651a <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	689a      	ldr	r2, [r3, #8]
 80064f4:	4b17      	ldr	r3, [pc, #92]	; (8006554 <HAL_TIM_PWM_Start+0x1f0>)
 80064f6:	4013      	ands	r3, r2
 80064f8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2b06      	cmp	r3, #6
 80064fe:	d015      	beq.n	800652c <HAL_TIM_PWM_Start+0x1c8>
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006506:	d011      	beq.n	800652c <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	681a      	ldr	r2, [r3, #0]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f042 0201 	orr.w	r2, r2, #1
 8006516:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006518:	e008      	b.n	800652c <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	681b      	ldr	r3, [r3, #0]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f042 0201 	orr.w	r2, r2, #1
 8006528:	601a      	str	r2, [r3, #0]
 800652a:	e000      	b.n	800652e <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800652e:	2300      	movs	r3, #0
}
 8006530:	4618      	mov	r0, r3
 8006532:	3710      	adds	r7, #16
 8006534:	46bd      	mov	sp, r7
 8006536:	bd80      	pop	{r7, pc}
 8006538:	40010000 	.word	0x40010000
 800653c:	40010400 	.word	0x40010400
 8006540:	40000400 	.word	0x40000400
 8006544:	40000800 	.word	0x40000800
 8006548:	40000c00 	.word	0x40000c00
 800654c:	40014000 	.word	0x40014000
 8006550:	40001800 	.word	0x40001800
 8006554:	00010007 	.word	0x00010007

08006558 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b082      	sub	sp, #8
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	691b      	ldr	r3, [r3, #16]
 8006566:	f003 0302 	and.w	r3, r3, #2
 800656a:	2b02      	cmp	r3, #2
 800656c:	d122      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	68db      	ldr	r3, [r3, #12]
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b02      	cmp	r3, #2
 800657a:	d11b      	bne.n	80065b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f06f 0202 	mvn.w	r2, #2
 8006584:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	2201      	movs	r2, #1
 800658a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	699b      	ldr	r3, [r3, #24]
 8006592:	f003 0303 	and.w	r3, r3, #3
 8006596:	2b00      	cmp	r3, #0
 8006598:	d003      	beq.n	80065a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800659a:	6878      	ldr	r0, [r7, #4]
 800659c:	f000 fae6 	bl	8006b6c <HAL_TIM_IC_CaptureCallback>
 80065a0:	e005      	b.n	80065ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fad8 	bl	8006b58 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fae9 	bl	8006b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2200      	movs	r2, #0
 80065b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	691b      	ldr	r3, [r3, #16]
 80065ba:	f003 0304 	and.w	r3, r3, #4
 80065be:	2b04      	cmp	r3, #4
 80065c0:	d122      	bne.n	8006608 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	68db      	ldr	r3, [r3, #12]
 80065c8:	f003 0304 	and.w	r3, r3, #4
 80065cc:	2b04      	cmp	r3, #4
 80065ce:	d11b      	bne.n	8006608 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f06f 0204 	mvn.w	r2, #4
 80065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2202      	movs	r2, #2
 80065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	699b      	ldr	r3, [r3, #24]
 80065e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d003      	beq.n	80065f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80065ee:	6878      	ldr	r0, [r7, #4]
 80065f0:	f000 fabc 	bl	8006b6c <HAL_TIM_IC_CaptureCallback>
 80065f4:	e005      	b.n	8006602 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80065f6:	6878      	ldr	r0, [r7, #4]
 80065f8:	f000 faae 	bl	8006b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065fc:	6878      	ldr	r0, [r7, #4]
 80065fe:	f000 fabf 	bl	8006b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	f003 0308 	and.w	r3, r3, #8
 8006612:	2b08      	cmp	r3, #8
 8006614:	d122      	bne.n	800665c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	68db      	ldr	r3, [r3, #12]
 800661c:	f003 0308 	and.w	r3, r3, #8
 8006620:	2b08      	cmp	r3, #8
 8006622:	d11b      	bne.n	800665c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f06f 0208 	mvn.w	r2, #8
 800662c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	2204      	movs	r2, #4
 8006632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	69db      	ldr	r3, [r3, #28]
 800663a:	f003 0303 	and.w	r3, r3, #3
 800663e:	2b00      	cmp	r3, #0
 8006640:	d003      	beq.n	800664a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006642:	6878      	ldr	r0, [r7, #4]
 8006644:	f000 fa92 	bl	8006b6c <HAL_TIM_IC_CaptureCallback>
 8006648:	e005      	b.n	8006656 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800664a:	6878      	ldr	r0, [r7, #4]
 800664c:	f000 fa84 	bl	8006b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fa95 	bl	8006b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	691b      	ldr	r3, [r3, #16]
 8006662:	f003 0310 	and.w	r3, r3, #16
 8006666:	2b10      	cmp	r3, #16
 8006668:	d122      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	f003 0310 	and.w	r3, r3, #16
 8006674:	2b10      	cmp	r3, #16
 8006676:	d11b      	bne.n	80066b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	f06f 0210 	mvn.w	r2, #16
 8006680:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2208      	movs	r2, #8
 8006686:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	69db      	ldr	r3, [r3, #28]
 800668e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006692:	2b00      	cmp	r3, #0
 8006694:	d003      	beq.n	800669e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fa68 	bl	8006b6c <HAL_TIM_IC_CaptureCallback>
 800669c:	e005      	b.n	80066aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800669e:	6878      	ldr	r0, [r7, #4]
 80066a0:	f000 fa5a 	bl	8006b58 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 fa6b 	bl	8006b80 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2200      	movs	r2, #0
 80066ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	f003 0301 	and.w	r3, r3, #1
 80066ba:	2b01      	cmp	r3, #1
 80066bc:	d10e      	bne.n	80066dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	68db      	ldr	r3, [r3, #12]
 80066c4:	f003 0301 	and.w	r3, r3, #1
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d107      	bne.n	80066dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f06f 0201 	mvn.w	r2, #1
 80066d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066d6:	6878      	ldr	r0, [r7, #4]
 80066d8:	f000 fa34 	bl	8006b44 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	691b      	ldr	r3, [r3, #16]
 80066e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066e6:	2b80      	cmp	r3, #128	; 0x80
 80066e8:	d10e      	bne.n	8006708 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	68db      	ldr	r3, [r3, #12]
 80066f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066f4:	2b80      	cmp	r3, #128	; 0x80
 80066f6:	d107      	bne.n	8006708 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006700:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006702:	6878      	ldr	r0, [r7, #4]
 8006704:	f000 fea6 	bl	8007454 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	691b      	ldr	r3, [r3, #16]
 800670e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006716:	d10e      	bne.n	8006736 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
 800671e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006722:	2b80      	cmp	r3, #128	; 0x80
 8006724:	d107      	bne.n	8006736 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800672e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006730:	6878      	ldr	r0, [r7, #4]
 8006732:	f000 fe99 	bl	8007468 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	691b      	ldr	r3, [r3, #16]
 800673c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006740:	2b40      	cmp	r3, #64	; 0x40
 8006742:	d10e      	bne.n	8006762 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	68db      	ldr	r3, [r3, #12]
 800674a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800674e:	2b40      	cmp	r3, #64	; 0x40
 8006750:	d107      	bne.n	8006762 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800675a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800675c:	6878      	ldr	r0, [r7, #4]
 800675e:	f000 fa19 	bl	8006b94 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	691b      	ldr	r3, [r3, #16]
 8006768:	f003 0320 	and.w	r3, r3, #32
 800676c:	2b20      	cmp	r3, #32
 800676e:	d10e      	bne.n	800678e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	f003 0320 	and.w	r3, r3, #32
 800677a:	2b20      	cmp	r3, #32
 800677c:	d107      	bne.n	800678e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f06f 0220 	mvn.w	r2, #32
 8006786:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006788:	6878      	ldr	r0, [r7, #4]
 800678a:	f000 fe59 	bl	8007440 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800678e:	bf00      	nop
 8006790:	3708      	adds	r7, #8
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}
	...

08006798 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	60f8      	str	r0, [r7, #12]
 80067a0:	60b9      	str	r1, [r7, #8]
 80067a2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d101      	bne.n	80067b2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80067ae:	2302      	movs	r3, #2
 80067b0:	e0fd      	b.n	80069ae <HAL_TIM_PWM_ConfigChannel+0x216>
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2b14      	cmp	r3, #20
 80067be:	f200 80f0 	bhi.w	80069a2 <HAL_TIM_PWM_ConfigChannel+0x20a>
 80067c2:	a201      	add	r2, pc, #4	; (adr r2, 80067c8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80067c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067c8:	0800681d 	.word	0x0800681d
 80067cc:	080069a3 	.word	0x080069a3
 80067d0:	080069a3 	.word	0x080069a3
 80067d4:	080069a3 	.word	0x080069a3
 80067d8:	0800685d 	.word	0x0800685d
 80067dc:	080069a3 	.word	0x080069a3
 80067e0:	080069a3 	.word	0x080069a3
 80067e4:	080069a3 	.word	0x080069a3
 80067e8:	0800689f 	.word	0x0800689f
 80067ec:	080069a3 	.word	0x080069a3
 80067f0:	080069a3 	.word	0x080069a3
 80067f4:	080069a3 	.word	0x080069a3
 80067f8:	080068df 	.word	0x080068df
 80067fc:	080069a3 	.word	0x080069a3
 8006800:	080069a3 	.word	0x080069a3
 8006804:	080069a3 	.word	0x080069a3
 8006808:	08006921 	.word	0x08006921
 800680c:	080069a3 	.word	0x080069a3
 8006810:	080069a3 	.word	0x080069a3
 8006814:	080069a3 	.word	0x080069a3
 8006818:	08006961 	.word	0x08006961
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	68b9      	ldr	r1, [r7, #8]
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fa60 	bl	8006ce8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	699a      	ldr	r2, [r3, #24]
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	f042 0208 	orr.w	r2, r2, #8
 8006836:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	699a      	ldr	r2, [r3, #24]
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	f022 0204 	bic.w	r2, r2, #4
 8006846:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	6999      	ldr	r1, [r3, #24]
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	691a      	ldr	r2, [r3, #16]
 8006852:	68fb      	ldr	r3, [r7, #12]
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	430a      	orrs	r2, r1
 8006858:	619a      	str	r2, [r3, #24]
      break;
 800685a:	e0a3      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	68b9      	ldr	r1, [r7, #8]
 8006862:	4618      	mov	r0, r3
 8006864:	f000 fab2 	bl	8006dcc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	699a      	ldr	r2, [r3, #24]
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006876:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	699a      	ldr	r2, [r3, #24]
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006886:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	6999      	ldr	r1, [r3, #24]
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	691b      	ldr	r3, [r3, #16]
 8006892:	021a      	lsls	r2, r3, #8
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	430a      	orrs	r2, r1
 800689a:	619a      	str	r2, [r3, #24]
      break;
 800689c:	e082      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	68b9      	ldr	r1, [r7, #8]
 80068a4:	4618      	mov	r0, r3
 80068a6:	f000 fb09 	bl	8006ebc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	69da      	ldr	r2, [r3, #28]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f042 0208 	orr.w	r2, r2, #8
 80068b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	69da      	ldr	r2, [r3, #28]
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f022 0204 	bic.w	r2, r2, #4
 80068c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	69d9      	ldr	r1, [r3, #28]
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	691a      	ldr	r2, [r3, #16]
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	430a      	orrs	r2, r1
 80068da:	61da      	str	r2, [r3, #28]
      break;
 80068dc:	e062      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	68b9      	ldr	r1, [r7, #8]
 80068e4:	4618      	mov	r0, r3
 80068e6:	f000 fb5f 	bl	8006fa8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	69da      	ldr	r2, [r3, #28]
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80068f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	69da      	ldr	r2, [r3, #28]
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006908:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	69d9      	ldr	r1, [r3, #28]
 8006910:	68bb      	ldr	r3, [r7, #8]
 8006912:	691b      	ldr	r3, [r3, #16]
 8006914:	021a      	lsls	r2, r3, #8
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	430a      	orrs	r2, r1
 800691c:	61da      	str	r2, [r3, #28]
      break;
 800691e:	e041      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006920:	68fb      	ldr	r3, [r7, #12]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	68b9      	ldr	r1, [r7, #8]
 8006926:	4618      	mov	r0, r3
 8006928:	f000 fb96 	bl	8007058 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006932:	68fb      	ldr	r3, [r7, #12]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	f042 0208 	orr.w	r2, r2, #8
 800693a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	f022 0204 	bic.w	r2, r2, #4
 800694a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	691a      	ldr	r2, [r3, #16]
 8006956:	68fb      	ldr	r3, [r7, #12]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	430a      	orrs	r2, r1
 800695c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800695e:	e021      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	681b      	ldr	r3, [r3, #0]
 8006964:	68b9      	ldr	r1, [r7, #8]
 8006966:	4618      	mov	r0, r3
 8006968:	f000 fbc8 	bl	80070fc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800697a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800698a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	691b      	ldr	r3, [r3, #16]
 8006996:	021a      	lsls	r2, r3, #8
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	430a      	orrs	r2, r1
 800699e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80069a0:	e000      	b.n	80069a4 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 80069a2:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	2200      	movs	r2, #0
 80069a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80069ac:	2300      	movs	r3, #0
}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3710      	adds	r7, #16
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop

080069b8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80069b8:	b580      	push	{r7, lr}
 80069ba:	b084      	sub	sp, #16
 80069bc:	af00      	add	r7, sp, #0
 80069be:	6078      	str	r0, [r7, #4]
 80069c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069c8:	2b01      	cmp	r3, #1
 80069ca:	d101      	bne.n	80069d0 <HAL_TIM_ConfigClockSource+0x18>
 80069cc:	2302      	movs	r3, #2
 80069ce:	e0b3      	b.n	8006b38 <HAL_TIM_ConfigClockSource+0x180>
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	2201      	movs	r2, #1
 80069d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2202      	movs	r2, #2
 80069dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80069e8:	68fa      	ldr	r2, [r7, #12]
 80069ea:	4b55      	ldr	r3, [pc, #340]	; (8006b40 <HAL_TIM_ConfigClockSource+0x188>)
 80069ec:	4013      	ands	r3, r2
 80069ee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80069f6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	68fa      	ldr	r2, [r7, #12]
 80069fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006a00:	683b      	ldr	r3, [r7, #0]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a08:	d03e      	beq.n	8006a88 <HAL_TIM_ConfigClockSource+0xd0>
 8006a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006a0e:	f200 8087 	bhi.w	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a16:	f000 8085 	beq.w	8006b24 <HAL_TIM_ConfigClockSource+0x16c>
 8006a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006a1e:	d87f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a20:	2b70      	cmp	r3, #112	; 0x70
 8006a22:	d01a      	beq.n	8006a5a <HAL_TIM_ConfigClockSource+0xa2>
 8006a24:	2b70      	cmp	r3, #112	; 0x70
 8006a26:	d87b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a28:	2b60      	cmp	r3, #96	; 0x60
 8006a2a:	d050      	beq.n	8006ace <HAL_TIM_ConfigClockSource+0x116>
 8006a2c:	2b60      	cmp	r3, #96	; 0x60
 8006a2e:	d877      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a30:	2b50      	cmp	r3, #80	; 0x50
 8006a32:	d03c      	beq.n	8006aae <HAL_TIM_ConfigClockSource+0xf6>
 8006a34:	2b50      	cmp	r3, #80	; 0x50
 8006a36:	d873      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a38:	2b40      	cmp	r3, #64	; 0x40
 8006a3a:	d058      	beq.n	8006aee <HAL_TIM_ConfigClockSource+0x136>
 8006a3c:	2b40      	cmp	r3, #64	; 0x40
 8006a3e:	d86f      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a40:	2b30      	cmp	r3, #48	; 0x30
 8006a42:	d064      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x156>
 8006a44:	2b30      	cmp	r3, #48	; 0x30
 8006a46:	d86b      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a48:	2b20      	cmp	r3, #32
 8006a4a:	d060      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x156>
 8006a4c:	2b20      	cmp	r3, #32
 8006a4e:	d867      	bhi.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d05c      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x156>
 8006a54:	2b10      	cmp	r3, #16
 8006a56:	d05a      	beq.n	8006b0e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006a58:	e062      	b.n	8006b20 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6818      	ldr	r0, [r3, #0]
 8006a5e:	683b      	ldr	r3, [r7, #0]
 8006a60:	6899      	ldr	r1, [r3, #8]
 8006a62:	683b      	ldr	r3, [r7, #0]
 8006a64:	685a      	ldr	r2, [r3, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	68db      	ldr	r3, [r3, #12]
 8006a6a:	f000 fc15 	bl	8007298 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	689b      	ldr	r3, [r3, #8]
 8006a74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006a7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68fa      	ldr	r2, [r7, #12]
 8006a84:	609a      	str	r2, [r3, #8]
      break;
 8006a86:	e04e      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6818      	ldr	r0, [r3, #0]
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	6899      	ldr	r1, [r3, #8]
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	685a      	ldr	r2, [r3, #4]
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	68db      	ldr	r3, [r3, #12]
 8006a98:	f000 fbfe 	bl	8007298 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	689a      	ldr	r2, [r3, #8]
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006aaa:	609a      	str	r2, [r3, #8]
      break;
 8006aac:	e03b      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6818      	ldr	r0, [r3, #0]
 8006ab2:	683b      	ldr	r3, [r7, #0]
 8006ab4:	6859      	ldr	r1, [r3, #4]
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	461a      	mov	r2, r3
 8006abc:	f000 fb72 	bl	80071a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2150      	movs	r1, #80	; 0x50
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	f000 fbcb 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006acc:	e02b      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	6818      	ldr	r0, [r3, #0]
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	6859      	ldr	r1, [r3, #4]
 8006ad6:	683b      	ldr	r3, [r7, #0]
 8006ad8:	68db      	ldr	r3, [r3, #12]
 8006ada:	461a      	mov	r2, r3
 8006adc:	f000 fb91 	bl	8007202 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	2160      	movs	r1, #96	; 0x60
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f000 fbbb 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006aec:	e01b      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6818      	ldr	r0, [r3, #0]
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	6859      	ldr	r1, [r3, #4]
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	68db      	ldr	r3, [r3, #12]
 8006afa:	461a      	mov	r2, r3
 8006afc:	f000 fb52 	bl	80071a4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2140      	movs	r1, #64	; 0x40
 8006b06:	4618      	mov	r0, r3
 8006b08:	f000 fbab 	bl	8007262 <TIM_ITRx_SetConfig>
      break;
 8006b0c:	e00b      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681a      	ldr	r2, [r3, #0]
 8006b12:	683b      	ldr	r3, [r7, #0]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	4619      	mov	r1, r3
 8006b18:	4610      	mov	r0, r2
 8006b1a:	f000 fba2 	bl	8007262 <TIM_ITRx_SetConfig>
        break;
 8006b1e:	e002      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b20:	bf00      	nop
 8006b22:	e000      	b.n	8006b26 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006b24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2201      	movs	r2, #1
 8006b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b36:	2300      	movs	r3, #0
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3710      	adds	r7, #16
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	bd80      	pop	{r7, pc}
 8006b40:	fffeff88 	.word	0xfffeff88

08006b44 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006b58:	b480      	push	{r7}
 8006b5a:	b083      	sub	sp, #12
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006b60:	bf00      	nop
 8006b62:	370c      	adds	r7, #12
 8006b64:	46bd      	mov	sp, r7
 8006b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6a:	4770      	bx	lr

08006b6c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006b6c:	b480      	push	{r7}
 8006b6e:	b083      	sub	sp, #12
 8006b70:	af00      	add	r7, sp, #0
 8006b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006b74:	bf00      	nop
 8006b76:	370c      	adds	r7, #12
 8006b78:	46bd      	mov	sp, r7
 8006b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b7e:	4770      	bx	lr

08006b80 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006b80:	b480      	push	{r7}
 8006b82:	b083      	sub	sp, #12
 8006b84:	af00      	add	r7, sp, #0
 8006b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006b88:	bf00      	nop
 8006b8a:	370c      	adds	r7, #12
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b92:	4770      	bx	lr

08006b94 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006b94:	b480      	push	{r7}
 8006b96:	b083      	sub	sp, #12
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr

08006ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
 8006bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	4a40      	ldr	r2, [pc, #256]	; (8006cbc <TIM_Base_SetConfig+0x114>)
 8006bbc:	4293      	cmp	r3, r2
 8006bbe:	d013      	beq.n	8006be8 <TIM_Base_SetConfig+0x40>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006bc6:	d00f      	beq.n	8006be8 <TIM_Base_SetConfig+0x40>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4a3d      	ldr	r2, [pc, #244]	; (8006cc0 <TIM_Base_SetConfig+0x118>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d00b      	beq.n	8006be8 <TIM_Base_SetConfig+0x40>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	4a3c      	ldr	r2, [pc, #240]	; (8006cc4 <TIM_Base_SetConfig+0x11c>)
 8006bd4:	4293      	cmp	r3, r2
 8006bd6:	d007      	beq.n	8006be8 <TIM_Base_SetConfig+0x40>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	4a3b      	ldr	r2, [pc, #236]	; (8006cc8 <TIM_Base_SetConfig+0x120>)
 8006bdc:	4293      	cmp	r3, r2
 8006bde:	d003      	beq.n	8006be8 <TIM_Base_SetConfig+0x40>
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	4a3a      	ldr	r2, [pc, #232]	; (8006ccc <TIM_Base_SetConfig+0x124>)
 8006be4:	4293      	cmp	r3, r2
 8006be6:	d108      	bne.n	8006bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006bf0:	683b      	ldr	r3, [r7, #0]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4a2f      	ldr	r2, [pc, #188]	; (8006cbc <TIM_Base_SetConfig+0x114>)
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d02b      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c08:	d027      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a2c      	ldr	r2, [pc, #176]	; (8006cc0 <TIM_Base_SetConfig+0x118>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d023      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	4a2b      	ldr	r2, [pc, #172]	; (8006cc4 <TIM_Base_SetConfig+0x11c>)
 8006c16:	4293      	cmp	r3, r2
 8006c18:	d01f      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	4a2a      	ldr	r2, [pc, #168]	; (8006cc8 <TIM_Base_SetConfig+0x120>)
 8006c1e:	4293      	cmp	r3, r2
 8006c20:	d01b      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	4a29      	ldr	r2, [pc, #164]	; (8006ccc <TIM_Base_SetConfig+0x124>)
 8006c26:	4293      	cmp	r3, r2
 8006c28:	d017      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a28      	ldr	r2, [pc, #160]	; (8006cd0 <TIM_Base_SetConfig+0x128>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d013      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a27      	ldr	r2, [pc, #156]	; (8006cd4 <TIM_Base_SetConfig+0x12c>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d00f      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	4a26      	ldr	r2, [pc, #152]	; (8006cd8 <TIM_Base_SetConfig+0x130>)
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d00b      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	4a25      	ldr	r2, [pc, #148]	; (8006cdc <TIM_Base_SetConfig+0x134>)
 8006c46:	4293      	cmp	r3, r2
 8006c48:	d007      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	4a24      	ldr	r2, [pc, #144]	; (8006ce0 <TIM_Base_SetConfig+0x138>)
 8006c4e:	4293      	cmp	r3, r2
 8006c50:	d003      	beq.n	8006c5a <TIM_Base_SetConfig+0xb2>
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	4a23      	ldr	r2, [pc, #140]	; (8006ce4 <TIM_Base_SetConfig+0x13c>)
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d108      	bne.n	8006c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006c62:	683b      	ldr	r3, [r7, #0]
 8006c64:	68db      	ldr	r3, [r3, #12]
 8006c66:	68fa      	ldr	r2, [r7, #12]
 8006c68:	4313      	orrs	r3, r2
 8006c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	695b      	ldr	r3, [r3, #20]
 8006c76:	4313      	orrs	r3, r2
 8006c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	68fa      	ldr	r2, [r7, #12]
 8006c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689a      	ldr	r2, [r3, #8]
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	4a0a      	ldr	r2, [pc, #40]	; (8006cbc <TIM_Base_SetConfig+0x114>)
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d003      	beq.n	8006ca0 <TIM_Base_SetConfig+0xf8>
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	4a0c      	ldr	r2, [pc, #48]	; (8006ccc <TIM_Base_SetConfig+0x124>)
 8006c9c:	4293      	cmp	r3, r2
 8006c9e:	d103      	bne.n	8006ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ca0:	683b      	ldr	r3, [r7, #0]
 8006ca2:	691a      	ldr	r2, [r3, #16]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	2201      	movs	r2, #1
 8006cac:	615a      	str	r2, [r3, #20]
}
 8006cae:	bf00      	nop
 8006cb0:	3714      	adds	r7, #20
 8006cb2:	46bd      	mov	sp, r7
 8006cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb8:	4770      	bx	lr
 8006cba:	bf00      	nop
 8006cbc:	40010000 	.word	0x40010000
 8006cc0:	40000400 	.word	0x40000400
 8006cc4:	40000800 	.word	0x40000800
 8006cc8:	40000c00 	.word	0x40000c00
 8006ccc:	40010400 	.word	0x40010400
 8006cd0:	40014000 	.word	0x40014000
 8006cd4:	40014400 	.word	0x40014400
 8006cd8:	40014800 	.word	0x40014800
 8006cdc:	40001800 	.word	0x40001800
 8006ce0:	40001c00 	.word	0x40001c00
 8006ce4:	40002000 	.word	0x40002000

08006ce8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b087      	sub	sp, #28
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	6a1b      	ldr	r3, [r3, #32]
 8006cf6:	f023 0201 	bic.w	r2, r3, #1
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	6a1b      	ldr	r3, [r3, #32]
 8006d02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	685b      	ldr	r3, [r3, #4]
 8006d08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	699b      	ldr	r3, [r3, #24]
 8006d0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006d10:	68fa      	ldr	r2, [r7, #12]
 8006d12:	4b2b      	ldr	r3, [pc, #172]	; (8006dc0 <TIM_OC1_SetConfig+0xd8>)
 8006d14:	4013      	ands	r3, r2
 8006d16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	f023 0303 	bic.w	r3, r3, #3
 8006d1e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68fa      	ldr	r2, [r7, #12]
 8006d26:	4313      	orrs	r3, r2
 8006d28:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006d2a:	697b      	ldr	r3, [r7, #20]
 8006d2c:	f023 0302 	bic.w	r3, r3, #2
 8006d30:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	689b      	ldr	r3, [r3, #8]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	4a21      	ldr	r2, [pc, #132]	; (8006dc4 <TIM_OC1_SetConfig+0xdc>)
 8006d40:	4293      	cmp	r3, r2
 8006d42:	d003      	beq.n	8006d4c <TIM_OC1_SetConfig+0x64>
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	4a20      	ldr	r2, [pc, #128]	; (8006dc8 <TIM_OC1_SetConfig+0xe0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	d10c      	bne.n	8006d66 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006d4c:	697b      	ldr	r3, [r7, #20]
 8006d4e:	f023 0308 	bic.w	r3, r3, #8
 8006d52:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	68db      	ldr	r3, [r3, #12]
 8006d58:	697a      	ldr	r2, [r7, #20]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	f023 0304 	bic.w	r3, r3, #4
 8006d64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	4a16      	ldr	r2, [pc, #88]	; (8006dc4 <TIM_OC1_SetConfig+0xdc>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d003      	beq.n	8006d76 <TIM_OC1_SetConfig+0x8e>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	4a15      	ldr	r2, [pc, #84]	; (8006dc8 <TIM_OC1_SetConfig+0xe0>)
 8006d72:	4293      	cmp	r3, r2
 8006d74:	d111      	bne.n	8006d9a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006d76:	693b      	ldr	r3, [r7, #16]
 8006d78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006d84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	695b      	ldr	r3, [r3, #20]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	4313      	orrs	r3, r2
 8006d8e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	693a      	ldr	r2, [r7, #16]
 8006d96:	4313      	orrs	r3, r2
 8006d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	68fa      	ldr	r2, [r7, #12]
 8006da4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	697a      	ldr	r2, [r7, #20]
 8006db2:	621a      	str	r2, [r3, #32]
}
 8006db4:	bf00      	nop
 8006db6:	371c      	adds	r7, #28
 8006db8:	46bd      	mov	sp, r7
 8006dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dbe:	4770      	bx	lr
 8006dc0:	fffeff8f 	.word	0xfffeff8f
 8006dc4:	40010000 	.word	0x40010000
 8006dc8:	40010400 	.word	0x40010400

08006dcc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b087      	sub	sp, #28
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
 8006dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0210 	bic.w	r2, r3, #16
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	6a1b      	ldr	r3, [r3, #32]
 8006de6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	685b      	ldr	r3, [r3, #4]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	699b      	ldr	r3, [r3, #24]
 8006df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006df4:	68fa      	ldr	r2, [r7, #12]
 8006df6:	4b2e      	ldr	r3, [pc, #184]	; (8006eb0 <TIM_OC2_SetConfig+0xe4>)
 8006df8:	4013      	ands	r3, r2
 8006dfa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e02:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e04:	683b      	ldr	r3, [r7, #0]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	021b      	lsls	r3, r3, #8
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006e10:	697b      	ldr	r3, [r7, #20]
 8006e12:	f023 0320 	bic.w	r3, r3, #32
 8006e16:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006e18:	683b      	ldr	r3, [r7, #0]
 8006e1a:	689b      	ldr	r3, [r3, #8]
 8006e1c:	011b      	lsls	r3, r3, #4
 8006e1e:	697a      	ldr	r2, [r7, #20]
 8006e20:	4313      	orrs	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	4a23      	ldr	r2, [pc, #140]	; (8006eb4 <TIM_OC2_SetConfig+0xe8>)
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	d003      	beq.n	8006e34 <TIM_OC2_SetConfig+0x68>
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	4a22      	ldr	r2, [pc, #136]	; (8006eb8 <TIM_OC2_SetConfig+0xec>)
 8006e30:	4293      	cmp	r3, r2
 8006e32:	d10d      	bne.n	8006e50 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006e34:	697b      	ldr	r3, [r7, #20]
 8006e36:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006e3a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006e3c:	683b      	ldr	r3, [r7, #0]
 8006e3e:	68db      	ldr	r3, [r3, #12]
 8006e40:	011b      	lsls	r3, r3, #4
 8006e42:	697a      	ldr	r2, [r7, #20]
 8006e44:	4313      	orrs	r3, r2
 8006e46:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006e48:	697b      	ldr	r3, [r7, #20]
 8006e4a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006e4e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	4a18      	ldr	r2, [pc, #96]	; (8006eb4 <TIM_OC2_SetConfig+0xe8>)
 8006e54:	4293      	cmp	r3, r2
 8006e56:	d003      	beq.n	8006e60 <TIM_OC2_SetConfig+0x94>
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	4a17      	ldr	r2, [pc, #92]	; (8006eb8 <TIM_OC2_SetConfig+0xec>)
 8006e5c:	4293      	cmp	r3, r2
 8006e5e:	d113      	bne.n	8006e88 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006e60:	693b      	ldr	r3, [r7, #16]
 8006e62:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006e66:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006e68:	693b      	ldr	r3, [r7, #16]
 8006e6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006e6e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006e70:	683b      	ldr	r3, [r7, #0]
 8006e72:	695b      	ldr	r3, [r3, #20]
 8006e74:	009b      	lsls	r3, r3, #2
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	699b      	ldr	r3, [r3, #24]
 8006e80:	009b      	lsls	r3, r3, #2
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	693a      	ldr	r2, [r7, #16]
 8006e8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685a      	ldr	r2, [r3, #4]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e9c:	687b      	ldr	r3, [r7, #4]
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	621a      	str	r2, [r3, #32]
}
 8006ea2:	bf00      	nop
 8006ea4:	371c      	adds	r7, #28
 8006ea6:	46bd      	mov	sp, r7
 8006ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eac:	4770      	bx	lr
 8006eae:	bf00      	nop
 8006eb0:	feff8fff 	.word	0xfeff8fff
 8006eb4:	40010000 	.word	0x40010000
 8006eb8:	40010400 	.word	0x40010400

08006ebc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b087      	sub	sp, #28
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	6078      	str	r0, [r7, #4]
 8006ec4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6a1b      	ldr	r3, [r3, #32]
 8006eca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	6a1b      	ldr	r3, [r3, #32]
 8006ed6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	685b      	ldr	r3, [r3, #4]
 8006edc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	69db      	ldr	r3, [r3, #28]
 8006ee2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006ee4:	68fa      	ldr	r2, [r7, #12]
 8006ee6:	4b2d      	ldr	r3, [pc, #180]	; (8006f9c <TIM_OC3_SetConfig+0xe0>)
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	f023 0303 	bic.w	r3, r3, #3
 8006ef2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	68fa      	ldr	r2, [r7, #12]
 8006efa:	4313      	orrs	r3, r2
 8006efc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006f04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006f06:	683b      	ldr	r3, [r7, #0]
 8006f08:	689b      	ldr	r3, [r3, #8]
 8006f0a:	021b      	lsls	r3, r3, #8
 8006f0c:	697a      	ldr	r2, [r7, #20]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	4a22      	ldr	r2, [pc, #136]	; (8006fa0 <TIM_OC3_SetConfig+0xe4>)
 8006f16:	4293      	cmp	r3, r2
 8006f18:	d003      	beq.n	8006f22 <TIM_OC3_SetConfig+0x66>
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	4a21      	ldr	r2, [pc, #132]	; (8006fa4 <TIM_OC3_SetConfig+0xe8>)
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	d10d      	bne.n	8006f3e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006f22:	697b      	ldr	r3, [r7, #20]
 8006f24:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006f28:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006f2a:	683b      	ldr	r3, [r7, #0]
 8006f2c:	68db      	ldr	r3, [r3, #12]
 8006f2e:	021b      	lsls	r3, r3, #8
 8006f30:	697a      	ldr	r2, [r7, #20]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006f36:	697b      	ldr	r3, [r7, #20]
 8006f38:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	4a17      	ldr	r2, [pc, #92]	; (8006fa0 <TIM_OC3_SetConfig+0xe4>)
 8006f42:	4293      	cmp	r3, r2
 8006f44:	d003      	beq.n	8006f4e <TIM_OC3_SetConfig+0x92>
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	4a16      	ldr	r2, [pc, #88]	; (8006fa4 <TIM_OC3_SetConfig+0xe8>)
 8006f4a:	4293      	cmp	r3, r2
 8006f4c:	d113      	bne.n	8006f76 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f54:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006f56:	693b      	ldr	r3, [r7, #16]
 8006f58:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006f5c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006f5e:	683b      	ldr	r3, [r7, #0]
 8006f60:	695b      	ldr	r3, [r3, #20]
 8006f62:	011b      	lsls	r3, r3, #4
 8006f64:	693a      	ldr	r2, [r7, #16]
 8006f66:	4313      	orrs	r3, r2
 8006f68:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006f6a:	683b      	ldr	r3, [r7, #0]
 8006f6c:	699b      	ldr	r3, [r3, #24]
 8006f6e:	011b      	lsls	r3, r3, #4
 8006f70:	693a      	ldr	r2, [r7, #16]
 8006f72:	4313      	orrs	r3, r2
 8006f74:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	693a      	ldr	r2, [r7, #16]
 8006f7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	68fa      	ldr	r2, [r7, #12]
 8006f80:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685a      	ldr	r2, [r3, #4]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	697a      	ldr	r2, [r7, #20]
 8006f8e:	621a      	str	r2, [r3, #32]
}
 8006f90:	bf00      	nop
 8006f92:	371c      	adds	r7, #28
 8006f94:	46bd      	mov	sp, r7
 8006f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9a:	4770      	bx	lr
 8006f9c:	fffeff8f 	.word	0xfffeff8f
 8006fa0:	40010000 	.word	0x40010000
 8006fa4:	40010400 	.word	0x40010400

08006fa8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006fa8:	b480      	push	{r7}
 8006faa:	b087      	sub	sp, #28
 8006fac:	af00      	add	r7, sp, #0
 8006fae:	6078      	str	r0, [r7, #4]
 8006fb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6a1b      	ldr	r3, [r3, #32]
 8006fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	6a1b      	ldr	r3, [r3, #32]
 8006fc2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	685b      	ldr	r3, [r3, #4]
 8006fc8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	69db      	ldr	r3, [r3, #28]
 8006fce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4b1e      	ldr	r3, [pc, #120]	; (800704c <TIM_OC4_SetConfig+0xa4>)
 8006fd4:	4013      	ands	r3, r2
 8006fd6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006fd8:	68fb      	ldr	r3, [r7, #12]
 8006fda:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fde:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006fe0:	683b      	ldr	r3, [r7, #0]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	021b      	lsls	r3, r3, #8
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4313      	orrs	r3, r2
 8006fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ff2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ff4:	683b      	ldr	r3, [r7, #0]
 8006ff6:	689b      	ldr	r3, [r3, #8]
 8006ff8:	031b      	lsls	r3, r3, #12
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	4a13      	ldr	r2, [pc, #76]	; (8007050 <TIM_OC4_SetConfig+0xa8>)
 8007004:	4293      	cmp	r3, r2
 8007006:	d003      	beq.n	8007010 <TIM_OC4_SetConfig+0x68>
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	4a12      	ldr	r2, [pc, #72]	; (8007054 <TIM_OC4_SetConfig+0xac>)
 800700c:	4293      	cmp	r3, r2
 800700e:	d109      	bne.n	8007024 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007010:	697b      	ldr	r3, [r7, #20]
 8007012:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007016:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	695b      	ldr	r3, [r3, #20]
 800701c:	019b      	lsls	r3, r3, #6
 800701e:	697a      	ldr	r2, [r7, #20]
 8007020:	4313      	orrs	r3, r2
 8007022:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	697a      	ldr	r2, [r7, #20]
 8007028:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	68fa      	ldr	r2, [r7, #12]
 800702e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	685a      	ldr	r2, [r3, #4]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	693a      	ldr	r2, [r7, #16]
 800703c:	621a      	str	r2, [r3, #32]
}
 800703e:	bf00      	nop
 8007040:	371c      	adds	r7, #28
 8007042:	46bd      	mov	sp, r7
 8007044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	feff8fff 	.word	0xfeff8fff
 8007050:	40010000 	.word	0x40010000
 8007054:	40010400 	.word	0x40010400

08007058 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007058:	b480      	push	{r7}
 800705a:	b087      	sub	sp, #28
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6a1b      	ldr	r3, [r3, #32]
 8007066:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6a1b      	ldr	r3, [r3, #32]
 8007072:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	685b      	ldr	r3, [r3, #4]
 8007078:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8007080:	68fa      	ldr	r2, [r7, #12]
 8007082:	4b1b      	ldr	r3, [pc, #108]	; (80070f0 <TIM_OC5_SetConfig+0x98>)
 8007084:	4013      	ands	r3, r2
 8007086:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	68fa      	ldr	r2, [r7, #12]
 800708e:	4313      	orrs	r3, r2
 8007090:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007098:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	689b      	ldr	r3, [r3, #8]
 800709e:	041b      	lsls	r3, r3, #16
 80070a0:	693a      	ldr	r2, [r7, #16]
 80070a2:	4313      	orrs	r3, r2
 80070a4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	4a12      	ldr	r2, [pc, #72]	; (80070f4 <TIM_OC5_SetConfig+0x9c>)
 80070aa:	4293      	cmp	r3, r2
 80070ac:	d003      	beq.n	80070b6 <TIM_OC5_SetConfig+0x5e>
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	4a11      	ldr	r2, [pc, #68]	; (80070f8 <TIM_OC5_SetConfig+0xa0>)
 80070b2:	4293      	cmp	r3, r2
 80070b4:	d109      	bne.n	80070ca <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070bc:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80070be:	683b      	ldr	r3, [r7, #0]
 80070c0:	695b      	ldr	r3, [r3, #20]
 80070c2:	021b      	lsls	r3, r3, #8
 80070c4:	697a      	ldr	r2, [r7, #20]
 80070c6:	4313      	orrs	r3, r2
 80070c8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	697a      	ldr	r2, [r7, #20]
 80070ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	685a      	ldr	r2, [r3, #4]
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	621a      	str	r2, [r3, #32]
}
 80070e4:	bf00      	nop
 80070e6:	371c      	adds	r7, #28
 80070e8:	46bd      	mov	sp, r7
 80070ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ee:	4770      	bx	lr
 80070f0:	fffeff8f 	.word	0xfffeff8f
 80070f4:	40010000 	.word	0x40010000
 80070f8:	40010400 	.word	0x40010400

080070fc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80070fc:	b480      	push	{r7}
 80070fe:	b087      	sub	sp, #28
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
 8007104:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	6a1b      	ldr	r3, [r3, #32]
 800710a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a1b      	ldr	r3, [r3, #32]
 8007116:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	685b      	ldr	r3, [r3, #4]
 800711c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8007124:	68fa      	ldr	r2, [r7, #12]
 8007126:	4b1c      	ldr	r3, [pc, #112]	; (8007198 <TIM_OC6_SetConfig+0x9c>)
 8007128:	4013      	ands	r3, r2
 800712a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	021b      	lsls	r3, r3, #8
 8007132:	68fa      	ldr	r2, [r7, #12]
 8007134:	4313      	orrs	r3, r2
 8007136:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8007138:	693b      	ldr	r3, [r7, #16]
 800713a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800713e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8007140:	683b      	ldr	r3, [r7, #0]
 8007142:	689b      	ldr	r3, [r3, #8]
 8007144:	051b      	lsls	r3, r3, #20
 8007146:	693a      	ldr	r2, [r7, #16]
 8007148:	4313      	orrs	r3, r2
 800714a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	4a13      	ldr	r2, [pc, #76]	; (800719c <TIM_OC6_SetConfig+0xa0>)
 8007150:	4293      	cmp	r3, r2
 8007152:	d003      	beq.n	800715c <TIM_OC6_SetConfig+0x60>
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	4a12      	ldr	r2, [pc, #72]	; (80071a0 <TIM_OC6_SetConfig+0xa4>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d109      	bne.n	8007170 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007162:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8007164:	683b      	ldr	r3, [r7, #0]
 8007166:	695b      	ldr	r3, [r3, #20]
 8007168:	029b      	lsls	r3, r3, #10
 800716a:	697a      	ldr	r2, [r7, #20]
 800716c:	4313      	orrs	r3, r2
 800716e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	697a      	ldr	r2, [r7, #20]
 8007174:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	68fa      	ldr	r2, [r7, #12]
 800717a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 800717c:	683b      	ldr	r3, [r7, #0]
 800717e:	685a      	ldr	r2, [r3, #4]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	693a      	ldr	r2, [r7, #16]
 8007188:	621a      	str	r2, [r3, #32]
}
 800718a:	bf00      	nop
 800718c:	371c      	adds	r7, #28
 800718e:	46bd      	mov	sp, r7
 8007190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007194:	4770      	bx	lr
 8007196:	bf00      	nop
 8007198:	feff8fff 	.word	0xfeff8fff
 800719c:	40010000 	.word	0x40010000
 80071a0:	40010400 	.word	0x40010400

080071a4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b087      	sub	sp, #28
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	60f8      	str	r0, [r7, #12]
 80071ac:	60b9      	str	r1, [r7, #8]
 80071ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6a1b      	ldr	r3, [r3, #32]
 80071b4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	6a1b      	ldr	r3, [r3, #32]
 80071ba:	f023 0201 	bic.w	r2, r3, #1
 80071be:	68fb      	ldr	r3, [r7, #12]
 80071c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	699b      	ldr	r3, [r3, #24]
 80071c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80071ce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	011b      	lsls	r3, r3, #4
 80071d4:	693a      	ldr	r2, [r7, #16]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	f023 030a 	bic.w	r3, r3, #10
 80071e0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80071e2:	697a      	ldr	r2, [r7, #20]
 80071e4:	68bb      	ldr	r3, [r7, #8]
 80071e6:	4313      	orrs	r3, r2
 80071e8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	693a      	ldr	r2, [r7, #16]
 80071ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80071f0:	68fb      	ldr	r3, [r7, #12]
 80071f2:	697a      	ldr	r2, [r7, #20]
 80071f4:	621a      	str	r2, [r3, #32]
}
 80071f6:	bf00      	nop
 80071f8:	371c      	adds	r7, #28
 80071fa:	46bd      	mov	sp, r7
 80071fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007200:	4770      	bx	lr

08007202 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007202:	b480      	push	{r7}
 8007204:	b087      	sub	sp, #28
 8007206:	af00      	add	r7, sp, #0
 8007208:	60f8      	str	r0, [r7, #12]
 800720a:	60b9      	str	r1, [r7, #8]
 800720c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800720e:	68fb      	ldr	r3, [r7, #12]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	f023 0210 	bic.w	r2, r3, #16
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	6a1b      	ldr	r3, [r3, #32]
 8007224:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8007226:	697b      	ldr	r3, [r7, #20]
 8007228:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800722c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	031b      	lsls	r3, r3, #12
 8007232:	697a      	ldr	r2, [r7, #20]
 8007234:	4313      	orrs	r3, r2
 8007236:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8007238:	693b      	ldr	r3, [r7, #16]
 800723a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800723e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800724a:	68fb      	ldr	r3, [r7, #12]
 800724c:	697a      	ldr	r2, [r7, #20]
 800724e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	693a      	ldr	r2, [r7, #16]
 8007254:	621a      	str	r2, [r3, #32]
}
 8007256:	bf00      	nop
 8007258:	371c      	adds	r7, #28
 800725a:	46bd      	mov	sp, r7
 800725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007260:	4770      	bx	lr

08007262 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007262:	b480      	push	{r7}
 8007264:	b085      	sub	sp, #20
 8007266:	af00      	add	r7, sp, #0
 8007268:	6078      	str	r0, [r7, #4]
 800726a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	689b      	ldr	r3, [r3, #8]
 8007270:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007278:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800727a:	683a      	ldr	r2, [r7, #0]
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	4313      	orrs	r3, r2
 8007280:	f043 0307 	orr.w	r3, r3, #7
 8007284:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	68fa      	ldr	r2, [r7, #12]
 800728a:	609a      	str	r2, [r3, #8]
}
 800728c:	bf00      	nop
 800728e:	3714      	adds	r7, #20
 8007290:	46bd      	mov	sp, r7
 8007292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007296:	4770      	bx	lr

08007298 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007298:	b480      	push	{r7}
 800729a:	b087      	sub	sp, #28
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	60b9      	str	r1, [r7, #8]
 80072a2:	607a      	str	r2, [r7, #4]
 80072a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80072ac:	697b      	ldr	r3, [r7, #20]
 80072ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80072b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80072b4:	683b      	ldr	r3, [r7, #0]
 80072b6:	021a      	lsls	r2, r3, #8
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	431a      	orrs	r2, r3
 80072bc:	68bb      	ldr	r3, [r7, #8]
 80072be:	4313      	orrs	r3, r2
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	4313      	orrs	r3, r2
 80072c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	697a      	ldr	r2, [r7, #20]
 80072ca:	609a      	str	r2, [r3, #8]
}
 80072cc:	bf00      	nop
 80072ce:	371c      	adds	r7, #28
 80072d0:	46bd      	mov	sp, r7
 80072d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d6:	4770      	bx	lr

080072d8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	60f8      	str	r0, [r7, #12]
 80072e0:	60b9      	str	r1, [r7, #8]
 80072e2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80072e4:	68bb      	ldr	r3, [r7, #8]
 80072e6:	f003 031f 	and.w	r3, r3, #31
 80072ea:	2201      	movs	r2, #1
 80072ec:	fa02 f303 	lsl.w	r3, r2, r3
 80072f0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	6a1a      	ldr	r2, [r3, #32]
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	43db      	mvns	r3, r3
 80072fa:	401a      	ands	r2, r3
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	6a1a      	ldr	r2, [r3, #32]
 8007304:	68bb      	ldr	r3, [r7, #8]
 8007306:	f003 031f 	and.w	r3, r3, #31
 800730a:	6879      	ldr	r1, [r7, #4]
 800730c:	fa01 f303 	lsl.w	r3, r1, r3
 8007310:	431a      	orrs	r2, r3
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	621a      	str	r2, [r3, #32]
}
 8007316:	bf00      	nop
 8007318:	371c      	adds	r7, #28
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr
	...

08007324 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007324:	b480      	push	{r7}
 8007326:	b085      	sub	sp, #20
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
 800732c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007334:	2b01      	cmp	r3, #1
 8007336:	d101      	bne.n	800733c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007338:	2302      	movs	r3, #2
 800733a:	e06d      	b.n	8007418 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2201      	movs	r2, #1
 8007340:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	2202      	movs	r2, #2
 8007348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	689b      	ldr	r3, [r3, #8]
 800735a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a30      	ldr	r2, [pc, #192]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007362:	4293      	cmp	r3, r2
 8007364:	d004      	beq.n	8007370 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a2f      	ldr	r2, [pc, #188]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d108      	bne.n	8007382 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007376:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007378:	683b      	ldr	r3, [r7, #0]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4313      	orrs	r3, r2
 8007380:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007382:	68fb      	ldr	r3, [r7, #12]
 8007384:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007388:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800738a:	683b      	ldr	r3, [r7, #0]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	68fa      	ldr	r2, [r7, #12]
 8007390:	4313      	orrs	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68fa      	ldr	r2, [r7, #12]
 800739a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a20      	ldr	r2, [pc, #128]	; (8007424 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80073a2:	4293      	cmp	r3, r2
 80073a4:	d022      	beq.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80073ae:	d01d      	beq.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80073b6:	4293      	cmp	r3, r2
 80073b8:	d018      	beq.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a1c      	ldr	r2, [pc, #112]	; (8007430 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d013      	beq.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	4a1a      	ldr	r2, [pc, #104]	; (8007434 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80073ca:	4293      	cmp	r3, r2
 80073cc:	d00e      	beq.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a15      	ldr	r2, [pc, #84]	; (8007428 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80073d4:	4293      	cmp	r3, r2
 80073d6:	d009      	beq.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a16      	ldr	r2, [pc, #88]	; (8007438 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80073de:	4293      	cmp	r3, r2
 80073e0:	d004      	beq.n	80073ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	4a15      	ldr	r2, [pc, #84]	; (800743c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80073e8:	4293      	cmp	r3, r2
 80073ea:	d10c      	bne.n	8007406 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073f2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80073f4:	683b      	ldr	r3, [r7, #0]
 80073f6:	689b      	ldr	r3, [r3, #8]
 80073f8:	68ba      	ldr	r2, [r7, #8]
 80073fa:	4313      	orrs	r3, r2
 80073fc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	68ba      	ldr	r2, [r7, #8]
 8007404:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	2201      	movs	r2, #1
 800740a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2200      	movs	r2, #0
 8007412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007416:	2300      	movs	r3, #0
}
 8007418:	4618      	mov	r0, r3
 800741a:	3714      	adds	r7, #20
 800741c:	46bd      	mov	sp, r7
 800741e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007422:	4770      	bx	lr
 8007424:	40010000 	.word	0x40010000
 8007428:	40010400 	.word	0x40010400
 800742c:	40000400 	.word	0x40000400
 8007430:	40000800 	.word	0x40000800
 8007434:	40000c00 	.word	0x40000c00
 8007438:	40014000 	.word	0x40014000
 800743c:	40001800 	.word	0x40001800

08007440 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007440:	b480      	push	{r7}
 8007442:	b083      	sub	sp, #12
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007448:	bf00      	nop
 800744a:	370c      	adds	r7, #12
 800744c:	46bd      	mov	sp, r7
 800744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007452:	4770      	bx	lr

08007454 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007454:	b480      	push	{r7}
 8007456:	b083      	sub	sp, #12
 8007458:	af00      	add	r7, sp, #0
 800745a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800745c:	bf00      	nop
 800745e:	370c      	adds	r7, #12
 8007460:	46bd      	mov	sp, r7
 8007462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007466:	4770      	bx	lr

08007468 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007468:	b480      	push	{r7}
 800746a:	b083      	sub	sp, #12
 800746c:	af00      	add	r7, sp, #0
 800746e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b082      	sub	sp, #8
 8007480:	af00      	add	r7, sp, #0
 8007482:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d101      	bne.n	800748e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800748a:	2301      	movs	r3, #1
 800748c:	e040      	b.n	8007510 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8007492:	2b00      	cmp	r3, #0
 8007494:	d106      	bne.n	80074a4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2200      	movs	r2, #0
 800749a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f7fa fba0 	bl	8001be4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2224      	movs	r2, #36	; 0x24
 80074a8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	681a      	ldr	r2, [r3, #0]
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f022 0201 	bic.w	r2, r2, #1
 80074b8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80074ba:	6878      	ldr	r0, [r7, #4]
 80074bc:	f000 f8c0 	bl	8007640 <UART_SetConfig>
 80074c0:	4603      	mov	r3, r0
 80074c2:	2b01      	cmp	r3, #1
 80074c4:	d101      	bne.n	80074ca <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80074c6:	2301      	movs	r3, #1
 80074c8:	e022      	b.n	8007510 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d002      	beq.n	80074d8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80074d2:	6878      	ldr	r0, [r7, #4]
 80074d4:	f000 fb18 	bl	8007b08 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	685a      	ldr	r2, [r3, #4]
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80074e6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80074f6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	681a      	ldr	r2, [r3, #0]
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f042 0201 	orr.w	r2, r2, #1
 8007506:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007508:	6878      	ldr	r0, [r7, #4]
 800750a:	f000 fb9f 	bl	8007c4c <UART_CheckIdleState>
 800750e:	4603      	mov	r3, r0
}
 8007510:	4618      	mov	r0, r3
 8007512:	3708      	adds	r7, #8
 8007514:	46bd      	mov	sp, r7
 8007516:	bd80      	pop	{r7, pc}

08007518 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b08a      	sub	sp, #40	; 0x28
 800751c:	af02      	add	r7, sp, #8
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	603b      	str	r3, [r7, #0]
 8007524:	4613      	mov	r3, r2
 8007526:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800752c:	2b20      	cmp	r3, #32
 800752e:	f040 8081 	bne.w	8007634 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d002      	beq.n	800753e <HAL_UART_Transmit+0x26>
 8007538:	88fb      	ldrh	r3, [r7, #6]
 800753a:	2b00      	cmp	r3, #0
 800753c:	d101      	bne.n	8007542 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	e079      	b.n	8007636 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8007548:	2b01      	cmp	r3, #1
 800754a:	d101      	bne.n	8007550 <HAL_UART_Transmit+0x38>
 800754c:	2302      	movs	r3, #2
 800754e:	e072      	b.n	8007636 <HAL_UART_Transmit+0x11e>
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2201      	movs	r2, #1
 8007554:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	2221      	movs	r2, #33	; 0x21
 8007564:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007566:	f7fb fcd5 	bl	8002f14 <HAL_GetTick>
 800756a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	88fa      	ldrh	r2, [r7, #6]
 8007570:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	88fa      	ldrh	r2, [r7, #6]
 8007578:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	689b      	ldr	r3, [r3, #8]
 8007580:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007584:	d108      	bne.n	8007598 <HAL_UART_Transmit+0x80>
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	691b      	ldr	r3, [r3, #16]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d104      	bne.n	8007598 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800758e:	2300      	movs	r3, #0
 8007590:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	61bb      	str	r3, [r7, #24]
 8007596:	e003      	b.n	80075a0 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800759c:	2300      	movs	r3, #0
 800759e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80075a8:	e02c      	b.n	8007604 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	9300      	str	r3, [sp, #0]
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2200      	movs	r2, #0
 80075b2:	2180      	movs	r1, #128	; 0x80
 80075b4:	68f8      	ldr	r0, [r7, #12]
 80075b6:	f000 fb92 	bl	8007cde <UART_WaitOnFlagUntilTimeout>
 80075ba:	4603      	mov	r3, r0
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d001      	beq.n	80075c4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80075c0:	2303      	movs	r3, #3
 80075c2:	e038      	b.n	8007636 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 80075c4:	69fb      	ldr	r3, [r7, #28]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80075ca:	69bb      	ldr	r3, [r7, #24]
 80075cc:	881b      	ldrh	r3, [r3, #0]
 80075ce:	461a      	mov	r2, r3
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075d8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	3302      	adds	r3, #2
 80075de:	61bb      	str	r3, [r7, #24]
 80075e0:	e007      	b.n	80075f2 <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80075e2:	69fb      	ldr	r3, [r7, #28]
 80075e4:	781a      	ldrb	r2, [r3, #0]
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	681b      	ldr	r3, [r3, #0]
 80075ea:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80075ec:	69fb      	ldr	r3, [r7, #28]
 80075ee:	3301      	adds	r3, #1
 80075f0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80075f8:	b29b      	uxth	r3, r3
 80075fa:	3b01      	subs	r3, #1
 80075fc:	b29a      	uxth	r2, r3
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800760a:	b29b      	uxth	r3, r3
 800760c:	2b00      	cmp	r3, #0
 800760e:	d1cc      	bne.n	80075aa <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007610:	683b      	ldr	r3, [r7, #0]
 8007612:	9300      	str	r3, [sp, #0]
 8007614:	697b      	ldr	r3, [r7, #20]
 8007616:	2200      	movs	r2, #0
 8007618:	2140      	movs	r1, #64	; 0x40
 800761a:	68f8      	ldr	r0, [r7, #12]
 800761c:	f000 fb5f 	bl	8007cde <UART_WaitOnFlagUntilTimeout>
 8007620:	4603      	mov	r3, r0
 8007622:	2b00      	cmp	r3, #0
 8007624:	d001      	beq.n	800762a <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8007626:	2303      	movs	r3, #3
 8007628:	e005      	b.n	8007636 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	2220      	movs	r2, #32
 800762e:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8007630:	2300      	movs	r3, #0
 8007632:	e000      	b.n	8007636 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8007634:	2302      	movs	r3, #2
  }
}
 8007636:	4618      	mov	r0, r3
 8007638:	3720      	adds	r7, #32
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}
	...

08007640 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007640:	b580      	push	{r7, lr}
 8007642:	b088      	sub	sp, #32
 8007644:	af00      	add	r7, sp, #0
 8007646:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	689a      	ldr	r2, [r3, #8]
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	691b      	ldr	r3, [r3, #16]
 8007654:	431a      	orrs	r2, r3
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	695b      	ldr	r3, [r3, #20]
 800765a:	431a      	orrs	r2, r3
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	69db      	ldr	r3, [r3, #28]
 8007660:	4313      	orrs	r3, r2
 8007662:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	681a      	ldr	r2, [r3, #0]
 800766a:	4ba6      	ldr	r3, [pc, #664]	; (8007904 <UART_SetConfig+0x2c4>)
 800766c:	4013      	ands	r3, r2
 800766e:	687a      	ldr	r2, [r7, #4]
 8007670:	6812      	ldr	r2, [r2, #0]
 8007672:	6979      	ldr	r1, [r7, #20]
 8007674:	430b      	orrs	r3, r1
 8007676:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	430a      	orrs	r2, r1
 800768c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	699b      	ldr	r3, [r3, #24]
 8007692:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	6a1b      	ldr	r3, [r3, #32]
 8007698:	697a      	ldr	r2, [r7, #20]
 800769a:	4313      	orrs	r3, r2
 800769c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	697a      	ldr	r2, [r7, #20]
 80076ae:	430a      	orrs	r2, r1
 80076b0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	4a94      	ldr	r2, [pc, #592]	; (8007908 <UART_SetConfig+0x2c8>)
 80076b8:	4293      	cmp	r3, r2
 80076ba:	d120      	bne.n	80076fe <UART_SetConfig+0xbe>
 80076bc:	4b93      	ldr	r3, [pc, #588]	; (800790c <UART_SetConfig+0x2cc>)
 80076be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076c2:	f003 0303 	and.w	r3, r3, #3
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d816      	bhi.n	80076f8 <UART_SetConfig+0xb8>
 80076ca:	a201      	add	r2, pc, #4	; (adr r2, 80076d0 <UART_SetConfig+0x90>)
 80076cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076d0:	080076e1 	.word	0x080076e1
 80076d4:	080076ed 	.word	0x080076ed
 80076d8:	080076e7 	.word	0x080076e7
 80076dc:	080076f3 	.word	0x080076f3
 80076e0:	2301      	movs	r3, #1
 80076e2:	77fb      	strb	r3, [r7, #31]
 80076e4:	e150      	b.n	8007988 <UART_SetConfig+0x348>
 80076e6:	2302      	movs	r3, #2
 80076e8:	77fb      	strb	r3, [r7, #31]
 80076ea:	e14d      	b.n	8007988 <UART_SetConfig+0x348>
 80076ec:	2304      	movs	r3, #4
 80076ee:	77fb      	strb	r3, [r7, #31]
 80076f0:	e14a      	b.n	8007988 <UART_SetConfig+0x348>
 80076f2:	2308      	movs	r3, #8
 80076f4:	77fb      	strb	r3, [r7, #31]
 80076f6:	e147      	b.n	8007988 <UART_SetConfig+0x348>
 80076f8:	2310      	movs	r3, #16
 80076fa:	77fb      	strb	r3, [r7, #31]
 80076fc:	e144      	b.n	8007988 <UART_SetConfig+0x348>
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	4a83      	ldr	r2, [pc, #524]	; (8007910 <UART_SetConfig+0x2d0>)
 8007704:	4293      	cmp	r3, r2
 8007706:	d132      	bne.n	800776e <UART_SetConfig+0x12e>
 8007708:	4b80      	ldr	r3, [pc, #512]	; (800790c <UART_SetConfig+0x2cc>)
 800770a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800770e:	f003 030c 	and.w	r3, r3, #12
 8007712:	2b0c      	cmp	r3, #12
 8007714:	d828      	bhi.n	8007768 <UART_SetConfig+0x128>
 8007716:	a201      	add	r2, pc, #4	; (adr r2, 800771c <UART_SetConfig+0xdc>)
 8007718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800771c:	08007751 	.word	0x08007751
 8007720:	08007769 	.word	0x08007769
 8007724:	08007769 	.word	0x08007769
 8007728:	08007769 	.word	0x08007769
 800772c:	0800775d 	.word	0x0800775d
 8007730:	08007769 	.word	0x08007769
 8007734:	08007769 	.word	0x08007769
 8007738:	08007769 	.word	0x08007769
 800773c:	08007757 	.word	0x08007757
 8007740:	08007769 	.word	0x08007769
 8007744:	08007769 	.word	0x08007769
 8007748:	08007769 	.word	0x08007769
 800774c:	08007763 	.word	0x08007763
 8007750:	2300      	movs	r3, #0
 8007752:	77fb      	strb	r3, [r7, #31]
 8007754:	e118      	b.n	8007988 <UART_SetConfig+0x348>
 8007756:	2302      	movs	r3, #2
 8007758:	77fb      	strb	r3, [r7, #31]
 800775a:	e115      	b.n	8007988 <UART_SetConfig+0x348>
 800775c:	2304      	movs	r3, #4
 800775e:	77fb      	strb	r3, [r7, #31]
 8007760:	e112      	b.n	8007988 <UART_SetConfig+0x348>
 8007762:	2308      	movs	r3, #8
 8007764:	77fb      	strb	r3, [r7, #31]
 8007766:	e10f      	b.n	8007988 <UART_SetConfig+0x348>
 8007768:	2310      	movs	r3, #16
 800776a:	77fb      	strb	r3, [r7, #31]
 800776c:	e10c      	b.n	8007988 <UART_SetConfig+0x348>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a68      	ldr	r2, [pc, #416]	; (8007914 <UART_SetConfig+0x2d4>)
 8007774:	4293      	cmp	r3, r2
 8007776:	d120      	bne.n	80077ba <UART_SetConfig+0x17a>
 8007778:	4b64      	ldr	r3, [pc, #400]	; (800790c <UART_SetConfig+0x2cc>)
 800777a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800777e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007782:	2b30      	cmp	r3, #48	; 0x30
 8007784:	d013      	beq.n	80077ae <UART_SetConfig+0x16e>
 8007786:	2b30      	cmp	r3, #48	; 0x30
 8007788:	d814      	bhi.n	80077b4 <UART_SetConfig+0x174>
 800778a:	2b20      	cmp	r3, #32
 800778c:	d009      	beq.n	80077a2 <UART_SetConfig+0x162>
 800778e:	2b20      	cmp	r3, #32
 8007790:	d810      	bhi.n	80077b4 <UART_SetConfig+0x174>
 8007792:	2b00      	cmp	r3, #0
 8007794:	d002      	beq.n	800779c <UART_SetConfig+0x15c>
 8007796:	2b10      	cmp	r3, #16
 8007798:	d006      	beq.n	80077a8 <UART_SetConfig+0x168>
 800779a:	e00b      	b.n	80077b4 <UART_SetConfig+0x174>
 800779c:	2300      	movs	r3, #0
 800779e:	77fb      	strb	r3, [r7, #31]
 80077a0:	e0f2      	b.n	8007988 <UART_SetConfig+0x348>
 80077a2:	2302      	movs	r3, #2
 80077a4:	77fb      	strb	r3, [r7, #31]
 80077a6:	e0ef      	b.n	8007988 <UART_SetConfig+0x348>
 80077a8:	2304      	movs	r3, #4
 80077aa:	77fb      	strb	r3, [r7, #31]
 80077ac:	e0ec      	b.n	8007988 <UART_SetConfig+0x348>
 80077ae:	2308      	movs	r3, #8
 80077b0:	77fb      	strb	r3, [r7, #31]
 80077b2:	e0e9      	b.n	8007988 <UART_SetConfig+0x348>
 80077b4:	2310      	movs	r3, #16
 80077b6:	77fb      	strb	r3, [r7, #31]
 80077b8:	e0e6      	b.n	8007988 <UART_SetConfig+0x348>
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	4a56      	ldr	r2, [pc, #344]	; (8007918 <UART_SetConfig+0x2d8>)
 80077c0:	4293      	cmp	r3, r2
 80077c2:	d120      	bne.n	8007806 <UART_SetConfig+0x1c6>
 80077c4:	4b51      	ldr	r3, [pc, #324]	; (800790c <UART_SetConfig+0x2cc>)
 80077c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80077ca:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80077ce:	2bc0      	cmp	r3, #192	; 0xc0
 80077d0:	d013      	beq.n	80077fa <UART_SetConfig+0x1ba>
 80077d2:	2bc0      	cmp	r3, #192	; 0xc0
 80077d4:	d814      	bhi.n	8007800 <UART_SetConfig+0x1c0>
 80077d6:	2b80      	cmp	r3, #128	; 0x80
 80077d8:	d009      	beq.n	80077ee <UART_SetConfig+0x1ae>
 80077da:	2b80      	cmp	r3, #128	; 0x80
 80077dc:	d810      	bhi.n	8007800 <UART_SetConfig+0x1c0>
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d002      	beq.n	80077e8 <UART_SetConfig+0x1a8>
 80077e2:	2b40      	cmp	r3, #64	; 0x40
 80077e4:	d006      	beq.n	80077f4 <UART_SetConfig+0x1b4>
 80077e6:	e00b      	b.n	8007800 <UART_SetConfig+0x1c0>
 80077e8:	2300      	movs	r3, #0
 80077ea:	77fb      	strb	r3, [r7, #31]
 80077ec:	e0cc      	b.n	8007988 <UART_SetConfig+0x348>
 80077ee:	2302      	movs	r3, #2
 80077f0:	77fb      	strb	r3, [r7, #31]
 80077f2:	e0c9      	b.n	8007988 <UART_SetConfig+0x348>
 80077f4:	2304      	movs	r3, #4
 80077f6:	77fb      	strb	r3, [r7, #31]
 80077f8:	e0c6      	b.n	8007988 <UART_SetConfig+0x348>
 80077fa:	2308      	movs	r3, #8
 80077fc:	77fb      	strb	r3, [r7, #31]
 80077fe:	e0c3      	b.n	8007988 <UART_SetConfig+0x348>
 8007800:	2310      	movs	r3, #16
 8007802:	77fb      	strb	r3, [r7, #31]
 8007804:	e0c0      	b.n	8007988 <UART_SetConfig+0x348>
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	4a44      	ldr	r2, [pc, #272]	; (800791c <UART_SetConfig+0x2dc>)
 800780c:	4293      	cmp	r3, r2
 800780e:	d125      	bne.n	800785c <UART_SetConfig+0x21c>
 8007810:	4b3e      	ldr	r3, [pc, #248]	; (800790c <UART_SetConfig+0x2cc>)
 8007812:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800781a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800781e:	d017      	beq.n	8007850 <UART_SetConfig+0x210>
 8007820:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007824:	d817      	bhi.n	8007856 <UART_SetConfig+0x216>
 8007826:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800782a:	d00b      	beq.n	8007844 <UART_SetConfig+0x204>
 800782c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007830:	d811      	bhi.n	8007856 <UART_SetConfig+0x216>
 8007832:	2b00      	cmp	r3, #0
 8007834:	d003      	beq.n	800783e <UART_SetConfig+0x1fe>
 8007836:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800783a:	d006      	beq.n	800784a <UART_SetConfig+0x20a>
 800783c:	e00b      	b.n	8007856 <UART_SetConfig+0x216>
 800783e:	2300      	movs	r3, #0
 8007840:	77fb      	strb	r3, [r7, #31]
 8007842:	e0a1      	b.n	8007988 <UART_SetConfig+0x348>
 8007844:	2302      	movs	r3, #2
 8007846:	77fb      	strb	r3, [r7, #31]
 8007848:	e09e      	b.n	8007988 <UART_SetConfig+0x348>
 800784a:	2304      	movs	r3, #4
 800784c:	77fb      	strb	r3, [r7, #31]
 800784e:	e09b      	b.n	8007988 <UART_SetConfig+0x348>
 8007850:	2308      	movs	r3, #8
 8007852:	77fb      	strb	r3, [r7, #31]
 8007854:	e098      	b.n	8007988 <UART_SetConfig+0x348>
 8007856:	2310      	movs	r3, #16
 8007858:	77fb      	strb	r3, [r7, #31]
 800785a:	e095      	b.n	8007988 <UART_SetConfig+0x348>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a2f      	ldr	r2, [pc, #188]	; (8007920 <UART_SetConfig+0x2e0>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d125      	bne.n	80078b2 <UART_SetConfig+0x272>
 8007866:	4b29      	ldr	r3, [pc, #164]	; (800790c <UART_SetConfig+0x2cc>)
 8007868:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800786c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007870:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007874:	d017      	beq.n	80078a6 <UART_SetConfig+0x266>
 8007876:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800787a:	d817      	bhi.n	80078ac <UART_SetConfig+0x26c>
 800787c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007880:	d00b      	beq.n	800789a <UART_SetConfig+0x25a>
 8007882:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007886:	d811      	bhi.n	80078ac <UART_SetConfig+0x26c>
 8007888:	2b00      	cmp	r3, #0
 800788a:	d003      	beq.n	8007894 <UART_SetConfig+0x254>
 800788c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007890:	d006      	beq.n	80078a0 <UART_SetConfig+0x260>
 8007892:	e00b      	b.n	80078ac <UART_SetConfig+0x26c>
 8007894:	2301      	movs	r3, #1
 8007896:	77fb      	strb	r3, [r7, #31]
 8007898:	e076      	b.n	8007988 <UART_SetConfig+0x348>
 800789a:	2302      	movs	r3, #2
 800789c:	77fb      	strb	r3, [r7, #31]
 800789e:	e073      	b.n	8007988 <UART_SetConfig+0x348>
 80078a0:	2304      	movs	r3, #4
 80078a2:	77fb      	strb	r3, [r7, #31]
 80078a4:	e070      	b.n	8007988 <UART_SetConfig+0x348>
 80078a6:	2308      	movs	r3, #8
 80078a8:	77fb      	strb	r3, [r7, #31]
 80078aa:	e06d      	b.n	8007988 <UART_SetConfig+0x348>
 80078ac:	2310      	movs	r3, #16
 80078ae:	77fb      	strb	r3, [r7, #31]
 80078b0:	e06a      	b.n	8007988 <UART_SetConfig+0x348>
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	4a1b      	ldr	r2, [pc, #108]	; (8007924 <UART_SetConfig+0x2e4>)
 80078b8:	4293      	cmp	r3, r2
 80078ba:	d138      	bne.n	800792e <UART_SetConfig+0x2ee>
 80078bc:	4b13      	ldr	r3, [pc, #76]	; (800790c <UART_SetConfig+0x2cc>)
 80078be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80078c2:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80078c6:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078ca:	d017      	beq.n	80078fc <UART_SetConfig+0x2bc>
 80078cc:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80078d0:	d82a      	bhi.n	8007928 <UART_SetConfig+0x2e8>
 80078d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078d6:	d00b      	beq.n	80078f0 <UART_SetConfig+0x2b0>
 80078d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80078dc:	d824      	bhi.n	8007928 <UART_SetConfig+0x2e8>
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d003      	beq.n	80078ea <UART_SetConfig+0x2aa>
 80078e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078e6:	d006      	beq.n	80078f6 <UART_SetConfig+0x2b6>
 80078e8:	e01e      	b.n	8007928 <UART_SetConfig+0x2e8>
 80078ea:	2300      	movs	r3, #0
 80078ec:	77fb      	strb	r3, [r7, #31]
 80078ee:	e04b      	b.n	8007988 <UART_SetConfig+0x348>
 80078f0:	2302      	movs	r3, #2
 80078f2:	77fb      	strb	r3, [r7, #31]
 80078f4:	e048      	b.n	8007988 <UART_SetConfig+0x348>
 80078f6:	2304      	movs	r3, #4
 80078f8:	77fb      	strb	r3, [r7, #31]
 80078fa:	e045      	b.n	8007988 <UART_SetConfig+0x348>
 80078fc:	2308      	movs	r3, #8
 80078fe:	77fb      	strb	r3, [r7, #31]
 8007900:	e042      	b.n	8007988 <UART_SetConfig+0x348>
 8007902:	bf00      	nop
 8007904:	efff69f3 	.word	0xefff69f3
 8007908:	40011000 	.word	0x40011000
 800790c:	40023800 	.word	0x40023800
 8007910:	40004400 	.word	0x40004400
 8007914:	40004800 	.word	0x40004800
 8007918:	40004c00 	.word	0x40004c00
 800791c:	40005000 	.word	0x40005000
 8007920:	40011400 	.word	0x40011400
 8007924:	40007800 	.word	0x40007800
 8007928:	2310      	movs	r3, #16
 800792a:	77fb      	strb	r3, [r7, #31]
 800792c:	e02c      	b.n	8007988 <UART_SetConfig+0x348>
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	4a72      	ldr	r2, [pc, #456]	; (8007afc <UART_SetConfig+0x4bc>)
 8007934:	4293      	cmp	r3, r2
 8007936:	d125      	bne.n	8007984 <UART_SetConfig+0x344>
 8007938:	4b71      	ldr	r3, [pc, #452]	; (8007b00 <UART_SetConfig+0x4c0>)
 800793a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800793e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007942:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007946:	d017      	beq.n	8007978 <UART_SetConfig+0x338>
 8007948:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800794c:	d817      	bhi.n	800797e <UART_SetConfig+0x33e>
 800794e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007952:	d00b      	beq.n	800796c <UART_SetConfig+0x32c>
 8007954:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007958:	d811      	bhi.n	800797e <UART_SetConfig+0x33e>
 800795a:	2b00      	cmp	r3, #0
 800795c:	d003      	beq.n	8007966 <UART_SetConfig+0x326>
 800795e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007962:	d006      	beq.n	8007972 <UART_SetConfig+0x332>
 8007964:	e00b      	b.n	800797e <UART_SetConfig+0x33e>
 8007966:	2300      	movs	r3, #0
 8007968:	77fb      	strb	r3, [r7, #31]
 800796a:	e00d      	b.n	8007988 <UART_SetConfig+0x348>
 800796c:	2302      	movs	r3, #2
 800796e:	77fb      	strb	r3, [r7, #31]
 8007970:	e00a      	b.n	8007988 <UART_SetConfig+0x348>
 8007972:	2304      	movs	r3, #4
 8007974:	77fb      	strb	r3, [r7, #31]
 8007976:	e007      	b.n	8007988 <UART_SetConfig+0x348>
 8007978:	2308      	movs	r3, #8
 800797a:	77fb      	strb	r3, [r7, #31]
 800797c:	e004      	b.n	8007988 <UART_SetConfig+0x348>
 800797e:	2310      	movs	r3, #16
 8007980:	77fb      	strb	r3, [r7, #31]
 8007982:	e001      	b.n	8007988 <UART_SetConfig+0x348>
 8007984:	2310      	movs	r3, #16
 8007986:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	69db      	ldr	r3, [r3, #28]
 800798c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007990:	d15c      	bne.n	8007a4c <UART_SetConfig+0x40c>
  {
    switch (clocksource)
 8007992:	7ffb      	ldrb	r3, [r7, #31]
 8007994:	2b08      	cmp	r3, #8
 8007996:	d828      	bhi.n	80079ea <UART_SetConfig+0x3aa>
 8007998:	a201      	add	r2, pc, #4	; (adr r2, 80079a0 <UART_SetConfig+0x360>)
 800799a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800799e:	bf00      	nop
 80079a0:	080079c5 	.word	0x080079c5
 80079a4:	080079cd 	.word	0x080079cd
 80079a8:	080079d5 	.word	0x080079d5
 80079ac:	080079eb 	.word	0x080079eb
 80079b0:	080079db 	.word	0x080079db
 80079b4:	080079eb 	.word	0x080079eb
 80079b8:	080079eb 	.word	0x080079eb
 80079bc:	080079eb 	.word	0x080079eb
 80079c0:	080079e3 	.word	0x080079e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80079c4:	f7fd fbb2 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 80079c8:	61b8      	str	r0, [r7, #24]
        break;
 80079ca:	e013      	b.n	80079f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80079cc:	f7fd fbc2 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 80079d0:	61b8      	str	r0, [r7, #24]
        break;
 80079d2:	e00f      	b.n	80079f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80079d4:	4b4b      	ldr	r3, [pc, #300]	; (8007b04 <UART_SetConfig+0x4c4>)
 80079d6:	61bb      	str	r3, [r7, #24]
        break;
 80079d8:	e00c      	b.n	80079f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80079da:	f7fd fa95 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 80079de:	61b8      	str	r0, [r7, #24]
        break;
 80079e0:	e008      	b.n	80079f4 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80079e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80079e6:	61bb      	str	r3, [r7, #24]
        break;
 80079e8:	e004      	b.n	80079f4 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80079ea:	2300      	movs	r3, #0
 80079ec:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80079ee:	2301      	movs	r3, #1
 80079f0:	77bb      	strb	r3, [r7, #30]
        break;
 80079f2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80079f4:	69bb      	ldr	r3, [r7, #24]
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d074      	beq.n	8007ae4 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	005a      	lsls	r2, r3, #1
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	685b      	ldr	r3, [r3, #4]
 8007a02:	085b      	lsrs	r3, r3, #1
 8007a04:	441a      	add	r2, r3
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	685b      	ldr	r3, [r3, #4]
 8007a0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8007a0e:	b29b      	uxth	r3, r3
 8007a10:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	2b0f      	cmp	r3, #15
 8007a16:	d916      	bls.n	8007a46 <UART_SetConfig+0x406>
 8007a18:	693b      	ldr	r3, [r7, #16]
 8007a1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007a1e:	d212      	bcs.n	8007a46 <UART_SetConfig+0x406>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	b29b      	uxth	r3, r3
 8007a24:	f023 030f 	bic.w	r3, r3, #15
 8007a28:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007a2a:	693b      	ldr	r3, [r7, #16]
 8007a2c:	085b      	lsrs	r3, r3, #1
 8007a2e:	b29b      	uxth	r3, r3
 8007a30:	f003 0307 	and.w	r3, r3, #7
 8007a34:	b29a      	uxth	r2, r3
 8007a36:	89fb      	ldrh	r3, [r7, #14]
 8007a38:	4313      	orrs	r3, r2
 8007a3a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	89fa      	ldrh	r2, [r7, #14]
 8007a42:	60da      	str	r2, [r3, #12]
 8007a44:	e04e      	b.n	8007ae4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007a46:	2301      	movs	r3, #1
 8007a48:	77bb      	strb	r3, [r7, #30]
 8007a4a:	e04b      	b.n	8007ae4 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007a4c:	7ffb      	ldrb	r3, [r7, #31]
 8007a4e:	2b08      	cmp	r3, #8
 8007a50:	d827      	bhi.n	8007aa2 <UART_SetConfig+0x462>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0x418>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a7d 	.word	0x08007a7d
 8007a5c:	08007a85 	.word	0x08007a85
 8007a60:	08007a8d 	.word	0x08007a8d
 8007a64:	08007aa3 	.word	0x08007aa3
 8007a68:	08007a93 	.word	0x08007a93
 8007a6c:	08007aa3 	.word	0x08007aa3
 8007a70:	08007aa3 	.word	0x08007aa3
 8007a74:	08007aa3 	.word	0x08007aa3
 8007a78:	08007a9b 	.word	0x08007a9b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007a7c:	f7fd fb56 	bl	800512c <HAL_RCC_GetPCLK1Freq>
 8007a80:	61b8      	str	r0, [r7, #24]
        break;
 8007a82:	e013      	b.n	8007aac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007a84:	f7fd fb66 	bl	8005154 <HAL_RCC_GetPCLK2Freq>
 8007a88:	61b8      	str	r0, [r7, #24]
        break;
 8007a8a:	e00f      	b.n	8007aac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007a8c:	4b1d      	ldr	r3, [pc, #116]	; (8007b04 <UART_SetConfig+0x4c4>)
 8007a8e:	61bb      	str	r3, [r7, #24]
        break;
 8007a90:	e00c      	b.n	8007aac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007a92:	f7fd fa39 	bl	8004f08 <HAL_RCC_GetSysClockFreq>
 8007a96:	61b8      	str	r0, [r7, #24]
        break;
 8007a98:	e008      	b.n	8007aac <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007a9a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007a9e:	61bb      	str	r3, [r7, #24]
        break;
 8007aa0:	e004      	b.n	8007aac <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007aa2:	2300      	movs	r3, #0
 8007aa4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007aa6:	2301      	movs	r3, #1
 8007aa8:	77bb      	strb	r3, [r7, #30]
        break;
 8007aaa:	bf00      	nop
    }

    if (pclk != 0U)
 8007aac:	69bb      	ldr	r3, [r7, #24]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d018      	beq.n	8007ae4 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	685b      	ldr	r3, [r3, #4]
 8007ab6:	085a      	lsrs	r2, r3, #1
 8007ab8:	69bb      	ldr	r3, [r7, #24]
 8007aba:	441a      	add	r2, r3
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	685b      	ldr	r3, [r3, #4]
 8007ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007ac8:	693b      	ldr	r3, [r7, #16]
 8007aca:	2b0f      	cmp	r3, #15
 8007acc:	d908      	bls.n	8007ae0 <UART_SetConfig+0x4a0>
 8007ace:	693b      	ldr	r3, [r7, #16]
 8007ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ad4:	d204      	bcs.n	8007ae0 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = usartdiv;
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	693a      	ldr	r2, [r7, #16]
 8007adc:	60da      	str	r2, [r3, #12]
 8007ade:	e001      	b.n	8007ae4 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2200      	movs	r2, #0
 8007aee:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007af0:	7fbb      	ldrb	r3, [r7, #30]
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	3720      	adds	r7, #32
 8007af6:	46bd      	mov	sp, r7
 8007af8:	bd80      	pop	{r7, pc}
 8007afa:	bf00      	nop
 8007afc:	40007c00 	.word	0x40007c00
 8007b00:	40023800 	.word	0x40023800
 8007b04:	00f42400 	.word	0x00f42400

08007b08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007b08:	b480      	push	{r7}
 8007b0a:	b083      	sub	sp, #12
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b14:	f003 0301 	and.w	r3, r3, #1
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d00a      	beq.n	8007b32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	430a      	orrs	r2, r1
 8007b30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00a      	beq.n	8007b54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	685b      	ldr	r3, [r3, #4]
 8007b44:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	430a      	orrs	r2, r1
 8007b52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b58:	f003 0304 	and.w	r3, r3, #4
 8007b5c:	2b00      	cmp	r3, #0
 8007b5e:	d00a      	beq.n	8007b76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	685b      	ldr	r3, [r3, #4]
 8007b66:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	430a      	orrs	r2, r1
 8007b74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7a:	f003 0308 	and.w	r3, r3, #8
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d00a      	beq.n	8007b98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	685b      	ldr	r3, [r3, #4]
 8007b88:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	430a      	orrs	r2, r1
 8007b96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b9c:	f003 0310 	and.w	r3, r3, #16
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d00a      	beq.n	8007bba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	689b      	ldr	r3, [r3, #8]
 8007baa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	430a      	orrs	r2, r1
 8007bb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbe:	f003 0320 	and.w	r3, r3, #32
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d00a      	beq.n	8007bdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	689b      	ldr	r3, [r3, #8]
 8007bcc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	430a      	orrs	r2, r1
 8007bda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007be0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d01a      	beq.n	8007c1e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	685b      	ldr	r3, [r3, #4]
 8007bee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	430a      	orrs	r2, r1
 8007bfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007c06:	d10a      	bne.n	8007c1e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	685b      	ldr	r3, [r3, #4]
 8007c0e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	430a      	orrs	r2, r1
 8007c1c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d00a      	beq.n	8007c40 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	685b      	ldr	r3, [r3, #4]
 8007c30:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	430a      	orrs	r2, r1
 8007c3e:	605a      	str	r2, [r3, #4]
  }
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr

08007c4c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007c4c:	b580      	push	{r7, lr}
 8007c4e:	b086      	sub	sp, #24
 8007c50:	af02      	add	r7, sp, #8
 8007c52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	2200      	movs	r2, #0
 8007c58:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007c5c:	f7fb f95a 	bl	8002f14 <HAL_GetTick>
 8007c60:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	f003 0308 	and.w	r3, r3, #8
 8007c6c:	2b08      	cmp	r3, #8
 8007c6e:	d10e      	bne.n	8007c8e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	2200      	movs	r2, #0
 8007c7a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 f82d 	bl	8007cde <UART_WaitOnFlagUntilTimeout>
 8007c84:	4603      	mov	r3, r0
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d001      	beq.n	8007c8e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007c8a:	2303      	movs	r3, #3
 8007c8c:	e023      	b.n	8007cd6 <UART_CheckIdleState+0x8a>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	f003 0304 	and.w	r3, r3, #4
 8007c98:	2b04      	cmp	r3, #4
 8007c9a:	d10e      	bne.n	8007cba <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007c9c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ca0:	9300      	str	r3, [sp, #0]
 8007ca2:	68fb      	ldr	r3, [r7, #12]
 8007ca4:	2200      	movs	r2, #0
 8007ca6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f000 f817 	bl	8007cde <UART_WaitOnFlagUntilTimeout>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d001      	beq.n	8007cba <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007cb6:	2303      	movs	r3, #3
 8007cb8:	e00d      	b.n	8007cd6 <UART_CheckIdleState+0x8a>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2220      	movs	r2, #32
 8007cbe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2200      	movs	r2, #0
 8007cca:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007cd4:	2300      	movs	r3, #0
}
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	3710      	adds	r7, #16
 8007cda:	46bd      	mov	sp, r7
 8007cdc:	bd80      	pop	{r7, pc}

08007cde <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007cde:	b580      	push	{r7, lr}
 8007ce0:	b084      	sub	sp, #16
 8007ce2:	af00      	add	r7, sp, #0
 8007ce4:	60f8      	str	r0, [r7, #12]
 8007ce6:	60b9      	str	r1, [r7, #8]
 8007ce8:	603b      	str	r3, [r7, #0]
 8007cea:	4613      	mov	r3, r2
 8007cec:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007cee:	e05e      	b.n	8007dae <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007cf0:	69bb      	ldr	r3, [r7, #24]
 8007cf2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cf6:	d05a      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cf8:	f7fb f90c 	bl	8002f14 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	69ba      	ldr	r2, [r7, #24]
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d302      	bcc.n	8007d0e <UART_WaitOnFlagUntilTimeout+0x30>
 8007d08:	69bb      	ldr	r3, [r7, #24]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	d11b      	bne.n	8007d46 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d0e:	68fb      	ldr	r3, [r7, #12]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	681a      	ldr	r2, [r3, #0]
 8007d14:	68fb      	ldr	r3, [r7, #12]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d1c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d1e:	68fb      	ldr	r3, [r7, #12]
 8007d20:	681b      	ldr	r3, [r3, #0]
 8007d22:	689a      	ldr	r2, [r3, #8]
 8007d24:	68fb      	ldr	r3, [r7, #12]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	f022 0201 	bic.w	r2, r2, #1
 8007d2c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	2220      	movs	r2, #32
 8007d32:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007d34:	68fb      	ldr	r3, [r7, #12]
 8007d36:	2220      	movs	r2, #32
 8007d38:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007d3a:	68fb      	ldr	r3, [r7, #12]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e043      	b.n	8007dce <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0304 	and.w	r3, r3, #4
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d02c      	beq.n	8007dae <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	69db      	ldr	r3, [r3, #28]
 8007d5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007d5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007d62:	d124      	bne.n	8007dae <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007d6c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007d7c:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	689a      	ldr	r2, [r3, #8]
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	f022 0201 	bic.w	r2, r2, #1
 8007d8c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	2220      	movs	r2, #32
 8007d92:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	2220      	movs	r2, #32
 8007d98:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	2220      	movs	r2, #32
 8007d9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	2200      	movs	r2, #0
 8007da6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e00f      	b.n	8007dce <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007dae:	68fb      	ldr	r3, [r7, #12]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	69da      	ldr	r2, [r3, #28]
 8007db4:	68bb      	ldr	r3, [r7, #8]
 8007db6:	4013      	ands	r3, r2
 8007db8:	68ba      	ldr	r2, [r7, #8]
 8007dba:	429a      	cmp	r2, r3
 8007dbc:	bf0c      	ite	eq
 8007dbe:	2301      	moveq	r3, #1
 8007dc0:	2300      	movne	r3, #0
 8007dc2:	b2db      	uxtb	r3, r3
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	79fb      	ldrb	r3, [r7, #7]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	d091      	beq.n	8007cf0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007dcc:	2300      	movs	r3, #0
}
 8007dce:	4618      	mov	r0, r3
 8007dd0:	3710      	adds	r7, #16
 8007dd2:	46bd      	mov	sp, r7
 8007dd4:	bd80      	pop	{r7, pc}
	...

08007dd8 <__errno>:
 8007dd8:	4b01      	ldr	r3, [pc, #4]	; (8007de0 <__errno+0x8>)
 8007dda:	6818      	ldr	r0, [r3, #0]
 8007ddc:	4770      	bx	lr
 8007dde:	bf00      	nop
 8007de0:	20000010 	.word	0x20000010

08007de4 <__libc_init_array>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4d0d      	ldr	r5, [pc, #52]	; (8007e1c <__libc_init_array+0x38>)
 8007de8:	4c0d      	ldr	r4, [pc, #52]	; (8007e20 <__libc_init_array+0x3c>)
 8007dea:	1b64      	subs	r4, r4, r5
 8007dec:	10a4      	asrs	r4, r4, #2
 8007dee:	2600      	movs	r6, #0
 8007df0:	42a6      	cmp	r6, r4
 8007df2:	d109      	bne.n	8007e08 <__libc_init_array+0x24>
 8007df4:	4d0b      	ldr	r5, [pc, #44]	; (8007e24 <__libc_init_array+0x40>)
 8007df6:	4c0c      	ldr	r4, [pc, #48]	; (8007e28 <__libc_init_array+0x44>)
 8007df8:	f002 fe5e 	bl	800aab8 <_init>
 8007dfc:	1b64      	subs	r4, r4, r5
 8007dfe:	10a4      	asrs	r4, r4, #2
 8007e00:	2600      	movs	r6, #0
 8007e02:	42a6      	cmp	r6, r4
 8007e04:	d105      	bne.n	8007e12 <__libc_init_array+0x2e>
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e0c:	4798      	blx	r3
 8007e0e:	3601      	adds	r6, #1
 8007e10:	e7ee      	b.n	8007df0 <__libc_init_array+0xc>
 8007e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e16:	4798      	blx	r3
 8007e18:	3601      	adds	r6, #1
 8007e1a:	e7f2      	b.n	8007e02 <__libc_init_array+0x1e>
 8007e1c:	0801060c 	.word	0x0801060c
 8007e20:	0801060c 	.word	0x0801060c
 8007e24:	0801060c 	.word	0x0801060c
 8007e28:	08010610 	.word	0x08010610

08007e2c <memset>:
 8007e2c:	4402      	add	r2, r0
 8007e2e:	4603      	mov	r3, r0
 8007e30:	4293      	cmp	r3, r2
 8007e32:	d100      	bne.n	8007e36 <memset+0xa>
 8007e34:	4770      	bx	lr
 8007e36:	f803 1b01 	strb.w	r1, [r3], #1
 8007e3a:	e7f9      	b.n	8007e30 <memset+0x4>

08007e3c <__cvt>:
 8007e3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007e3e:	ed2d 8b02 	vpush	{d8}
 8007e42:	eeb0 8b40 	vmov.f64	d8, d0
 8007e46:	b085      	sub	sp, #20
 8007e48:	4617      	mov	r7, r2
 8007e4a:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8007e4c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 8007e4e:	ee18 2a90 	vmov	r2, s17
 8007e52:	f025 0520 	bic.w	r5, r5, #32
 8007e56:	2a00      	cmp	r2, #0
 8007e58:	bfb6      	itet	lt
 8007e5a:	222d      	movlt	r2, #45	; 0x2d
 8007e5c:	2200      	movge	r2, #0
 8007e5e:	eeb1 8b40 	vneglt.f64	d8, d0
 8007e62:	2d46      	cmp	r5, #70	; 0x46
 8007e64:	460c      	mov	r4, r1
 8007e66:	701a      	strb	r2, [r3, #0]
 8007e68:	d004      	beq.n	8007e74 <__cvt+0x38>
 8007e6a:	2d45      	cmp	r5, #69	; 0x45
 8007e6c:	d100      	bne.n	8007e70 <__cvt+0x34>
 8007e6e:	3401      	adds	r4, #1
 8007e70:	2102      	movs	r1, #2
 8007e72:	e000      	b.n	8007e76 <__cvt+0x3a>
 8007e74:	2103      	movs	r1, #3
 8007e76:	ab03      	add	r3, sp, #12
 8007e78:	9301      	str	r3, [sp, #4]
 8007e7a:	ab02      	add	r3, sp, #8
 8007e7c:	9300      	str	r3, [sp, #0]
 8007e7e:	4622      	mov	r2, r4
 8007e80:	4633      	mov	r3, r6
 8007e82:	eeb0 0b48 	vmov.f64	d0, d8
 8007e86:	f000 fccb 	bl	8008820 <_dtoa_r>
 8007e8a:	2d47      	cmp	r5, #71	; 0x47
 8007e8c:	d101      	bne.n	8007e92 <__cvt+0x56>
 8007e8e:	07fb      	lsls	r3, r7, #31
 8007e90:	d51a      	bpl.n	8007ec8 <__cvt+0x8c>
 8007e92:	2d46      	cmp	r5, #70	; 0x46
 8007e94:	eb00 0204 	add.w	r2, r0, r4
 8007e98:	d10c      	bne.n	8007eb4 <__cvt+0x78>
 8007e9a:	7803      	ldrb	r3, [r0, #0]
 8007e9c:	2b30      	cmp	r3, #48	; 0x30
 8007e9e:	d107      	bne.n	8007eb0 <__cvt+0x74>
 8007ea0:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007ea4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ea8:	bf1c      	itt	ne
 8007eaa:	f1c4 0401 	rsbne	r4, r4, #1
 8007eae:	6034      	strne	r4, [r6, #0]
 8007eb0:	6833      	ldr	r3, [r6, #0]
 8007eb2:	441a      	add	r2, r3
 8007eb4:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8007eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007ebc:	bf08      	it	eq
 8007ebe:	9203      	streq	r2, [sp, #12]
 8007ec0:	2130      	movs	r1, #48	; 0x30
 8007ec2:	9b03      	ldr	r3, [sp, #12]
 8007ec4:	4293      	cmp	r3, r2
 8007ec6:	d307      	bcc.n	8007ed8 <__cvt+0x9c>
 8007ec8:	9b03      	ldr	r3, [sp, #12]
 8007eca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007ecc:	1a1b      	subs	r3, r3, r0
 8007ece:	6013      	str	r3, [r2, #0]
 8007ed0:	b005      	add	sp, #20
 8007ed2:	ecbd 8b02 	vpop	{d8}
 8007ed6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ed8:	1c5c      	adds	r4, r3, #1
 8007eda:	9403      	str	r4, [sp, #12]
 8007edc:	7019      	strb	r1, [r3, #0]
 8007ede:	e7f0      	b.n	8007ec2 <__cvt+0x86>

08007ee0 <__exponent>:
 8007ee0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007ee2:	4603      	mov	r3, r0
 8007ee4:	2900      	cmp	r1, #0
 8007ee6:	bfb8      	it	lt
 8007ee8:	4249      	neglt	r1, r1
 8007eea:	f803 2b02 	strb.w	r2, [r3], #2
 8007eee:	bfb4      	ite	lt
 8007ef0:	222d      	movlt	r2, #45	; 0x2d
 8007ef2:	222b      	movge	r2, #43	; 0x2b
 8007ef4:	2909      	cmp	r1, #9
 8007ef6:	7042      	strb	r2, [r0, #1]
 8007ef8:	dd2a      	ble.n	8007f50 <__exponent+0x70>
 8007efa:	f10d 0407 	add.w	r4, sp, #7
 8007efe:	46a4      	mov	ip, r4
 8007f00:	270a      	movs	r7, #10
 8007f02:	46a6      	mov	lr, r4
 8007f04:	460a      	mov	r2, r1
 8007f06:	fb91 f6f7 	sdiv	r6, r1, r7
 8007f0a:	fb07 1516 	mls	r5, r7, r6, r1
 8007f0e:	3530      	adds	r5, #48	; 0x30
 8007f10:	2a63      	cmp	r2, #99	; 0x63
 8007f12:	f104 34ff 	add.w	r4, r4, #4294967295
 8007f16:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007f1a:	4631      	mov	r1, r6
 8007f1c:	dcf1      	bgt.n	8007f02 <__exponent+0x22>
 8007f1e:	3130      	adds	r1, #48	; 0x30
 8007f20:	f1ae 0502 	sub.w	r5, lr, #2
 8007f24:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007f28:	1c44      	adds	r4, r0, #1
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	4561      	cmp	r1, ip
 8007f2e:	d30a      	bcc.n	8007f46 <__exponent+0x66>
 8007f30:	f10d 0209 	add.w	r2, sp, #9
 8007f34:	eba2 020e 	sub.w	r2, r2, lr
 8007f38:	4565      	cmp	r5, ip
 8007f3a:	bf88      	it	hi
 8007f3c:	2200      	movhi	r2, #0
 8007f3e:	4413      	add	r3, r2
 8007f40:	1a18      	subs	r0, r3, r0
 8007f42:	b003      	add	sp, #12
 8007f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007f4a:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007f4e:	e7ed      	b.n	8007f2c <__exponent+0x4c>
 8007f50:	2330      	movs	r3, #48	; 0x30
 8007f52:	3130      	adds	r1, #48	; 0x30
 8007f54:	7083      	strb	r3, [r0, #2]
 8007f56:	70c1      	strb	r1, [r0, #3]
 8007f58:	1d03      	adds	r3, r0, #4
 8007f5a:	e7f1      	b.n	8007f40 <__exponent+0x60>
 8007f5c:	0000      	movs	r0, r0
	...

08007f60 <_printf_float>:
 8007f60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f64:	b08b      	sub	sp, #44	; 0x2c
 8007f66:	460c      	mov	r4, r1
 8007f68:	f8dd 8050 	ldr.w	r8, [sp, #80]	; 0x50
 8007f6c:	4616      	mov	r6, r2
 8007f6e:	461f      	mov	r7, r3
 8007f70:	4605      	mov	r5, r0
 8007f72:	f001 f9c3 	bl	80092fc <_localeconv_r>
 8007f76:	f8d0 b000 	ldr.w	fp, [r0]
 8007f7a:	4658      	mov	r0, fp
 8007f7c:	f7f8 f960 	bl	8000240 <strlen>
 8007f80:	2300      	movs	r3, #0
 8007f82:	9308      	str	r3, [sp, #32]
 8007f84:	f8d8 3000 	ldr.w	r3, [r8]
 8007f88:	f894 9018 	ldrb.w	r9, [r4, #24]
 8007f8c:	6822      	ldr	r2, [r4, #0]
 8007f8e:	3307      	adds	r3, #7
 8007f90:	f023 0307 	bic.w	r3, r3, #7
 8007f94:	f103 0108 	add.w	r1, r3, #8
 8007f98:	f8c8 1000 	str.w	r1, [r8]
 8007f9c:	4682      	mov	sl, r0
 8007f9e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007fa2:	e9c4 0112 	strd	r0, r1, [r4, #72]	; 0x48
 8007fa6:	ed9f 7b98 	vldr	d7, [pc, #608]	; 8008208 <_printf_float+0x2a8>
 8007faa:	ed94 0b12 	vldr	d0, [r4, #72]	; 0x48
 8007fae:	eeb0 6bc0 	vabs.f64	d6, d0
 8007fb2:	eeb4 6b47 	vcmp.f64	d6, d7
 8007fb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fba:	dd24      	ble.n	8008006 <_printf_float+0xa6>
 8007fbc:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 8007fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007fc4:	d502      	bpl.n	8007fcc <_printf_float+0x6c>
 8007fc6:	232d      	movs	r3, #45	; 0x2d
 8007fc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fcc:	4b90      	ldr	r3, [pc, #576]	; (8008210 <_printf_float+0x2b0>)
 8007fce:	4891      	ldr	r0, [pc, #580]	; (8008214 <_printf_float+0x2b4>)
 8007fd0:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8007fd4:	bf94      	ite	ls
 8007fd6:	4698      	movls	r8, r3
 8007fd8:	4680      	movhi	r8, r0
 8007fda:	2303      	movs	r3, #3
 8007fdc:	6123      	str	r3, [r4, #16]
 8007fde:	f022 0204 	bic.w	r2, r2, #4
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	6022      	str	r2, [r4, #0]
 8007fe6:	9304      	str	r3, [sp, #16]
 8007fe8:	9700      	str	r7, [sp, #0]
 8007fea:	4633      	mov	r3, r6
 8007fec:	aa09      	add	r2, sp, #36	; 0x24
 8007fee:	4621      	mov	r1, r4
 8007ff0:	4628      	mov	r0, r5
 8007ff2:	f000 f9d3 	bl	800839c <_printf_common>
 8007ff6:	3001      	adds	r0, #1
 8007ff8:	f040 808a 	bne.w	8008110 <_printf_float+0x1b0>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	b00b      	add	sp, #44	; 0x2c
 8008002:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008006:	eeb4 0b40 	vcmp.f64	d0, d0
 800800a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800800e:	d709      	bvc.n	8008024 <_printf_float+0xc4>
 8008010:	ee10 3a90 	vmov	r3, s1
 8008014:	2b00      	cmp	r3, #0
 8008016:	bfbc      	itt	lt
 8008018:	232d      	movlt	r3, #45	; 0x2d
 800801a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800801e:	487e      	ldr	r0, [pc, #504]	; (8008218 <_printf_float+0x2b8>)
 8008020:	4b7e      	ldr	r3, [pc, #504]	; (800821c <_printf_float+0x2bc>)
 8008022:	e7d5      	b.n	8007fd0 <_printf_float+0x70>
 8008024:	6863      	ldr	r3, [r4, #4]
 8008026:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800802a:	9104      	str	r1, [sp, #16]
 800802c:	1c59      	adds	r1, r3, #1
 800802e:	d13c      	bne.n	80080aa <_printf_float+0x14a>
 8008030:	2306      	movs	r3, #6
 8008032:	6063      	str	r3, [r4, #4]
 8008034:	2300      	movs	r3, #0
 8008036:	9303      	str	r3, [sp, #12]
 8008038:	ab08      	add	r3, sp, #32
 800803a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 800803e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8008042:	ab07      	add	r3, sp, #28
 8008044:	6861      	ldr	r1, [r4, #4]
 8008046:	9300      	str	r3, [sp, #0]
 8008048:	6022      	str	r2, [r4, #0]
 800804a:	f10d 031b 	add.w	r3, sp, #27
 800804e:	4628      	mov	r0, r5
 8008050:	f7ff fef4 	bl	8007e3c <__cvt>
 8008054:	9b04      	ldr	r3, [sp, #16]
 8008056:	9907      	ldr	r1, [sp, #28]
 8008058:	2b47      	cmp	r3, #71	; 0x47
 800805a:	4680      	mov	r8, r0
 800805c:	d108      	bne.n	8008070 <_printf_float+0x110>
 800805e:	1cc8      	adds	r0, r1, #3
 8008060:	db02      	blt.n	8008068 <_printf_float+0x108>
 8008062:	6863      	ldr	r3, [r4, #4]
 8008064:	4299      	cmp	r1, r3
 8008066:	dd41      	ble.n	80080ec <_printf_float+0x18c>
 8008068:	f1a9 0902 	sub.w	r9, r9, #2
 800806c:	fa5f f989 	uxtb.w	r9, r9
 8008070:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8008074:	d820      	bhi.n	80080b8 <_printf_float+0x158>
 8008076:	3901      	subs	r1, #1
 8008078:	464a      	mov	r2, r9
 800807a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800807e:	9107      	str	r1, [sp, #28]
 8008080:	f7ff ff2e 	bl	8007ee0 <__exponent>
 8008084:	9a08      	ldr	r2, [sp, #32]
 8008086:	9004      	str	r0, [sp, #16]
 8008088:	1813      	adds	r3, r2, r0
 800808a:	2a01      	cmp	r2, #1
 800808c:	6123      	str	r3, [r4, #16]
 800808e:	dc02      	bgt.n	8008096 <_printf_float+0x136>
 8008090:	6822      	ldr	r2, [r4, #0]
 8008092:	07d2      	lsls	r2, r2, #31
 8008094:	d501      	bpl.n	800809a <_printf_float+0x13a>
 8008096:	3301      	adds	r3, #1
 8008098:	6123      	str	r3, [r4, #16]
 800809a:	f89d 301b 	ldrb.w	r3, [sp, #27]
 800809e:	2b00      	cmp	r3, #0
 80080a0:	d0a2      	beq.n	8007fe8 <_printf_float+0x88>
 80080a2:	232d      	movs	r3, #45	; 0x2d
 80080a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080a8:	e79e      	b.n	8007fe8 <_printf_float+0x88>
 80080aa:	9904      	ldr	r1, [sp, #16]
 80080ac:	2947      	cmp	r1, #71	; 0x47
 80080ae:	d1c1      	bne.n	8008034 <_printf_float+0xd4>
 80080b0:	2b00      	cmp	r3, #0
 80080b2:	d1bf      	bne.n	8008034 <_printf_float+0xd4>
 80080b4:	2301      	movs	r3, #1
 80080b6:	e7bc      	b.n	8008032 <_printf_float+0xd2>
 80080b8:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80080bc:	d118      	bne.n	80080f0 <_printf_float+0x190>
 80080be:	2900      	cmp	r1, #0
 80080c0:	6863      	ldr	r3, [r4, #4]
 80080c2:	dd0b      	ble.n	80080dc <_printf_float+0x17c>
 80080c4:	6121      	str	r1, [r4, #16]
 80080c6:	b913      	cbnz	r3, 80080ce <_printf_float+0x16e>
 80080c8:	6822      	ldr	r2, [r4, #0]
 80080ca:	07d0      	lsls	r0, r2, #31
 80080cc:	d502      	bpl.n	80080d4 <_printf_float+0x174>
 80080ce:	3301      	adds	r3, #1
 80080d0:	440b      	add	r3, r1
 80080d2:	6123      	str	r3, [r4, #16]
 80080d4:	2300      	movs	r3, #0
 80080d6:	65a1      	str	r1, [r4, #88]	; 0x58
 80080d8:	9304      	str	r3, [sp, #16]
 80080da:	e7de      	b.n	800809a <_printf_float+0x13a>
 80080dc:	b913      	cbnz	r3, 80080e4 <_printf_float+0x184>
 80080de:	6822      	ldr	r2, [r4, #0]
 80080e0:	07d2      	lsls	r2, r2, #31
 80080e2:	d501      	bpl.n	80080e8 <_printf_float+0x188>
 80080e4:	3302      	adds	r3, #2
 80080e6:	e7f4      	b.n	80080d2 <_printf_float+0x172>
 80080e8:	2301      	movs	r3, #1
 80080ea:	e7f2      	b.n	80080d2 <_printf_float+0x172>
 80080ec:	f04f 0967 	mov.w	r9, #103	; 0x67
 80080f0:	9b08      	ldr	r3, [sp, #32]
 80080f2:	4299      	cmp	r1, r3
 80080f4:	db05      	blt.n	8008102 <_printf_float+0x1a2>
 80080f6:	6823      	ldr	r3, [r4, #0]
 80080f8:	6121      	str	r1, [r4, #16]
 80080fa:	07d8      	lsls	r0, r3, #31
 80080fc:	d5ea      	bpl.n	80080d4 <_printf_float+0x174>
 80080fe:	1c4b      	adds	r3, r1, #1
 8008100:	e7e7      	b.n	80080d2 <_printf_float+0x172>
 8008102:	2900      	cmp	r1, #0
 8008104:	bfd4      	ite	le
 8008106:	f1c1 0202 	rsble	r2, r1, #2
 800810a:	2201      	movgt	r2, #1
 800810c:	4413      	add	r3, r2
 800810e:	e7e0      	b.n	80080d2 <_printf_float+0x172>
 8008110:	6823      	ldr	r3, [r4, #0]
 8008112:	055a      	lsls	r2, r3, #21
 8008114:	d407      	bmi.n	8008126 <_printf_float+0x1c6>
 8008116:	6923      	ldr	r3, [r4, #16]
 8008118:	4642      	mov	r2, r8
 800811a:	4631      	mov	r1, r6
 800811c:	4628      	mov	r0, r5
 800811e:	47b8      	blx	r7
 8008120:	3001      	adds	r0, #1
 8008122:	d12a      	bne.n	800817a <_printf_float+0x21a>
 8008124:	e76a      	b.n	8007ffc <_printf_float+0x9c>
 8008126:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 800812a:	f240 80e2 	bls.w	80082f2 <_printf_float+0x392>
 800812e:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008132:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800813a:	d133      	bne.n	80081a4 <_printf_float+0x244>
 800813c:	4a38      	ldr	r2, [pc, #224]	; (8008220 <_printf_float+0x2c0>)
 800813e:	2301      	movs	r3, #1
 8008140:	4631      	mov	r1, r6
 8008142:	4628      	mov	r0, r5
 8008144:	47b8      	blx	r7
 8008146:	3001      	adds	r0, #1
 8008148:	f43f af58 	beq.w	8007ffc <_printf_float+0x9c>
 800814c:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008150:	429a      	cmp	r2, r3
 8008152:	db02      	blt.n	800815a <_printf_float+0x1fa>
 8008154:	6823      	ldr	r3, [r4, #0]
 8008156:	07d8      	lsls	r0, r3, #31
 8008158:	d50f      	bpl.n	800817a <_printf_float+0x21a>
 800815a:	4653      	mov	r3, sl
 800815c:	465a      	mov	r2, fp
 800815e:	4631      	mov	r1, r6
 8008160:	4628      	mov	r0, r5
 8008162:	47b8      	blx	r7
 8008164:	3001      	adds	r0, #1
 8008166:	f43f af49 	beq.w	8007ffc <_printf_float+0x9c>
 800816a:	f04f 0800 	mov.w	r8, #0
 800816e:	f104 091a 	add.w	r9, r4, #26
 8008172:	9b08      	ldr	r3, [sp, #32]
 8008174:	3b01      	subs	r3, #1
 8008176:	4543      	cmp	r3, r8
 8008178:	dc09      	bgt.n	800818e <_printf_float+0x22e>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	079b      	lsls	r3, r3, #30
 800817e:	f100 8108 	bmi.w	8008392 <_printf_float+0x432>
 8008182:	68e0      	ldr	r0, [r4, #12]
 8008184:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008186:	4298      	cmp	r0, r3
 8008188:	bfb8      	it	lt
 800818a:	4618      	movlt	r0, r3
 800818c:	e738      	b.n	8008000 <_printf_float+0xa0>
 800818e:	2301      	movs	r3, #1
 8008190:	464a      	mov	r2, r9
 8008192:	4631      	mov	r1, r6
 8008194:	4628      	mov	r0, r5
 8008196:	47b8      	blx	r7
 8008198:	3001      	adds	r0, #1
 800819a:	f43f af2f 	beq.w	8007ffc <_printf_float+0x9c>
 800819e:	f108 0801 	add.w	r8, r8, #1
 80081a2:	e7e6      	b.n	8008172 <_printf_float+0x212>
 80081a4:	9b07      	ldr	r3, [sp, #28]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	dc3c      	bgt.n	8008224 <_printf_float+0x2c4>
 80081aa:	4a1d      	ldr	r2, [pc, #116]	; (8008220 <_printf_float+0x2c0>)
 80081ac:	2301      	movs	r3, #1
 80081ae:	4631      	mov	r1, r6
 80081b0:	4628      	mov	r0, r5
 80081b2:	47b8      	blx	r7
 80081b4:	3001      	adds	r0, #1
 80081b6:	f43f af21 	beq.w	8007ffc <_printf_float+0x9c>
 80081ba:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80081be:	4313      	orrs	r3, r2
 80081c0:	d102      	bne.n	80081c8 <_printf_float+0x268>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	07d9      	lsls	r1, r3, #31
 80081c6:	d5d8      	bpl.n	800817a <_printf_float+0x21a>
 80081c8:	4653      	mov	r3, sl
 80081ca:	465a      	mov	r2, fp
 80081cc:	4631      	mov	r1, r6
 80081ce:	4628      	mov	r0, r5
 80081d0:	47b8      	blx	r7
 80081d2:	3001      	adds	r0, #1
 80081d4:	f43f af12 	beq.w	8007ffc <_printf_float+0x9c>
 80081d8:	f04f 0900 	mov.w	r9, #0
 80081dc:	f104 0a1a 	add.w	sl, r4, #26
 80081e0:	9b07      	ldr	r3, [sp, #28]
 80081e2:	425b      	negs	r3, r3
 80081e4:	454b      	cmp	r3, r9
 80081e6:	dc01      	bgt.n	80081ec <_printf_float+0x28c>
 80081e8:	9b08      	ldr	r3, [sp, #32]
 80081ea:	e795      	b.n	8008118 <_printf_float+0x1b8>
 80081ec:	2301      	movs	r3, #1
 80081ee:	4652      	mov	r2, sl
 80081f0:	4631      	mov	r1, r6
 80081f2:	4628      	mov	r0, r5
 80081f4:	47b8      	blx	r7
 80081f6:	3001      	adds	r0, #1
 80081f8:	f43f af00 	beq.w	8007ffc <_printf_float+0x9c>
 80081fc:	f109 0901 	add.w	r9, r9, #1
 8008200:	e7ee      	b.n	80081e0 <_printf_float+0x280>
 8008202:	bf00      	nop
 8008204:	f3af 8000 	nop.w
 8008208:	ffffffff 	.word	0xffffffff
 800820c:	7fefffff 	.word	0x7fefffff
 8008210:	0801022c 	.word	0x0801022c
 8008214:	08010230 	.word	0x08010230
 8008218:	08010238 	.word	0x08010238
 800821c:	08010234 	.word	0x08010234
 8008220:	0801023c 	.word	0x0801023c
 8008224:	9a08      	ldr	r2, [sp, #32]
 8008226:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008228:	429a      	cmp	r2, r3
 800822a:	bfa8      	it	ge
 800822c:	461a      	movge	r2, r3
 800822e:	2a00      	cmp	r2, #0
 8008230:	4691      	mov	r9, r2
 8008232:	dc38      	bgt.n	80082a6 <_printf_float+0x346>
 8008234:	2300      	movs	r3, #0
 8008236:	9305      	str	r3, [sp, #20]
 8008238:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800823c:	f104 021a 	add.w	r2, r4, #26
 8008240:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008242:	9905      	ldr	r1, [sp, #20]
 8008244:	9304      	str	r3, [sp, #16]
 8008246:	eba3 0309 	sub.w	r3, r3, r9
 800824a:	428b      	cmp	r3, r1
 800824c:	dc33      	bgt.n	80082b6 <_printf_float+0x356>
 800824e:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008252:	429a      	cmp	r2, r3
 8008254:	db3c      	blt.n	80082d0 <_printf_float+0x370>
 8008256:	6823      	ldr	r3, [r4, #0]
 8008258:	07da      	lsls	r2, r3, #31
 800825a:	d439      	bmi.n	80082d0 <_printf_float+0x370>
 800825c:	9b08      	ldr	r3, [sp, #32]
 800825e:	9a04      	ldr	r2, [sp, #16]
 8008260:	9907      	ldr	r1, [sp, #28]
 8008262:	1a9a      	subs	r2, r3, r2
 8008264:	eba3 0901 	sub.w	r9, r3, r1
 8008268:	4591      	cmp	r9, r2
 800826a:	bfa8      	it	ge
 800826c:	4691      	movge	r9, r2
 800826e:	f1b9 0f00 	cmp.w	r9, #0
 8008272:	dc35      	bgt.n	80082e0 <_printf_float+0x380>
 8008274:	f04f 0800 	mov.w	r8, #0
 8008278:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800827c:	f104 0a1a 	add.w	sl, r4, #26
 8008280:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8008284:	1a9b      	subs	r3, r3, r2
 8008286:	eba3 0309 	sub.w	r3, r3, r9
 800828a:	4543      	cmp	r3, r8
 800828c:	f77f af75 	ble.w	800817a <_printf_float+0x21a>
 8008290:	2301      	movs	r3, #1
 8008292:	4652      	mov	r2, sl
 8008294:	4631      	mov	r1, r6
 8008296:	4628      	mov	r0, r5
 8008298:	47b8      	blx	r7
 800829a:	3001      	adds	r0, #1
 800829c:	f43f aeae 	beq.w	8007ffc <_printf_float+0x9c>
 80082a0:	f108 0801 	add.w	r8, r8, #1
 80082a4:	e7ec      	b.n	8008280 <_printf_float+0x320>
 80082a6:	4613      	mov	r3, r2
 80082a8:	4631      	mov	r1, r6
 80082aa:	4642      	mov	r2, r8
 80082ac:	4628      	mov	r0, r5
 80082ae:	47b8      	blx	r7
 80082b0:	3001      	adds	r0, #1
 80082b2:	d1bf      	bne.n	8008234 <_printf_float+0x2d4>
 80082b4:	e6a2      	b.n	8007ffc <_printf_float+0x9c>
 80082b6:	2301      	movs	r3, #1
 80082b8:	4631      	mov	r1, r6
 80082ba:	4628      	mov	r0, r5
 80082bc:	9204      	str	r2, [sp, #16]
 80082be:	47b8      	blx	r7
 80082c0:	3001      	adds	r0, #1
 80082c2:	f43f ae9b 	beq.w	8007ffc <_printf_float+0x9c>
 80082c6:	9b05      	ldr	r3, [sp, #20]
 80082c8:	9a04      	ldr	r2, [sp, #16]
 80082ca:	3301      	adds	r3, #1
 80082cc:	9305      	str	r3, [sp, #20]
 80082ce:	e7b7      	b.n	8008240 <_printf_float+0x2e0>
 80082d0:	4653      	mov	r3, sl
 80082d2:	465a      	mov	r2, fp
 80082d4:	4631      	mov	r1, r6
 80082d6:	4628      	mov	r0, r5
 80082d8:	47b8      	blx	r7
 80082da:	3001      	adds	r0, #1
 80082dc:	d1be      	bne.n	800825c <_printf_float+0x2fc>
 80082de:	e68d      	b.n	8007ffc <_printf_float+0x9c>
 80082e0:	9a04      	ldr	r2, [sp, #16]
 80082e2:	464b      	mov	r3, r9
 80082e4:	4442      	add	r2, r8
 80082e6:	4631      	mov	r1, r6
 80082e8:	4628      	mov	r0, r5
 80082ea:	47b8      	blx	r7
 80082ec:	3001      	adds	r0, #1
 80082ee:	d1c1      	bne.n	8008274 <_printf_float+0x314>
 80082f0:	e684      	b.n	8007ffc <_printf_float+0x9c>
 80082f2:	9a08      	ldr	r2, [sp, #32]
 80082f4:	2a01      	cmp	r2, #1
 80082f6:	dc01      	bgt.n	80082fc <_printf_float+0x39c>
 80082f8:	07db      	lsls	r3, r3, #31
 80082fa:	d537      	bpl.n	800836c <_printf_float+0x40c>
 80082fc:	2301      	movs	r3, #1
 80082fe:	4642      	mov	r2, r8
 8008300:	4631      	mov	r1, r6
 8008302:	4628      	mov	r0, r5
 8008304:	47b8      	blx	r7
 8008306:	3001      	adds	r0, #1
 8008308:	f43f ae78 	beq.w	8007ffc <_printf_float+0x9c>
 800830c:	4653      	mov	r3, sl
 800830e:	465a      	mov	r2, fp
 8008310:	4631      	mov	r1, r6
 8008312:	4628      	mov	r0, r5
 8008314:	47b8      	blx	r7
 8008316:	3001      	adds	r0, #1
 8008318:	f43f ae70 	beq.w	8007ffc <_printf_float+0x9c>
 800831c:	ed94 7b12 	vldr	d7, [r4, #72]	; 0x48
 8008320:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008324:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008328:	d01b      	beq.n	8008362 <_printf_float+0x402>
 800832a:	9b08      	ldr	r3, [sp, #32]
 800832c:	f108 0201 	add.w	r2, r8, #1
 8008330:	3b01      	subs	r3, #1
 8008332:	4631      	mov	r1, r6
 8008334:	4628      	mov	r0, r5
 8008336:	47b8      	blx	r7
 8008338:	3001      	adds	r0, #1
 800833a:	d10e      	bne.n	800835a <_printf_float+0x3fa>
 800833c:	e65e      	b.n	8007ffc <_printf_float+0x9c>
 800833e:	2301      	movs	r3, #1
 8008340:	464a      	mov	r2, r9
 8008342:	4631      	mov	r1, r6
 8008344:	4628      	mov	r0, r5
 8008346:	47b8      	blx	r7
 8008348:	3001      	adds	r0, #1
 800834a:	f43f ae57 	beq.w	8007ffc <_printf_float+0x9c>
 800834e:	f108 0801 	add.w	r8, r8, #1
 8008352:	9b08      	ldr	r3, [sp, #32]
 8008354:	3b01      	subs	r3, #1
 8008356:	4543      	cmp	r3, r8
 8008358:	dcf1      	bgt.n	800833e <_printf_float+0x3de>
 800835a:	9b04      	ldr	r3, [sp, #16]
 800835c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8008360:	e6db      	b.n	800811a <_printf_float+0x1ba>
 8008362:	f04f 0800 	mov.w	r8, #0
 8008366:	f104 091a 	add.w	r9, r4, #26
 800836a:	e7f2      	b.n	8008352 <_printf_float+0x3f2>
 800836c:	2301      	movs	r3, #1
 800836e:	4642      	mov	r2, r8
 8008370:	e7df      	b.n	8008332 <_printf_float+0x3d2>
 8008372:	2301      	movs	r3, #1
 8008374:	464a      	mov	r2, r9
 8008376:	4631      	mov	r1, r6
 8008378:	4628      	mov	r0, r5
 800837a:	47b8      	blx	r7
 800837c:	3001      	adds	r0, #1
 800837e:	f43f ae3d 	beq.w	8007ffc <_printf_float+0x9c>
 8008382:	f108 0801 	add.w	r8, r8, #1
 8008386:	68e3      	ldr	r3, [r4, #12]
 8008388:	9909      	ldr	r1, [sp, #36]	; 0x24
 800838a:	1a5b      	subs	r3, r3, r1
 800838c:	4543      	cmp	r3, r8
 800838e:	dcf0      	bgt.n	8008372 <_printf_float+0x412>
 8008390:	e6f7      	b.n	8008182 <_printf_float+0x222>
 8008392:	f04f 0800 	mov.w	r8, #0
 8008396:	f104 0919 	add.w	r9, r4, #25
 800839a:	e7f4      	b.n	8008386 <_printf_float+0x426>

0800839c <_printf_common>:
 800839c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083a0:	4616      	mov	r6, r2
 80083a2:	4699      	mov	r9, r3
 80083a4:	688a      	ldr	r2, [r1, #8]
 80083a6:	690b      	ldr	r3, [r1, #16]
 80083a8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083ac:	4293      	cmp	r3, r2
 80083ae:	bfb8      	it	lt
 80083b0:	4613      	movlt	r3, r2
 80083b2:	6033      	str	r3, [r6, #0]
 80083b4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80083b8:	4607      	mov	r7, r0
 80083ba:	460c      	mov	r4, r1
 80083bc:	b10a      	cbz	r2, 80083c2 <_printf_common+0x26>
 80083be:	3301      	adds	r3, #1
 80083c0:	6033      	str	r3, [r6, #0]
 80083c2:	6823      	ldr	r3, [r4, #0]
 80083c4:	0699      	lsls	r1, r3, #26
 80083c6:	bf42      	ittt	mi
 80083c8:	6833      	ldrmi	r3, [r6, #0]
 80083ca:	3302      	addmi	r3, #2
 80083cc:	6033      	strmi	r3, [r6, #0]
 80083ce:	6825      	ldr	r5, [r4, #0]
 80083d0:	f015 0506 	ands.w	r5, r5, #6
 80083d4:	d106      	bne.n	80083e4 <_printf_common+0x48>
 80083d6:	f104 0a19 	add.w	sl, r4, #25
 80083da:	68e3      	ldr	r3, [r4, #12]
 80083dc:	6832      	ldr	r2, [r6, #0]
 80083de:	1a9b      	subs	r3, r3, r2
 80083e0:	42ab      	cmp	r3, r5
 80083e2:	dc26      	bgt.n	8008432 <_printf_common+0x96>
 80083e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80083e8:	1e13      	subs	r3, r2, #0
 80083ea:	6822      	ldr	r2, [r4, #0]
 80083ec:	bf18      	it	ne
 80083ee:	2301      	movne	r3, #1
 80083f0:	0692      	lsls	r2, r2, #26
 80083f2:	d42b      	bmi.n	800844c <_printf_common+0xb0>
 80083f4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80083f8:	4649      	mov	r1, r9
 80083fa:	4638      	mov	r0, r7
 80083fc:	47c0      	blx	r8
 80083fe:	3001      	adds	r0, #1
 8008400:	d01e      	beq.n	8008440 <_printf_common+0xa4>
 8008402:	6823      	ldr	r3, [r4, #0]
 8008404:	68e5      	ldr	r5, [r4, #12]
 8008406:	6832      	ldr	r2, [r6, #0]
 8008408:	f003 0306 	and.w	r3, r3, #6
 800840c:	2b04      	cmp	r3, #4
 800840e:	bf08      	it	eq
 8008410:	1aad      	subeq	r5, r5, r2
 8008412:	68a3      	ldr	r3, [r4, #8]
 8008414:	6922      	ldr	r2, [r4, #16]
 8008416:	bf0c      	ite	eq
 8008418:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800841c:	2500      	movne	r5, #0
 800841e:	4293      	cmp	r3, r2
 8008420:	bfc4      	itt	gt
 8008422:	1a9b      	subgt	r3, r3, r2
 8008424:	18ed      	addgt	r5, r5, r3
 8008426:	2600      	movs	r6, #0
 8008428:	341a      	adds	r4, #26
 800842a:	42b5      	cmp	r5, r6
 800842c:	d11a      	bne.n	8008464 <_printf_common+0xc8>
 800842e:	2000      	movs	r0, #0
 8008430:	e008      	b.n	8008444 <_printf_common+0xa8>
 8008432:	2301      	movs	r3, #1
 8008434:	4652      	mov	r2, sl
 8008436:	4649      	mov	r1, r9
 8008438:	4638      	mov	r0, r7
 800843a:	47c0      	blx	r8
 800843c:	3001      	adds	r0, #1
 800843e:	d103      	bne.n	8008448 <_printf_common+0xac>
 8008440:	f04f 30ff 	mov.w	r0, #4294967295
 8008444:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008448:	3501      	adds	r5, #1
 800844a:	e7c6      	b.n	80083da <_printf_common+0x3e>
 800844c:	18e1      	adds	r1, r4, r3
 800844e:	1c5a      	adds	r2, r3, #1
 8008450:	2030      	movs	r0, #48	; 0x30
 8008452:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008456:	4422      	add	r2, r4
 8008458:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800845c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008460:	3302      	adds	r3, #2
 8008462:	e7c7      	b.n	80083f4 <_printf_common+0x58>
 8008464:	2301      	movs	r3, #1
 8008466:	4622      	mov	r2, r4
 8008468:	4649      	mov	r1, r9
 800846a:	4638      	mov	r0, r7
 800846c:	47c0      	blx	r8
 800846e:	3001      	adds	r0, #1
 8008470:	d0e6      	beq.n	8008440 <_printf_common+0xa4>
 8008472:	3601      	adds	r6, #1
 8008474:	e7d9      	b.n	800842a <_printf_common+0x8e>
	...

08008478 <_printf_i>:
 8008478:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800847c:	7e0f      	ldrb	r7, [r1, #24]
 800847e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8008480:	2f78      	cmp	r7, #120	; 0x78
 8008482:	4691      	mov	r9, r2
 8008484:	4680      	mov	r8, r0
 8008486:	460c      	mov	r4, r1
 8008488:	469a      	mov	sl, r3
 800848a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800848e:	d807      	bhi.n	80084a0 <_printf_i+0x28>
 8008490:	2f62      	cmp	r7, #98	; 0x62
 8008492:	d80a      	bhi.n	80084aa <_printf_i+0x32>
 8008494:	2f00      	cmp	r7, #0
 8008496:	f000 80d8 	beq.w	800864a <_printf_i+0x1d2>
 800849a:	2f58      	cmp	r7, #88	; 0x58
 800849c:	f000 80a3 	beq.w	80085e6 <_printf_i+0x16e>
 80084a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084a4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084a8:	e03a      	b.n	8008520 <_printf_i+0xa8>
 80084aa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084ae:	2b15      	cmp	r3, #21
 80084b0:	d8f6      	bhi.n	80084a0 <_printf_i+0x28>
 80084b2:	a101      	add	r1, pc, #4	; (adr r1, 80084b8 <_printf_i+0x40>)
 80084b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80084b8:	08008511 	.word	0x08008511
 80084bc:	08008525 	.word	0x08008525
 80084c0:	080084a1 	.word	0x080084a1
 80084c4:	080084a1 	.word	0x080084a1
 80084c8:	080084a1 	.word	0x080084a1
 80084cc:	080084a1 	.word	0x080084a1
 80084d0:	08008525 	.word	0x08008525
 80084d4:	080084a1 	.word	0x080084a1
 80084d8:	080084a1 	.word	0x080084a1
 80084dc:	080084a1 	.word	0x080084a1
 80084e0:	080084a1 	.word	0x080084a1
 80084e4:	08008631 	.word	0x08008631
 80084e8:	08008555 	.word	0x08008555
 80084ec:	08008613 	.word	0x08008613
 80084f0:	080084a1 	.word	0x080084a1
 80084f4:	080084a1 	.word	0x080084a1
 80084f8:	08008653 	.word	0x08008653
 80084fc:	080084a1 	.word	0x080084a1
 8008500:	08008555 	.word	0x08008555
 8008504:	080084a1 	.word	0x080084a1
 8008508:	080084a1 	.word	0x080084a1
 800850c:	0800861b 	.word	0x0800861b
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	1d1a      	adds	r2, r3, #4
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	602a      	str	r2, [r5, #0]
 8008518:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800851c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008520:	2301      	movs	r3, #1
 8008522:	e0a3      	b.n	800866c <_printf_i+0x1f4>
 8008524:	6820      	ldr	r0, [r4, #0]
 8008526:	6829      	ldr	r1, [r5, #0]
 8008528:	0606      	lsls	r6, r0, #24
 800852a:	f101 0304 	add.w	r3, r1, #4
 800852e:	d50a      	bpl.n	8008546 <_printf_i+0xce>
 8008530:	680e      	ldr	r6, [r1, #0]
 8008532:	602b      	str	r3, [r5, #0]
 8008534:	2e00      	cmp	r6, #0
 8008536:	da03      	bge.n	8008540 <_printf_i+0xc8>
 8008538:	232d      	movs	r3, #45	; 0x2d
 800853a:	4276      	negs	r6, r6
 800853c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008540:	485e      	ldr	r0, [pc, #376]	; (80086bc <_printf_i+0x244>)
 8008542:	230a      	movs	r3, #10
 8008544:	e019      	b.n	800857a <_printf_i+0x102>
 8008546:	680e      	ldr	r6, [r1, #0]
 8008548:	602b      	str	r3, [r5, #0]
 800854a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800854e:	bf18      	it	ne
 8008550:	b236      	sxthne	r6, r6
 8008552:	e7ef      	b.n	8008534 <_printf_i+0xbc>
 8008554:	682b      	ldr	r3, [r5, #0]
 8008556:	6820      	ldr	r0, [r4, #0]
 8008558:	1d19      	adds	r1, r3, #4
 800855a:	6029      	str	r1, [r5, #0]
 800855c:	0601      	lsls	r1, r0, #24
 800855e:	d501      	bpl.n	8008564 <_printf_i+0xec>
 8008560:	681e      	ldr	r6, [r3, #0]
 8008562:	e002      	b.n	800856a <_printf_i+0xf2>
 8008564:	0646      	lsls	r6, r0, #25
 8008566:	d5fb      	bpl.n	8008560 <_printf_i+0xe8>
 8008568:	881e      	ldrh	r6, [r3, #0]
 800856a:	4854      	ldr	r0, [pc, #336]	; (80086bc <_printf_i+0x244>)
 800856c:	2f6f      	cmp	r7, #111	; 0x6f
 800856e:	bf0c      	ite	eq
 8008570:	2308      	moveq	r3, #8
 8008572:	230a      	movne	r3, #10
 8008574:	2100      	movs	r1, #0
 8008576:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800857a:	6865      	ldr	r5, [r4, #4]
 800857c:	60a5      	str	r5, [r4, #8]
 800857e:	2d00      	cmp	r5, #0
 8008580:	bfa2      	ittt	ge
 8008582:	6821      	ldrge	r1, [r4, #0]
 8008584:	f021 0104 	bicge.w	r1, r1, #4
 8008588:	6021      	strge	r1, [r4, #0]
 800858a:	b90e      	cbnz	r6, 8008590 <_printf_i+0x118>
 800858c:	2d00      	cmp	r5, #0
 800858e:	d04d      	beq.n	800862c <_printf_i+0x1b4>
 8008590:	4615      	mov	r5, r2
 8008592:	fbb6 f1f3 	udiv	r1, r6, r3
 8008596:	fb03 6711 	mls	r7, r3, r1, r6
 800859a:	5dc7      	ldrb	r7, [r0, r7]
 800859c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085a0:	4637      	mov	r7, r6
 80085a2:	42bb      	cmp	r3, r7
 80085a4:	460e      	mov	r6, r1
 80085a6:	d9f4      	bls.n	8008592 <_printf_i+0x11a>
 80085a8:	2b08      	cmp	r3, #8
 80085aa:	d10b      	bne.n	80085c4 <_printf_i+0x14c>
 80085ac:	6823      	ldr	r3, [r4, #0]
 80085ae:	07de      	lsls	r6, r3, #31
 80085b0:	d508      	bpl.n	80085c4 <_printf_i+0x14c>
 80085b2:	6923      	ldr	r3, [r4, #16]
 80085b4:	6861      	ldr	r1, [r4, #4]
 80085b6:	4299      	cmp	r1, r3
 80085b8:	bfde      	ittt	le
 80085ba:	2330      	movle	r3, #48	; 0x30
 80085bc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80085c0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80085c4:	1b52      	subs	r2, r2, r5
 80085c6:	6122      	str	r2, [r4, #16]
 80085c8:	f8cd a000 	str.w	sl, [sp]
 80085cc:	464b      	mov	r3, r9
 80085ce:	aa03      	add	r2, sp, #12
 80085d0:	4621      	mov	r1, r4
 80085d2:	4640      	mov	r0, r8
 80085d4:	f7ff fee2 	bl	800839c <_printf_common>
 80085d8:	3001      	adds	r0, #1
 80085da:	d14c      	bne.n	8008676 <_printf_i+0x1fe>
 80085dc:	f04f 30ff 	mov.w	r0, #4294967295
 80085e0:	b004      	add	sp, #16
 80085e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085e6:	4835      	ldr	r0, [pc, #212]	; (80086bc <_printf_i+0x244>)
 80085e8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80085ec:	6829      	ldr	r1, [r5, #0]
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f851 6b04 	ldr.w	r6, [r1], #4
 80085f4:	6029      	str	r1, [r5, #0]
 80085f6:	061d      	lsls	r5, r3, #24
 80085f8:	d514      	bpl.n	8008624 <_printf_i+0x1ac>
 80085fa:	07df      	lsls	r7, r3, #31
 80085fc:	bf44      	itt	mi
 80085fe:	f043 0320 	orrmi.w	r3, r3, #32
 8008602:	6023      	strmi	r3, [r4, #0]
 8008604:	b91e      	cbnz	r6, 800860e <_printf_i+0x196>
 8008606:	6823      	ldr	r3, [r4, #0]
 8008608:	f023 0320 	bic.w	r3, r3, #32
 800860c:	6023      	str	r3, [r4, #0]
 800860e:	2310      	movs	r3, #16
 8008610:	e7b0      	b.n	8008574 <_printf_i+0xfc>
 8008612:	6823      	ldr	r3, [r4, #0]
 8008614:	f043 0320 	orr.w	r3, r3, #32
 8008618:	6023      	str	r3, [r4, #0]
 800861a:	2378      	movs	r3, #120	; 0x78
 800861c:	4828      	ldr	r0, [pc, #160]	; (80086c0 <_printf_i+0x248>)
 800861e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008622:	e7e3      	b.n	80085ec <_printf_i+0x174>
 8008624:	0659      	lsls	r1, r3, #25
 8008626:	bf48      	it	mi
 8008628:	b2b6      	uxthmi	r6, r6
 800862a:	e7e6      	b.n	80085fa <_printf_i+0x182>
 800862c:	4615      	mov	r5, r2
 800862e:	e7bb      	b.n	80085a8 <_printf_i+0x130>
 8008630:	682b      	ldr	r3, [r5, #0]
 8008632:	6826      	ldr	r6, [r4, #0]
 8008634:	6961      	ldr	r1, [r4, #20]
 8008636:	1d18      	adds	r0, r3, #4
 8008638:	6028      	str	r0, [r5, #0]
 800863a:	0635      	lsls	r5, r6, #24
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	d501      	bpl.n	8008644 <_printf_i+0x1cc>
 8008640:	6019      	str	r1, [r3, #0]
 8008642:	e002      	b.n	800864a <_printf_i+0x1d2>
 8008644:	0670      	lsls	r0, r6, #25
 8008646:	d5fb      	bpl.n	8008640 <_printf_i+0x1c8>
 8008648:	8019      	strh	r1, [r3, #0]
 800864a:	2300      	movs	r3, #0
 800864c:	6123      	str	r3, [r4, #16]
 800864e:	4615      	mov	r5, r2
 8008650:	e7ba      	b.n	80085c8 <_printf_i+0x150>
 8008652:	682b      	ldr	r3, [r5, #0]
 8008654:	1d1a      	adds	r2, r3, #4
 8008656:	602a      	str	r2, [r5, #0]
 8008658:	681d      	ldr	r5, [r3, #0]
 800865a:	6862      	ldr	r2, [r4, #4]
 800865c:	2100      	movs	r1, #0
 800865e:	4628      	mov	r0, r5
 8008660:	f7f7 fdf6 	bl	8000250 <memchr>
 8008664:	b108      	cbz	r0, 800866a <_printf_i+0x1f2>
 8008666:	1b40      	subs	r0, r0, r5
 8008668:	6060      	str	r0, [r4, #4]
 800866a:	6863      	ldr	r3, [r4, #4]
 800866c:	6123      	str	r3, [r4, #16]
 800866e:	2300      	movs	r3, #0
 8008670:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008674:	e7a8      	b.n	80085c8 <_printf_i+0x150>
 8008676:	6923      	ldr	r3, [r4, #16]
 8008678:	462a      	mov	r2, r5
 800867a:	4649      	mov	r1, r9
 800867c:	4640      	mov	r0, r8
 800867e:	47d0      	blx	sl
 8008680:	3001      	adds	r0, #1
 8008682:	d0ab      	beq.n	80085dc <_printf_i+0x164>
 8008684:	6823      	ldr	r3, [r4, #0]
 8008686:	079b      	lsls	r3, r3, #30
 8008688:	d413      	bmi.n	80086b2 <_printf_i+0x23a>
 800868a:	68e0      	ldr	r0, [r4, #12]
 800868c:	9b03      	ldr	r3, [sp, #12]
 800868e:	4298      	cmp	r0, r3
 8008690:	bfb8      	it	lt
 8008692:	4618      	movlt	r0, r3
 8008694:	e7a4      	b.n	80085e0 <_printf_i+0x168>
 8008696:	2301      	movs	r3, #1
 8008698:	4632      	mov	r2, r6
 800869a:	4649      	mov	r1, r9
 800869c:	4640      	mov	r0, r8
 800869e:	47d0      	blx	sl
 80086a0:	3001      	adds	r0, #1
 80086a2:	d09b      	beq.n	80085dc <_printf_i+0x164>
 80086a4:	3501      	adds	r5, #1
 80086a6:	68e3      	ldr	r3, [r4, #12]
 80086a8:	9903      	ldr	r1, [sp, #12]
 80086aa:	1a5b      	subs	r3, r3, r1
 80086ac:	42ab      	cmp	r3, r5
 80086ae:	dcf2      	bgt.n	8008696 <_printf_i+0x21e>
 80086b0:	e7eb      	b.n	800868a <_printf_i+0x212>
 80086b2:	2500      	movs	r5, #0
 80086b4:	f104 0619 	add.w	r6, r4, #25
 80086b8:	e7f5      	b.n	80086a6 <_printf_i+0x22e>
 80086ba:	bf00      	nop
 80086bc:	0801023e 	.word	0x0801023e
 80086c0:	0801024f 	.word	0x0801024f

080086c4 <siprintf>:
 80086c4:	b40e      	push	{r1, r2, r3}
 80086c6:	b500      	push	{lr}
 80086c8:	b09c      	sub	sp, #112	; 0x70
 80086ca:	ab1d      	add	r3, sp, #116	; 0x74
 80086cc:	9002      	str	r0, [sp, #8]
 80086ce:	9006      	str	r0, [sp, #24]
 80086d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086d4:	4809      	ldr	r0, [pc, #36]	; (80086fc <siprintf+0x38>)
 80086d6:	9107      	str	r1, [sp, #28]
 80086d8:	9104      	str	r1, [sp, #16]
 80086da:	4909      	ldr	r1, [pc, #36]	; (8008700 <siprintf+0x3c>)
 80086dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80086e0:	9105      	str	r1, [sp, #20]
 80086e2:	6800      	ldr	r0, [r0, #0]
 80086e4:	9301      	str	r3, [sp, #4]
 80086e6:	a902      	add	r1, sp, #8
 80086e8:	f001 faf8 	bl	8009cdc <_svfiprintf_r>
 80086ec:	9b02      	ldr	r3, [sp, #8]
 80086ee:	2200      	movs	r2, #0
 80086f0:	701a      	strb	r2, [r3, #0]
 80086f2:	b01c      	add	sp, #112	; 0x70
 80086f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80086f8:	b003      	add	sp, #12
 80086fa:	4770      	bx	lr
 80086fc:	20000010 	.word	0x20000010
 8008700:	ffff0208 	.word	0xffff0208

08008704 <quorem>:
 8008704:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008708:	6903      	ldr	r3, [r0, #16]
 800870a:	690c      	ldr	r4, [r1, #16]
 800870c:	42a3      	cmp	r3, r4
 800870e:	4607      	mov	r7, r0
 8008710:	f2c0 8081 	blt.w	8008816 <quorem+0x112>
 8008714:	3c01      	subs	r4, #1
 8008716:	f101 0814 	add.w	r8, r1, #20
 800871a:	f100 0514 	add.w	r5, r0, #20
 800871e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008722:	9301      	str	r3, [sp, #4]
 8008724:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008728:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800872c:	3301      	adds	r3, #1
 800872e:	429a      	cmp	r2, r3
 8008730:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008734:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008738:	fbb2 f6f3 	udiv	r6, r2, r3
 800873c:	d331      	bcc.n	80087a2 <quorem+0x9e>
 800873e:	f04f 0e00 	mov.w	lr, #0
 8008742:	4640      	mov	r0, r8
 8008744:	46ac      	mov	ip, r5
 8008746:	46f2      	mov	sl, lr
 8008748:	f850 2b04 	ldr.w	r2, [r0], #4
 800874c:	b293      	uxth	r3, r2
 800874e:	fb06 e303 	mla	r3, r6, r3, lr
 8008752:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008756:	b29b      	uxth	r3, r3
 8008758:	ebaa 0303 	sub.w	r3, sl, r3
 800875c:	f8dc a000 	ldr.w	sl, [ip]
 8008760:	0c12      	lsrs	r2, r2, #16
 8008762:	fa13 f38a 	uxtah	r3, r3, sl
 8008766:	fb06 e202 	mla	r2, r6, r2, lr
 800876a:	9300      	str	r3, [sp, #0]
 800876c:	9b00      	ldr	r3, [sp, #0]
 800876e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008772:	b292      	uxth	r2, r2
 8008774:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008778:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800877c:	f8bd 3000 	ldrh.w	r3, [sp]
 8008780:	4581      	cmp	r9, r0
 8008782:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008786:	f84c 3b04 	str.w	r3, [ip], #4
 800878a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800878e:	d2db      	bcs.n	8008748 <quorem+0x44>
 8008790:	f855 300b 	ldr.w	r3, [r5, fp]
 8008794:	b92b      	cbnz	r3, 80087a2 <quorem+0x9e>
 8008796:	9b01      	ldr	r3, [sp, #4]
 8008798:	3b04      	subs	r3, #4
 800879a:	429d      	cmp	r5, r3
 800879c:	461a      	mov	r2, r3
 800879e:	d32e      	bcc.n	80087fe <quorem+0xfa>
 80087a0:	613c      	str	r4, [r7, #16]
 80087a2:	4638      	mov	r0, r7
 80087a4:	f001 f846 	bl	8009834 <__mcmp>
 80087a8:	2800      	cmp	r0, #0
 80087aa:	db24      	blt.n	80087f6 <quorem+0xf2>
 80087ac:	3601      	adds	r6, #1
 80087ae:	4628      	mov	r0, r5
 80087b0:	f04f 0c00 	mov.w	ip, #0
 80087b4:	f858 2b04 	ldr.w	r2, [r8], #4
 80087b8:	f8d0 e000 	ldr.w	lr, [r0]
 80087bc:	b293      	uxth	r3, r2
 80087be:	ebac 0303 	sub.w	r3, ip, r3
 80087c2:	0c12      	lsrs	r2, r2, #16
 80087c4:	fa13 f38e 	uxtah	r3, r3, lr
 80087c8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80087cc:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087d6:	45c1      	cmp	r9, r8
 80087d8:	f840 3b04 	str.w	r3, [r0], #4
 80087dc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80087e0:	d2e8      	bcs.n	80087b4 <quorem+0xb0>
 80087e2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80087e6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80087ea:	b922      	cbnz	r2, 80087f6 <quorem+0xf2>
 80087ec:	3b04      	subs	r3, #4
 80087ee:	429d      	cmp	r5, r3
 80087f0:	461a      	mov	r2, r3
 80087f2:	d30a      	bcc.n	800880a <quorem+0x106>
 80087f4:	613c      	str	r4, [r7, #16]
 80087f6:	4630      	mov	r0, r6
 80087f8:	b003      	add	sp, #12
 80087fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087fe:	6812      	ldr	r2, [r2, #0]
 8008800:	3b04      	subs	r3, #4
 8008802:	2a00      	cmp	r2, #0
 8008804:	d1cc      	bne.n	80087a0 <quorem+0x9c>
 8008806:	3c01      	subs	r4, #1
 8008808:	e7c7      	b.n	800879a <quorem+0x96>
 800880a:	6812      	ldr	r2, [r2, #0]
 800880c:	3b04      	subs	r3, #4
 800880e:	2a00      	cmp	r2, #0
 8008810:	d1f0      	bne.n	80087f4 <quorem+0xf0>
 8008812:	3c01      	subs	r4, #1
 8008814:	e7eb      	b.n	80087ee <quorem+0xea>
 8008816:	2000      	movs	r0, #0
 8008818:	e7ee      	b.n	80087f8 <quorem+0xf4>
 800881a:	0000      	movs	r0, r0
 800881c:	0000      	movs	r0, r0
	...

08008820 <_dtoa_r>:
 8008820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008824:	ed2d 8b02 	vpush	{d8}
 8008828:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800882a:	b091      	sub	sp, #68	; 0x44
 800882c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8008830:	ec59 8b10 	vmov	r8, r9, d0
 8008834:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8008836:	9106      	str	r1, [sp, #24]
 8008838:	4606      	mov	r6, r0
 800883a:	9208      	str	r2, [sp, #32]
 800883c:	930c      	str	r3, [sp, #48]	; 0x30
 800883e:	b975      	cbnz	r5, 800885e <_dtoa_r+0x3e>
 8008840:	2010      	movs	r0, #16
 8008842:	f000 fd5f 	bl	8009304 <malloc>
 8008846:	4602      	mov	r2, r0
 8008848:	6270      	str	r0, [r6, #36]	; 0x24
 800884a:	b920      	cbnz	r0, 8008856 <_dtoa_r+0x36>
 800884c:	4baa      	ldr	r3, [pc, #680]	; (8008af8 <_dtoa_r+0x2d8>)
 800884e:	21ea      	movs	r1, #234	; 0xea
 8008850:	48aa      	ldr	r0, [pc, #680]	; (8008afc <_dtoa_r+0x2dc>)
 8008852:	f001 fb53 	bl	8009efc <__assert_func>
 8008856:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800885a:	6005      	str	r5, [r0, #0]
 800885c:	60c5      	str	r5, [r0, #12]
 800885e:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008860:	6819      	ldr	r1, [r3, #0]
 8008862:	b151      	cbz	r1, 800887a <_dtoa_r+0x5a>
 8008864:	685a      	ldr	r2, [r3, #4]
 8008866:	604a      	str	r2, [r1, #4]
 8008868:	2301      	movs	r3, #1
 800886a:	4093      	lsls	r3, r2
 800886c:	608b      	str	r3, [r1, #8]
 800886e:	4630      	mov	r0, r6
 8008870:	f000 fd9e 	bl	80093b0 <_Bfree>
 8008874:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8008876:	2200      	movs	r2, #0
 8008878:	601a      	str	r2, [r3, #0]
 800887a:	f1b9 0300 	subs.w	r3, r9, #0
 800887e:	bfbb      	ittet	lt
 8008880:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8008884:	9303      	strlt	r3, [sp, #12]
 8008886:	2300      	movge	r3, #0
 8008888:	2201      	movlt	r2, #1
 800888a:	bfac      	ite	ge
 800888c:	6023      	strge	r3, [r4, #0]
 800888e:	6022      	strlt	r2, [r4, #0]
 8008890:	4b9b      	ldr	r3, [pc, #620]	; (8008b00 <_dtoa_r+0x2e0>)
 8008892:	9c03      	ldr	r4, [sp, #12]
 8008894:	43a3      	bics	r3, r4
 8008896:	d11c      	bne.n	80088d2 <_dtoa_r+0xb2>
 8008898:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800889a:	f242 730f 	movw	r3, #9999	; 0x270f
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	f3c4 0313 	ubfx	r3, r4, #0, #20
 80088a4:	ea53 0308 	orrs.w	r3, r3, r8
 80088a8:	f000 84fd 	beq.w	80092a6 <_dtoa_r+0xa86>
 80088ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088ae:	b963      	cbnz	r3, 80088ca <_dtoa_r+0xaa>
 80088b0:	4b94      	ldr	r3, [pc, #592]	; (8008b04 <_dtoa_r+0x2e4>)
 80088b2:	e01f      	b.n	80088f4 <_dtoa_r+0xd4>
 80088b4:	4b94      	ldr	r3, [pc, #592]	; (8008b08 <_dtoa_r+0x2e8>)
 80088b6:	9301      	str	r3, [sp, #4]
 80088b8:	3308      	adds	r3, #8
 80088ba:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80088bc:	6013      	str	r3, [r2, #0]
 80088be:	9801      	ldr	r0, [sp, #4]
 80088c0:	b011      	add	sp, #68	; 0x44
 80088c2:	ecbd 8b02 	vpop	{d8}
 80088c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ca:	4b8e      	ldr	r3, [pc, #568]	; (8008b04 <_dtoa_r+0x2e4>)
 80088cc:	9301      	str	r3, [sp, #4]
 80088ce:	3303      	adds	r3, #3
 80088d0:	e7f3      	b.n	80088ba <_dtoa_r+0x9a>
 80088d2:	ed9d 8b02 	vldr	d8, [sp, #8]
 80088d6:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80088da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80088de:	d10b      	bne.n	80088f8 <_dtoa_r+0xd8>
 80088e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80088e2:	2301      	movs	r3, #1
 80088e4:	6013      	str	r3, [r2, #0]
 80088e6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	f000 84d9 	beq.w	80092a0 <_dtoa_r+0xa80>
 80088ee:	4887      	ldr	r0, [pc, #540]	; (8008b0c <_dtoa_r+0x2ec>)
 80088f0:	6018      	str	r0, [r3, #0]
 80088f2:	1e43      	subs	r3, r0, #1
 80088f4:	9301      	str	r3, [sp, #4]
 80088f6:	e7e2      	b.n	80088be <_dtoa_r+0x9e>
 80088f8:	a90f      	add	r1, sp, #60	; 0x3c
 80088fa:	aa0e      	add	r2, sp, #56	; 0x38
 80088fc:	4630      	mov	r0, r6
 80088fe:	eeb0 0b48 	vmov.f64	d0, d8
 8008902:	f001 f83d 	bl	8009980 <__d2b>
 8008906:	f3c4 510a 	ubfx	r1, r4, #20, #11
 800890a:	4605      	mov	r5, r0
 800890c:	980e      	ldr	r0, [sp, #56]	; 0x38
 800890e:	2900      	cmp	r1, #0
 8008910:	d046      	beq.n	80089a0 <_dtoa_r+0x180>
 8008912:	ee18 4a90 	vmov	r4, s17
 8008916:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800891a:	ec53 2b18 	vmov	r2, r3, d8
 800891e:	f044 537f 	orr.w	r3, r4, #1069547520	; 0x3fc00000
 8008922:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8008926:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800892a:	2400      	movs	r4, #0
 800892c:	ec43 2b16 	vmov	d6, r2, r3
 8008930:	eeb7 7b08 	vmov.f64	d7, #120	; 0x3fc00000  1.5
 8008934:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008ae0 <_dtoa_r+0x2c0>
 8008938:	ee36 7b47 	vsub.f64	d7, d6, d7
 800893c:	ed9f 6b6a 	vldr	d6, [pc, #424]	; 8008ae8 <_dtoa_r+0x2c8>
 8008940:	eea7 6b05 	vfma.f64	d6, d7, d5
 8008944:	ed9f 5b6a 	vldr	d5, [pc, #424]	; 8008af0 <_dtoa_r+0x2d0>
 8008948:	ee07 1a90 	vmov	s15, r1
 800894c:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 8008950:	eeb0 7b46 	vmov.f64	d7, d6
 8008954:	eea4 7b05 	vfma.f64	d7, d4, d5
 8008958:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 800895c:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8008960:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008964:	ee16 ba90 	vmov	fp, s13
 8008968:	940a      	str	r4, [sp, #40]	; 0x28
 800896a:	d508      	bpl.n	800897e <_dtoa_r+0x15e>
 800896c:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8008970:	eeb4 6b47 	vcmp.f64	d6, d7
 8008974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008978:	bf18      	it	ne
 800897a:	f10b 3bff 	addne.w	fp, fp, #4294967295
 800897e:	f1bb 0f16 	cmp.w	fp, #22
 8008982:	d82f      	bhi.n	80089e4 <_dtoa_r+0x1c4>
 8008984:	4b62      	ldr	r3, [pc, #392]	; (8008b10 <_dtoa_r+0x2f0>)
 8008986:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800898a:	ed93 7b00 	vldr	d7, [r3]
 800898e:	eeb4 8bc7 	vcmpe.f64	d8, d7
 8008992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008996:	d501      	bpl.n	800899c <_dtoa_r+0x17c>
 8008998:	f10b 3bff 	add.w	fp, fp, #4294967295
 800899c:	2300      	movs	r3, #0
 800899e:	e022      	b.n	80089e6 <_dtoa_r+0x1c6>
 80089a0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80089a2:	4401      	add	r1, r0
 80089a4:	f201 4332 	addw	r3, r1, #1074	; 0x432
 80089a8:	2b20      	cmp	r3, #32
 80089aa:	bfc1      	itttt	gt
 80089ac:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 80089b0:	fa04 f303 	lslgt.w	r3, r4, r3
 80089b4:	f201 4412 	addwgt	r4, r1, #1042	; 0x412
 80089b8:	fa28 f804 	lsrgt.w	r8, r8, r4
 80089bc:	bfd6      	itet	le
 80089be:	f1c3 0320 	rsble	r3, r3, #32
 80089c2:	ea43 0808 	orrgt.w	r8, r3, r8
 80089c6:	fa08 f803 	lslle.w	r8, r8, r3
 80089ca:	ee07 8a90 	vmov	s15, r8
 80089ce:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 80089d2:	3901      	subs	r1, #1
 80089d4:	ee17 4a90 	vmov	r4, s15
 80089d8:	ec53 2b17 	vmov	r2, r3, d7
 80089dc:	f1a4 73f8 	sub.w	r3, r4, #32505856	; 0x1f00000
 80089e0:	2401      	movs	r4, #1
 80089e2:	e7a3      	b.n	800892c <_dtoa_r+0x10c>
 80089e4:	2301      	movs	r3, #1
 80089e6:	930b      	str	r3, [sp, #44]	; 0x2c
 80089e8:	1a43      	subs	r3, r0, r1
 80089ea:	1e5a      	subs	r2, r3, #1
 80089ec:	bf45      	ittet	mi
 80089ee:	f1c3 0301 	rsbmi	r3, r3, #1
 80089f2:	9304      	strmi	r3, [sp, #16]
 80089f4:	2300      	movpl	r3, #0
 80089f6:	2300      	movmi	r3, #0
 80089f8:	9205      	str	r2, [sp, #20]
 80089fa:	bf54      	ite	pl
 80089fc:	9304      	strpl	r3, [sp, #16]
 80089fe:	9305      	strmi	r3, [sp, #20]
 8008a00:	f1bb 0f00 	cmp.w	fp, #0
 8008a04:	db18      	blt.n	8008a38 <_dtoa_r+0x218>
 8008a06:	9b05      	ldr	r3, [sp, #20]
 8008a08:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8008a0c:	445b      	add	r3, fp
 8008a0e:	9305      	str	r3, [sp, #20]
 8008a10:	2300      	movs	r3, #0
 8008a12:	9a06      	ldr	r2, [sp, #24]
 8008a14:	2a09      	cmp	r2, #9
 8008a16:	d849      	bhi.n	8008aac <_dtoa_r+0x28c>
 8008a18:	2a05      	cmp	r2, #5
 8008a1a:	bfc4      	itt	gt
 8008a1c:	3a04      	subgt	r2, #4
 8008a1e:	9206      	strgt	r2, [sp, #24]
 8008a20:	9a06      	ldr	r2, [sp, #24]
 8008a22:	f1a2 0202 	sub.w	r2, r2, #2
 8008a26:	bfcc      	ite	gt
 8008a28:	2400      	movgt	r4, #0
 8008a2a:	2401      	movle	r4, #1
 8008a2c:	2a03      	cmp	r2, #3
 8008a2e:	d848      	bhi.n	8008ac2 <_dtoa_r+0x2a2>
 8008a30:	e8df f002 	tbb	[pc, r2]
 8008a34:	3a2c2e0b 	.word	0x3a2c2e0b
 8008a38:	9b04      	ldr	r3, [sp, #16]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	eba3 030b 	sub.w	r3, r3, fp
 8008a40:	9304      	str	r3, [sp, #16]
 8008a42:	9209      	str	r2, [sp, #36]	; 0x24
 8008a44:	f1cb 0300 	rsb	r3, fp, #0
 8008a48:	e7e3      	b.n	8008a12 <_dtoa_r+0x1f2>
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	9207      	str	r2, [sp, #28]
 8008a4e:	9a08      	ldr	r2, [sp, #32]
 8008a50:	2a00      	cmp	r2, #0
 8008a52:	dc39      	bgt.n	8008ac8 <_dtoa_r+0x2a8>
 8008a54:	f04f 0a01 	mov.w	sl, #1
 8008a58:	46d1      	mov	r9, sl
 8008a5a:	4652      	mov	r2, sl
 8008a5c:	f8cd a020 	str.w	sl, [sp, #32]
 8008a60:	6a77      	ldr	r7, [r6, #36]	; 0x24
 8008a62:	2100      	movs	r1, #0
 8008a64:	6079      	str	r1, [r7, #4]
 8008a66:	2004      	movs	r0, #4
 8008a68:	f100 0c14 	add.w	ip, r0, #20
 8008a6c:	4594      	cmp	ip, r2
 8008a6e:	6879      	ldr	r1, [r7, #4]
 8008a70:	d92f      	bls.n	8008ad2 <_dtoa_r+0x2b2>
 8008a72:	4630      	mov	r0, r6
 8008a74:	930d      	str	r3, [sp, #52]	; 0x34
 8008a76:	f000 fc5b 	bl	8009330 <_Balloc>
 8008a7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008a7c:	9001      	str	r0, [sp, #4]
 8008a7e:	4602      	mov	r2, r0
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d149      	bne.n	8008b18 <_dtoa_r+0x2f8>
 8008a84:	4b23      	ldr	r3, [pc, #140]	; (8008b14 <_dtoa_r+0x2f4>)
 8008a86:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8008a8a:	e6e1      	b.n	8008850 <_dtoa_r+0x30>
 8008a8c:	2201      	movs	r2, #1
 8008a8e:	e7dd      	b.n	8008a4c <_dtoa_r+0x22c>
 8008a90:	2200      	movs	r2, #0
 8008a92:	9207      	str	r2, [sp, #28]
 8008a94:	9a08      	ldr	r2, [sp, #32]
 8008a96:	eb0b 0a02 	add.w	sl, fp, r2
 8008a9a:	f10a 0901 	add.w	r9, sl, #1
 8008a9e:	464a      	mov	r2, r9
 8008aa0:	2a01      	cmp	r2, #1
 8008aa2:	bfb8      	it	lt
 8008aa4:	2201      	movlt	r2, #1
 8008aa6:	e7db      	b.n	8008a60 <_dtoa_r+0x240>
 8008aa8:	2201      	movs	r2, #1
 8008aaa:	e7f2      	b.n	8008a92 <_dtoa_r+0x272>
 8008aac:	2401      	movs	r4, #1
 8008aae:	2200      	movs	r2, #0
 8008ab0:	e9cd 2406 	strd	r2, r4, [sp, #24]
 8008ab4:	f04f 3aff 	mov.w	sl, #4294967295
 8008ab8:	2100      	movs	r1, #0
 8008aba:	46d1      	mov	r9, sl
 8008abc:	2212      	movs	r2, #18
 8008abe:	9108      	str	r1, [sp, #32]
 8008ac0:	e7ce      	b.n	8008a60 <_dtoa_r+0x240>
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	9207      	str	r2, [sp, #28]
 8008ac6:	e7f5      	b.n	8008ab4 <_dtoa_r+0x294>
 8008ac8:	f8dd a020 	ldr.w	sl, [sp, #32]
 8008acc:	46d1      	mov	r9, sl
 8008ace:	4652      	mov	r2, sl
 8008ad0:	e7c6      	b.n	8008a60 <_dtoa_r+0x240>
 8008ad2:	3101      	adds	r1, #1
 8008ad4:	6079      	str	r1, [r7, #4]
 8008ad6:	0040      	lsls	r0, r0, #1
 8008ad8:	e7c6      	b.n	8008a68 <_dtoa_r+0x248>
 8008ada:	bf00      	nop
 8008adc:	f3af 8000 	nop.w
 8008ae0:	636f4361 	.word	0x636f4361
 8008ae4:	3fd287a7 	.word	0x3fd287a7
 8008ae8:	8b60c8b3 	.word	0x8b60c8b3
 8008aec:	3fc68a28 	.word	0x3fc68a28
 8008af0:	509f79fb 	.word	0x509f79fb
 8008af4:	3fd34413 	.word	0x3fd34413
 8008af8:	0801026d 	.word	0x0801026d
 8008afc:	08010284 	.word	0x08010284
 8008b00:	7ff00000 	.word	0x7ff00000
 8008b04:	08010269 	.word	0x08010269
 8008b08:	08010260 	.word	0x08010260
 8008b0c:	0801023d 	.word	0x0801023d
 8008b10:	08010378 	.word	0x08010378
 8008b14:	080102df 	.word	0x080102df
 8008b18:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8008b1a:	9901      	ldr	r1, [sp, #4]
 8008b1c:	6011      	str	r1, [r2, #0]
 8008b1e:	f1b9 0f0e 	cmp.w	r9, #14
 8008b22:	d86c      	bhi.n	8008bfe <_dtoa_r+0x3de>
 8008b24:	2c00      	cmp	r4, #0
 8008b26:	d06a      	beq.n	8008bfe <_dtoa_r+0x3de>
 8008b28:	f1bb 0f00 	cmp.w	fp, #0
 8008b2c:	f340 80a0 	ble.w	8008c70 <_dtoa_r+0x450>
 8008b30:	49c1      	ldr	r1, [pc, #772]	; (8008e38 <_dtoa_r+0x618>)
 8008b32:	f00b 020f 	and.w	r2, fp, #15
 8008b36:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
 8008b3a:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8008b3e:	ed92 7b00 	vldr	d7, [r2]
 8008b42:	ea4f 112b 	mov.w	r1, fp, asr #4
 8008b46:	f000 8087 	beq.w	8008c58 <_dtoa_r+0x438>
 8008b4a:	4abc      	ldr	r2, [pc, #752]	; (8008e3c <_dtoa_r+0x61c>)
 8008b4c:	ed92 6b08 	vldr	d6, [r2, #32]
 8008b50:	ee88 6b06 	vdiv.f64	d6, d8, d6
 8008b54:	ed8d 6b02 	vstr	d6, [sp, #8]
 8008b58:	f001 010f 	and.w	r1, r1, #15
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	48b7      	ldr	r0, [pc, #732]	; (8008e3c <_dtoa_r+0x61c>)
 8008b60:	2900      	cmp	r1, #0
 8008b62:	d17b      	bne.n	8008c5c <_dtoa_r+0x43c>
 8008b64:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008b68:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8008b6c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008b70:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8008b72:	2900      	cmp	r1, #0
 8008b74:	f000 80a2 	beq.w	8008cbc <_dtoa_r+0x49c>
 8008b78:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8008b7c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008b80:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008b84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008b88:	f140 8098 	bpl.w	8008cbc <_dtoa_r+0x49c>
 8008b8c:	f1b9 0f00 	cmp.w	r9, #0
 8008b90:	f000 8094 	beq.w	8008cbc <_dtoa_r+0x49c>
 8008b94:	f1ba 0f00 	cmp.w	sl, #0
 8008b98:	dd2f      	ble.n	8008bfa <_dtoa_r+0x3da>
 8008b9a:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8008b9e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008ba2:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ba6:	f10b 37ff 	add.w	r7, fp, #4294967295
 8008baa:	3201      	adds	r2, #1
 8008bac:	4650      	mov	r0, sl
 8008bae:	ed9d 6b02 	vldr	d6, [sp, #8]
 8008bb2:	eeb1 5b0c 	vmov.f64	d5, #28	; 0x40e00000  7.0
 8008bb6:	ee07 2a90 	vmov	s15, r2
 8008bba:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8008bbe:	eea7 5b06 	vfma.f64	d5, d7, d6
 8008bc2:	ee15 4a90 	vmov	r4, s11
 8008bc6:	ec52 1b15 	vmov	r1, r2, d5
 8008bca:	f1a4 7250 	sub.w	r2, r4, #54525952	; 0x3400000
 8008bce:	2800      	cmp	r0, #0
 8008bd0:	d177      	bne.n	8008cc2 <_dtoa_r+0x4a2>
 8008bd2:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008bd6:	ee36 6b47 	vsub.f64	d6, d6, d7
 8008bda:	ec42 1b17 	vmov	d7, r1, r2
 8008bde:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008be6:	f300 8263 	bgt.w	80090b0 <_dtoa_r+0x890>
 8008bea:	eeb1 7b47 	vneg.f64	d7, d7
 8008bee:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008bf6:	f100 8258 	bmi.w	80090aa <_dtoa_r+0x88a>
 8008bfa:	ed8d 8b02 	vstr	d8, [sp, #8]
 8008bfe:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8008c00:	2a00      	cmp	r2, #0
 8008c02:	f2c0 811d 	blt.w	8008e40 <_dtoa_r+0x620>
 8008c06:	f1bb 0f0e 	cmp.w	fp, #14
 8008c0a:	f300 8119 	bgt.w	8008e40 <_dtoa_r+0x620>
 8008c0e:	4b8a      	ldr	r3, [pc, #552]	; (8008e38 <_dtoa_r+0x618>)
 8008c10:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8008c14:	ed93 6b00 	vldr	d6, [r3]
 8008c18:	9b08      	ldr	r3, [sp, #32]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	f280 80b7 	bge.w	8008d8e <_dtoa_r+0x56e>
 8008c20:	f1b9 0f00 	cmp.w	r9, #0
 8008c24:	f300 80b3 	bgt.w	8008d8e <_dtoa_r+0x56e>
 8008c28:	f040 823f 	bne.w	80090aa <_dtoa_r+0x88a>
 8008c2c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
 8008c30:	ee26 6b07 	vmul.f64	d6, d6, d7
 8008c34:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008c38:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008c3c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008c40:	464c      	mov	r4, r9
 8008c42:	464f      	mov	r7, r9
 8008c44:	f280 8215 	bge.w	8009072 <_dtoa_r+0x852>
 8008c48:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008c4c:	2331      	movs	r3, #49	; 0x31
 8008c4e:	f808 3b01 	strb.w	r3, [r8], #1
 8008c52:	f10b 0b01 	add.w	fp, fp, #1
 8008c56:	e211      	b.n	800907c <_dtoa_r+0x85c>
 8008c58:	2202      	movs	r2, #2
 8008c5a:	e780      	b.n	8008b5e <_dtoa_r+0x33e>
 8008c5c:	07cc      	lsls	r4, r1, #31
 8008c5e:	d504      	bpl.n	8008c6a <_dtoa_r+0x44a>
 8008c60:	ed90 6b00 	vldr	d6, [r0]
 8008c64:	3201      	adds	r2, #1
 8008c66:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008c6a:	1049      	asrs	r1, r1, #1
 8008c6c:	3008      	adds	r0, #8
 8008c6e:	e777      	b.n	8008b60 <_dtoa_r+0x340>
 8008c70:	d022      	beq.n	8008cb8 <_dtoa_r+0x498>
 8008c72:	f1cb 0100 	rsb	r1, fp, #0
 8008c76:	4a70      	ldr	r2, [pc, #448]	; (8008e38 <_dtoa_r+0x618>)
 8008c78:	f001 000f 	and.w	r0, r1, #15
 8008c7c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008c80:	ed92 7b00 	vldr	d7, [r2]
 8008c84:	ee28 7b07 	vmul.f64	d7, d8, d7
 8008c88:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008c8c:	486b      	ldr	r0, [pc, #428]	; (8008e3c <_dtoa_r+0x61c>)
 8008c8e:	1109      	asrs	r1, r1, #4
 8008c90:	2400      	movs	r4, #0
 8008c92:	2202      	movs	r2, #2
 8008c94:	b929      	cbnz	r1, 8008ca2 <_dtoa_r+0x482>
 8008c96:	2c00      	cmp	r4, #0
 8008c98:	f43f af6a 	beq.w	8008b70 <_dtoa_r+0x350>
 8008c9c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008ca0:	e766      	b.n	8008b70 <_dtoa_r+0x350>
 8008ca2:	07cf      	lsls	r7, r1, #31
 8008ca4:	d505      	bpl.n	8008cb2 <_dtoa_r+0x492>
 8008ca6:	ed90 6b00 	vldr	d6, [r0]
 8008caa:	3201      	adds	r2, #1
 8008cac:	2401      	movs	r4, #1
 8008cae:	ee27 7b06 	vmul.f64	d7, d7, d6
 8008cb2:	1049      	asrs	r1, r1, #1
 8008cb4:	3008      	adds	r0, #8
 8008cb6:	e7ed      	b.n	8008c94 <_dtoa_r+0x474>
 8008cb8:	2202      	movs	r2, #2
 8008cba:	e759      	b.n	8008b70 <_dtoa_r+0x350>
 8008cbc:	465f      	mov	r7, fp
 8008cbe:	4648      	mov	r0, r9
 8008cc0:	e775      	b.n	8008bae <_dtoa_r+0x38e>
 8008cc2:	ec42 1b17 	vmov	d7, r1, r2
 8008cc6:	4a5c      	ldr	r2, [pc, #368]	; (8008e38 <_dtoa_r+0x618>)
 8008cc8:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8008ccc:	ed12 4b02 	vldr	d4, [r2, #-8]
 8008cd0:	9a01      	ldr	r2, [sp, #4]
 8008cd2:	1814      	adds	r4, r2, r0
 8008cd4:	9a07      	ldr	r2, [sp, #28]
 8008cd6:	b352      	cbz	r2, 8008d2e <_dtoa_r+0x50e>
 8008cd8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
 8008cdc:	eeb7 2b00 	vmov.f64	d2, #112	; 0x3f800000  1.0
 8008ce0:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008ce4:	ee83 5b04 	vdiv.f64	d5, d3, d4
 8008ce8:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008cec:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008cf0:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008cf4:	ee14 2a90 	vmov	r2, s9
 8008cf8:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008cfc:	3230      	adds	r2, #48	; 0x30
 8008cfe:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d02:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d0a:	f808 2b01 	strb.w	r2, [r8], #1
 8008d0e:	d439      	bmi.n	8008d84 <_dtoa_r+0x564>
 8008d10:	ee32 5b46 	vsub.f64	d5, d2, d6
 8008d14:	eeb4 5bc7 	vcmpe.f64	d5, d7
 8008d18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d1c:	d472      	bmi.n	8008e04 <_dtoa_r+0x5e4>
 8008d1e:	45a0      	cmp	r8, r4
 8008d20:	f43f af6b 	beq.w	8008bfa <_dtoa_r+0x3da>
 8008d24:	ee27 7b03 	vmul.f64	d7, d7, d3
 8008d28:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008d2c:	e7e0      	b.n	8008cf0 <_dtoa_r+0x4d0>
 8008d2e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d32:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008d36:	4621      	mov	r1, r4
 8008d38:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
 8008d3c:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 8008d40:	ee14 2a90 	vmov	r2, s9
 8008d44:	3230      	adds	r2, #48	; 0x30
 8008d46:	f808 2b01 	strb.w	r2, [r8], #1
 8008d4a:	45a0      	cmp	r8, r4
 8008d4c:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 8008d50:	ee36 6b45 	vsub.f64	d6, d6, d5
 8008d54:	d118      	bne.n	8008d88 <_dtoa_r+0x568>
 8008d56:	eeb6 5b00 	vmov.f64	d5, #96	; 0x3f000000  0.5
 8008d5a:	ee37 4b05 	vadd.f64	d4, d7, d5
 8008d5e:	eeb4 6bc4 	vcmpe.f64	d6, d4
 8008d62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d66:	dc4d      	bgt.n	8008e04 <_dtoa_r+0x5e4>
 8008d68:	ee35 7b47 	vsub.f64	d7, d5, d7
 8008d6c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8008d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008d74:	f57f af41 	bpl.w	8008bfa <_dtoa_r+0x3da>
 8008d78:	4688      	mov	r8, r1
 8008d7a:	3901      	subs	r1, #1
 8008d7c:	f818 3c01 	ldrb.w	r3, [r8, #-1]
 8008d80:	2b30      	cmp	r3, #48	; 0x30
 8008d82:	d0f9      	beq.n	8008d78 <_dtoa_r+0x558>
 8008d84:	46bb      	mov	fp, r7
 8008d86:	e02a      	b.n	8008dde <_dtoa_r+0x5be>
 8008d88:	ee26 6b03 	vmul.f64	d6, d6, d3
 8008d8c:	e7d6      	b.n	8008d3c <_dtoa_r+0x51c>
 8008d8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 8008d92:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
 8008d96:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008d9a:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8008d9e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 8008da2:	ee15 3a10 	vmov	r3, s10
 8008da6:	3330      	adds	r3, #48	; 0x30
 8008da8:	f808 3b01 	strb.w	r3, [r8], #1
 8008dac:	9b01      	ldr	r3, [sp, #4]
 8008dae:	eba8 0303 	sub.w	r3, r8, r3
 8008db2:	4599      	cmp	r9, r3
 8008db4:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8008db8:	eea3 7b46 	vfms.f64	d7, d3, d6
 8008dbc:	d133      	bne.n	8008e26 <_dtoa_r+0x606>
 8008dbe:	ee37 7b07 	vadd.f64	d7, d7, d7
 8008dc2:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8008dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dca:	dc1a      	bgt.n	8008e02 <_dtoa_r+0x5e2>
 8008dcc:	eeb4 7b46 	vcmp.f64	d7, d6
 8008dd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008dd4:	d103      	bne.n	8008dde <_dtoa_r+0x5be>
 8008dd6:	ee15 3a10 	vmov	r3, s10
 8008dda:	07d9      	lsls	r1, r3, #31
 8008ddc:	d411      	bmi.n	8008e02 <_dtoa_r+0x5e2>
 8008dde:	4629      	mov	r1, r5
 8008de0:	4630      	mov	r0, r6
 8008de2:	f000 fae5 	bl	80093b0 <_Bfree>
 8008de6:	2300      	movs	r3, #0
 8008de8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008dea:	f888 3000 	strb.w	r3, [r8]
 8008dee:	f10b 0301 	add.w	r3, fp, #1
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	f43f ad61 	beq.w	80088be <_dtoa_r+0x9e>
 8008dfc:	f8c3 8000 	str.w	r8, [r3]
 8008e00:	e55d      	b.n	80088be <_dtoa_r+0x9e>
 8008e02:	465f      	mov	r7, fp
 8008e04:	4643      	mov	r3, r8
 8008e06:	4698      	mov	r8, r3
 8008e08:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008e0c:	2a39      	cmp	r2, #57	; 0x39
 8008e0e:	d106      	bne.n	8008e1e <_dtoa_r+0x5fe>
 8008e10:	9a01      	ldr	r2, [sp, #4]
 8008e12:	429a      	cmp	r2, r3
 8008e14:	d1f7      	bne.n	8008e06 <_dtoa_r+0x5e6>
 8008e16:	9901      	ldr	r1, [sp, #4]
 8008e18:	2230      	movs	r2, #48	; 0x30
 8008e1a:	3701      	adds	r7, #1
 8008e1c:	700a      	strb	r2, [r1, #0]
 8008e1e:	781a      	ldrb	r2, [r3, #0]
 8008e20:	3201      	adds	r2, #1
 8008e22:	701a      	strb	r2, [r3, #0]
 8008e24:	e7ae      	b.n	8008d84 <_dtoa_r+0x564>
 8008e26:	ee27 7b04 	vmul.f64	d7, d7, d4
 8008e2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8008e2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008e32:	d1b2      	bne.n	8008d9a <_dtoa_r+0x57a>
 8008e34:	e7d3      	b.n	8008dde <_dtoa_r+0x5be>
 8008e36:	bf00      	nop
 8008e38:	08010378 	.word	0x08010378
 8008e3c:	08010350 	.word	0x08010350
 8008e40:	9907      	ldr	r1, [sp, #28]
 8008e42:	2900      	cmp	r1, #0
 8008e44:	f000 80d0 	beq.w	8008fe8 <_dtoa_r+0x7c8>
 8008e48:	9906      	ldr	r1, [sp, #24]
 8008e4a:	2901      	cmp	r1, #1
 8008e4c:	f300 80b4 	bgt.w	8008fb8 <_dtoa_r+0x798>
 8008e50:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008e52:	2900      	cmp	r1, #0
 8008e54:	f000 80ac 	beq.w	8008fb0 <_dtoa_r+0x790>
 8008e58:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008e5c:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008e60:	461c      	mov	r4, r3
 8008e62:	930a      	str	r3, [sp, #40]	; 0x28
 8008e64:	9b04      	ldr	r3, [sp, #16]
 8008e66:	4413      	add	r3, r2
 8008e68:	9304      	str	r3, [sp, #16]
 8008e6a:	9b05      	ldr	r3, [sp, #20]
 8008e6c:	2101      	movs	r1, #1
 8008e6e:	4413      	add	r3, r2
 8008e70:	4630      	mov	r0, r6
 8008e72:	9305      	str	r3, [sp, #20]
 8008e74:	f000 fb54 	bl	8009520 <__i2b>
 8008e78:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008e7a:	4607      	mov	r7, r0
 8008e7c:	f1b8 0f00 	cmp.w	r8, #0
 8008e80:	dd0d      	ble.n	8008e9e <_dtoa_r+0x67e>
 8008e82:	9a05      	ldr	r2, [sp, #20]
 8008e84:	2a00      	cmp	r2, #0
 8008e86:	dd0a      	ble.n	8008e9e <_dtoa_r+0x67e>
 8008e88:	4542      	cmp	r2, r8
 8008e8a:	9904      	ldr	r1, [sp, #16]
 8008e8c:	bfa8      	it	ge
 8008e8e:	4642      	movge	r2, r8
 8008e90:	1a89      	subs	r1, r1, r2
 8008e92:	9104      	str	r1, [sp, #16]
 8008e94:	9905      	ldr	r1, [sp, #20]
 8008e96:	eba8 0802 	sub.w	r8, r8, r2
 8008e9a:	1a8a      	subs	r2, r1, r2
 8008e9c:	9205      	str	r2, [sp, #20]
 8008e9e:	b303      	cbz	r3, 8008ee2 <_dtoa_r+0x6c2>
 8008ea0:	9a07      	ldr	r2, [sp, #28]
 8008ea2:	2a00      	cmp	r2, #0
 8008ea4:	f000 80a5 	beq.w	8008ff2 <_dtoa_r+0x7d2>
 8008ea8:	2c00      	cmp	r4, #0
 8008eaa:	dd13      	ble.n	8008ed4 <_dtoa_r+0x6b4>
 8008eac:	4639      	mov	r1, r7
 8008eae:	4622      	mov	r2, r4
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	930d      	str	r3, [sp, #52]	; 0x34
 8008eb4:	f000 fbf4 	bl	80096a0 <__pow5mult>
 8008eb8:	462a      	mov	r2, r5
 8008eba:	4601      	mov	r1, r0
 8008ebc:	4607      	mov	r7, r0
 8008ebe:	4630      	mov	r0, r6
 8008ec0:	f000 fb44 	bl	800954c <__multiply>
 8008ec4:	4629      	mov	r1, r5
 8008ec6:	900a      	str	r0, [sp, #40]	; 0x28
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 fa71 	bl	80093b0 <_Bfree>
 8008ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008ed0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ed2:	4615      	mov	r5, r2
 8008ed4:	1b1a      	subs	r2, r3, r4
 8008ed6:	d004      	beq.n	8008ee2 <_dtoa_r+0x6c2>
 8008ed8:	4629      	mov	r1, r5
 8008eda:	4630      	mov	r0, r6
 8008edc:	f000 fbe0 	bl	80096a0 <__pow5mult>
 8008ee0:	4605      	mov	r5, r0
 8008ee2:	2101      	movs	r1, #1
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f000 fb1b 	bl	8009520 <__i2b>
 8008eea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	4604      	mov	r4, r0
 8008ef0:	f340 8081 	ble.w	8008ff6 <_dtoa_r+0x7d6>
 8008ef4:	461a      	mov	r2, r3
 8008ef6:	4601      	mov	r1, r0
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f000 fbd1 	bl	80096a0 <__pow5mult>
 8008efe:	9b06      	ldr	r3, [sp, #24]
 8008f00:	2b01      	cmp	r3, #1
 8008f02:	4604      	mov	r4, r0
 8008f04:	dd7a      	ble.n	8008ffc <_dtoa_r+0x7dc>
 8008f06:	2300      	movs	r3, #0
 8008f08:	930a      	str	r3, [sp, #40]	; 0x28
 8008f0a:	6922      	ldr	r2, [r4, #16]
 8008f0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8008f10:	6910      	ldr	r0, [r2, #16]
 8008f12:	f000 fab5 	bl	8009480 <__hi0bits>
 8008f16:	f1c0 0020 	rsb	r0, r0, #32
 8008f1a:	9b05      	ldr	r3, [sp, #20]
 8008f1c:	4418      	add	r0, r3
 8008f1e:	f010 001f 	ands.w	r0, r0, #31
 8008f22:	f000 808c 	beq.w	800903e <_dtoa_r+0x81e>
 8008f26:	f1c0 0220 	rsb	r2, r0, #32
 8008f2a:	2a04      	cmp	r2, #4
 8008f2c:	f340 8085 	ble.w	800903a <_dtoa_r+0x81a>
 8008f30:	f1c0 001c 	rsb	r0, r0, #28
 8008f34:	9b04      	ldr	r3, [sp, #16]
 8008f36:	4403      	add	r3, r0
 8008f38:	9304      	str	r3, [sp, #16]
 8008f3a:	9b05      	ldr	r3, [sp, #20]
 8008f3c:	4403      	add	r3, r0
 8008f3e:	4480      	add	r8, r0
 8008f40:	9305      	str	r3, [sp, #20]
 8008f42:	9b04      	ldr	r3, [sp, #16]
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	dd05      	ble.n	8008f54 <_dtoa_r+0x734>
 8008f48:	4629      	mov	r1, r5
 8008f4a:	461a      	mov	r2, r3
 8008f4c:	4630      	mov	r0, r6
 8008f4e:	f000 fc01 	bl	8009754 <__lshift>
 8008f52:	4605      	mov	r5, r0
 8008f54:	9b05      	ldr	r3, [sp, #20]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	dd05      	ble.n	8008f66 <_dtoa_r+0x746>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	461a      	mov	r2, r3
 8008f5e:	4630      	mov	r0, r6
 8008f60:	f000 fbf8 	bl	8009754 <__lshift>
 8008f64:	4604      	mov	r4, r0
 8008f66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d06a      	beq.n	8009042 <_dtoa_r+0x822>
 8008f6c:	4621      	mov	r1, r4
 8008f6e:	4628      	mov	r0, r5
 8008f70:	f000 fc60 	bl	8009834 <__mcmp>
 8008f74:	2800      	cmp	r0, #0
 8008f76:	da64      	bge.n	8009042 <_dtoa_r+0x822>
 8008f78:	2300      	movs	r3, #0
 8008f7a:	4629      	mov	r1, r5
 8008f7c:	220a      	movs	r2, #10
 8008f7e:	4630      	mov	r0, r6
 8008f80:	f000 fa38 	bl	80093f4 <__multadd>
 8008f84:	9b07      	ldr	r3, [sp, #28]
 8008f86:	f10b 3bff 	add.w	fp, fp, #4294967295
 8008f8a:	4605      	mov	r5, r0
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f000 8191 	beq.w	80092b4 <_dtoa_r+0xa94>
 8008f92:	4639      	mov	r1, r7
 8008f94:	2300      	movs	r3, #0
 8008f96:	220a      	movs	r2, #10
 8008f98:	4630      	mov	r0, r6
 8008f9a:	f000 fa2b 	bl	80093f4 <__multadd>
 8008f9e:	f1ba 0f00 	cmp.w	sl, #0
 8008fa2:	4607      	mov	r7, r0
 8008fa4:	f300 808d 	bgt.w	80090c2 <_dtoa_r+0x8a2>
 8008fa8:	9b06      	ldr	r3, [sp, #24]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	dc50      	bgt.n	8009050 <_dtoa_r+0x830>
 8008fae:	e088      	b.n	80090c2 <_dtoa_r+0x8a2>
 8008fb0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fb2:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008fb6:	e751      	b.n	8008e5c <_dtoa_r+0x63c>
 8008fb8:	f109 34ff 	add.w	r4, r9, #4294967295
 8008fbc:	42a3      	cmp	r3, r4
 8008fbe:	bfbf      	itttt	lt
 8008fc0:	9a09      	ldrlt	r2, [sp, #36]	; 0x24
 8008fc2:	1ae3      	sublt	r3, r4, r3
 8008fc4:	18d2      	addlt	r2, r2, r3
 8008fc6:	9209      	strlt	r2, [sp, #36]	; 0x24
 8008fc8:	bfb6      	itet	lt
 8008fca:	4623      	movlt	r3, r4
 8008fcc:	1b1c      	subge	r4, r3, r4
 8008fce:	2400      	movlt	r4, #0
 8008fd0:	f1b9 0f00 	cmp.w	r9, #0
 8008fd4:	bfb5      	itete	lt
 8008fd6:	9a04      	ldrlt	r2, [sp, #16]
 8008fd8:	f8dd 8010 	ldrge.w	r8, [sp, #16]
 8008fdc:	eba2 0809 	sublt.w	r8, r2, r9
 8008fe0:	464a      	movge	r2, r9
 8008fe2:	bfb8      	it	lt
 8008fe4:	2200      	movlt	r2, #0
 8008fe6:	e73c      	b.n	8008e62 <_dtoa_r+0x642>
 8008fe8:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8008fec:	9f07      	ldr	r7, [sp, #28]
 8008fee:	461c      	mov	r4, r3
 8008ff0:	e744      	b.n	8008e7c <_dtoa_r+0x65c>
 8008ff2:	461a      	mov	r2, r3
 8008ff4:	e770      	b.n	8008ed8 <_dtoa_r+0x6b8>
 8008ff6:	9b06      	ldr	r3, [sp, #24]
 8008ff8:	2b01      	cmp	r3, #1
 8008ffa:	dc18      	bgt.n	800902e <_dtoa_r+0x80e>
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	b9b3      	cbnz	r3, 800902e <_dtoa_r+0x80e>
 8009000:	9b03      	ldr	r3, [sp, #12]
 8009002:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8009006:	b9a2      	cbnz	r2, 8009032 <_dtoa_r+0x812>
 8009008:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800900c:	0d12      	lsrs	r2, r2, #20
 800900e:	0512      	lsls	r2, r2, #20
 8009010:	b18a      	cbz	r2, 8009036 <_dtoa_r+0x816>
 8009012:	9b04      	ldr	r3, [sp, #16]
 8009014:	3301      	adds	r3, #1
 8009016:	9304      	str	r3, [sp, #16]
 8009018:	9b05      	ldr	r3, [sp, #20]
 800901a:	3301      	adds	r3, #1
 800901c:	9305      	str	r3, [sp, #20]
 800901e:	2301      	movs	r3, #1
 8009020:	930a      	str	r3, [sp, #40]	; 0x28
 8009022:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009024:	2b00      	cmp	r3, #0
 8009026:	f47f af70 	bne.w	8008f0a <_dtoa_r+0x6ea>
 800902a:	2001      	movs	r0, #1
 800902c:	e775      	b.n	8008f1a <_dtoa_r+0x6fa>
 800902e:	2300      	movs	r3, #0
 8009030:	e7f6      	b.n	8009020 <_dtoa_r+0x800>
 8009032:	9b02      	ldr	r3, [sp, #8]
 8009034:	e7f4      	b.n	8009020 <_dtoa_r+0x800>
 8009036:	920a      	str	r2, [sp, #40]	; 0x28
 8009038:	e7f3      	b.n	8009022 <_dtoa_r+0x802>
 800903a:	d082      	beq.n	8008f42 <_dtoa_r+0x722>
 800903c:	4610      	mov	r0, r2
 800903e:	301c      	adds	r0, #28
 8009040:	e778      	b.n	8008f34 <_dtoa_r+0x714>
 8009042:	f1b9 0f00 	cmp.w	r9, #0
 8009046:	dc37      	bgt.n	80090b8 <_dtoa_r+0x898>
 8009048:	9b06      	ldr	r3, [sp, #24]
 800904a:	2b02      	cmp	r3, #2
 800904c:	dd34      	ble.n	80090b8 <_dtoa_r+0x898>
 800904e:	46ca      	mov	sl, r9
 8009050:	f1ba 0f00 	cmp.w	sl, #0
 8009054:	d10d      	bne.n	8009072 <_dtoa_r+0x852>
 8009056:	4621      	mov	r1, r4
 8009058:	4653      	mov	r3, sl
 800905a:	2205      	movs	r2, #5
 800905c:	4630      	mov	r0, r6
 800905e:	f000 f9c9 	bl	80093f4 <__multadd>
 8009062:	4601      	mov	r1, r0
 8009064:	4604      	mov	r4, r0
 8009066:	4628      	mov	r0, r5
 8009068:	f000 fbe4 	bl	8009834 <__mcmp>
 800906c:	2800      	cmp	r0, #0
 800906e:	f73f adeb 	bgt.w	8008c48 <_dtoa_r+0x428>
 8009072:	9b08      	ldr	r3, [sp, #32]
 8009074:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8009078:	ea6f 0b03 	mvn.w	fp, r3
 800907c:	f04f 0900 	mov.w	r9, #0
 8009080:	4621      	mov	r1, r4
 8009082:	4630      	mov	r0, r6
 8009084:	f000 f994 	bl	80093b0 <_Bfree>
 8009088:	2f00      	cmp	r7, #0
 800908a:	f43f aea8 	beq.w	8008dde <_dtoa_r+0x5be>
 800908e:	f1b9 0f00 	cmp.w	r9, #0
 8009092:	d005      	beq.n	80090a0 <_dtoa_r+0x880>
 8009094:	45b9      	cmp	r9, r7
 8009096:	d003      	beq.n	80090a0 <_dtoa_r+0x880>
 8009098:	4649      	mov	r1, r9
 800909a:	4630      	mov	r0, r6
 800909c:	f000 f988 	bl	80093b0 <_Bfree>
 80090a0:	4639      	mov	r1, r7
 80090a2:	4630      	mov	r0, r6
 80090a4:	f000 f984 	bl	80093b0 <_Bfree>
 80090a8:	e699      	b.n	8008dde <_dtoa_r+0x5be>
 80090aa:	2400      	movs	r4, #0
 80090ac:	4627      	mov	r7, r4
 80090ae:	e7e0      	b.n	8009072 <_dtoa_r+0x852>
 80090b0:	46bb      	mov	fp, r7
 80090b2:	4604      	mov	r4, r0
 80090b4:	4607      	mov	r7, r0
 80090b6:	e5c7      	b.n	8008c48 <_dtoa_r+0x428>
 80090b8:	9b07      	ldr	r3, [sp, #28]
 80090ba:	46ca      	mov	sl, r9
 80090bc:	2b00      	cmp	r3, #0
 80090be:	f000 8100 	beq.w	80092c2 <_dtoa_r+0xaa2>
 80090c2:	f1b8 0f00 	cmp.w	r8, #0
 80090c6:	dd05      	ble.n	80090d4 <_dtoa_r+0x8b4>
 80090c8:	4639      	mov	r1, r7
 80090ca:	4642      	mov	r2, r8
 80090cc:	4630      	mov	r0, r6
 80090ce:	f000 fb41 	bl	8009754 <__lshift>
 80090d2:	4607      	mov	r7, r0
 80090d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d05d      	beq.n	8009196 <_dtoa_r+0x976>
 80090da:	6879      	ldr	r1, [r7, #4]
 80090dc:	4630      	mov	r0, r6
 80090de:	f000 f927 	bl	8009330 <_Balloc>
 80090e2:	4680      	mov	r8, r0
 80090e4:	b928      	cbnz	r0, 80090f2 <_dtoa_r+0x8d2>
 80090e6:	4b82      	ldr	r3, [pc, #520]	; (80092f0 <_dtoa_r+0xad0>)
 80090e8:	4602      	mov	r2, r0
 80090ea:	f240 21ea 	movw	r1, #746	; 0x2ea
 80090ee:	f7ff bbaf 	b.w	8008850 <_dtoa_r+0x30>
 80090f2:	693a      	ldr	r2, [r7, #16]
 80090f4:	3202      	adds	r2, #2
 80090f6:	0092      	lsls	r2, r2, #2
 80090f8:	f107 010c 	add.w	r1, r7, #12
 80090fc:	300c      	adds	r0, #12
 80090fe:	f000 f909 	bl	8009314 <memcpy>
 8009102:	2201      	movs	r2, #1
 8009104:	4641      	mov	r1, r8
 8009106:	4630      	mov	r0, r6
 8009108:	f000 fb24 	bl	8009754 <__lshift>
 800910c:	9b01      	ldr	r3, [sp, #4]
 800910e:	3301      	adds	r3, #1
 8009110:	9304      	str	r3, [sp, #16]
 8009112:	9b01      	ldr	r3, [sp, #4]
 8009114:	4453      	add	r3, sl
 8009116:	9308      	str	r3, [sp, #32]
 8009118:	9b02      	ldr	r3, [sp, #8]
 800911a:	f003 0301 	and.w	r3, r3, #1
 800911e:	46b9      	mov	r9, r7
 8009120:	9307      	str	r3, [sp, #28]
 8009122:	4607      	mov	r7, r0
 8009124:	9b04      	ldr	r3, [sp, #16]
 8009126:	4621      	mov	r1, r4
 8009128:	3b01      	subs	r3, #1
 800912a:	4628      	mov	r0, r5
 800912c:	9302      	str	r3, [sp, #8]
 800912e:	f7ff fae9 	bl	8008704 <quorem>
 8009132:	4603      	mov	r3, r0
 8009134:	3330      	adds	r3, #48	; 0x30
 8009136:	9005      	str	r0, [sp, #20]
 8009138:	4649      	mov	r1, r9
 800913a:	4628      	mov	r0, r5
 800913c:	9309      	str	r3, [sp, #36]	; 0x24
 800913e:	f000 fb79 	bl	8009834 <__mcmp>
 8009142:	463a      	mov	r2, r7
 8009144:	4682      	mov	sl, r0
 8009146:	4621      	mov	r1, r4
 8009148:	4630      	mov	r0, r6
 800914a:	f000 fb8f 	bl	800986c <__mdiff>
 800914e:	68c2      	ldr	r2, [r0, #12]
 8009150:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009152:	4680      	mov	r8, r0
 8009154:	bb0a      	cbnz	r2, 800919a <_dtoa_r+0x97a>
 8009156:	4601      	mov	r1, r0
 8009158:	4628      	mov	r0, r5
 800915a:	f000 fb6b 	bl	8009834 <__mcmp>
 800915e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009160:	4602      	mov	r2, r0
 8009162:	4641      	mov	r1, r8
 8009164:	4630      	mov	r0, r6
 8009166:	e9cd 3209 	strd	r3, r2, [sp, #36]	; 0x24
 800916a:	f000 f921 	bl	80093b0 <_Bfree>
 800916e:	9b06      	ldr	r3, [sp, #24]
 8009170:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009172:	f8dd 8010 	ldr.w	r8, [sp, #16]
 8009176:	ea43 0102 	orr.w	r1, r3, r2
 800917a:	9b07      	ldr	r3, [sp, #28]
 800917c:	430b      	orrs	r3, r1
 800917e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009180:	d10d      	bne.n	800919e <_dtoa_r+0x97e>
 8009182:	2b39      	cmp	r3, #57	; 0x39
 8009184:	d029      	beq.n	80091da <_dtoa_r+0x9ba>
 8009186:	f1ba 0f00 	cmp.w	sl, #0
 800918a:	dd01      	ble.n	8009190 <_dtoa_r+0x970>
 800918c:	9b05      	ldr	r3, [sp, #20]
 800918e:	3331      	adds	r3, #49	; 0x31
 8009190:	9a02      	ldr	r2, [sp, #8]
 8009192:	7013      	strb	r3, [r2, #0]
 8009194:	e774      	b.n	8009080 <_dtoa_r+0x860>
 8009196:	4638      	mov	r0, r7
 8009198:	e7b8      	b.n	800910c <_dtoa_r+0x8ec>
 800919a:	2201      	movs	r2, #1
 800919c:	e7e1      	b.n	8009162 <_dtoa_r+0x942>
 800919e:	f1ba 0f00 	cmp.w	sl, #0
 80091a2:	db06      	blt.n	80091b2 <_dtoa_r+0x992>
 80091a4:	9906      	ldr	r1, [sp, #24]
 80091a6:	ea41 0a0a 	orr.w	sl, r1, sl
 80091aa:	9907      	ldr	r1, [sp, #28]
 80091ac:	ea5a 0101 	orrs.w	r1, sl, r1
 80091b0:	d120      	bne.n	80091f4 <_dtoa_r+0x9d4>
 80091b2:	2a00      	cmp	r2, #0
 80091b4:	ddec      	ble.n	8009190 <_dtoa_r+0x970>
 80091b6:	4629      	mov	r1, r5
 80091b8:	2201      	movs	r2, #1
 80091ba:	4630      	mov	r0, r6
 80091bc:	9304      	str	r3, [sp, #16]
 80091be:	f000 fac9 	bl	8009754 <__lshift>
 80091c2:	4621      	mov	r1, r4
 80091c4:	4605      	mov	r5, r0
 80091c6:	f000 fb35 	bl	8009834 <__mcmp>
 80091ca:	2800      	cmp	r0, #0
 80091cc:	9b04      	ldr	r3, [sp, #16]
 80091ce:	dc02      	bgt.n	80091d6 <_dtoa_r+0x9b6>
 80091d0:	d1de      	bne.n	8009190 <_dtoa_r+0x970>
 80091d2:	07da      	lsls	r2, r3, #31
 80091d4:	d5dc      	bpl.n	8009190 <_dtoa_r+0x970>
 80091d6:	2b39      	cmp	r3, #57	; 0x39
 80091d8:	d1d8      	bne.n	800918c <_dtoa_r+0x96c>
 80091da:	9a02      	ldr	r2, [sp, #8]
 80091dc:	2339      	movs	r3, #57	; 0x39
 80091de:	7013      	strb	r3, [r2, #0]
 80091e0:	4643      	mov	r3, r8
 80091e2:	4698      	mov	r8, r3
 80091e4:	3b01      	subs	r3, #1
 80091e6:	f818 2c01 	ldrb.w	r2, [r8, #-1]
 80091ea:	2a39      	cmp	r2, #57	; 0x39
 80091ec:	d051      	beq.n	8009292 <_dtoa_r+0xa72>
 80091ee:	3201      	adds	r2, #1
 80091f0:	701a      	strb	r2, [r3, #0]
 80091f2:	e745      	b.n	8009080 <_dtoa_r+0x860>
 80091f4:	2a00      	cmp	r2, #0
 80091f6:	dd03      	ble.n	8009200 <_dtoa_r+0x9e0>
 80091f8:	2b39      	cmp	r3, #57	; 0x39
 80091fa:	d0ee      	beq.n	80091da <_dtoa_r+0x9ba>
 80091fc:	3301      	adds	r3, #1
 80091fe:	e7c7      	b.n	8009190 <_dtoa_r+0x970>
 8009200:	9a04      	ldr	r2, [sp, #16]
 8009202:	9908      	ldr	r1, [sp, #32]
 8009204:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009208:	428a      	cmp	r2, r1
 800920a:	d02b      	beq.n	8009264 <_dtoa_r+0xa44>
 800920c:	4629      	mov	r1, r5
 800920e:	2300      	movs	r3, #0
 8009210:	220a      	movs	r2, #10
 8009212:	4630      	mov	r0, r6
 8009214:	f000 f8ee 	bl	80093f4 <__multadd>
 8009218:	45b9      	cmp	r9, r7
 800921a:	4605      	mov	r5, r0
 800921c:	f04f 0300 	mov.w	r3, #0
 8009220:	f04f 020a 	mov.w	r2, #10
 8009224:	4649      	mov	r1, r9
 8009226:	4630      	mov	r0, r6
 8009228:	d107      	bne.n	800923a <_dtoa_r+0xa1a>
 800922a:	f000 f8e3 	bl	80093f4 <__multadd>
 800922e:	4681      	mov	r9, r0
 8009230:	4607      	mov	r7, r0
 8009232:	9b04      	ldr	r3, [sp, #16]
 8009234:	3301      	adds	r3, #1
 8009236:	9304      	str	r3, [sp, #16]
 8009238:	e774      	b.n	8009124 <_dtoa_r+0x904>
 800923a:	f000 f8db 	bl	80093f4 <__multadd>
 800923e:	4639      	mov	r1, r7
 8009240:	4681      	mov	r9, r0
 8009242:	2300      	movs	r3, #0
 8009244:	220a      	movs	r2, #10
 8009246:	4630      	mov	r0, r6
 8009248:	f000 f8d4 	bl	80093f4 <__multadd>
 800924c:	4607      	mov	r7, r0
 800924e:	e7f0      	b.n	8009232 <_dtoa_r+0xa12>
 8009250:	f1ba 0f00 	cmp.w	sl, #0
 8009254:	9a01      	ldr	r2, [sp, #4]
 8009256:	bfcc      	ite	gt
 8009258:	46d0      	movgt	r8, sl
 800925a:	f04f 0801 	movle.w	r8, #1
 800925e:	4490      	add	r8, r2
 8009260:	f04f 0900 	mov.w	r9, #0
 8009264:	4629      	mov	r1, r5
 8009266:	2201      	movs	r2, #1
 8009268:	4630      	mov	r0, r6
 800926a:	9302      	str	r3, [sp, #8]
 800926c:	f000 fa72 	bl	8009754 <__lshift>
 8009270:	4621      	mov	r1, r4
 8009272:	4605      	mov	r5, r0
 8009274:	f000 fade 	bl	8009834 <__mcmp>
 8009278:	2800      	cmp	r0, #0
 800927a:	dcb1      	bgt.n	80091e0 <_dtoa_r+0x9c0>
 800927c:	d102      	bne.n	8009284 <_dtoa_r+0xa64>
 800927e:	9b02      	ldr	r3, [sp, #8]
 8009280:	07db      	lsls	r3, r3, #31
 8009282:	d4ad      	bmi.n	80091e0 <_dtoa_r+0x9c0>
 8009284:	4643      	mov	r3, r8
 8009286:	4698      	mov	r8, r3
 8009288:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800928c:	2a30      	cmp	r2, #48	; 0x30
 800928e:	d0fa      	beq.n	8009286 <_dtoa_r+0xa66>
 8009290:	e6f6      	b.n	8009080 <_dtoa_r+0x860>
 8009292:	9a01      	ldr	r2, [sp, #4]
 8009294:	429a      	cmp	r2, r3
 8009296:	d1a4      	bne.n	80091e2 <_dtoa_r+0x9c2>
 8009298:	f10b 0b01 	add.w	fp, fp, #1
 800929c:	2331      	movs	r3, #49	; 0x31
 800929e:	e778      	b.n	8009192 <_dtoa_r+0x972>
 80092a0:	4b14      	ldr	r3, [pc, #80]	; (80092f4 <_dtoa_r+0xad4>)
 80092a2:	f7ff bb27 	b.w	80088f4 <_dtoa_r+0xd4>
 80092a6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f47f ab03 	bne.w	80088b4 <_dtoa_r+0x94>
 80092ae:	4b12      	ldr	r3, [pc, #72]	; (80092f8 <_dtoa_r+0xad8>)
 80092b0:	f7ff bb20 	b.w	80088f4 <_dtoa_r+0xd4>
 80092b4:	f1ba 0f00 	cmp.w	sl, #0
 80092b8:	dc03      	bgt.n	80092c2 <_dtoa_r+0xaa2>
 80092ba:	9b06      	ldr	r3, [sp, #24]
 80092bc:	2b02      	cmp	r3, #2
 80092be:	f73f aec7 	bgt.w	8009050 <_dtoa_r+0x830>
 80092c2:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80092c6:	4621      	mov	r1, r4
 80092c8:	4628      	mov	r0, r5
 80092ca:	f7ff fa1b 	bl	8008704 <quorem>
 80092ce:	f100 0330 	add.w	r3, r0, #48	; 0x30
 80092d2:	f808 3b01 	strb.w	r3, [r8], #1
 80092d6:	9a01      	ldr	r2, [sp, #4]
 80092d8:	eba8 0202 	sub.w	r2, r8, r2
 80092dc:	4592      	cmp	sl, r2
 80092de:	ddb7      	ble.n	8009250 <_dtoa_r+0xa30>
 80092e0:	4629      	mov	r1, r5
 80092e2:	2300      	movs	r3, #0
 80092e4:	220a      	movs	r2, #10
 80092e6:	4630      	mov	r0, r6
 80092e8:	f000 f884 	bl	80093f4 <__multadd>
 80092ec:	4605      	mov	r5, r0
 80092ee:	e7ea      	b.n	80092c6 <_dtoa_r+0xaa6>
 80092f0:	080102df 	.word	0x080102df
 80092f4:	0801023c 	.word	0x0801023c
 80092f8:	08010260 	.word	0x08010260

080092fc <_localeconv_r>:
 80092fc:	4800      	ldr	r0, [pc, #0]	; (8009300 <_localeconv_r+0x4>)
 80092fe:	4770      	bx	lr
 8009300:	20000164 	.word	0x20000164

08009304 <malloc>:
 8009304:	4b02      	ldr	r3, [pc, #8]	; (8009310 <malloc+0xc>)
 8009306:	4601      	mov	r1, r0
 8009308:	6818      	ldr	r0, [r3, #0]
 800930a:	f000 bc17 	b.w	8009b3c <_malloc_r>
 800930e:	bf00      	nop
 8009310:	20000010 	.word	0x20000010

08009314 <memcpy>:
 8009314:	440a      	add	r2, r1
 8009316:	4291      	cmp	r1, r2
 8009318:	f100 33ff 	add.w	r3, r0, #4294967295
 800931c:	d100      	bne.n	8009320 <memcpy+0xc>
 800931e:	4770      	bx	lr
 8009320:	b510      	push	{r4, lr}
 8009322:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009326:	f803 4f01 	strb.w	r4, [r3, #1]!
 800932a:	4291      	cmp	r1, r2
 800932c:	d1f9      	bne.n	8009322 <memcpy+0xe>
 800932e:	bd10      	pop	{r4, pc}

08009330 <_Balloc>:
 8009330:	b570      	push	{r4, r5, r6, lr}
 8009332:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009334:	4604      	mov	r4, r0
 8009336:	460d      	mov	r5, r1
 8009338:	b976      	cbnz	r6, 8009358 <_Balloc+0x28>
 800933a:	2010      	movs	r0, #16
 800933c:	f7ff ffe2 	bl	8009304 <malloc>
 8009340:	4602      	mov	r2, r0
 8009342:	6260      	str	r0, [r4, #36]	; 0x24
 8009344:	b920      	cbnz	r0, 8009350 <_Balloc+0x20>
 8009346:	4b18      	ldr	r3, [pc, #96]	; (80093a8 <_Balloc+0x78>)
 8009348:	4818      	ldr	r0, [pc, #96]	; (80093ac <_Balloc+0x7c>)
 800934a:	2166      	movs	r1, #102	; 0x66
 800934c:	f000 fdd6 	bl	8009efc <__assert_func>
 8009350:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009354:	6006      	str	r6, [r0, #0]
 8009356:	60c6      	str	r6, [r0, #12]
 8009358:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800935a:	68f3      	ldr	r3, [r6, #12]
 800935c:	b183      	cbz	r3, 8009380 <_Balloc+0x50>
 800935e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009360:	68db      	ldr	r3, [r3, #12]
 8009362:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009366:	b9b8      	cbnz	r0, 8009398 <_Balloc+0x68>
 8009368:	2101      	movs	r1, #1
 800936a:	fa01 f605 	lsl.w	r6, r1, r5
 800936e:	1d72      	adds	r2, r6, #5
 8009370:	0092      	lsls	r2, r2, #2
 8009372:	4620      	mov	r0, r4
 8009374:	f000 fb60 	bl	8009a38 <_calloc_r>
 8009378:	b160      	cbz	r0, 8009394 <_Balloc+0x64>
 800937a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800937e:	e00e      	b.n	800939e <_Balloc+0x6e>
 8009380:	2221      	movs	r2, #33	; 0x21
 8009382:	2104      	movs	r1, #4
 8009384:	4620      	mov	r0, r4
 8009386:	f000 fb57 	bl	8009a38 <_calloc_r>
 800938a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800938c:	60f0      	str	r0, [r6, #12]
 800938e:	68db      	ldr	r3, [r3, #12]
 8009390:	2b00      	cmp	r3, #0
 8009392:	d1e4      	bne.n	800935e <_Balloc+0x2e>
 8009394:	2000      	movs	r0, #0
 8009396:	bd70      	pop	{r4, r5, r6, pc}
 8009398:	6802      	ldr	r2, [r0, #0]
 800939a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800939e:	2300      	movs	r3, #0
 80093a0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80093a4:	e7f7      	b.n	8009396 <_Balloc+0x66>
 80093a6:	bf00      	nop
 80093a8:	0801026d 	.word	0x0801026d
 80093ac:	080102f0 	.word	0x080102f0

080093b0 <_Bfree>:
 80093b0:	b570      	push	{r4, r5, r6, lr}
 80093b2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80093b4:	4605      	mov	r5, r0
 80093b6:	460c      	mov	r4, r1
 80093b8:	b976      	cbnz	r6, 80093d8 <_Bfree+0x28>
 80093ba:	2010      	movs	r0, #16
 80093bc:	f7ff ffa2 	bl	8009304 <malloc>
 80093c0:	4602      	mov	r2, r0
 80093c2:	6268      	str	r0, [r5, #36]	; 0x24
 80093c4:	b920      	cbnz	r0, 80093d0 <_Bfree+0x20>
 80093c6:	4b09      	ldr	r3, [pc, #36]	; (80093ec <_Bfree+0x3c>)
 80093c8:	4809      	ldr	r0, [pc, #36]	; (80093f0 <_Bfree+0x40>)
 80093ca:	218a      	movs	r1, #138	; 0x8a
 80093cc:	f000 fd96 	bl	8009efc <__assert_func>
 80093d0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80093d4:	6006      	str	r6, [r0, #0]
 80093d6:	60c6      	str	r6, [r0, #12]
 80093d8:	b13c      	cbz	r4, 80093ea <_Bfree+0x3a>
 80093da:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80093dc:	6862      	ldr	r2, [r4, #4]
 80093de:	68db      	ldr	r3, [r3, #12]
 80093e0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80093e4:	6021      	str	r1, [r4, #0]
 80093e6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80093ea:	bd70      	pop	{r4, r5, r6, pc}
 80093ec:	0801026d 	.word	0x0801026d
 80093f0:	080102f0 	.word	0x080102f0

080093f4 <__multadd>:
 80093f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f8:	690d      	ldr	r5, [r1, #16]
 80093fa:	4607      	mov	r7, r0
 80093fc:	460c      	mov	r4, r1
 80093fe:	461e      	mov	r6, r3
 8009400:	f101 0c14 	add.w	ip, r1, #20
 8009404:	2000      	movs	r0, #0
 8009406:	f8dc 3000 	ldr.w	r3, [ip]
 800940a:	b299      	uxth	r1, r3
 800940c:	fb02 6101 	mla	r1, r2, r1, r6
 8009410:	0c1e      	lsrs	r6, r3, #16
 8009412:	0c0b      	lsrs	r3, r1, #16
 8009414:	fb02 3306 	mla	r3, r2, r6, r3
 8009418:	b289      	uxth	r1, r1
 800941a:	3001      	adds	r0, #1
 800941c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009420:	4285      	cmp	r5, r0
 8009422:	f84c 1b04 	str.w	r1, [ip], #4
 8009426:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800942a:	dcec      	bgt.n	8009406 <__multadd+0x12>
 800942c:	b30e      	cbz	r6, 8009472 <__multadd+0x7e>
 800942e:	68a3      	ldr	r3, [r4, #8]
 8009430:	42ab      	cmp	r3, r5
 8009432:	dc19      	bgt.n	8009468 <__multadd+0x74>
 8009434:	6861      	ldr	r1, [r4, #4]
 8009436:	4638      	mov	r0, r7
 8009438:	3101      	adds	r1, #1
 800943a:	f7ff ff79 	bl	8009330 <_Balloc>
 800943e:	4680      	mov	r8, r0
 8009440:	b928      	cbnz	r0, 800944e <__multadd+0x5a>
 8009442:	4602      	mov	r2, r0
 8009444:	4b0c      	ldr	r3, [pc, #48]	; (8009478 <__multadd+0x84>)
 8009446:	480d      	ldr	r0, [pc, #52]	; (800947c <__multadd+0x88>)
 8009448:	21b5      	movs	r1, #181	; 0xb5
 800944a:	f000 fd57 	bl	8009efc <__assert_func>
 800944e:	6922      	ldr	r2, [r4, #16]
 8009450:	3202      	adds	r2, #2
 8009452:	f104 010c 	add.w	r1, r4, #12
 8009456:	0092      	lsls	r2, r2, #2
 8009458:	300c      	adds	r0, #12
 800945a:	f7ff ff5b 	bl	8009314 <memcpy>
 800945e:	4621      	mov	r1, r4
 8009460:	4638      	mov	r0, r7
 8009462:	f7ff ffa5 	bl	80093b0 <_Bfree>
 8009466:	4644      	mov	r4, r8
 8009468:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800946c:	3501      	adds	r5, #1
 800946e:	615e      	str	r6, [r3, #20]
 8009470:	6125      	str	r5, [r4, #16]
 8009472:	4620      	mov	r0, r4
 8009474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009478:	080102df 	.word	0x080102df
 800947c:	080102f0 	.word	0x080102f0

08009480 <__hi0bits>:
 8009480:	0c03      	lsrs	r3, r0, #16
 8009482:	041b      	lsls	r3, r3, #16
 8009484:	b9d3      	cbnz	r3, 80094bc <__hi0bits+0x3c>
 8009486:	0400      	lsls	r0, r0, #16
 8009488:	2310      	movs	r3, #16
 800948a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800948e:	bf04      	itt	eq
 8009490:	0200      	lsleq	r0, r0, #8
 8009492:	3308      	addeq	r3, #8
 8009494:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009498:	bf04      	itt	eq
 800949a:	0100      	lsleq	r0, r0, #4
 800949c:	3304      	addeq	r3, #4
 800949e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 80094a2:	bf04      	itt	eq
 80094a4:	0080      	lsleq	r0, r0, #2
 80094a6:	3302      	addeq	r3, #2
 80094a8:	2800      	cmp	r0, #0
 80094aa:	db05      	blt.n	80094b8 <__hi0bits+0x38>
 80094ac:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 80094b0:	f103 0301 	add.w	r3, r3, #1
 80094b4:	bf08      	it	eq
 80094b6:	2320      	moveq	r3, #32
 80094b8:	4618      	mov	r0, r3
 80094ba:	4770      	bx	lr
 80094bc:	2300      	movs	r3, #0
 80094be:	e7e4      	b.n	800948a <__hi0bits+0xa>

080094c0 <__lo0bits>:
 80094c0:	6803      	ldr	r3, [r0, #0]
 80094c2:	f013 0207 	ands.w	r2, r3, #7
 80094c6:	4601      	mov	r1, r0
 80094c8:	d00b      	beq.n	80094e2 <__lo0bits+0x22>
 80094ca:	07da      	lsls	r2, r3, #31
 80094cc:	d423      	bmi.n	8009516 <__lo0bits+0x56>
 80094ce:	0798      	lsls	r0, r3, #30
 80094d0:	bf49      	itett	mi
 80094d2:	085b      	lsrmi	r3, r3, #1
 80094d4:	089b      	lsrpl	r3, r3, #2
 80094d6:	2001      	movmi	r0, #1
 80094d8:	600b      	strmi	r3, [r1, #0]
 80094da:	bf5c      	itt	pl
 80094dc:	600b      	strpl	r3, [r1, #0]
 80094de:	2002      	movpl	r0, #2
 80094e0:	4770      	bx	lr
 80094e2:	b298      	uxth	r0, r3
 80094e4:	b9a8      	cbnz	r0, 8009512 <__lo0bits+0x52>
 80094e6:	0c1b      	lsrs	r3, r3, #16
 80094e8:	2010      	movs	r0, #16
 80094ea:	b2da      	uxtb	r2, r3
 80094ec:	b90a      	cbnz	r2, 80094f2 <__lo0bits+0x32>
 80094ee:	3008      	adds	r0, #8
 80094f0:	0a1b      	lsrs	r3, r3, #8
 80094f2:	071a      	lsls	r2, r3, #28
 80094f4:	bf04      	itt	eq
 80094f6:	091b      	lsreq	r3, r3, #4
 80094f8:	3004      	addeq	r0, #4
 80094fa:	079a      	lsls	r2, r3, #30
 80094fc:	bf04      	itt	eq
 80094fe:	089b      	lsreq	r3, r3, #2
 8009500:	3002      	addeq	r0, #2
 8009502:	07da      	lsls	r2, r3, #31
 8009504:	d403      	bmi.n	800950e <__lo0bits+0x4e>
 8009506:	085b      	lsrs	r3, r3, #1
 8009508:	f100 0001 	add.w	r0, r0, #1
 800950c:	d005      	beq.n	800951a <__lo0bits+0x5a>
 800950e:	600b      	str	r3, [r1, #0]
 8009510:	4770      	bx	lr
 8009512:	4610      	mov	r0, r2
 8009514:	e7e9      	b.n	80094ea <__lo0bits+0x2a>
 8009516:	2000      	movs	r0, #0
 8009518:	4770      	bx	lr
 800951a:	2020      	movs	r0, #32
 800951c:	4770      	bx	lr
	...

08009520 <__i2b>:
 8009520:	b510      	push	{r4, lr}
 8009522:	460c      	mov	r4, r1
 8009524:	2101      	movs	r1, #1
 8009526:	f7ff ff03 	bl	8009330 <_Balloc>
 800952a:	4602      	mov	r2, r0
 800952c:	b928      	cbnz	r0, 800953a <__i2b+0x1a>
 800952e:	4b05      	ldr	r3, [pc, #20]	; (8009544 <__i2b+0x24>)
 8009530:	4805      	ldr	r0, [pc, #20]	; (8009548 <__i2b+0x28>)
 8009532:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8009536:	f000 fce1 	bl	8009efc <__assert_func>
 800953a:	2301      	movs	r3, #1
 800953c:	6144      	str	r4, [r0, #20]
 800953e:	6103      	str	r3, [r0, #16]
 8009540:	bd10      	pop	{r4, pc}
 8009542:	bf00      	nop
 8009544:	080102df 	.word	0x080102df
 8009548:	080102f0 	.word	0x080102f0

0800954c <__multiply>:
 800954c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009550:	4691      	mov	r9, r2
 8009552:	690a      	ldr	r2, [r1, #16]
 8009554:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8009558:	429a      	cmp	r2, r3
 800955a:	bfb8      	it	lt
 800955c:	460b      	movlt	r3, r1
 800955e:	460c      	mov	r4, r1
 8009560:	bfbc      	itt	lt
 8009562:	464c      	movlt	r4, r9
 8009564:	4699      	movlt	r9, r3
 8009566:	6927      	ldr	r7, [r4, #16]
 8009568:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800956c:	68a3      	ldr	r3, [r4, #8]
 800956e:	6861      	ldr	r1, [r4, #4]
 8009570:	eb07 060a 	add.w	r6, r7, sl
 8009574:	42b3      	cmp	r3, r6
 8009576:	b085      	sub	sp, #20
 8009578:	bfb8      	it	lt
 800957a:	3101      	addlt	r1, #1
 800957c:	f7ff fed8 	bl	8009330 <_Balloc>
 8009580:	b930      	cbnz	r0, 8009590 <__multiply+0x44>
 8009582:	4602      	mov	r2, r0
 8009584:	4b44      	ldr	r3, [pc, #272]	; (8009698 <__multiply+0x14c>)
 8009586:	4845      	ldr	r0, [pc, #276]	; (800969c <__multiply+0x150>)
 8009588:	f240 115d 	movw	r1, #349	; 0x15d
 800958c:	f000 fcb6 	bl	8009efc <__assert_func>
 8009590:	f100 0514 	add.w	r5, r0, #20
 8009594:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009598:	462b      	mov	r3, r5
 800959a:	2200      	movs	r2, #0
 800959c:	4543      	cmp	r3, r8
 800959e:	d321      	bcc.n	80095e4 <__multiply+0x98>
 80095a0:	f104 0314 	add.w	r3, r4, #20
 80095a4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 80095a8:	f109 0314 	add.w	r3, r9, #20
 80095ac:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 80095b0:	9202      	str	r2, [sp, #8]
 80095b2:	1b3a      	subs	r2, r7, r4
 80095b4:	3a15      	subs	r2, #21
 80095b6:	f022 0203 	bic.w	r2, r2, #3
 80095ba:	3204      	adds	r2, #4
 80095bc:	f104 0115 	add.w	r1, r4, #21
 80095c0:	428f      	cmp	r7, r1
 80095c2:	bf38      	it	cc
 80095c4:	2204      	movcc	r2, #4
 80095c6:	9201      	str	r2, [sp, #4]
 80095c8:	9a02      	ldr	r2, [sp, #8]
 80095ca:	9303      	str	r3, [sp, #12]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d80c      	bhi.n	80095ea <__multiply+0x9e>
 80095d0:	2e00      	cmp	r6, #0
 80095d2:	dd03      	ble.n	80095dc <__multiply+0x90>
 80095d4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80095d8:	2b00      	cmp	r3, #0
 80095da:	d05a      	beq.n	8009692 <__multiply+0x146>
 80095dc:	6106      	str	r6, [r0, #16]
 80095de:	b005      	add	sp, #20
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095e4:	f843 2b04 	str.w	r2, [r3], #4
 80095e8:	e7d8      	b.n	800959c <__multiply+0x50>
 80095ea:	f8b3 a000 	ldrh.w	sl, [r3]
 80095ee:	f1ba 0f00 	cmp.w	sl, #0
 80095f2:	d024      	beq.n	800963e <__multiply+0xf2>
 80095f4:	f104 0e14 	add.w	lr, r4, #20
 80095f8:	46a9      	mov	r9, r5
 80095fa:	f04f 0c00 	mov.w	ip, #0
 80095fe:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009602:	f8d9 1000 	ldr.w	r1, [r9]
 8009606:	fa1f fb82 	uxth.w	fp, r2
 800960a:	b289      	uxth	r1, r1
 800960c:	fb0a 110b 	mla	r1, sl, fp, r1
 8009610:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8009614:	f8d9 2000 	ldr.w	r2, [r9]
 8009618:	4461      	add	r1, ip
 800961a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800961e:	fb0a c20b 	mla	r2, sl, fp, ip
 8009622:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8009626:	b289      	uxth	r1, r1
 8009628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800962c:	4577      	cmp	r7, lr
 800962e:	f849 1b04 	str.w	r1, [r9], #4
 8009632:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 8009636:	d8e2      	bhi.n	80095fe <__multiply+0xb2>
 8009638:	9a01      	ldr	r2, [sp, #4]
 800963a:	f845 c002 	str.w	ip, [r5, r2]
 800963e:	9a03      	ldr	r2, [sp, #12]
 8009640:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8009644:	3304      	adds	r3, #4
 8009646:	f1b9 0f00 	cmp.w	r9, #0
 800964a:	d020      	beq.n	800968e <__multiply+0x142>
 800964c:	6829      	ldr	r1, [r5, #0]
 800964e:	f104 0c14 	add.w	ip, r4, #20
 8009652:	46ae      	mov	lr, r5
 8009654:	f04f 0a00 	mov.w	sl, #0
 8009658:	f8bc b000 	ldrh.w	fp, [ip]
 800965c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8009660:	fb09 220b 	mla	r2, r9, fp, r2
 8009664:	4492      	add	sl, r2
 8009666:	b289      	uxth	r1, r1
 8009668:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800966c:	f84e 1b04 	str.w	r1, [lr], #4
 8009670:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009674:	f8be 1000 	ldrh.w	r1, [lr]
 8009678:	0c12      	lsrs	r2, r2, #16
 800967a:	fb09 1102 	mla	r1, r9, r2, r1
 800967e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009682:	4567      	cmp	r7, ip
 8009684:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009688:	d8e6      	bhi.n	8009658 <__multiply+0x10c>
 800968a:	9a01      	ldr	r2, [sp, #4]
 800968c:	50a9      	str	r1, [r5, r2]
 800968e:	3504      	adds	r5, #4
 8009690:	e79a      	b.n	80095c8 <__multiply+0x7c>
 8009692:	3e01      	subs	r6, #1
 8009694:	e79c      	b.n	80095d0 <__multiply+0x84>
 8009696:	bf00      	nop
 8009698:	080102df 	.word	0x080102df
 800969c:	080102f0 	.word	0x080102f0

080096a0 <__pow5mult>:
 80096a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80096a4:	4615      	mov	r5, r2
 80096a6:	f012 0203 	ands.w	r2, r2, #3
 80096aa:	4606      	mov	r6, r0
 80096ac:	460f      	mov	r7, r1
 80096ae:	d007      	beq.n	80096c0 <__pow5mult+0x20>
 80096b0:	4c25      	ldr	r4, [pc, #148]	; (8009748 <__pow5mult+0xa8>)
 80096b2:	3a01      	subs	r2, #1
 80096b4:	2300      	movs	r3, #0
 80096b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80096ba:	f7ff fe9b 	bl	80093f4 <__multadd>
 80096be:	4607      	mov	r7, r0
 80096c0:	10ad      	asrs	r5, r5, #2
 80096c2:	d03d      	beq.n	8009740 <__pow5mult+0xa0>
 80096c4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 80096c6:	b97c      	cbnz	r4, 80096e8 <__pow5mult+0x48>
 80096c8:	2010      	movs	r0, #16
 80096ca:	f7ff fe1b 	bl	8009304 <malloc>
 80096ce:	4602      	mov	r2, r0
 80096d0:	6270      	str	r0, [r6, #36]	; 0x24
 80096d2:	b928      	cbnz	r0, 80096e0 <__pow5mult+0x40>
 80096d4:	4b1d      	ldr	r3, [pc, #116]	; (800974c <__pow5mult+0xac>)
 80096d6:	481e      	ldr	r0, [pc, #120]	; (8009750 <__pow5mult+0xb0>)
 80096d8:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 80096dc:	f000 fc0e 	bl	8009efc <__assert_func>
 80096e0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80096e4:	6004      	str	r4, [r0, #0]
 80096e6:	60c4      	str	r4, [r0, #12]
 80096e8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 80096ec:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80096f0:	b94c      	cbnz	r4, 8009706 <__pow5mult+0x66>
 80096f2:	f240 2171 	movw	r1, #625	; 0x271
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7ff ff12 	bl	8009520 <__i2b>
 80096fc:	2300      	movs	r3, #0
 80096fe:	f8c8 0008 	str.w	r0, [r8, #8]
 8009702:	4604      	mov	r4, r0
 8009704:	6003      	str	r3, [r0, #0]
 8009706:	f04f 0900 	mov.w	r9, #0
 800970a:	07eb      	lsls	r3, r5, #31
 800970c:	d50a      	bpl.n	8009724 <__pow5mult+0x84>
 800970e:	4639      	mov	r1, r7
 8009710:	4622      	mov	r2, r4
 8009712:	4630      	mov	r0, r6
 8009714:	f7ff ff1a 	bl	800954c <__multiply>
 8009718:	4639      	mov	r1, r7
 800971a:	4680      	mov	r8, r0
 800971c:	4630      	mov	r0, r6
 800971e:	f7ff fe47 	bl	80093b0 <_Bfree>
 8009722:	4647      	mov	r7, r8
 8009724:	106d      	asrs	r5, r5, #1
 8009726:	d00b      	beq.n	8009740 <__pow5mult+0xa0>
 8009728:	6820      	ldr	r0, [r4, #0]
 800972a:	b938      	cbnz	r0, 800973c <__pow5mult+0x9c>
 800972c:	4622      	mov	r2, r4
 800972e:	4621      	mov	r1, r4
 8009730:	4630      	mov	r0, r6
 8009732:	f7ff ff0b 	bl	800954c <__multiply>
 8009736:	6020      	str	r0, [r4, #0]
 8009738:	f8c0 9000 	str.w	r9, [r0]
 800973c:	4604      	mov	r4, r0
 800973e:	e7e4      	b.n	800970a <__pow5mult+0x6a>
 8009740:	4638      	mov	r0, r7
 8009742:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009746:	bf00      	nop
 8009748:	08010440 	.word	0x08010440
 800974c:	0801026d 	.word	0x0801026d
 8009750:	080102f0 	.word	0x080102f0

08009754 <__lshift>:
 8009754:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009758:	460c      	mov	r4, r1
 800975a:	6849      	ldr	r1, [r1, #4]
 800975c:	6923      	ldr	r3, [r4, #16]
 800975e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009762:	68a3      	ldr	r3, [r4, #8]
 8009764:	4607      	mov	r7, r0
 8009766:	4691      	mov	r9, r2
 8009768:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800976c:	f108 0601 	add.w	r6, r8, #1
 8009770:	42b3      	cmp	r3, r6
 8009772:	db0b      	blt.n	800978c <__lshift+0x38>
 8009774:	4638      	mov	r0, r7
 8009776:	f7ff fddb 	bl	8009330 <_Balloc>
 800977a:	4605      	mov	r5, r0
 800977c:	b948      	cbnz	r0, 8009792 <__lshift+0x3e>
 800977e:	4602      	mov	r2, r0
 8009780:	4b2a      	ldr	r3, [pc, #168]	; (800982c <__lshift+0xd8>)
 8009782:	482b      	ldr	r0, [pc, #172]	; (8009830 <__lshift+0xdc>)
 8009784:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009788:	f000 fbb8 	bl	8009efc <__assert_func>
 800978c:	3101      	adds	r1, #1
 800978e:	005b      	lsls	r3, r3, #1
 8009790:	e7ee      	b.n	8009770 <__lshift+0x1c>
 8009792:	2300      	movs	r3, #0
 8009794:	f100 0114 	add.w	r1, r0, #20
 8009798:	f100 0210 	add.w	r2, r0, #16
 800979c:	4618      	mov	r0, r3
 800979e:	4553      	cmp	r3, sl
 80097a0:	db37      	blt.n	8009812 <__lshift+0xbe>
 80097a2:	6920      	ldr	r0, [r4, #16]
 80097a4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80097a8:	f104 0314 	add.w	r3, r4, #20
 80097ac:	f019 091f 	ands.w	r9, r9, #31
 80097b0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80097b4:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 80097b8:	d02f      	beq.n	800981a <__lshift+0xc6>
 80097ba:	f1c9 0e20 	rsb	lr, r9, #32
 80097be:	468a      	mov	sl, r1
 80097c0:	f04f 0c00 	mov.w	ip, #0
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	fa02 f209 	lsl.w	r2, r2, r9
 80097ca:	ea42 020c 	orr.w	r2, r2, ip
 80097ce:	f84a 2b04 	str.w	r2, [sl], #4
 80097d2:	f853 2b04 	ldr.w	r2, [r3], #4
 80097d6:	4298      	cmp	r0, r3
 80097d8:	fa22 fc0e 	lsr.w	ip, r2, lr
 80097dc:	d8f2      	bhi.n	80097c4 <__lshift+0x70>
 80097de:	1b03      	subs	r3, r0, r4
 80097e0:	3b15      	subs	r3, #21
 80097e2:	f023 0303 	bic.w	r3, r3, #3
 80097e6:	3304      	adds	r3, #4
 80097e8:	f104 0215 	add.w	r2, r4, #21
 80097ec:	4290      	cmp	r0, r2
 80097ee:	bf38      	it	cc
 80097f0:	2304      	movcc	r3, #4
 80097f2:	f841 c003 	str.w	ip, [r1, r3]
 80097f6:	f1bc 0f00 	cmp.w	ip, #0
 80097fa:	d001      	beq.n	8009800 <__lshift+0xac>
 80097fc:	f108 0602 	add.w	r6, r8, #2
 8009800:	3e01      	subs	r6, #1
 8009802:	4638      	mov	r0, r7
 8009804:	612e      	str	r6, [r5, #16]
 8009806:	4621      	mov	r1, r4
 8009808:	f7ff fdd2 	bl	80093b0 <_Bfree>
 800980c:	4628      	mov	r0, r5
 800980e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009812:	f842 0f04 	str.w	r0, [r2, #4]!
 8009816:	3301      	adds	r3, #1
 8009818:	e7c1      	b.n	800979e <__lshift+0x4a>
 800981a:	3904      	subs	r1, #4
 800981c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009820:	f841 2f04 	str.w	r2, [r1, #4]!
 8009824:	4298      	cmp	r0, r3
 8009826:	d8f9      	bhi.n	800981c <__lshift+0xc8>
 8009828:	e7ea      	b.n	8009800 <__lshift+0xac>
 800982a:	bf00      	nop
 800982c:	080102df 	.word	0x080102df
 8009830:	080102f0 	.word	0x080102f0

08009834 <__mcmp>:
 8009834:	b530      	push	{r4, r5, lr}
 8009836:	6902      	ldr	r2, [r0, #16]
 8009838:	690c      	ldr	r4, [r1, #16]
 800983a:	1b12      	subs	r2, r2, r4
 800983c:	d10e      	bne.n	800985c <__mcmp+0x28>
 800983e:	f100 0314 	add.w	r3, r0, #20
 8009842:	3114      	adds	r1, #20
 8009844:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 8009848:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800984c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 8009850:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 8009854:	42a5      	cmp	r5, r4
 8009856:	d003      	beq.n	8009860 <__mcmp+0x2c>
 8009858:	d305      	bcc.n	8009866 <__mcmp+0x32>
 800985a:	2201      	movs	r2, #1
 800985c:	4610      	mov	r0, r2
 800985e:	bd30      	pop	{r4, r5, pc}
 8009860:	4283      	cmp	r3, r0
 8009862:	d3f3      	bcc.n	800984c <__mcmp+0x18>
 8009864:	e7fa      	b.n	800985c <__mcmp+0x28>
 8009866:	f04f 32ff 	mov.w	r2, #4294967295
 800986a:	e7f7      	b.n	800985c <__mcmp+0x28>

0800986c <__mdiff>:
 800986c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009870:	460c      	mov	r4, r1
 8009872:	4606      	mov	r6, r0
 8009874:	4611      	mov	r1, r2
 8009876:	4620      	mov	r0, r4
 8009878:	4690      	mov	r8, r2
 800987a:	f7ff ffdb 	bl	8009834 <__mcmp>
 800987e:	1e05      	subs	r5, r0, #0
 8009880:	d110      	bne.n	80098a4 <__mdiff+0x38>
 8009882:	4629      	mov	r1, r5
 8009884:	4630      	mov	r0, r6
 8009886:	f7ff fd53 	bl	8009330 <_Balloc>
 800988a:	b930      	cbnz	r0, 800989a <__mdiff+0x2e>
 800988c:	4b3a      	ldr	r3, [pc, #232]	; (8009978 <__mdiff+0x10c>)
 800988e:	4602      	mov	r2, r0
 8009890:	f240 2132 	movw	r1, #562	; 0x232
 8009894:	4839      	ldr	r0, [pc, #228]	; (800997c <__mdiff+0x110>)
 8009896:	f000 fb31 	bl	8009efc <__assert_func>
 800989a:	2301      	movs	r3, #1
 800989c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80098a0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80098a4:	bfa4      	itt	ge
 80098a6:	4643      	movge	r3, r8
 80098a8:	46a0      	movge	r8, r4
 80098aa:	4630      	mov	r0, r6
 80098ac:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80098b0:	bfa6      	itte	ge
 80098b2:	461c      	movge	r4, r3
 80098b4:	2500      	movge	r5, #0
 80098b6:	2501      	movlt	r5, #1
 80098b8:	f7ff fd3a 	bl	8009330 <_Balloc>
 80098bc:	b920      	cbnz	r0, 80098c8 <__mdiff+0x5c>
 80098be:	4b2e      	ldr	r3, [pc, #184]	; (8009978 <__mdiff+0x10c>)
 80098c0:	4602      	mov	r2, r0
 80098c2:	f44f 7110 	mov.w	r1, #576	; 0x240
 80098c6:	e7e5      	b.n	8009894 <__mdiff+0x28>
 80098c8:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80098cc:	6926      	ldr	r6, [r4, #16]
 80098ce:	60c5      	str	r5, [r0, #12]
 80098d0:	f104 0914 	add.w	r9, r4, #20
 80098d4:	f108 0514 	add.w	r5, r8, #20
 80098d8:	f100 0e14 	add.w	lr, r0, #20
 80098dc:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 80098e0:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80098e4:	f108 0210 	add.w	r2, r8, #16
 80098e8:	46f2      	mov	sl, lr
 80098ea:	2100      	movs	r1, #0
 80098ec:	f859 3b04 	ldr.w	r3, [r9], #4
 80098f0:	f852 bf04 	ldr.w	fp, [r2, #4]!
 80098f4:	fa1f f883 	uxth.w	r8, r3
 80098f8:	fa11 f18b 	uxtah	r1, r1, fp
 80098fc:	0c1b      	lsrs	r3, r3, #16
 80098fe:	eba1 0808 	sub.w	r8, r1, r8
 8009902:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009906:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800990a:	fa1f f888 	uxth.w	r8, r8
 800990e:	1419      	asrs	r1, r3, #16
 8009910:	454e      	cmp	r6, r9
 8009912:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 8009916:	f84a 3b04 	str.w	r3, [sl], #4
 800991a:	d8e7      	bhi.n	80098ec <__mdiff+0x80>
 800991c:	1b33      	subs	r3, r6, r4
 800991e:	3b15      	subs	r3, #21
 8009920:	f023 0303 	bic.w	r3, r3, #3
 8009924:	3304      	adds	r3, #4
 8009926:	3415      	adds	r4, #21
 8009928:	42a6      	cmp	r6, r4
 800992a:	bf38      	it	cc
 800992c:	2304      	movcc	r3, #4
 800992e:	441d      	add	r5, r3
 8009930:	4473      	add	r3, lr
 8009932:	469e      	mov	lr, r3
 8009934:	462e      	mov	r6, r5
 8009936:	4566      	cmp	r6, ip
 8009938:	d30e      	bcc.n	8009958 <__mdiff+0xec>
 800993a:	f10c 0203 	add.w	r2, ip, #3
 800993e:	1b52      	subs	r2, r2, r5
 8009940:	f022 0203 	bic.w	r2, r2, #3
 8009944:	3d03      	subs	r5, #3
 8009946:	45ac      	cmp	ip, r5
 8009948:	bf38      	it	cc
 800994a:	2200      	movcc	r2, #0
 800994c:	441a      	add	r2, r3
 800994e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 8009952:	b17b      	cbz	r3, 8009974 <__mdiff+0x108>
 8009954:	6107      	str	r7, [r0, #16]
 8009956:	e7a3      	b.n	80098a0 <__mdiff+0x34>
 8009958:	f856 8b04 	ldr.w	r8, [r6], #4
 800995c:	fa11 f288 	uxtah	r2, r1, r8
 8009960:	1414      	asrs	r4, r2, #16
 8009962:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8009966:	b292      	uxth	r2, r2
 8009968:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800996c:	f84e 2b04 	str.w	r2, [lr], #4
 8009970:	1421      	asrs	r1, r4, #16
 8009972:	e7e0      	b.n	8009936 <__mdiff+0xca>
 8009974:	3f01      	subs	r7, #1
 8009976:	e7ea      	b.n	800994e <__mdiff+0xe2>
 8009978:	080102df 	.word	0x080102df
 800997c:	080102f0 	.word	0x080102f0

08009980 <__d2b>:
 8009980:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009984:	4689      	mov	r9, r1
 8009986:	2101      	movs	r1, #1
 8009988:	ec57 6b10 	vmov	r6, r7, d0
 800998c:	4690      	mov	r8, r2
 800998e:	f7ff fccf 	bl	8009330 <_Balloc>
 8009992:	4604      	mov	r4, r0
 8009994:	b930      	cbnz	r0, 80099a4 <__d2b+0x24>
 8009996:	4602      	mov	r2, r0
 8009998:	4b25      	ldr	r3, [pc, #148]	; (8009a30 <__d2b+0xb0>)
 800999a:	4826      	ldr	r0, [pc, #152]	; (8009a34 <__d2b+0xb4>)
 800999c:	f240 310a 	movw	r1, #778	; 0x30a
 80099a0:	f000 faac 	bl	8009efc <__assert_func>
 80099a4:	f3c7 550a 	ubfx	r5, r7, #20, #11
 80099a8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80099ac:	bb35      	cbnz	r5, 80099fc <__d2b+0x7c>
 80099ae:	2e00      	cmp	r6, #0
 80099b0:	9301      	str	r3, [sp, #4]
 80099b2:	d028      	beq.n	8009a06 <__d2b+0x86>
 80099b4:	4668      	mov	r0, sp
 80099b6:	9600      	str	r6, [sp, #0]
 80099b8:	f7ff fd82 	bl	80094c0 <__lo0bits>
 80099bc:	9900      	ldr	r1, [sp, #0]
 80099be:	b300      	cbz	r0, 8009a02 <__d2b+0x82>
 80099c0:	9a01      	ldr	r2, [sp, #4]
 80099c2:	f1c0 0320 	rsb	r3, r0, #32
 80099c6:	fa02 f303 	lsl.w	r3, r2, r3
 80099ca:	430b      	orrs	r3, r1
 80099cc:	40c2      	lsrs	r2, r0
 80099ce:	6163      	str	r3, [r4, #20]
 80099d0:	9201      	str	r2, [sp, #4]
 80099d2:	9b01      	ldr	r3, [sp, #4]
 80099d4:	61a3      	str	r3, [r4, #24]
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	bf14      	ite	ne
 80099da:	2202      	movne	r2, #2
 80099dc:	2201      	moveq	r2, #1
 80099de:	6122      	str	r2, [r4, #16]
 80099e0:	b1d5      	cbz	r5, 8009a18 <__d2b+0x98>
 80099e2:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 80099e6:	4405      	add	r5, r0
 80099e8:	f8c9 5000 	str.w	r5, [r9]
 80099ec:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80099f0:	f8c8 0000 	str.w	r0, [r8]
 80099f4:	4620      	mov	r0, r4
 80099f6:	b003      	add	sp, #12
 80099f8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80099fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009a00:	e7d5      	b.n	80099ae <__d2b+0x2e>
 8009a02:	6161      	str	r1, [r4, #20]
 8009a04:	e7e5      	b.n	80099d2 <__d2b+0x52>
 8009a06:	a801      	add	r0, sp, #4
 8009a08:	f7ff fd5a 	bl	80094c0 <__lo0bits>
 8009a0c:	9b01      	ldr	r3, [sp, #4]
 8009a0e:	6163      	str	r3, [r4, #20]
 8009a10:	2201      	movs	r2, #1
 8009a12:	6122      	str	r2, [r4, #16]
 8009a14:	3020      	adds	r0, #32
 8009a16:	e7e3      	b.n	80099e0 <__d2b+0x60>
 8009a18:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009a1c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8009a20:	f8c9 0000 	str.w	r0, [r9]
 8009a24:	6918      	ldr	r0, [r3, #16]
 8009a26:	f7ff fd2b 	bl	8009480 <__hi0bits>
 8009a2a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009a2e:	e7df      	b.n	80099f0 <__d2b+0x70>
 8009a30:	080102df 	.word	0x080102df
 8009a34:	080102f0 	.word	0x080102f0

08009a38 <_calloc_r>:
 8009a38:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a3a:	fba1 2402 	umull	r2, r4, r1, r2
 8009a3e:	b94c      	cbnz	r4, 8009a54 <_calloc_r+0x1c>
 8009a40:	4611      	mov	r1, r2
 8009a42:	9201      	str	r2, [sp, #4]
 8009a44:	f000 f87a 	bl	8009b3c <_malloc_r>
 8009a48:	9a01      	ldr	r2, [sp, #4]
 8009a4a:	4605      	mov	r5, r0
 8009a4c:	b930      	cbnz	r0, 8009a5c <_calloc_r+0x24>
 8009a4e:	4628      	mov	r0, r5
 8009a50:	b003      	add	sp, #12
 8009a52:	bd30      	pop	{r4, r5, pc}
 8009a54:	220c      	movs	r2, #12
 8009a56:	6002      	str	r2, [r0, #0]
 8009a58:	2500      	movs	r5, #0
 8009a5a:	e7f8      	b.n	8009a4e <_calloc_r+0x16>
 8009a5c:	4621      	mov	r1, r4
 8009a5e:	f7fe f9e5 	bl	8007e2c <memset>
 8009a62:	e7f4      	b.n	8009a4e <_calloc_r+0x16>

08009a64 <_free_r>:
 8009a64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a66:	2900      	cmp	r1, #0
 8009a68:	d044      	beq.n	8009af4 <_free_r+0x90>
 8009a6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009a6e:	9001      	str	r0, [sp, #4]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	f1a1 0404 	sub.w	r4, r1, #4
 8009a76:	bfb8      	it	lt
 8009a78:	18e4      	addlt	r4, r4, r3
 8009a7a:	f000 fa9b 	bl	8009fb4 <__malloc_lock>
 8009a7e:	4a1e      	ldr	r2, [pc, #120]	; (8009af8 <_free_r+0x94>)
 8009a80:	9801      	ldr	r0, [sp, #4]
 8009a82:	6813      	ldr	r3, [r2, #0]
 8009a84:	b933      	cbnz	r3, 8009a94 <_free_r+0x30>
 8009a86:	6063      	str	r3, [r4, #4]
 8009a88:	6014      	str	r4, [r2, #0]
 8009a8a:	b003      	add	sp, #12
 8009a8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009a90:	f000 ba96 	b.w	8009fc0 <__malloc_unlock>
 8009a94:	42a3      	cmp	r3, r4
 8009a96:	d908      	bls.n	8009aaa <_free_r+0x46>
 8009a98:	6825      	ldr	r5, [r4, #0]
 8009a9a:	1961      	adds	r1, r4, r5
 8009a9c:	428b      	cmp	r3, r1
 8009a9e:	bf01      	itttt	eq
 8009aa0:	6819      	ldreq	r1, [r3, #0]
 8009aa2:	685b      	ldreq	r3, [r3, #4]
 8009aa4:	1949      	addeq	r1, r1, r5
 8009aa6:	6021      	streq	r1, [r4, #0]
 8009aa8:	e7ed      	b.n	8009a86 <_free_r+0x22>
 8009aaa:	461a      	mov	r2, r3
 8009aac:	685b      	ldr	r3, [r3, #4]
 8009aae:	b10b      	cbz	r3, 8009ab4 <_free_r+0x50>
 8009ab0:	42a3      	cmp	r3, r4
 8009ab2:	d9fa      	bls.n	8009aaa <_free_r+0x46>
 8009ab4:	6811      	ldr	r1, [r2, #0]
 8009ab6:	1855      	adds	r5, r2, r1
 8009ab8:	42a5      	cmp	r5, r4
 8009aba:	d10b      	bne.n	8009ad4 <_free_r+0x70>
 8009abc:	6824      	ldr	r4, [r4, #0]
 8009abe:	4421      	add	r1, r4
 8009ac0:	1854      	adds	r4, r2, r1
 8009ac2:	42a3      	cmp	r3, r4
 8009ac4:	6011      	str	r1, [r2, #0]
 8009ac6:	d1e0      	bne.n	8009a8a <_free_r+0x26>
 8009ac8:	681c      	ldr	r4, [r3, #0]
 8009aca:	685b      	ldr	r3, [r3, #4]
 8009acc:	6053      	str	r3, [r2, #4]
 8009ace:	4421      	add	r1, r4
 8009ad0:	6011      	str	r1, [r2, #0]
 8009ad2:	e7da      	b.n	8009a8a <_free_r+0x26>
 8009ad4:	d902      	bls.n	8009adc <_free_r+0x78>
 8009ad6:	230c      	movs	r3, #12
 8009ad8:	6003      	str	r3, [r0, #0]
 8009ada:	e7d6      	b.n	8009a8a <_free_r+0x26>
 8009adc:	6825      	ldr	r5, [r4, #0]
 8009ade:	1961      	adds	r1, r4, r5
 8009ae0:	428b      	cmp	r3, r1
 8009ae2:	bf04      	itt	eq
 8009ae4:	6819      	ldreq	r1, [r3, #0]
 8009ae6:	685b      	ldreq	r3, [r3, #4]
 8009ae8:	6063      	str	r3, [r4, #4]
 8009aea:	bf04      	itt	eq
 8009aec:	1949      	addeq	r1, r1, r5
 8009aee:	6021      	streq	r1, [r4, #0]
 8009af0:	6054      	str	r4, [r2, #4]
 8009af2:	e7ca      	b.n	8009a8a <_free_r+0x26>
 8009af4:	b003      	add	sp, #12
 8009af6:	bd30      	pop	{r4, r5, pc}
 8009af8:	2000048c 	.word	0x2000048c

08009afc <sbrk_aligned>:
 8009afc:	b570      	push	{r4, r5, r6, lr}
 8009afe:	4e0e      	ldr	r6, [pc, #56]	; (8009b38 <sbrk_aligned+0x3c>)
 8009b00:	460c      	mov	r4, r1
 8009b02:	6831      	ldr	r1, [r6, #0]
 8009b04:	4605      	mov	r5, r0
 8009b06:	b911      	cbnz	r1, 8009b0e <sbrk_aligned+0x12>
 8009b08:	f000 f9e8 	bl	8009edc <_sbrk_r>
 8009b0c:	6030      	str	r0, [r6, #0]
 8009b0e:	4621      	mov	r1, r4
 8009b10:	4628      	mov	r0, r5
 8009b12:	f000 f9e3 	bl	8009edc <_sbrk_r>
 8009b16:	1c43      	adds	r3, r0, #1
 8009b18:	d00a      	beq.n	8009b30 <sbrk_aligned+0x34>
 8009b1a:	1cc4      	adds	r4, r0, #3
 8009b1c:	f024 0403 	bic.w	r4, r4, #3
 8009b20:	42a0      	cmp	r0, r4
 8009b22:	d007      	beq.n	8009b34 <sbrk_aligned+0x38>
 8009b24:	1a21      	subs	r1, r4, r0
 8009b26:	4628      	mov	r0, r5
 8009b28:	f000 f9d8 	bl	8009edc <_sbrk_r>
 8009b2c:	3001      	adds	r0, #1
 8009b2e:	d101      	bne.n	8009b34 <sbrk_aligned+0x38>
 8009b30:	f04f 34ff 	mov.w	r4, #4294967295
 8009b34:	4620      	mov	r0, r4
 8009b36:	bd70      	pop	{r4, r5, r6, pc}
 8009b38:	20000490 	.word	0x20000490

08009b3c <_malloc_r>:
 8009b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009b40:	1ccd      	adds	r5, r1, #3
 8009b42:	f025 0503 	bic.w	r5, r5, #3
 8009b46:	3508      	adds	r5, #8
 8009b48:	2d0c      	cmp	r5, #12
 8009b4a:	bf38      	it	cc
 8009b4c:	250c      	movcc	r5, #12
 8009b4e:	2d00      	cmp	r5, #0
 8009b50:	4607      	mov	r7, r0
 8009b52:	db01      	blt.n	8009b58 <_malloc_r+0x1c>
 8009b54:	42a9      	cmp	r1, r5
 8009b56:	d905      	bls.n	8009b64 <_malloc_r+0x28>
 8009b58:	230c      	movs	r3, #12
 8009b5a:	603b      	str	r3, [r7, #0]
 8009b5c:	2600      	movs	r6, #0
 8009b5e:	4630      	mov	r0, r6
 8009b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009b64:	4e2e      	ldr	r6, [pc, #184]	; (8009c20 <_malloc_r+0xe4>)
 8009b66:	f000 fa25 	bl	8009fb4 <__malloc_lock>
 8009b6a:	6833      	ldr	r3, [r6, #0]
 8009b6c:	461c      	mov	r4, r3
 8009b6e:	bb34      	cbnz	r4, 8009bbe <_malloc_r+0x82>
 8009b70:	4629      	mov	r1, r5
 8009b72:	4638      	mov	r0, r7
 8009b74:	f7ff ffc2 	bl	8009afc <sbrk_aligned>
 8009b78:	1c43      	adds	r3, r0, #1
 8009b7a:	4604      	mov	r4, r0
 8009b7c:	d14d      	bne.n	8009c1a <_malloc_r+0xde>
 8009b7e:	6834      	ldr	r4, [r6, #0]
 8009b80:	4626      	mov	r6, r4
 8009b82:	2e00      	cmp	r6, #0
 8009b84:	d140      	bne.n	8009c08 <_malloc_r+0xcc>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	4631      	mov	r1, r6
 8009b8a:	4638      	mov	r0, r7
 8009b8c:	eb04 0803 	add.w	r8, r4, r3
 8009b90:	f000 f9a4 	bl	8009edc <_sbrk_r>
 8009b94:	4580      	cmp	r8, r0
 8009b96:	d13a      	bne.n	8009c0e <_malloc_r+0xd2>
 8009b98:	6821      	ldr	r1, [r4, #0]
 8009b9a:	3503      	adds	r5, #3
 8009b9c:	1a6d      	subs	r5, r5, r1
 8009b9e:	f025 0503 	bic.w	r5, r5, #3
 8009ba2:	3508      	adds	r5, #8
 8009ba4:	2d0c      	cmp	r5, #12
 8009ba6:	bf38      	it	cc
 8009ba8:	250c      	movcc	r5, #12
 8009baa:	4629      	mov	r1, r5
 8009bac:	4638      	mov	r0, r7
 8009bae:	f7ff ffa5 	bl	8009afc <sbrk_aligned>
 8009bb2:	3001      	adds	r0, #1
 8009bb4:	d02b      	beq.n	8009c0e <_malloc_r+0xd2>
 8009bb6:	6823      	ldr	r3, [r4, #0]
 8009bb8:	442b      	add	r3, r5
 8009bba:	6023      	str	r3, [r4, #0]
 8009bbc:	e00e      	b.n	8009bdc <_malloc_r+0xa0>
 8009bbe:	6822      	ldr	r2, [r4, #0]
 8009bc0:	1b52      	subs	r2, r2, r5
 8009bc2:	d41e      	bmi.n	8009c02 <_malloc_r+0xc6>
 8009bc4:	2a0b      	cmp	r2, #11
 8009bc6:	d916      	bls.n	8009bf6 <_malloc_r+0xba>
 8009bc8:	1961      	adds	r1, r4, r5
 8009bca:	42a3      	cmp	r3, r4
 8009bcc:	6025      	str	r5, [r4, #0]
 8009bce:	bf18      	it	ne
 8009bd0:	6059      	strne	r1, [r3, #4]
 8009bd2:	6863      	ldr	r3, [r4, #4]
 8009bd4:	bf08      	it	eq
 8009bd6:	6031      	streq	r1, [r6, #0]
 8009bd8:	5162      	str	r2, [r4, r5]
 8009bda:	604b      	str	r3, [r1, #4]
 8009bdc:	4638      	mov	r0, r7
 8009bde:	f104 060b 	add.w	r6, r4, #11
 8009be2:	f000 f9ed 	bl	8009fc0 <__malloc_unlock>
 8009be6:	f026 0607 	bic.w	r6, r6, #7
 8009bea:	1d23      	adds	r3, r4, #4
 8009bec:	1af2      	subs	r2, r6, r3
 8009bee:	d0b6      	beq.n	8009b5e <_malloc_r+0x22>
 8009bf0:	1b9b      	subs	r3, r3, r6
 8009bf2:	50a3      	str	r3, [r4, r2]
 8009bf4:	e7b3      	b.n	8009b5e <_malloc_r+0x22>
 8009bf6:	6862      	ldr	r2, [r4, #4]
 8009bf8:	42a3      	cmp	r3, r4
 8009bfa:	bf0c      	ite	eq
 8009bfc:	6032      	streq	r2, [r6, #0]
 8009bfe:	605a      	strne	r2, [r3, #4]
 8009c00:	e7ec      	b.n	8009bdc <_malloc_r+0xa0>
 8009c02:	4623      	mov	r3, r4
 8009c04:	6864      	ldr	r4, [r4, #4]
 8009c06:	e7b2      	b.n	8009b6e <_malloc_r+0x32>
 8009c08:	4634      	mov	r4, r6
 8009c0a:	6876      	ldr	r6, [r6, #4]
 8009c0c:	e7b9      	b.n	8009b82 <_malloc_r+0x46>
 8009c0e:	230c      	movs	r3, #12
 8009c10:	603b      	str	r3, [r7, #0]
 8009c12:	4638      	mov	r0, r7
 8009c14:	f000 f9d4 	bl	8009fc0 <__malloc_unlock>
 8009c18:	e7a1      	b.n	8009b5e <_malloc_r+0x22>
 8009c1a:	6025      	str	r5, [r4, #0]
 8009c1c:	e7de      	b.n	8009bdc <_malloc_r+0xa0>
 8009c1e:	bf00      	nop
 8009c20:	2000048c 	.word	0x2000048c

08009c24 <__ssputs_r>:
 8009c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c28:	688e      	ldr	r6, [r1, #8]
 8009c2a:	429e      	cmp	r6, r3
 8009c2c:	4682      	mov	sl, r0
 8009c2e:	460c      	mov	r4, r1
 8009c30:	4690      	mov	r8, r2
 8009c32:	461f      	mov	r7, r3
 8009c34:	d838      	bhi.n	8009ca8 <__ssputs_r+0x84>
 8009c36:	898a      	ldrh	r2, [r1, #12]
 8009c38:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009c3c:	d032      	beq.n	8009ca4 <__ssputs_r+0x80>
 8009c3e:	6825      	ldr	r5, [r4, #0]
 8009c40:	6909      	ldr	r1, [r1, #16]
 8009c42:	eba5 0901 	sub.w	r9, r5, r1
 8009c46:	6965      	ldr	r5, [r4, #20]
 8009c48:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009c4c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009c50:	3301      	adds	r3, #1
 8009c52:	444b      	add	r3, r9
 8009c54:	106d      	asrs	r5, r5, #1
 8009c56:	429d      	cmp	r5, r3
 8009c58:	bf38      	it	cc
 8009c5a:	461d      	movcc	r5, r3
 8009c5c:	0553      	lsls	r3, r2, #21
 8009c5e:	d531      	bpl.n	8009cc4 <__ssputs_r+0xa0>
 8009c60:	4629      	mov	r1, r5
 8009c62:	f7ff ff6b 	bl	8009b3c <_malloc_r>
 8009c66:	4606      	mov	r6, r0
 8009c68:	b950      	cbnz	r0, 8009c80 <__ssputs_r+0x5c>
 8009c6a:	230c      	movs	r3, #12
 8009c6c:	f8ca 3000 	str.w	r3, [sl]
 8009c70:	89a3      	ldrh	r3, [r4, #12]
 8009c72:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009c76:	81a3      	strh	r3, [r4, #12]
 8009c78:	f04f 30ff 	mov.w	r0, #4294967295
 8009c7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009c80:	6921      	ldr	r1, [r4, #16]
 8009c82:	464a      	mov	r2, r9
 8009c84:	f7ff fb46 	bl	8009314 <memcpy>
 8009c88:	89a3      	ldrh	r3, [r4, #12]
 8009c8a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009c8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c92:	81a3      	strh	r3, [r4, #12]
 8009c94:	6126      	str	r6, [r4, #16]
 8009c96:	6165      	str	r5, [r4, #20]
 8009c98:	444e      	add	r6, r9
 8009c9a:	eba5 0509 	sub.w	r5, r5, r9
 8009c9e:	6026      	str	r6, [r4, #0]
 8009ca0:	60a5      	str	r5, [r4, #8]
 8009ca2:	463e      	mov	r6, r7
 8009ca4:	42be      	cmp	r6, r7
 8009ca6:	d900      	bls.n	8009caa <__ssputs_r+0x86>
 8009ca8:	463e      	mov	r6, r7
 8009caa:	6820      	ldr	r0, [r4, #0]
 8009cac:	4632      	mov	r2, r6
 8009cae:	4641      	mov	r1, r8
 8009cb0:	f000 f966 	bl	8009f80 <memmove>
 8009cb4:	68a3      	ldr	r3, [r4, #8]
 8009cb6:	1b9b      	subs	r3, r3, r6
 8009cb8:	60a3      	str	r3, [r4, #8]
 8009cba:	6823      	ldr	r3, [r4, #0]
 8009cbc:	4433      	add	r3, r6
 8009cbe:	6023      	str	r3, [r4, #0]
 8009cc0:	2000      	movs	r0, #0
 8009cc2:	e7db      	b.n	8009c7c <__ssputs_r+0x58>
 8009cc4:	462a      	mov	r2, r5
 8009cc6:	f000 f981 	bl	8009fcc <_realloc_r>
 8009cca:	4606      	mov	r6, r0
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d1e1      	bne.n	8009c94 <__ssputs_r+0x70>
 8009cd0:	6921      	ldr	r1, [r4, #16]
 8009cd2:	4650      	mov	r0, sl
 8009cd4:	f7ff fec6 	bl	8009a64 <_free_r>
 8009cd8:	e7c7      	b.n	8009c6a <__ssputs_r+0x46>
	...

08009cdc <_svfiprintf_r>:
 8009cdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ce0:	4698      	mov	r8, r3
 8009ce2:	898b      	ldrh	r3, [r1, #12]
 8009ce4:	061b      	lsls	r3, r3, #24
 8009ce6:	b09d      	sub	sp, #116	; 0x74
 8009ce8:	4607      	mov	r7, r0
 8009cea:	460d      	mov	r5, r1
 8009cec:	4614      	mov	r4, r2
 8009cee:	d50e      	bpl.n	8009d0e <_svfiprintf_r+0x32>
 8009cf0:	690b      	ldr	r3, [r1, #16]
 8009cf2:	b963      	cbnz	r3, 8009d0e <_svfiprintf_r+0x32>
 8009cf4:	2140      	movs	r1, #64	; 0x40
 8009cf6:	f7ff ff21 	bl	8009b3c <_malloc_r>
 8009cfa:	6028      	str	r0, [r5, #0]
 8009cfc:	6128      	str	r0, [r5, #16]
 8009cfe:	b920      	cbnz	r0, 8009d0a <_svfiprintf_r+0x2e>
 8009d00:	230c      	movs	r3, #12
 8009d02:	603b      	str	r3, [r7, #0]
 8009d04:	f04f 30ff 	mov.w	r0, #4294967295
 8009d08:	e0d1      	b.n	8009eae <_svfiprintf_r+0x1d2>
 8009d0a:	2340      	movs	r3, #64	; 0x40
 8009d0c:	616b      	str	r3, [r5, #20]
 8009d0e:	2300      	movs	r3, #0
 8009d10:	9309      	str	r3, [sp, #36]	; 0x24
 8009d12:	2320      	movs	r3, #32
 8009d14:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009d18:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d1c:	2330      	movs	r3, #48	; 0x30
 8009d1e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009ec8 <_svfiprintf_r+0x1ec>
 8009d22:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009d26:	f04f 0901 	mov.w	r9, #1
 8009d2a:	4623      	mov	r3, r4
 8009d2c:	469a      	mov	sl, r3
 8009d2e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009d32:	b10a      	cbz	r2, 8009d38 <_svfiprintf_r+0x5c>
 8009d34:	2a25      	cmp	r2, #37	; 0x25
 8009d36:	d1f9      	bne.n	8009d2c <_svfiprintf_r+0x50>
 8009d38:	ebba 0b04 	subs.w	fp, sl, r4
 8009d3c:	d00b      	beq.n	8009d56 <_svfiprintf_r+0x7a>
 8009d3e:	465b      	mov	r3, fp
 8009d40:	4622      	mov	r2, r4
 8009d42:	4629      	mov	r1, r5
 8009d44:	4638      	mov	r0, r7
 8009d46:	f7ff ff6d 	bl	8009c24 <__ssputs_r>
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	f000 80aa 	beq.w	8009ea4 <_svfiprintf_r+0x1c8>
 8009d50:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009d52:	445a      	add	r2, fp
 8009d54:	9209      	str	r2, [sp, #36]	; 0x24
 8009d56:	f89a 3000 	ldrb.w	r3, [sl]
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	f000 80a2 	beq.w	8009ea4 <_svfiprintf_r+0x1c8>
 8009d60:	2300      	movs	r3, #0
 8009d62:	f04f 32ff 	mov.w	r2, #4294967295
 8009d66:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009d6a:	f10a 0a01 	add.w	sl, sl, #1
 8009d6e:	9304      	str	r3, [sp, #16]
 8009d70:	9307      	str	r3, [sp, #28]
 8009d72:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009d76:	931a      	str	r3, [sp, #104]	; 0x68
 8009d78:	4654      	mov	r4, sl
 8009d7a:	2205      	movs	r2, #5
 8009d7c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009d80:	4851      	ldr	r0, [pc, #324]	; (8009ec8 <_svfiprintf_r+0x1ec>)
 8009d82:	f7f6 fa65 	bl	8000250 <memchr>
 8009d86:	9a04      	ldr	r2, [sp, #16]
 8009d88:	b9d8      	cbnz	r0, 8009dc2 <_svfiprintf_r+0xe6>
 8009d8a:	06d0      	lsls	r0, r2, #27
 8009d8c:	bf44      	itt	mi
 8009d8e:	2320      	movmi	r3, #32
 8009d90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d94:	0711      	lsls	r1, r2, #28
 8009d96:	bf44      	itt	mi
 8009d98:	232b      	movmi	r3, #43	; 0x2b
 8009d9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009d9e:	f89a 3000 	ldrb.w	r3, [sl]
 8009da2:	2b2a      	cmp	r3, #42	; 0x2a
 8009da4:	d015      	beq.n	8009dd2 <_svfiprintf_r+0xf6>
 8009da6:	9a07      	ldr	r2, [sp, #28]
 8009da8:	4654      	mov	r4, sl
 8009daa:	2000      	movs	r0, #0
 8009dac:	f04f 0c0a 	mov.w	ip, #10
 8009db0:	4621      	mov	r1, r4
 8009db2:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009db6:	3b30      	subs	r3, #48	; 0x30
 8009db8:	2b09      	cmp	r3, #9
 8009dba:	d94e      	bls.n	8009e5a <_svfiprintf_r+0x17e>
 8009dbc:	b1b0      	cbz	r0, 8009dec <_svfiprintf_r+0x110>
 8009dbe:	9207      	str	r2, [sp, #28]
 8009dc0:	e014      	b.n	8009dec <_svfiprintf_r+0x110>
 8009dc2:	eba0 0308 	sub.w	r3, r0, r8
 8009dc6:	fa09 f303 	lsl.w	r3, r9, r3
 8009dca:	4313      	orrs	r3, r2
 8009dcc:	9304      	str	r3, [sp, #16]
 8009dce:	46a2      	mov	sl, r4
 8009dd0:	e7d2      	b.n	8009d78 <_svfiprintf_r+0x9c>
 8009dd2:	9b03      	ldr	r3, [sp, #12]
 8009dd4:	1d19      	adds	r1, r3, #4
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	9103      	str	r1, [sp, #12]
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	bfbb      	ittet	lt
 8009dde:	425b      	neglt	r3, r3
 8009de0:	f042 0202 	orrlt.w	r2, r2, #2
 8009de4:	9307      	strge	r3, [sp, #28]
 8009de6:	9307      	strlt	r3, [sp, #28]
 8009de8:	bfb8      	it	lt
 8009dea:	9204      	strlt	r2, [sp, #16]
 8009dec:	7823      	ldrb	r3, [r4, #0]
 8009dee:	2b2e      	cmp	r3, #46	; 0x2e
 8009df0:	d10c      	bne.n	8009e0c <_svfiprintf_r+0x130>
 8009df2:	7863      	ldrb	r3, [r4, #1]
 8009df4:	2b2a      	cmp	r3, #42	; 0x2a
 8009df6:	d135      	bne.n	8009e64 <_svfiprintf_r+0x188>
 8009df8:	9b03      	ldr	r3, [sp, #12]
 8009dfa:	1d1a      	adds	r2, r3, #4
 8009dfc:	681b      	ldr	r3, [r3, #0]
 8009dfe:	9203      	str	r2, [sp, #12]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	bfb8      	it	lt
 8009e04:	f04f 33ff 	movlt.w	r3, #4294967295
 8009e08:	3402      	adds	r4, #2
 8009e0a:	9305      	str	r3, [sp, #20]
 8009e0c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009ed8 <_svfiprintf_r+0x1fc>
 8009e10:	7821      	ldrb	r1, [r4, #0]
 8009e12:	2203      	movs	r2, #3
 8009e14:	4650      	mov	r0, sl
 8009e16:	f7f6 fa1b 	bl	8000250 <memchr>
 8009e1a:	b140      	cbz	r0, 8009e2e <_svfiprintf_r+0x152>
 8009e1c:	2340      	movs	r3, #64	; 0x40
 8009e1e:	eba0 000a 	sub.w	r0, r0, sl
 8009e22:	fa03 f000 	lsl.w	r0, r3, r0
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	4303      	orrs	r3, r0
 8009e2a:	3401      	adds	r4, #1
 8009e2c:	9304      	str	r3, [sp, #16]
 8009e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e32:	4826      	ldr	r0, [pc, #152]	; (8009ecc <_svfiprintf_r+0x1f0>)
 8009e34:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009e38:	2206      	movs	r2, #6
 8009e3a:	f7f6 fa09 	bl	8000250 <memchr>
 8009e3e:	2800      	cmp	r0, #0
 8009e40:	d038      	beq.n	8009eb4 <_svfiprintf_r+0x1d8>
 8009e42:	4b23      	ldr	r3, [pc, #140]	; (8009ed0 <_svfiprintf_r+0x1f4>)
 8009e44:	bb1b      	cbnz	r3, 8009e8e <_svfiprintf_r+0x1b2>
 8009e46:	9b03      	ldr	r3, [sp, #12]
 8009e48:	3307      	adds	r3, #7
 8009e4a:	f023 0307 	bic.w	r3, r3, #7
 8009e4e:	3308      	adds	r3, #8
 8009e50:	9303      	str	r3, [sp, #12]
 8009e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e54:	4433      	add	r3, r6
 8009e56:	9309      	str	r3, [sp, #36]	; 0x24
 8009e58:	e767      	b.n	8009d2a <_svfiprintf_r+0x4e>
 8009e5a:	fb0c 3202 	mla	r2, ip, r2, r3
 8009e5e:	460c      	mov	r4, r1
 8009e60:	2001      	movs	r0, #1
 8009e62:	e7a5      	b.n	8009db0 <_svfiprintf_r+0xd4>
 8009e64:	2300      	movs	r3, #0
 8009e66:	3401      	adds	r4, #1
 8009e68:	9305      	str	r3, [sp, #20]
 8009e6a:	4619      	mov	r1, r3
 8009e6c:	f04f 0c0a 	mov.w	ip, #10
 8009e70:	4620      	mov	r0, r4
 8009e72:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009e76:	3a30      	subs	r2, #48	; 0x30
 8009e78:	2a09      	cmp	r2, #9
 8009e7a:	d903      	bls.n	8009e84 <_svfiprintf_r+0x1a8>
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0c5      	beq.n	8009e0c <_svfiprintf_r+0x130>
 8009e80:	9105      	str	r1, [sp, #20]
 8009e82:	e7c3      	b.n	8009e0c <_svfiprintf_r+0x130>
 8009e84:	fb0c 2101 	mla	r1, ip, r1, r2
 8009e88:	4604      	mov	r4, r0
 8009e8a:	2301      	movs	r3, #1
 8009e8c:	e7f0      	b.n	8009e70 <_svfiprintf_r+0x194>
 8009e8e:	ab03      	add	r3, sp, #12
 8009e90:	9300      	str	r3, [sp, #0]
 8009e92:	462a      	mov	r2, r5
 8009e94:	4b0f      	ldr	r3, [pc, #60]	; (8009ed4 <_svfiprintf_r+0x1f8>)
 8009e96:	a904      	add	r1, sp, #16
 8009e98:	4638      	mov	r0, r7
 8009e9a:	f7fe f861 	bl	8007f60 <_printf_float>
 8009e9e:	1c42      	adds	r2, r0, #1
 8009ea0:	4606      	mov	r6, r0
 8009ea2:	d1d6      	bne.n	8009e52 <_svfiprintf_r+0x176>
 8009ea4:	89ab      	ldrh	r3, [r5, #12]
 8009ea6:	065b      	lsls	r3, r3, #25
 8009ea8:	f53f af2c 	bmi.w	8009d04 <_svfiprintf_r+0x28>
 8009eac:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009eae:	b01d      	add	sp, #116	; 0x74
 8009eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009eb4:	ab03      	add	r3, sp, #12
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	462a      	mov	r2, r5
 8009eba:	4b06      	ldr	r3, [pc, #24]	; (8009ed4 <_svfiprintf_r+0x1f8>)
 8009ebc:	a904      	add	r1, sp, #16
 8009ebe:	4638      	mov	r0, r7
 8009ec0:	f7fe fada 	bl	8008478 <_printf_i>
 8009ec4:	e7eb      	b.n	8009e9e <_svfiprintf_r+0x1c2>
 8009ec6:	bf00      	nop
 8009ec8:	0801044c 	.word	0x0801044c
 8009ecc:	08010456 	.word	0x08010456
 8009ed0:	08007f61 	.word	0x08007f61
 8009ed4:	08009c25 	.word	0x08009c25
 8009ed8:	08010452 	.word	0x08010452

08009edc <_sbrk_r>:
 8009edc:	b538      	push	{r3, r4, r5, lr}
 8009ede:	4d06      	ldr	r5, [pc, #24]	; (8009ef8 <_sbrk_r+0x1c>)
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	4604      	mov	r4, r0
 8009ee4:	4608      	mov	r0, r1
 8009ee6:	602b      	str	r3, [r5, #0]
 8009ee8:	f7f7 fc50 	bl	800178c <_sbrk>
 8009eec:	1c43      	adds	r3, r0, #1
 8009eee:	d102      	bne.n	8009ef6 <_sbrk_r+0x1a>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	b103      	cbz	r3, 8009ef6 <_sbrk_r+0x1a>
 8009ef4:	6023      	str	r3, [r4, #0]
 8009ef6:	bd38      	pop	{r3, r4, r5, pc}
 8009ef8:	20000494 	.word	0x20000494

08009efc <__assert_func>:
 8009efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009efe:	4614      	mov	r4, r2
 8009f00:	461a      	mov	r2, r3
 8009f02:	4b09      	ldr	r3, [pc, #36]	; (8009f28 <__assert_func+0x2c>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	4605      	mov	r5, r0
 8009f08:	68d8      	ldr	r0, [r3, #12]
 8009f0a:	b14c      	cbz	r4, 8009f20 <__assert_func+0x24>
 8009f0c:	4b07      	ldr	r3, [pc, #28]	; (8009f2c <__assert_func+0x30>)
 8009f0e:	9100      	str	r1, [sp, #0]
 8009f10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009f14:	4906      	ldr	r1, [pc, #24]	; (8009f30 <__assert_func+0x34>)
 8009f16:	462b      	mov	r3, r5
 8009f18:	f000 f80e 	bl	8009f38 <fiprintf>
 8009f1c:	f000 faac 	bl	800a478 <abort>
 8009f20:	4b04      	ldr	r3, [pc, #16]	; (8009f34 <__assert_func+0x38>)
 8009f22:	461c      	mov	r4, r3
 8009f24:	e7f3      	b.n	8009f0e <__assert_func+0x12>
 8009f26:	bf00      	nop
 8009f28:	20000010 	.word	0x20000010
 8009f2c:	0801045d 	.word	0x0801045d
 8009f30:	0801046a 	.word	0x0801046a
 8009f34:	08010498 	.word	0x08010498

08009f38 <fiprintf>:
 8009f38:	b40e      	push	{r1, r2, r3}
 8009f3a:	b503      	push	{r0, r1, lr}
 8009f3c:	4601      	mov	r1, r0
 8009f3e:	ab03      	add	r3, sp, #12
 8009f40:	4805      	ldr	r0, [pc, #20]	; (8009f58 <fiprintf+0x20>)
 8009f42:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f46:	6800      	ldr	r0, [r0, #0]
 8009f48:	9301      	str	r3, [sp, #4]
 8009f4a:	f000 f897 	bl	800a07c <_vfiprintf_r>
 8009f4e:	b002      	add	sp, #8
 8009f50:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f54:	b003      	add	sp, #12
 8009f56:	4770      	bx	lr
 8009f58:	20000010 	.word	0x20000010

08009f5c <__ascii_mbtowc>:
 8009f5c:	b082      	sub	sp, #8
 8009f5e:	b901      	cbnz	r1, 8009f62 <__ascii_mbtowc+0x6>
 8009f60:	a901      	add	r1, sp, #4
 8009f62:	b142      	cbz	r2, 8009f76 <__ascii_mbtowc+0x1a>
 8009f64:	b14b      	cbz	r3, 8009f7a <__ascii_mbtowc+0x1e>
 8009f66:	7813      	ldrb	r3, [r2, #0]
 8009f68:	600b      	str	r3, [r1, #0]
 8009f6a:	7812      	ldrb	r2, [r2, #0]
 8009f6c:	1e10      	subs	r0, r2, #0
 8009f6e:	bf18      	it	ne
 8009f70:	2001      	movne	r0, #1
 8009f72:	b002      	add	sp, #8
 8009f74:	4770      	bx	lr
 8009f76:	4610      	mov	r0, r2
 8009f78:	e7fb      	b.n	8009f72 <__ascii_mbtowc+0x16>
 8009f7a:	f06f 0001 	mvn.w	r0, #1
 8009f7e:	e7f8      	b.n	8009f72 <__ascii_mbtowc+0x16>

08009f80 <memmove>:
 8009f80:	4288      	cmp	r0, r1
 8009f82:	b510      	push	{r4, lr}
 8009f84:	eb01 0402 	add.w	r4, r1, r2
 8009f88:	d902      	bls.n	8009f90 <memmove+0x10>
 8009f8a:	4284      	cmp	r4, r0
 8009f8c:	4623      	mov	r3, r4
 8009f8e:	d807      	bhi.n	8009fa0 <memmove+0x20>
 8009f90:	1e43      	subs	r3, r0, #1
 8009f92:	42a1      	cmp	r1, r4
 8009f94:	d008      	beq.n	8009fa8 <memmove+0x28>
 8009f96:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f9a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f9e:	e7f8      	b.n	8009f92 <memmove+0x12>
 8009fa0:	4402      	add	r2, r0
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	428a      	cmp	r2, r1
 8009fa6:	d100      	bne.n	8009faa <memmove+0x2a>
 8009fa8:	bd10      	pop	{r4, pc}
 8009faa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009fae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009fb2:	e7f7      	b.n	8009fa4 <memmove+0x24>

08009fb4 <__malloc_lock>:
 8009fb4:	4801      	ldr	r0, [pc, #4]	; (8009fbc <__malloc_lock+0x8>)
 8009fb6:	f000 bc1f 	b.w	800a7f8 <__retarget_lock_acquire_recursive>
 8009fba:	bf00      	nop
 8009fbc:	20000498 	.word	0x20000498

08009fc0 <__malloc_unlock>:
 8009fc0:	4801      	ldr	r0, [pc, #4]	; (8009fc8 <__malloc_unlock+0x8>)
 8009fc2:	f000 bc1a 	b.w	800a7fa <__retarget_lock_release_recursive>
 8009fc6:	bf00      	nop
 8009fc8:	20000498 	.word	0x20000498

08009fcc <_realloc_r>:
 8009fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009fd0:	4680      	mov	r8, r0
 8009fd2:	4614      	mov	r4, r2
 8009fd4:	460e      	mov	r6, r1
 8009fd6:	b921      	cbnz	r1, 8009fe2 <_realloc_r+0x16>
 8009fd8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009fdc:	4611      	mov	r1, r2
 8009fde:	f7ff bdad 	b.w	8009b3c <_malloc_r>
 8009fe2:	b92a      	cbnz	r2, 8009ff0 <_realloc_r+0x24>
 8009fe4:	f7ff fd3e 	bl	8009a64 <_free_r>
 8009fe8:	4625      	mov	r5, r4
 8009fea:	4628      	mov	r0, r5
 8009fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ff0:	f000 fc6a 	bl	800a8c8 <_malloc_usable_size_r>
 8009ff4:	4284      	cmp	r4, r0
 8009ff6:	4607      	mov	r7, r0
 8009ff8:	d802      	bhi.n	800a000 <_realloc_r+0x34>
 8009ffa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009ffe:	d812      	bhi.n	800a026 <_realloc_r+0x5a>
 800a000:	4621      	mov	r1, r4
 800a002:	4640      	mov	r0, r8
 800a004:	f7ff fd9a 	bl	8009b3c <_malloc_r>
 800a008:	4605      	mov	r5, r0
 800a00a:	2800      	cmp	r0, #0
 800a00c:	d0ed      	beq.n	8009fea <_realloc_r+0x1e>
 800a00e:	42bc      	cmp	r4, r7
 800a010:	4622      	mov	r2, r4
 800a012:	4631      	mov	r1, r6
 800a014:	bf28      	it	cs
 800a016:	463a      	movcs	r2, r7
 800a018:	f7ff f97c 	bl	8009314 <memcpy>
 800a01c:	4631      	mov	r1, r6
 800a01e:	4640      	mov	r0, r8
 800a020:	f7ff fd20 	bl	8009a64 <_free_r>
 800a024:	e7e1      	b.n	8009fea <_realloc_r+0x1e>
 800a026:	4635      	mov	r5, r6
 800a028:	e7df      	b.n	8009fea <_realloc_r+0x1e>

0800a02a <__sfputc_r>:
 800a02a:	6893      	ldr	r3, [r2, #8]
 800a02c:	3b01      	subs	r3, #1
 800a02e:	2b00      	cmp	r3, #0
 800a030:	b410      	push	{r4}
 800a032:	6093      	str	r3, [r2, #8]
 800a034:	da08      	bge.n	800a048 <__sfputc_r+0x1e>
 800a036:	6994      	ldr	r4, [r2, #24]
 800a038:	42a3      	cmp	r3, r4
 800a03a:	db01      	blt.n	800a040 <__sfputc_r+0x16>
 800a03c:	290a      	cmp	r1, #10
 800a03e:	d103      	bne.n	800a048 <__sfputc_r+0x1e>
 800a040:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a044:	f000 b94a 	b.w	800a2dc <__swbuf_r>
 800a048:	6813      	ldr	r3, [r2, #0]
 800a04a:	1c58      	adds	r0, r3, #1
 800a04c:	6010      	str	r0, [r2, #0]
 800a04e:	7019      	strb	r1, [r3, #0]
 800a050:	4608      	mov	r0, r1
 800a052:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a056:	4770      	bx	lr

0800a058 <__sfputs_r>:
 800a058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a05a:	4606      	mov	r6, r0
 800a05c:	460f      	mov	r7, r1
 800a05e:	4614      	mov	r4, r2
 800a060:	18d5      	adds	r5, r2, r3
 800a062:	42ac      	cmp	r4, r5
 800a064:	d101      	bne.n	800a06a <__sfputs_r+0x12>
 800a066:	2000      	movs	r0, #0
 800a068:	e007      	b.n	800a07a <__sfputs_r+0x22>
 800a06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06e:	463a      	mov	r2, r7
 800a070:	4630      	mov	r0, r6
 800a072:	f7ff ffda 	bl	800a02a <__sfputc_r>
 800a076:	1c43      	adds	r3, r0, #1
 800a078:	d1f3      	bne.n	800a062 <__sfputs_r+0xa>
 800a07a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a07c <_vfiprintf_r>:
 800a07c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a080:	460d      	mov	r5, r1
 800a082:	b09d      	sub	sp, #116	; 0x74
 800a084:	4614      	mov	r4, r2
 800a086:	4698      	mov	r8, r3
 800a088:	4606      	mov	r6, r0
 800a08a:	b118      	cbz	r0, 800a094 <_vfiprintf_r+0x18>
 800a08c:	6983      	ldr	r3, [r0, #24]
 800a08e:	b90b      	cbnz	r3, 800a094 <_vfiprintf_r+0x18>
 800a090:	f000 fb14 	bl	800a6bc <__sinit>
 800a094:	4b89      	ldr	r3, [pc, #548]	; (800a2bc <_vfiprintf_r+0x240>)
 800a096:	429d      	cmp	r5, r3
 800a098:	d11b      	bne.n	800a0d2 <_vfiprintf_r+0x56>
 800a09a:	6875      	ldr	r5, [r6, #4]
 800a09c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a09e:	07d9      	lsls	r1, r3, #31
 800a0a0:	d405      	bmi.n	800a0ae <_vfiprintf_r+0x32>
 800a0a2:	89ab      	ldrh	r3, [r5, #12]
 800a0a4:	059a      	lsls	r2, r3, #22
 800a0a6:	d402      	bmi.n	800a0ae <_vfiprintf_r+0x32>
 800a0a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0aa:	f000 fba5 	bl	800a7f8 <__retarget_lock_acquire_recursive>
 800a0ae:	89ab      	ldrh	r3, [r5, #12]
 800a0b0:	071b      	lsls	r3, r3, #28
 800a0b2:	d501      	bpl.n	800a0b8 <_vfiprintf_r+0x3c>
 800a0b4:	692b      	ldr	r3, [r5, #16]
 800a0b6:	b9eb      	cbnz	r3, 800a0f4 <_vfiprintf_r+0x78>
 800a0b8:	4629      	mov	r1, r5
 800a0ba:	4630      	mov	r0, r6
 800a0bc:	f000 f96e 	bl	800a39c <__swsetup_r>
 800a0c0:	b1c0      	cbz	r0, 800a0f4 <_vfiprintf_r+0x78>
 800a0c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a0c4:	07dc      	lsls	r4, r3, #31
 800a0c6:	d50e      	bpl.n	800a0e6 <_vfiprintf_r+0x6a>
 800a0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800a0cc:	b01d      	add	sp, #116	; 0x74
 800a0ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0d2:	4b7b      	ldr	r3, [pc, #492]	; (800a2c0 <_vfiprintf_r+0x244>)
 800a0d4:	429d      	cmp	r5, r3
 800a0d6:	d101      	bne.n	800a0dc <_vfiprintf_r+0x60>
 800a0d8:	68b5      	ldr	r5, [r6, #8]
 800a0da:	e7df      	b.n	800a09c <_vfiprintf_r+0x20>
 800a0dc:	4b79      	ldr	r3, [pc, #484]	; (800a2c4 <_vfiprintf_r+0x248>)
 800a0de:	429d      	cmp	r5, r3
 800a0e0:	bf08      	it	eq
 800a0e2:	68f5      	ldreq	r5, [r6, #12]
 800a0e4:	e7da      	b.n	800a09c <_vfiprintf_r+0x20>
 800a0e6:	89ab      	ldrh	r3, [r5, #12]
 800a0e8:	0598      	lsls	r0, r3, #22
 800a0ea:	d4ed      	bmi.n	800a0c8 <_vfiprintf_r+0x4c>
 800a0ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a0ee:	f000 fb84 	bl	800a7fa <__retarget_lock_release_recursive>
 800a0f2:	e7e9      	b.n	800a0c8 <_vfiprintf_r+0x4c>
 800a0f4:	2300      	movs	r3, #0
 800a0f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a0f8:	2320      	movs	r3, #32
 800a0fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a0fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800a102:	2330      	movs	r3, #48	; 0x30
 800a104:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800a2c8 <_vfiprintf_r+0x24c>
 800a108:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a10c:	f04f 0901 	mov.w	r9, #1
 800a110:	4623      	mov	r3, r4
 800a112:	469a      	mov	sl, r3
 800a114:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a118:	b10a      	cbz	r2, 800a11e <_vfiprintf_r+0xa2>
 800a11a:	2a25      	cmp	r2, #37	; 0x25
 800a11c:	d1f9      	bne.n	800a112 <_vfiprintf_r+0x96>
 800a11e:	ebba 0b04 	subs.w	fp, sl, r4
 800a122:	d00b      	beq.n	800a13c <_vfiprintf_r+0xc0>
 800a124:	465b      	mov	r3, fp
 800a126:	4622      	mov	r2, r4
 800a128:	4629      	mov	r1, r5
 800a12a:	4630      	mov	r0, r6
 800a12c:	f7ff ff94 	bl	800a058 <__sfputs_r>
 800a130:	3001      	adds	r0, #1
 800a132:	f000 80aa 	beq.w	800a28a <_vfiprintf_r+0x20e>
 800a136:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a138:	445a      	add	r2, fp
 800a13a:	9209      	str	r2, [sp, #36]	; 0x24
 800a13c:	f89a 3000 	ldrb.w	r3, [sl]
 800a140:	2b00      	cmp	r3, #0
 800a142:	f000 80a2 	beq.w	800a28a <_vfiprintf_r+0x20e>
 800a146:	2300      	movs	r3, #0
 800a148:	f04f 32ff 	mov.w	r2, #4294967295
 800a14c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a150:	f10a 0a01 	add.w	sl, sl, #1
 800a154:	9304      	str	r3, [sp, #16]
 800a156:	9307      	str	r3, [sp, #28]
 800a158:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a15c:	931a      	str	r3, [sp, #104]	; 0x68
 800a15e:	4654      	mov	r4, sl
 800a160:	2205      	movs	r2, #5
 800a162:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a166:	4858      	ldr	r0, [pc, #352]	; (800a2c8 <_vfiprintf_r+0x24c>)
 800a168:	f7f6 f872 	bl	8000250 <memchr>
 800a16c:	9a04      	ldr	r2, [sp, #16]
 800a16e:	b9d8      	cbnz	r0, 800a1a8 <_vfiprintf_r+0x12c>
 800a170:	06d1      	lsls	r1, r2, #27
 800a172:	bf44      	itt	mi
 800a174:	2320      	movmi	r3, #32
 800a176:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a17a:	0713      	lsls	r3, r2, #28
 800a17c:	bf44      	itt	mi
 800a17e:	232b      	movmi	r3, #43	; 0x2b
 800a180:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a184:	f89a 3000 	ldrb.w	r3, [sl]
 800a188:	2b2a      	cmp	r3, #42	; 0x2a
 800a18a:	d015      	beq.n	800a1b8 <_vfiprintf_r+0x13c>
 800a18c:	9a07      	ldr	r2, [sp, #28]
 800a18e:	4654      	mov	r4, sl
 800a190:	2000      	movs	r0, #0
 800a192:	f04f 0c0a 	mov.w	ip, #10
 800a196:	4621      	mov	r1, r4
 800a198:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a19c:	3b30      	subs	r3, #48	; 0x30
 800a19e:	2b09      	cmp	r3, #9
 800a1a0:	d94e      	bls.n	800a240 <_vfiprintf_r+0x1c4>
 800a1a2:	b1b0      	cbz	r0, 800a1d2 <_vfiprintf_r+0x156>
 800a1a4:	9207      	str	r2, [sp, #28]
 800a1a6:	e014      	b.n	800a1d2 <_vfiprintf_r+0x156>
 800a1a8:	eba0 0308 	sub.w	r3, r0, r8
 800a1ac:	fa09 f303 	lsl.w	r3, r9, r3
 800a1b0:	4313      	orrs	r3, r2
 800a1b2:	9304      	str	r3, [sp, #16]
 800a1b4:	46a2      	mov	sl, r4
 800a1b6:	e7d2      	b.n	800a15e <_vfiprintf_r+0xe2>
 800a1b8:	9b03      	ldr	r3, [sp, #12]
 800a1ba:	1d19      	adds	r1, r3, #4
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	9103      	str	r1, [sp, #12]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	bfbb      	ittet	lt
 800a1c4:	425b      	neglt	r3, r3
 800a1c6:	f042 0202 	orrlt.w	r2, r2, #2
 800a1ca:	9307      	strge	r3, [sp, #28]
 800a1cc:	9307      	strlt	r3, [sp, #28]
 800a1ce:	bfb8      	it	lt
 800a1d0:	9204      	strlt	r2, [sp, #16]
 800a1d2:	7823      	ldrb	r3, [r4, #0]
 800a1d4:	2b2e      	cmp	r3, #46	; 0x2e
 800a1d6:	d10c      	bne.n	800a1f2 <_vfiprintf_r+0x176>
 800a1d8:	7863      	ldrb	r3, [r4, #1]
 800a1da:	2b2a      	cmp	r3, #42	; 0x2a
 800a1dc:	d135      	bne.n	800a24a <_vfiprintf_r+0x1ce>
 800a1de:	9b03      	ldr	r3, [sp, #12]
 800a1e0:	1d1a      	adds	r2, r3, #4
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	9203      	str	r2, [sp, #12]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	bfb8      	it	lt
 800a1ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800a1ee:	3402      	adds	r4, #2
 800a1f0:	9305      	str	r3, [sp, #20]
 800a1f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800a2d8 <_vfiprintf_r+0x25c>
 800a1f6:	7821      	ldrb	r1, [r4, #0]
 800a1f8:	2203      	movs	r2, #3
 800a1fa:	4650      	mov	r0, sl
 800a1fc:	f7f6 f828 	bl	8000250 <memchr>
 800a200:	b140      	cbz	r0, 800a214 <_vfiprintf_r+0x198>
 800a202:	2340      	movs	r3, #64	; 0x40
 800a204:	eba0 000a 	sub.w	r0, r0, sl
 800a208:	fa03 f000 	lsl.w	r0, r3, r0
 800a20c:	9b04      	ldr	r3, [sp, #16]
 800a20e:	4303      	orrs	r3, r0
 800a210:	3401      	adds	r4, #1
 800a212:	9304      	str	r3, [sp, #16]
 800a214:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a218:	482c      	ldr	r0, [pc, #176]	; (800a2cc <_vfiprintf_r+0x250>)
 800a21a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a21e:	2206      	movs	r2, #6
 800a220:	f7f6 f816 	bl	8000250 <memchr>
 800a224:	2800      	cmp	r0, #0
 800a226:	d03f      	beq.n	800a2a8 <_vfiprintf_r+0x22c>
 800a228:	4b29      	ldr	r3, [pc, #164]	; (800a2d0 <_vfiprintf_r+0x254>)
 800a22a:	bb1b      	cbnz	r3, 800a274 <_vfiprintf_r+0x1f8>
 800a22c:	9b03      	ldr	r3, [sp, #12]
 800a22e:	3307      	adds	r3, #7
 800a230:	f023 0307 	bic.w	r3, r3, #7
 800a234:	3308      	adds	r3, #8
 800a236:	9303      	str	r3, [sp, #12]
 800a238:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a23a:	443b      	add	r3, r7
 800a23c:	9309      	str	r3, [sp, #36]	; 0x24
 800a23e:	e767      	b.n	800a110 <_vfiprintf_r+0x94>
 800a240:	fb0c 3202 	mla	r2, ip, r2, r3
 800a244:	460c      	mov	r4, r1
 800a246:	2001      	movs	r0, #1
 800a248:	e7a5      	b.n	800a196 <_vfiprintf_r+0x11a>
 800a24a:	2300      	movs	r3, #0
 800a24c:	3401      	adds	r4, #1
 800a24e:	9305      	str	r3, [sp, #20]
 800a250:	4619      	mov	r1, r3
 800a252:	f04f 0c0a 	mov.w	ip, #10
 800a256:	4620      	mov	r0, r4
 800a258:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a25c:	3a30      	subs	r2, #48	; 0x30
 800a25e:	2a09      	cmp	r2, #9
 800a260:	d903      	bls.n	800a26a <_vfiprintf_r+0x1ee>
 800a262:	2b00      	cmp	r3, #0
 800a264:	d0c5      	beq.n	800a1f2 <_vfiprintf_r+0x176>
 800a266:	9105      	str	r1, [sp, #20]
 800a268:	e7c3      	b.n	800a1f2 <_vfiprintf_r+0x176>
 800a26a:	fb0c 2101 	mla	r1, ip, r1, r2
 800a26e:	4604      	mov	r4, r0
 800a270:	2301      	movs	r3, #1
 800a272:	e7f0      	b.n	800a256 <_vfiprintf_r+0x1da>
 800a274:	ab03      	add	r3, sp, #12
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	462a      	mov	r2, r5
 800a27a:	4b16      	ldr	r3, [pc, #88]	; (800a2d4 <_vfiprintf_r+0x258>)
 800a27c:	a904      	add	r1, sp, #16
 800a27e:	4630      	mov	r0, r6
 800a280:	f7fd fe6e 	bl	8007f60 <_printf_float>
 800a284:	4607      	mov	r7, r0
 800a286:	1c78      	adds	r0, r7, #1
 800a288:	d1d6      	bne.n	800a238 <_vfiprintf_r+0x1bc>
 800a28a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800a28c:	07d9      	lsls	r1, r3, #31
 800a28e:	d405      	bmi.n	800a29c <_vfiprintf_r+0x220>
 800a290:	89ab      	ldrh	r3, [r5, #12]
 800a292:	059a      	lsls	r2, r3, #22
 800a294:	d402      	bmi.n	800a29c <_vfiprintf_r+0x220>
 800a296:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800a298:	f000 faaf 	bl	800a7fa <__retarget_lock_release_recursive>
 800a29c:	89ab      	ldrh	r3, [r5, #12]
 800a29e:	065b      	lsls	r3, r3, #25
 800a2a0:	f53f af12 	bmi.w	800a0c8 <_vfiprintf_r+0x4c>
 800a2a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a2a6:	e711      	b.n	800a0cc <_vfiprintf_r+0x50>
 800a2a8:	ab03      	add	r3, sp, #12
 800a2aa:	9300      	str	r3, [sp, #0]
 800a2ac:	462a      	mov	r2, r5
 800a2ae:	4b09      	ldr	r3, [pc, #36]	; (800a2d4 <_vfiprintf_r+0x258>)
 800a2b0:	a904      	add	r1, sp, #16
 800a2b2:	4630      	mov	r0, r6
 800a2b4:	f7fe f8e0 	bl	8008478 <_printf_i>
 800a2b8:	e7e4      	b.n	800a284 <_vfiprintf_r+0x208>
 800a2ba:	bf00      	nop
 800a2bc:	080105c4 	.word	0x080105c4
 800a2c0:	080105e4 	.word	0x080105e4
 800a2c4:	080105a4 	.word	0x080105a4
 800a2c8:	0801044c 	.word	0x0801044c
 800a2cc:	08010456 	.word	0x08010456
 800a2d0:	08007f61 	.word	0x08007f61
 800a2d4:	0800a059 	.word	0x0800a059
 800a2d8:	08010452 	.word	0x08010452

0800a2dc <__swbuf_r>:
 800a2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2de:	460e      	mov	r6, r1
 800a2e0:	4614      	mov	r4, r2
 800a2e2:	4605      	mov	r5, r0
 800a2e4:	b118      	cbz	r0, 800a2ee <__swbuf_r+0x12>
 800a2e6:	6983      	ldr	r3, [r0, #24]
 800a2e8:	b90b      	cbnz	r3, 800a2ee <__swbuf_r+0x12>
 800a2ea:	f000 f9e7 	bl	800a6bc <__sinit>
 800a2ee:	4b21      	ldr	r3, [pc, #132]	; (800a374 <__swbuf_r+0x98>)
 800a2f0:	429c      	cmp	r4, r3
 800a2f2:	d12b      	bne.n	800a34c <__swbuf_r+0x70>
 800a2f4:	686c      	ldr	r4, [r5, #4]
 800a2f6:	69a3      	ldr	r3, [r4, #24]
 800a2f8:	60a3      	str	r3, [r4, #8]
 800a2fa:	89a3      	ldrh	r3, [r4, #12]
 800a2fc:	071a      	lsls	r2, r3, #28
 800a2fe:	d52f      	bpl.n	800a360 <__swbuf_r+0x84>
 800a300:	6923      	ldr	r3, [r4, #16]
 800a302:	b36b      	cbz	r3, 800a360 <__swbuf_r+0x84>
 800a304:	6923      	ldr	r3, [r4, #16]
 800a306:	6820      	ldr	r0, [r4, #0]
 800a308:	1ac0      	subs	r0, r0, r3
 800a30a:	6963      	ldr	r3, [r4, #20]
 800a30c:	b2f6      	uxtb	r6, r6
 800a30e:	4283      	cmp	r3, r0
 800a310:	4637      	mov	r7, r6
 800a312:	dc04      	bgt.n	800a31e <__swbuf_r+0x42>
 800a314:	4621      	mov	r1, r4
 800a316:	4628      	mov	r0, r5
 800a318:	f000 f93c 	bl	800a594 <_fflush_r>
 800a31c:	bb30      	cbnz	r0, 800a36c <__swbuf_r+0x90>
 800a31e:	68a3      	ldr	r3, [r4, #8]
 800a320:	3b01      	subs	r3, #1
 800a322:	60a3      	str	r3, [r4, #8]
 800a324:	6823      	ldr	r3, [r4, #0]
 800a326:	1c5a      	adds	r2, r3, #1
 800a328:	6022      	str	r2, [r4, #0]
 800a32a:	701e      	strb	r6, [r3, #0]
 800a32c:	6963      	ldr	r3, [r4, #20]
 800a32e:	3001      	adds	r0, #1
 800a330:	4283      	cmp	r3, r0
 800a332:	d004      	beq.n	800a33e <__swbuf_r+0x62>
 800a334:	89a3      	ldrh	r3, [r4, #12]
 800a336:	07db      	lsls	r3, r3, #31
 800a338:	d506      	bpl.n	800a348 <__swbuf_r+0x6c>
 800a33a:	2e0a      	cmp	r6, #10
 800a33c:	d104      	bne.n	800a348 <__swbuf_r+0x6c>
 800a33e:	4621      	mov	r1, r4
 800a340:	4628      	mov	r0, r5
 800a342:	f000 f927 	bl	800a594 <_fflush_r>
 800a346:	b988      	cbnz	r0, 800a36c <__swbuf_r+0x90>
 800a348:	4638      	mov	r0, r7
 800a34a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a34c:	4b0a      	ldr	r3, [pc, #40]	; (800a378 <__swbuf_r+0x9c>)
 800a34e:	429c      	cmp	r4, r3
 800a350:	d101      	bne.n	800a356 <__swbuf_r+0x7a>
 800a352:	68ac      	ldr	r4, [r5, #8]
 800a354:	e7cf      	b.n	800a2f6 <__swbuf_r+0x1a>
 800a356:	4b09      	ldr	r3, [pc, #36]	; (800a37c <__swbuf_r+0xa0>)
 800a358:	429c      	cmp	r4, r3
 800a35a:	bf08      	it	eq
 800a35c:	68ec      	ldreq	r4, [r5, #12]
 800a35e:	e7ca      	b.n	800a2f6 <__swbuf_r+0x1a>
 800a360:	4621      	mov	r1, r4
 800a362:	4628      	mov	r0, r5
 800a364:	f000 f81a 	bl	800a39c <__swsetup_r>
 800a368:	2800      	cmp	r0, #0
 800a36a:	d0cb      	beq.n	800a304 <__swbuf_r+0x28>
 800a36c:	f04f 37ff 	mov.w	r7, #4294967295
 800a370:	e7ea      	b.n	800a348 <__swbuf_r+0x6c>
 800a372:	bf00      	nop
 800a374:	080105c4 	.word	0x080105c4
 800a378:	080105e4 	.word	0x080105e4
 800a37c:	080105a4 	.word	0x080105a4

0800a380 <__ascii_wctomb>:
 800a380:	b149      	cbz	r1, 800a396 <__ascii_wctomb+0x16>
 800a382:	2aff      	cmp	r2, #255	; 0xff
 800a384:	bf85      	ittet	hi
 800a386:	238a      	movhi	r3, #138	; 0x8a
 800a388:	6003      	strhi	r3, [r0, #0]
 800a38a:	700a      	strbls	r2, [r1, #0]
 800a38c:	f04f 30ff 	movhi.w	r0, #4294967295
 800a390:	bf98      	it	ls
 800a392:	2001      	movls	r0, #1
 800a394:	4770      	bx	lr
 800a396:	4608      	mov	r0, r1
 800a398:	4770      	bx	lr
	...

0800a39c <__swsetup_r>:
 800a39c:	4b32      	ldr	r3, [pc, #200]	; (800a468 <__swsetup_r+0xcc>)
 800a39e:	b570      	push	{r4, r5, r6, lr}
 800a3a0:	681d      	ldr	r5, [r3, #0]
 800a3a2:	4606      	mov	r6, r0
 800a3a4:	460c      	mov	r4, r1
 800a3a6:	b125      	cbz	r5, 800a3b2 <__swsetup_r+0x16>
 800a3a8:	69ab      	ldr	r3, [r5, #24]
 800a3aa:	b913      	cbnz	r3, 800a3b2 <__swsetup_r+0x16>
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	f000 f985 	bl	800a6bc <__sinit>
 800a3b2:	4b2e      	ldr	r3, [pc, #184]	; (800a46c <__swsetup_r+0xd0>)
 800a3b4:	429c      	cmp	r4, r3
 800a3b6:	d10f      	bne.n	800a3d8 <__swsetup_r+0x3c>
 800a3b8:	686c      	ldr	r4, [r5, #4]
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a3c0:	0719      	lsls	r1, r3, #28
 800a3c2:	d42c      	bmi.n	800a41e <__swsetup_r+0x82>
 800a3c4:	06dd      	lsls	r5, r3, #27
 800a3c6:	d411      	bmi.n	800a3ec <__swsetup_r+0x50>
 800a3c8:	2309      	movs	r3, #9
 800a3ca:	6033      	str	r3, [r6, #0]
 800a3cc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800a3d0:	81a3      	strh	r3, [r4, #12]
 800a3d2:	f04f 30ff 	mov.w	r0, #4294967295
 800a3d6:	e03e      	b.n	800a456 <__swsetup_r+0xba>
 800a3d8:	4b25      	ldr	r3, [pc, #148]	; (800a470 <__swsetup_r+0xd4>)
 800a3da:	429c      	cmp	r4, r3
 800a3dc:	d101      	bne.n	800a3e2 <__swsetup_r+0x46>
 800a3de:	68ac      	ldr	r4, [r5, #8]
 800a3e0:	e7eb      	b.n	800a3ba <__swsetup_r+0x1e>
 800a3e2:	4b24      	ldr	r3, [pc, #144]	; (800a474 <__swsetup_r+0xd8>)
 800a3e4:	429c      	cmp	r4, r3
 800a3e6:	bf08      	it	eq
 800a3e8:	68ec      	ldreq	r4, [r5, #12]
 800a3ea:	e7e6      	b.n	800a3ba <__swsetup_r+0x1e>
 800a3ec:	0758      	lsls	r0, r3, #29
 800a3ee:	d512      	bpl.n	800a416 <__swsetup_r+0x7a>
 800a3f0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a3f2:	b141      	cbz	r1, 800a406 <__swsetup_r+0x6a>
 800a3f4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a3f8:	4299      	cmp	r1, r3
 800a3fa:	d002      	beq.n	800a402 <__swsetup_r+0x66>
 800a3fc:	4630      	mov	r0, r6
 800a3fe:	f7ff fb31 	bl	8009a64 <_free_r>
 800a402:	2300      	movs	r3, #0
 800a404:	6363      	str	r3, [r4, #52]	; 0x34
 800a406:	89a3      	ldrh	r3, [r4, #12]
 800a408:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800a40c:	81a3      	strh	r3, [r4, #12]
 800a40e:	2300      	movs	r3, #0
 800a410:	6063      	str	r3, [r4, #4]
 800a412:	6923      	ldr	r3, [r4, #16]
 800a414:	6023      	str	r3, [r4, #0]
 800a416:	89a3      	ldrh	r3, [r4, #12]
 800a418:	f043 0308 	orr.w	r3, r3, #8
 800a41c:	81a3      	strh	r3, [r4, #12]
 800a41e:	6923      	ldr	r3, [r4, #16]
 800a420:	b94b      	cbnz	r3, 800a436 <__swsetup_r+0x9a>
 800a422:	89a3      	ldrh	r3, [r4, #12]
 800a424:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800a428:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a42c:	d003      	beq.n	800a436 <__swsetup_r+0x9a>
 800a42e:	4621      	mov	r1, r4
 800a430:	4630      	mov	r0, r6
 800a432:	f000 fa09 	bl	800a848 <__smakebuf_r>
 800a436:	89a0      	ldrh	r0, [r4, #12]
 800a438:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800a43c:	f010 0301 	ands.w	r3, r0, #1
 800a440:	d00a      	beq.n	800a458 <__swsetup_r+0xbc>
 800a442:	2300      	movs	r3, #0
 800a444:	60a3      	str	r3, [r4, #8]
 800a446:	6963      	ldr	r3, [r4, #20]
 800a448:	425b      	negs	r3, r3
 800a44a:	61a3      	str	r3, [r4, #24]
 800a44c:	6923      	ldr	r3, [r4, #16]
 800a44e:	b943      	cbnz	r3, 800a462 <__swsetup_r+0xc6>
 800a450:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800a454:	d1ba      	bne.n	800a3cc <__swsetup_r+0x30>
 800a456:	bd70      	pop	{r4, r5, r6, pc}
 800a458:	0781      	lsls	r1, r0, #30
 800a45a:	bf58      	it	pl
 800a45c:	6963      	ldrpl	r3, [r4, #20]
 800a45e:	60a3      	str	r3, [r4, #8]
 800a460:	e7f4      	b.n	800a44c <__swsetup_r+0xb0>
 800a462:	2000      	movs	r0, #0
 800a464:	e7f7      	b.n	800a456 <__swsetup_r+0xba>
 800a466:	bf00      	nop
 800a468:	20000010 	.word	0x20000010
 800a46c:	080105c4 	.word	0x080105c4
 800a470:	080105e4 	.word	0x080105e4
 800a474:	080105a4 	.word	0x080105a4

0800a478 <abort>:
 800a478:	b508      	push	{r3, lr}
 800a47a:	2006      	movs	r0, #6
 800a47c:	f000 fa54 	bl	800a928 <raise>
 800a480:	2001      	movs	r0, #1
 800a482:	f7f7 f90b 	bl	800169c <_exit>
	...

0800a488 <__sflush_r>:
 800a488:	898a      	ldrh	r2, [r1, #12]
 800a48a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a48e:	4605      	mov	r5, r0
 800a490:	0710      	lsls	r0, r2, #28
 800a492:	460c      	mov	r4, r1
 800a494:	d458      	bmi.n	800a548 <__sflush_r+0xc0>
 800a496:	684b      	ldr	r3, [r1, #4]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	dc05      	bgt.n	800a4a8 <__sflush_r+0x20>
 800a49c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800a49e:	2b00      	cmp	r3, #0
 800a4a0:	dc02      	bgt.n	800a4a8 <__sflush_r+0x20>
 800a4a2:	2000      	movs	r0, #0
 800a4a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4aa:	2e00      	cmp	r6, #0
 800a4ac:	d0f9      	beq.n	800a4a2 <__sflush_r+0x1a>
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800a4b4:	682f      	ldr	r7, [r5, #0]
 800a4b6:	602b      	str	r3, [r5, #0]
 800a4b8:	d032      	beq.n	800a520 <__sflush_r+0x98>
 800a4ba:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800a4bc:	89a3      	ldrh	r3, [r4, #12]
 800a4be:	075a      	lsls	r2, r3, #29
 800a4c0:	d505      	bpl.n	800a4ce <__sflush_r+0x46>
 800a4c2:	6863      	ldr	r3, [r4, #4]
 800a4c4:	1ac0      	subs	r0, r0, r3
 800a4c6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800a4c8:	b10b      	cbz	r3, 800a4ce <__sflush_r+0x46>
 800a4ca:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800a4cc:	1ac0      	subs	r0, r0, r3
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	4602      	mov	r2, r0
 800a4d2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800a4d4:	6a21      	ldr	r1, [r4, #32]
 800a4d6:	4628      	mov	r0, r5
 800a4d8:	47b0      	blx	r6
 800a4da:	1c43      	adds	r3, r0, #1
 800a4dc:	89a3      	ldrh	r3, [r4, #12]
 800a4de:	d106      	bne.n	800a4ee <__sflush_r+0x66>
 800a4e0:	6829      	ldr	r1, [r5, #0]
 800a4e2:	291d      	cmp	r1, #29
 800a4e4:	d82c      	bhi.n	800a540 <__sflush_r+0xb8>
 800a4e6:	4a2a      	ldr	r2, [pc, #168]	; (800a590 <__sflush_r+0x108>)
 800a4e8:	40ca      	lsrs	r2, r1
 800a4ea:	07d6      	lsls	r6, r2, #31
 800a4ec:	d528      	bpl.n	800a540 <__sflush_r+0xb8>
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	6062      	str	r2, [r4, #4]
 800a4f2:	04d9      	lsls	r1, r3, #19
 800a4f4:	6922      	ldr	r2, [r4, #16]
 800a4f6:	6022      	str	r2, [r4, #0]
 800a4f8:	d504      	bpl.n	800a504 <__sflush_r+0x7c>
 800a4fa:	1c42      	adds	r2, r0, #1
 800a4fc:	d101      	bne.n	800a502 <__sflush_r+0x7a>
 800a4fe:	682b      	ldr	r3, [r5, #0]
 800a500:	b903      	cbnz	r3, 800a504 <__sflush_r+0x7c>
 800a502:	6560      	str	r0, [r4, #84]	; 0x54
 800a504:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800a506:	602f      	str	r7, [r5, #0]
 800a508:	2900      	cmp	r1, #0
 800a50a:	d0ca      	beq.n	800a4a2 <__sflush_r+0x1a>
 800a50c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a510:	4299      	cmp	r1, r3
 800a512:	d002      	beq.n	800a51a <__sflush_r+0x92>
 800a514:	4628      	mov	r0, r5
 800a516:	f7ff faa5 	bl	8009a64 <_free_r>
 800a51a:	2000      	movs	r0, #0
 800a51c:	6360      	str	r0, [r4, #52]	; 0x34
 800a51e:	e7c1      	b.n	800a4a4 <__sflush_r+0x1c>
 800a520:	6a21      	ldr	r1, [r4, #32]
 800a522:	2301      	movs	r3, #1
 800a524:	4628      	mov	r0, r5
 800a526:	47b0      	blx	r6
 800a528:	1c41      	adds	r1, r0, #1
 800a52a:	d1c7      	bne.n	800a4bc <__sflush_r+0x34>
 800a52c:	682b      	ldr	r3, [r5, #0]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d0c4      	beq.n	800a4bc <__sflush_r+0x34>
 800a532:	2b1d      	cmp	r3, #29
 800a534:	d001      	beq.n	800a53a <__sflush_r+0xb2>
 800a536:	2b16      	cmp	r3, #22
 800a538:	d101      	bne.n	800a53e <__sflush_r+0xb6>
 800a53a:	602f      	str	r7, [r5, #0]
 800a53c:	e7b1      	b.n	800a4a2 <__sflush_r+0x1a>
 800a53e:	89a3      	ldrh	r3, [r4, #12]
 800a540:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a544:	81a3      	strh	r3, [r4, #12]
 800a546:	e7ad      	b.n	800a4a4 <__sflush_r+0x1c>
 800a548:	690f      	ldr	r7, [r1, #16]
 800a54a:	2f00      	cmp	r7, #0
 800a54c:	d0a9      	beq.n	800a4a2 <__sflush_r+0x1a>
 800a54e:	0793      	lsls	r3, r2, #30
 800a550:	680e      	ldr	r6, [r1, #0]
 800a552:	bf08      	it	eq
 800a554:	694b      	ldreq	r3, [r1, #20]
 800a556:	600f      	str	r7, [r1, #0]
 800a558:	bf18      	it	ne
 800a55a:	2300      	movne	r3, #0
 800a55c:	eba6 0807 	sub.w	r8, r6, r7
 800a560:	608b      	str	r3, [r1, #8]
 800a562:	f1b8 0f00 	cmp.w	r8, #0
 800a566:	dd9c      	ble.n	800a4a2 <__sflush_r+0x1a>
 800a568:	6a21      	ldr	r1, [r4, #32]
 800a56a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800a56c:	4643      	mov	r3, r8
 800a56e:	463a      	mov	r2, r7
 800a570:	4628      	mov	r0, r5
 800a572:	47b0      	blx	r6
 800a574:	2800      	cmp	r0, #0
 800a576:	dc06      	bgt.n	800a586 <__sflush_r+0xfe>
 800a578:	89a3      	ldrh	r3, [r4, #12]
 800a57a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a57e:	81a3      	strh	r3, [r4, #12]
 800a580:	f04f 30ff 	mov.w	r0, #4294967295
 800a584:	e78e      	b.n	800a4a4 <__sflush_r+0x1c>
 800a586:	4407      	add	r7, r0
 800a588:	eba8 0800 	sub.w	r8, r8, r0
 800a58c:	e7e9      	b.n	800a562 <__sflush_r+0xda>
 800a58e:	bf00      	nop
 800a590:	20400001 	.word	0x20400001

0800a594 <_fflush_r>:
 800a594:	b538      	push	{r3, r4, r5, lr}
 800a596:	690b      	ldr	r3, [r1, #16]
 800a598:	4605      	mov	r5, r0
 800a59a:	460c      	mov	r4, r1
 800a59c:	b913      	cbnz	r3, 800a5a4 <_fflush_r+0x10>
 800a59e:	2500      	movs	r5, #0
 800a5a0:	4628      	mov	r0, r5
 800a5a2:	bd38      	pop	{r3, r4, r5, pc}
 800a5a4:	b118      	cbz	r0, 800a5ae <_fflush_r+0x1a>
 800a5a6:	6983      	ldr	r3, [r0, #24]
 800a5a8:	b90b      	cbnz	r3, 800a5ae <_fflush_r+0x1a>
 800a5aa:	f000 f887 	bl	800a6bc <__sinit>
 800a5ae:	4b14      	ldr	r3, [pc, #80]	; (800a600 <_fflush_r+0x6c>)
 800a5b0:	429c      	cmp	r4, r3
 800a5b2:	d11b      	bne.n	800a5ec <_fflush_r+0x58>
 800a5b4:	686c      	ldr	r4, [r5, #4]
 800a5b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a5ba:	2b00      	cmp	r3, #0
 800a5bc:	d0ef      	beq.n	800a59e <_fflush_r+0xa>
 800a5be:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800a5c0:	07d0      	lsls	r0, r2, #31
 800a5c2:	d404      	bmi.n	800a5ce <_fflush_r+0x3a>
 800a5c4:	0599      	lsls	r1, r3, #22
 800a5c6:	d402      	bmi.n	800a5ce <_fflush_r+0x3a>
 800a5c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5ca:	f000 f915 	bl	800a7f8 <__retarget_lock_acquire_recursive>
 800a5ce:	4628      	mov	r0, r5
 800a5d0:	4621      	mov	r1, r4
 800a5d2:	f7ff ff59 	bl	800a488 <__sflush_r>
 800a5d6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a5d8:	07da      	lsls	r2, r3, #31
 800a5da:	4605      	mov	r5, r0
 800a5dc:	d4e0      	bmi.n	800a5a0 <_fflush_r+0xc>
 800a5de:	89a3      	ldrh	r3, [r4, #12]
 800a5e0:	059b      	lsls	r3, r3, #22
 800a5e2:	d4dd      	bmi.n	800a5a0 <_fflush_r+0xc>
 800a5e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a5e6:	f000 f908 	bl	800a7fa <__retarget_lock_release_recursive>
 800a5ea:	e7d9      	b.n	800a5a0 <_fflush_r+0xc>
 800a5ec:	4b05      	ldr	r3, [pc, #20]	; (800a604 <_fflush_r+0x70>)
 800a5ee:	429c      	cmp	r4, r3
 800a5f0:	d101      	bne.n	800a5f6 <_fflush_r+0x62>
 800a5f2:	68ac      	ldr	r4, [r5, #8]
 800a5f4:	e7df      	b.n	800a5b6 <_fflush_r+0x22>
 800a5f6:	4b04      	ldr	r3, [pc, #16]	; (800a608 <_fflush_r+0x74>)
 800a5f8:	429c      	cmp	r4, r3
 800a5fa:	bf08      	it	eq
 800a5fc:	68ec      	ldreq	r4, [r5, #12]
 800a5fe:	e7da      	b.n	800a5b6 <_fflush_r+0x22>
 800a600:	080105c4 	.word	0x080105c4
 800a604:	080105e4 	.word	0x080105e4
 800a608:	080105a4 	.word	0x080105a4

0800a60c <std>:
 800a60c:	2300      	movs	r3, #0
 800a60e:	b510      	push	{r4, lr}
 800a610:	4604      	mov	r4, r0
 800a612:	e9c0 3300 	strd	r3, r3, [r0]
 800a616:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a61a:	6083      	str	r3, [r0, #8]
 800a61c:	8181      	strh	r1, [r0, #12]
 800a61e:	6643      	str	r3, [r0, #100]	; 0x64
 800a620:	81c2      	strh	r2, [r0, #14]
 800a622:	6183      	str	r3, [r0, #24]
 800a624:	4619      	mov	r1, r3
 800a626:	2208      	movs	r2, #8
 800a628:	305c      	adds	r0, #92	; 0x5c
 800a62a:	f7fd fbff 	bl	8007e2c <memset>
 800a62e:	4b05      	ldr	r3, [pc, #20]	; (800a644 <std+0x38>)
 800a630:	6263      	str	r3, [r4, #36]	; 0x24
 800a632:	4b05      	ldr	r3, [pc, #20]	; (800a648 <std+0x3c>)
 800a634:	62a3      	str	r3, [r4, #40]	; 0x28
 800a636:	4b05      	ldr	r3, [pc, #20]	; (800a64c <std+0x40>)
 800a638:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a63a:	4b05      	ldr	r3, [pc, #20]	; (800a650 <std+0x44>)
 800a63c:	6224      	str	r4, [r4, #32]
 800a63e:	6323      	str	r3, [r4, #48]	; 0x30
 800a640:	bd10      	pop	{r4, pc}
 800a642:	bf00      	nop
 800a644:	0800a961 	.word	0x0800a961
 800a648:	0800a983 	.word	0x0800a983
 800a64c:	0800a9bb 	.word	0x0800a9bb
 800a650:	0800a9df 	.word	0x0800a9df

0800a654 <_cleanup_r>:
 800a654:	4901      	ldr	r1, [pc, #4]	; (800a65c <_cleanup_r+0x8>)
 800a656:	f000 b8af 	b.w	800a7b8 <_fwalk_reent>
 800a65a:	bf00      	nop
 800a65c:	0800a595 	.word	0x0800a595

0800a660 <__sfmoreglue>:
 800a660:	b570      	push	{r4, r5, r6, lr}
 800a662:	2268      	movs	r2, #104	; 0x68
 800a664:	1e4d      	subs	r5, r1, #1
 800a666:	4355      	muls	r5, r2
 800a668:	460e      	mov	r6, r1
 800a66a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800a66e:	f7ff fa65 	bl	8009b3c <_malloc_r>
 800a672:	4604      	mov	r4, r0
 800a674:	b140      	cbz	r0, 800a688 <__sfmoreglue+0x28>
 800a676:	2100      	movs	r1, #0
 800a678:	e9c0 1600 	strd	r1, r6, [r0]
 800a67c:	300c      	adds	r0, #12
 800a67e:	60a0      	str	r0, [r4, #8]
 800a680:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800a684:	f7fd fbd2 	bl	8007e2c <memset>
 800a688:	4620      	mov	r0, r4
 800a68a:	bd70      	pop	{r4, r5, r6, pc}

0800a68c <__sfp_lock_acquire>:
 800a68c:	4801      	ldr	r0, [pc, #4]	; (800a694 <__sfp_lock_acquire+0x8>)
 800a68e:	f000 b8b3 	b.w	800a7f8 <__retarget_lock_acquire_recursive>
 800a692:	bf00      	nop
 800a694:	20000499 	.word	0x20000499

0800a698 <__sfp_lock_release>:
 800a698:	4801      	ldr	r0, [pc, #4]	; (800a6a0 <__sfp_lock_release+0x8>)
 800a69a:	f000 b8ae 	b.w	800a7fa <__retarget_lock_release_recursive>
 800a69e:	bf00      	nop
 800a6a0:	20000499 	.word	0x20000499

0800a6a4 <__sinit_lock_acquire>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	; (800a6ac <__sinit_lock_acquire+0x8>)
 800a6a6:	f000 b8a7 	b.w	800a7f8 <__retarget_lock_acquire_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	2000049a 	.word	0x2000049a

0800a6b0 <__sinit_lock_release>:
 800a6b0:	4801      	ldr	r0, [pc, #4]	; (800a6b8 <__sinit_lock_release+0x8>)
 800a6b2:	f000 b8a2 	b.w	800a7fa <__retarget_lock_release_recursive>
 800a6b6:	bf00      	nop
 800a6b8:	2000049a 	.word	0x2000049a

0800a6bc <__sinit>:
 800a6bc:	b510      	push	{r4, lr}
 800a6be:	4604      	mov	r4, r0
 800a6c0:	f7ff fff0 	bl	800a6a4 <__sinit_lock_acquire>
 800a6c4:	69a3      	ldr	r3, [r4, #24]
 800a6c6:	b11b      	cbz	r3, 800a6d0 <__sinit+0x14>
 800a6c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a6cc:	f7ff bff0 	b.w	800a6b0 <__sinit_lock_release>
 800a6d0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800a6d4:	6523      	str	r3, [r4, #80]	; 0x50
 800a6d6:	4b13      	ldr	r3, [pc, #76]	; (800a724 <__sinit+0x68>)
 800a6d8:	4a13      	ldr	r2, [pc, #76]	; (800a728 <__sinit+0x6c>)
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	62a2      	str	r2, [r4, #40]	; 0x28
 800a6de:	42a3      	cmp	r3, r4
 800a6e0:	bf04      	itt	eq
 800a6e2:	2301      	moveq	r3, #1
 800a6e4:	61a3      	streq	r3, [r4, #24]
 800a6e6:	4620      	mov	r0, r4
 800a6e8:	f000 f820 	bl	800a72c <__sfp>
 800a6ec:	6060      	str	r0, [r4, #4]
 800a6ee:	4620      	mov	r0, r4
 800a6f0:	f000 f81c 	bl	800a72c <__sfp>
 800a6f4:	60a0      	str	r0, [r4, #8]
 800a6f6:	4620      	mov	r0, r4
 800a6f8:	f000 f818 	bl	800a72c <__sfp>
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	60e0      	str	r0, [r4, #12]
 800a700:	2104      	movs	r1, #4
 800a702:	6860      	ldr	r0, [r4, #4]
 800a704:	f7ff ff82 	bl	800a60c <std>
 800a708:	68a0      	ldr	r0, [r4, #8]
 800a70a:	2201      	movs	r2, #1
 800a70c:	2109      	movs	r1, #9
 800a70e:	f7ff ff7d 	bl	800a60c <std>
 800a712:	68e0      	ldr	r0, [r4, #12]
 800a714:	2202      	movs	r2, #2
 800a716:	2112      	movs	r1, #18
 800a718:	f7ff ff78 	bl	800a60c <std>
 800a71c:	2301      	movs	r3, #1
 800a71e:	61a3      	str	r3, [r4, #24]
 800a720:	e7d2      	b.n	800a6c8 <__sinit+0xc>
 800a722:	bf00      	nop
 800a724:	08010228 	.word	0x08010228
 800a728:	0800a655 	.word	0x0800a655

0800a72c <__sfp>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	4607      	mov	r7, r0
 800a730:	f7ff ffac 	bl	800a68c <__sfp_lock_acquire>
 800a734:	4b1e      	ldr	r3, [pc, #120]	; (800a7b0 <__sfp+0x84>)
 800a736:	681e      	ldr	r6, [r3, #0]
 800a738:	69b3      	ldr	r3, [r6, #24]
 800a73a:	b913      	cbnz	r3, 800a742 <__sfp+0x16>
 800a73c:	4630      	mov	r0, r6
 800a73e:	f7ff ffbd 	bl	800a6bc <__sinit>
 800a742:	3648      	adds	r6, #72	; 0x48
 800a744:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800a748:	3b01      	subs	r3, #1
 800a74a:	d503      	bpl.n	800a754 <__sfp+0x28>
 800a74c:	6833      	ldr	r3, [r6, #0]
 800a74e:	b30b      	cbz	r3, 800a794 <__sfp+0x68>
 800a750:	6836      	ldr	r6, [r6, #0]
 800a752:	e7f7      	b.n	800a744 <__sfp+0x18>
 800a754:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800a758:	b9d5      	cbnz	r5, 800a790 <__sfp+0x64>
 800a75a:	4b16      	ldr	r3, [pc, #88]	; (800a7b4 <__sfp+0x88>)
 800a75c:	60e3      	str	r3, [r4, #12]
 800a75e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800a762:	6665      	str	r5, [r4, #100]	; 0x64
 800a764:	f000 f847 	bl	800a7f6 <__retarget_lock_init_recursive>
 800a768:	f7ff ff96 	bl	800a698 <__sfp_lock_release>
 800a76c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800a770:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800a774:	6025      	str	r5, [r4, #0]
 800a776:	61a5      	str	r5, [r4, #24]
 800a778:	2208      	movs	r2, #8
 800a77a:	4629      	mov	r1, r5
 800a77c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800a780:	f7fd fb54 	bl	8007e2c <memset>
 800a784:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800a788:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800a78c:	4620      	mov	r0, r4
 800a78e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a790:	3468      	adds	r4, #104	; 0x68
 800a792:	e7d9      	b.n	800a748 <__sfp+0x1c>
 800a794:	2104      	movs	r1, #4
 800a796:	4638      	mov	r0, r7
 800a798:	f7ff ff62 	bl	800a660 <__sfmoreglue>
 800a79c:	4604      	mov	r4, r0
 800a79e:	6030      	str	r0, [r6, #0]
 800a7a0:	2800      	cmp	r0, #0
 800a7a2:	d1d5      	bne.n	800a750 <__sfp+0x24>
 800a7a4:	f7ff ff78 	bl	800a698 <__sfp_lock_release>
 800a7a8:	230c      	movs	r3, #12
 800a7aa:	603b      	str	r3, [r7, #0]
 800a7ac:	e7ee      	b.n	800a78c <__sfp+0x60>
 800a7ae:	bf00      	nop
 800a7b0:	08010228 	.word	0x08010228
 800a7b4:	ffff0001 	.word	0xffff0001

0800a7b8 <_fwalk_reent>:
 800a7b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7bc:	4606      	mov	r6, r0
 800a7be:	4688      	mov	r8, r1
 800a7c0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800a7c4:	2700      	movs	r7, #0
 800a7c6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a7ca:	f1b9 0901 	subs.w	r9, r9, #1
 800a7ce:	d505      	bpl.n	800a7dc <_fwalk_reent+0x24>
 800a7d0:	6824      	ldr	r4, [r4, #0]
 800a7d2:	2c00      	cmp	r4, #0
 800a7d4:	d1f7      	bne.n	800a7c6 <_fwalk_reent+0xe>
 800a7d6:	4638      	mov	r0, r7
 800a7d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a7dc:	89ab      	ldrh	r3, [r5, #12]
 800a7de:	2b01      	cmp	r3, #1
 800a7e0:	d907      	bls.n	800a7f2 <_fwalk_reent+0x3a>
 800a7e2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a7e6:	3301      	adds	r3, #1
 800a7e8:	d003      	beq.n	800a7f2 <_fwalk_reent+0x3a>
 800a7ea:	4629      	mov	r1, r5
 800a7ec:	4630      	mov	r0, r6
 800a7ee:	47c0      	blx	r8
 800a7f0:	4307      	orrs	r7, r0
 800a7f2:	3568      	adds	r5, #104	; 0x68
 800a7f4:	e7e9      	b.n	800a7ca <_fwalk_reent+0x12>

0800a7f6 <__retarget_lock_init_recursive>:
 800a7f6:	4770      	bx	lr

0800a7f8 <__retarget_lock_acquire_recursive>:
 800a7f8:	4770      	bx	lr

0800a7fa <__retarget_lock_release_recursive>:
 800a7fa:	4770      	bx	lr

0800a7fc <__swhatbuf_r>:
 800a7fc:	b570      	push	{r4, r5, r6, lr}
 800a7fe:	460e      	mov	r6, r1
 800a800:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a804:	2900      	cmp	r1, #0
 800a806:	b096      	sub	sp, #88	; 0x58
 800a808:	4614      	mov	r4, r2
 800a80a:	461d      	mov	r5, r3
 800a80c:	da08      	bge.n	800a820 <__swhatbuf_r+0x24>
 800a80e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800a812:	2200      	movs	r2, #0
 800a814:	602a      	str	r2, [r5, #0]
 800a816:	061a      	lsls	r2, r3, #24
 800a818:	d410      	bmi.n	800a83c <__swhatbuf_r+0x40>
 800a81a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a81e:	e00e      	b.n	800a83e <__swhatbuf_r+0x42>
 800a820:	466a      	mov	r2, sp
 800a822:	f000 f903 	bl	800aa2c <_fstat_r>
 800a826:	2800      	cmp	r0, #0
 800a828:	dbf1      	blt.n	800a80e <__swhatbuf_r+0x12>
 800a82a:	9a01      	ldr	r2, [sp, #4]
 800a82c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a830:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a834:	425a      	negs	r2, r3
 800a836:	415a      	adcs	r2, r3
 800a838:	602a      	str	r2, [r5, #0]
 800a83a:	e7ee      	b.n	800a81a <__swhatbuf_r+0x1e>
 800a83c:	2340      	movs	r3, #64	; 0x40
 800a83e:	2000      	movs	r0, #0
 800a840:	6023      	str	r3, [r4, #0]
 800a842:	b016      	add	sp, #88	; 0x58
 800a844:	bd70      	pop	{r4, r5, r6, pc}
	...

0800a848 <__smakebuf_r>:
 800a848:	898b      	ldrh	r3, [r1, #12]
 800a84a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a84c:	079d      	lsls	r5, r3, #30
 800a84e:	4606      	mov	r6, r0
 800a850:	460c      	mov	r4, r1
 800a852:	d507      	bpl.n	800a864 <__smakebuf_r+0x1c>
 800a854:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a858:	6023      	str	r3, [r4, #0]
 800a85a:	6123      	str	r3, [r4, #16]
 800a85c:	2301      	movs	r3, #1
 800a85e:	6163      	str	r3, [r4, #20]
 800a860:	b002      	add	sp, #8
 800a862:	bd70      	pop	{r4, r5, r6, pc}
 800a864:	ab01      	add	r3, sp, #4
 800a866:	466a      	mov	r2, sp
 800a868:	f7ff ffc8 	bl	800a7fc <__swhatbuf_r>
 800a86c:	9900      	ldr	r1, [sp, #0]
 800a86e:	4605      	mov	r5, r0
 800a870:	4630      	mov	r0, r6
 800a872:	f7ff f963 	bl	8009b3c <_malloc_r>
 800a876:	b948      	cbnz	r0, 800a88c <__smakebuf_r+0x44>
 800a878:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a87c:	059a      	lsls	r2, r3, #22
 800a87e:	d4ef      	bmi.n	800a860 <__smakebuf_r+0x18>
 800a880:	f023 0303 	bic.w	r3, r3, #3
 800a884:	f043 0302 	orr.w	r3, r3, #2
 800a888:	81a3      	strh	r3, [r4, #12]
 800a88a:	e7e3      	b.n	800a854 <__smakebuf_r+0xc>
 800a88c:	4b0d      	ldr	r3, [pc, #52]	; (800a8c4 <__smakebuf_r+0x7c>)
 800a88e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a890:	89a3      	ldrh	r3, [r4, #12]
 800a892:	6020      	str	r0, [r4, #0]
 800a894:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a898:	81a3      	strh	r3, [r4, #12]
 800a89a:	9b00      	ldr	r3, [sp, #0]
 800a89c:	6163      	str	r3, [r4, #20]
 800a89e:	9b01      	ldr	r3, [sp, #4]
 800a8a0:	6120      	str	r0, [r4, #16]
 800a8a2:	b15b      	cbz	r3, 800a8bc <__smakebuf_r+0x74>
 800a8a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a8a8:	4630      	mov	r0, r6
 800a8aa:	f000 f8d1 	bl	800aa50 <_isatty_r>
 800a8ae:	b128      	cbz	r0, 800a8bc <__smakebuf_r+0x74>
 800a8b0:	89a3      	ldrh	r3, [r4, #12]
 800a8b2:	f023 0303 	bic.w	r3, r3, #3
 800a8b6:	f043 0301 	orr.w	r3, r3, #1
 800a8ba:	81a3      	strh	r3, [r4, #12]
 800a8bc:	89a0      	ldrh	r0, [r4, #12]
 800a8be:	4305      	orrs	r5, r0
 800a8c0:	81a5      	strh	r5, [r4, #12]
 800a8c2:	e7cd      	b.n	800a860 <__smakebuf_r+0x18>
 800a8c4:	0800a655 	.word	0x0800a655

0800a8c8 <_malloc_usable_size_r>:
 800a8c8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8cc:	1f18      	subs	r0, r3, #4
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	bfbc      	itt	lt
 800a8d2:	580b      	ldrlt	r3, [r1, r0]
 800a8d4:	18c0      	addlt	r0, r0, r3
 800a8d6:	4770      	bx	lr

0800a8d8 <_raise_r>:
 800a8d8:	291f      	cmp	r1, #31
 800a8da:	b538      	push	{r3, r4, r5, lr}
 800a8dc:	4604      	mov	r4, r0
 800a8de:	460d      	mov	r5, r1
 800a8e0:	d904      	bls.n	800a8ec <_raise_r+0x14>
 800a8e2:	2316      	movs	r3, #22
 800a8e4:	6003      	str	r3, [r0, #0]
 800a8e6:	f04f 30ff 	mov.w	r0, #4294967295
 800a8ea:	bd38      	pop	{r3, r4, r5, pc}
 800a8ec:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800a8ee:	b112      	cbz	r2, 800a8f6 <_raise_r+0x1e>
 800a8f0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a8f4:	b94b      	cbnz	r3, 800a90a <_raise_r+0x32>
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f000 f830 	bl	800a95c <_getpid_r>
 800a8fc:	462a      	mov	r2, r5
 800a8fe:	4601      	mov	r1, r0
 800a900:	4620      	mov	r0, r4
 800a902:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a906:	f000 b817 	b.w	800a938 <_kill_r>
 800a90a:	2b01      	cmp	r3, #1
 800a90c:	d00a      	beq.n	800a924 <_raise_r+0x4c>
 800a90e:	1c59      	adds	r1, r3, #1
 800a910:	d103      	bne.n	800a91a <_raise_r+0x42>
 800a912:	2316      	movs	r3, #22
 800a914:	6003      	str	r3, [r0, #0]
 800a916:	2001      	movs	r0, #1
 800a918:	e7e7      	b.n	800a8ea <_raise_r+0x12>
 800a91a:	2400      	movs	r4, #0
 800a91c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800a920:	4628      	mov	r0, r5
 800a922:	4798      	blx	r3
 800a924:	2000      	movs	r0, #0
 800a926:	e7e0      	b.n	800a8ea <_raise_r+0x12>

0800a928 <raise>:
 800a928:	4b02      	ldr	r3, [pc, #8]	; (800a934 <raise+0xc>)
 800a92a:	4601      	mov	r1, r0
 800a92c:	6818      	ldr	r0, [r3, #0]
 800a92e:	f7ff bfd3 	b.w	800a8d8 <_raise_r>
 800a932:	bf00      	nop
 800a934:	20000010 	.word	0x20000010

0800a938 <_kill_r>:
 800a938:	b538      	push	{r3, r4, r5, lr}
 800a93a:	4d07      	ldr	r5, [pc, #28]	; (800a958 <_kill_r+0x20>)
 800a93c:	2300      	movs	r3, #0
 800a93e:	4604      	mov	r4, r0
 800a940:	4608      	mov	r0, r1
 800a942:	4611      	mov	r1, r2
 800a944:	602b      	str	r3, [r5, #0]
 800a946:	f7f6 fe99 	bl	800167c <_kill>
 800a94a:	1c43      	adds	r3, r0, #1
 800a94c:	d102      	bne.n	800a954 <_kill_r+0x1c>
 800a94e:	682b      	ldr	r3, [r5, #0]
 800a950:	b103      	cbz	r3, 800a954 <_kill_r+0x1c>
 800a952:	6023      	str	r3, [r4, #0]
 800a954:	bd38      	pop	{r3, r4, r5, pc}
 800a956:	bf00      	nop
 800a958:	20000494 	.word	0x20000494

0800a95c <_getpid_r>:
 800a95c:	f7f6 be86 	b.w	800166c <_getpid>

0800a960 <__sread>:
 800a960:	b510      	push	{r4, lr}
 800a962:	460c      	mov	r4, r1
 800a964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a968:	f000 f894 	bl	800aa94 <_read_r>
 800a96c:	2800      	cmp	r0, #0
 800a96e:	bfab      	itete	ge
 800a970:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a972:	89a3      	ldrhlt	r3, [r4, #12]
 800a974:	181b      	addge	r3, r3, r0
 800a976:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a97a:	bfac      	ite	ge
 800a97c:	6563      	strge	r3, [r4, #84]	; 0x54
 800a97e:	81a3      	strhlt	r3, [r4, #12]
 800a980:	bd10      	pop	{r4, pc}

0800a982 <__swrite>:
 800a982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a986:	461f      	mov	r7, r3
 800a988:	898b      	ldrh	r3, [r1, #12]
 800a98a:	05db      	lsls	r3, r3, #23
 800a98c:	4605      	mov	r5, r0
 800a98e:	460c      	mov	r4, r1
 800a990:	4616      	mov	r6, r2
 800a992:	d505      	bpl.n	800a9a0 <__swrite+0x1e>
 800a994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a998:	2302      	movs	r3, #2
 800a99a:	2200      	movs	r2, #0
 800a99c:	f000 f868 	bl	800aa70 <_lseek_r>
 800a9a0:	89a3      	ldrh	r3, [r4, #12]
 800a9a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a9a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a9aa:	81a3      	strh	r3, [r4, #12]
 800a9ac:	4632      	mov	r2, r6
 800a9ae:	463b      	mov	r3, r7
 800a9b0:	4628      	mov	r0, r5
 800a9b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a9b6:	f000 b817 	b.w	800a9e8 <_write_r>

0800a9ba <__sseek>:
 800a9ba:	b510      	push	{r4, lr}
 800a9bc:	460c      	mov	r4, r1
 800a9be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9c2:	f000 f855 	bl	800aa70 <_lseek_r>
 800a9c6:	1c43      	adds	r3, r0, #1
 800a9c8:	89a3      	ldrh	r3, [r4, #12]
 800a9ca:	bf15      	itete	ne
 800a9cc:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9d6:	81a3      	strheq	r3, [r4, #12]
 800a9d8:	bf18      	it	ne
 800a9da:	81a3      	strhne	r3, [r4, #12]
 800a9dc:	bd10      	pop	{r4, pc}

0800a9de <__sclose>:
 800a9de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9e2:	f000 b813 	b.w	800aa0c <_close_r>
	...

0800a9e8 <_write_r>:
 800a9e8:	b538      	push	{r3, r4, r5, lr}
 800a9ea:	4d07      	ldr	r5, [pc, #28]	; (800aa08 <_write_r+0x20>)
 800a9ec:	4604      	mov	r4, r0
 800a9ee:	4608      	mov	r0, r1
 800a9f0:	4611      	mov	r1, r2
 800a9f2:	2200      	movs	r2, #0
 800a9f4:	602a      	str	r2, [r5, #0]
 800a9f6:	461a      	mov	r2, r3
 800a9f8:	f7f6 fe77 	bl	80016ea <_write>
 800a9fc:	1c43      	adds	r3, r0, #1
 800a9fe:	d102      	bne.n	800aa06 <_write_r+0x1e>
 800aa00:	682b      	ldr	r3, [r5, #0]
 800aa02:	b103      	cbz	r3, 800aa06 <_write_r+0x1e>
 800aa04:	6023      	str	r3, [r4, #0]
 800aa06:	bd38      	pop	{r3, r4, r5, pc}
 800aa08:	20000494 	.word	0x20000494

0800aa0c <_close_r>:
 800aa0c:	b538      	push	{r3, r4, r5, lr}
 800aa0e:	4d06      	ldr	r5, [pc, #24]	; (800aa28 <_close_r+0x1c>)
 800aa10:	2300      	movs	r3, #0
 800aa12:	4604      	mov	r4, r0
 800aa14:	4608      	mov	r0, r1
 800aa16:	602b      	str	r3, [r5, #0]
 800aa18:	f7f6 fe83 	bl	8001722 <_close>
 800aa1c:	1c43      	adds	r3, r0, #1
 800aa1e:	d102      	bne.n	800aa26 <_close_r+0x1a>
 800aa20:	682b      	ldr	r3, [r5, #0]
 800aa22:	b103      	cbz	r3, 800aa26 <_close_r+0x1a>
 800aa24:	6023      	str	r3, [r4, #0]
 800aa26:	bd38      	pop	{r3, r4, r5, pc}
 800aa28:	20000494 	.word	0x20000494

0800aa2c <_fstat_r>:
 800aa2c:	b538      	push	{r3, r4, r5, lr}
 800aa2e:	4d07      	ldr	r5, [pc, #28]	; (800aa4c <_fstat_r+0x20>)
 800aa30:	2300      	movs	r3, #0
 800aa32:	4604      	mov	r4, r0
 800aa34:	4608      	mov	r0, r1
 800aa36:	4611      	mov	r1, r2
 800aa38:	602b      	str	r3, [r5, #0]
 800aa3a:	f7f6 fe7e 	bl	800173a <_fstat>
 800aa3e:	1c43      	adds	r3, r0, #1
 800aa40:	d102      	bne.n	800aa48 <_fstat_r+0x1c>
 800aa42:	682b      	ldr	r3, [r5, #0]
 800aa44:	b103      	cbz	r3, 800aa48 <_fstat_r+0x1c>
 800aa46:	6023      	str	r3, [r4, #0]
 800aa48:	bd38      	pop	{r3, r4, r5, pc}
 800aa4a:	bf00      	nop
 800aa4c:	20000494 	.word	0x20000494

0800aa50 <_isatty_r>:
 800aa50:	b538      	push	{r3, r4, r5, lr}
 800aa52:	4d06      	ldr	r5, [pc, #24]	; (800aa6c <_isatty_r+0x1c>)
 800aa54:	2300      	movs	r3, #0
 800aa56:	4604      	mov	r4, r0
 800aa58:	4608      	mov	r0, r1
 800aa5a:	602b      	str	r3, [r5, #0]
 800aa5c:	f7f6 fe7d 	bl	800175a <_isatty>
 800aa60:	1c43      	adds	r3, r0, #1
 800aa62:	d102      	bne.n	800aa6a <_isatty_r+0x1a>
 800aa64:	682b      	ldr	r3, [r5, #0]
 800aa66:	b103      	cbz	r3, 800aa6a <_isatty_r+0x1a>
 800aa68:	6023      	str	r3, [r4, #0]
 800aa6a:	bd38      	pop	{r3, r4, r5, pc}
 800aa6c:	20000494 	.word	0x20000494

0800aa70 <_lseek_r>:
 800aa70:	b538      	push	{r3, r4, r5, lr}
 800aa72:	4d07      	ldr	r5, [pc, #28]	; (800aa90 <_lseek_r+0x20>)
 800aa74:	4604      	mov	r4, r0
 800aa76:	4608      	mov	r0, r1
 800aa78:	4611      	mov	r1, r2
 800aa7a:	2200      	movs	r2, #0
 800aa7c:	602a      	str	r2, [r5, #0]
 800aa7e:	461a      	mov	r2, r3
 800aa80:	f7f6 fe76 	bl	8001770 <_lseek>
 800aa84:	1c43      	adds	r3, r0, #1
 800aa86:	d102      	bne.n	800aa8e <_lseek_r+0x1e>
 800aa88:	682b      	ldr	r3, [r5, #0]
 800aa8a:	b103      	cbz	r3, 800aa8e <_lseek_r+0x1e>
 800aa8c:	6023      	str	r3, [r4, #0]
 800aa8e:	bd38      	pop	{r3, r4, r5, pc}
 800aa90:	20000494 	.word	0x20000494

0800aa94 <_read_r>:
 800aa94:	b538      	push	{r3, r4, r5, lr}
 800aa96:	4d07      	ldr	r5, [pc, #28]	; (800aab4 <_read_r+0x20>)
 800aa98:	4604      	mov	r4, r0
 800aa9a:	4608      	mov	r0, r1
 800aa9c:	4611      	mov	r1, r2
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	602a      	str	r2, [r5, #0]
 800aaa2:	461a      	mov	r2, r3
 800aaa4:	f7f6 fe04 	bl	80016b0 <_read>
 800aaa8:	1c43      	adds	r3, r0, #1
 800aaaa:	d102      	bne.n	800aab2 <_read_r+0x1e>
 800aaac:	682b      	ldr	r3, [r5, #0]
 800aaae:	b103      	cbz	r3, 800aab2 <_read_r+0x1e>
 800aab0:	6023      	str	r3, [r4, #0]
 800aab2:	bd38      	pop	{r3, r4, r5, pc}
 800aab4:	20000494 	.word	0x20000494

0800aab8 <_init>:
 800aab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaba:	bf00      	nop
 800aabc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aabe:	bc08      	pop	{r3}
 800aac0:	469e      	mov	lr, r3
 800aac2:	4770      	bx	lr

0800aac4 <_fini>:
 800aac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aac6:	bf00      	nop
 800aac8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaca:	bc08      	pop	{r3}
 800aacc:	469e      	mov	lr, r3
 800aace:	4770      	bx	lr
