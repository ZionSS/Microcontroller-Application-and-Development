
Lab03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ddc  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002fd4  08002fd4  00012fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003090  08003090  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003090  08003090  00013090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003098  08003098  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003098  08003098  00013098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800309c  0800309c  0001309c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080030a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  2000000c  080030ac  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  080030ac  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c0b  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000169e  00000000  00000000  00029c45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006d8  00000000  00000000  0002b2e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000640  00000000  00000000  0002b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002677f  00000000  00000000  0002c000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009cc2  00000000  00000000  0005277f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efd48  00000000  00000000  0005c441  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014c189  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001a7c  00000000  00000000  0014c1dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	08002fbc 	.word	0x08002fbc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	08002fbc 	.word	0x08002fbc

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_GPIO_Init>:

/* USER CODE END 1 */

/** Configure pins
 */
void MX_GPIO_Init(void) {
 800054c:	b580      	push	{r7, lr}
 800054e:	b088      	sub	sp, #32
 8000550:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000552:	f107 030c 	add.w	r3, r7, #12
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000562:	4b18      	ldr	r3, [pc, #96]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000566:	4a17      	ldr	r2, [pc, #92]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000568:	f043 0308 	orr.w	r3, r3, #8
 800056c:	6313      	str	r3, [r2, #48]	; 0x30
 800056e:	4b15      	ldr	r3, [pc, #84]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000572:	f003 0308 	and.w	r3, r3, #8
 8000576:	60bb      	str	r3, [r7, #8]
 8000578:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800057a:	4b12      	ldr	r3, [pc, #72]	; (80005c4 <MX_GPIO_Init+0x78>)
 800057c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800057e:	4a11      	ldr	r2, [pc, #68]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000580:	f043 0304 	orr.w	r3, r3, #4
 8000584:	6313      	str	r3, [r2, #48]	; 0x30
 8000586:	4b0f      	ldr	r3, [pc, #60]	; (80005c4 <MX_GPIO_Init+0x78>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	f003 0304 	and.w	r3, r3, #4
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8 | GPIO_PIN_9, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	f44f 7140 	mov.w	r1, #768	; 0x300
 8000598:	480b      	ldr	r0, [pc, #44]	; (80005c8 <MX_GPIO_Init+0x7c>)
 800059a:	f000 fe4f 	bl	800123c <HAL_GPIO_WritePin>

	/*Configure GPIO pins : PC8 PC9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 800059e:	f44f 7340 	mov.w	r3, #768	; 0x300
 80005a2:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005a4:	2301      	movs	r3, #1
 80005a6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ac:	2300      	movs	r3, #0
 80005ae:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80005b0:	f107 030c 	add.w	r3, r7, #12
 80005b4:	4619      	mov	r1, r3
 80005b6:	4804      	ldr	r0, [pc, #16]	; (80005c8 <MX_GPIO_Init+0x7c>)
 80005b8:	f000 fc94 	bl	8000ee4 <HAL_GPIO_Init>

}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40023800 	.word	0x40023800
 80005c8:	40020800 	.word	0x40020800

080005cc <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80005cc:	b5b0      	push	{r4, r5, r7, lr}
 80005ce:	b0a8      	sub	sp, #160	; 0xa0
 80005d0:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80005d2:	f000 fb20 	bl	8000c16 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80005d6:	f000 f9a3 	bl	8000920 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80005da:	f7ff ffb7 	bl	800054c <MX_GPIO_Init>
	MX_USART3_UART_Init();
 80005de:	f000 fa61 	bl	8000aa4 <MX_USART3_UART_Init>
//
//			state = 2;
//		}


		char str[] = "\tInput => ";
 80005e2:	4a99      	ldr	r2, [pc, #612]	; (8000848 <main+0x27c>)
 80005e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005e8:	ca07      	ldmia	r2, {r0, r1, r2}
 80005ea:	c303      	stmia	r3!, {r0, r1}
 80005ec:	801a      	strh	r2, [r3, #0]
 80005ee:	3302      	adds	r3, #2
 80005f0:	0c12      	lsrs	r2, r2, #16
 80005f2:	701a      	strb	r2, [r3, #0]
		char text1[] =
 80005f4:	4a95      	ldr	r2, [pc, #596]	; (800084c <main+0x280>)
 80005f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005fa:	4611      	mov	r1, r2
 80005fc:	2251      	movs	r2, #81	; 0x51
 80005fe:	4618      	mov	r0, r3
 8000600:	f002 fcc6 	bl	8002f90 <memcpy>
				"Display Blinking LED PRESS (1, 2)\n\rDisplay Group Members PRESS m\n\rQuit PRESS q\n\r";
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 8000604:	2201      	movs	r2, #1
 8000606:	f44f 7180 	mov.w	r1, #256	; 0x100
 800060a:	4891      	ldr	r0, [pc, #580]	; (8000850 <main+0x284>)
 800060c:	f000 fe16 	bl	800123c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 8000610:	2201      	movs	r2, #1
 8000612:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000616:	488e      	ldr	r0, [pc, #568]	; (8000850 <main+0x284>)
 8000618:	f000 fe10 	bl	800123c <HAL_GPIO_WritePin>
		if (state == 0) { //start state = 0
 800061c:	4b8d      	ldr	r3, [pc, #564]	; (8000854 <main+0x288>)
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b00      	cmp	r3, #0
 8000622:	d14c      	bne.n	80006be <main+0xf2>

			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000624:	bf00      	nop
 8000626:	4b8c      	ldr	r3, [pc, #560]	; (8000858 <main+0x28c>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	69db      	ldr	r3, [r3, #28]
 800062c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000630:	2b40      	cmp	r3, #64	; 0x40
 8000632:	d1f8      	bne.n	8000626 <main+0x5a>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) text1, strlen(text1), 1000);
 8000634:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000638:	4618      	mov	r0, r3
 800063a:	f7ff fdfd 	bl	8000238 <strlen>
 800063e:	4603      	mov	r3, r0
 8000640:	b29a      	uxth	r2, r3
 8000642:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8000646:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800064a:	4883      	ldr	r0, [pc, #524]	; (8000858 <main+0x28c>)
 800064c:	f001 ff1a 	bl	8002484 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 1000);
 8000650:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff fdef 	bl	8000238 <strlen>
 800065a:	4603      	mov	r3, r0
 800065c:	b29a      	uxth	r2, r3
 800065e:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	487c      	ldr	r0, [pc, #496]	; (8000858 <main+0x28c>)
 8000668:	f001 ff0c 	bl	8002484 <HAL_UART_Transmit>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE) == RESET) {
 800066c:	bf00      	nop
 800066e:	4b7a      	ldr	r3, [pc, #488]	; (8000858 <main+0x28c>)
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	69db      	ldr	r3, [r3, #28]
 8000674:	f003 0320 	and.w	r3, r3, #32
 8000678:	2b20      	cmp	r3, #32
 800067a:	d1f8      	bne.n	800066e <main+0xa2>
			}
			HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
 800067c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000680:	2201      	movs	r2, #1
 8000682:	4976      	ldr	r1, [pc, #472]	; (800085c <main+0x290>)
 8000684:	4874      	ldr	r0, [pc, #464]	; (8000858 <main+0x28c>)
 8000686:	f001 ff80 	bl	800258a <HAL_UART_Receive>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 800068a:	bf00      	nop
 800068c:	4b72      	ldr	r3, [pc, #456]	; (8000858 <main+0x28c>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	69db      	ldr	r3, [r3, #28]
 8000692:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000696:	2b40      	cmp	r3, #64	; 0x40
 8000698:	d1f8      	bne.n	800068c <main+0xc0>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 1000);
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	2201      	movs	r2, #1
 80006a0:	496e      	ldr	r1, [pc, #440]	; (800085c <main+0x290>)
 80006a2:	486d      	ldr	r0, [pc, #436]	; (8000858 <main+0x28c>)
 80006a4:	f001 feee 	bl	8002484 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "\n\r", 2, 1000);
 80006a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ac:	2202      	movs	r2, #2
 80006ae:	496c      	ldr	r1, [pc, #432]	; (8000860 <main+0x294>)
 80006b0:	4869      	ldr	r0, [pc, #420]	; (8000858 <main+0x28c>)
 80006b2:	f001 fee7 	bl	8002484 <HAL_UART_Transmit>
			state = 2;
 80006b6:	4b67      	ldr	r3, [pc, #412]	; (8000854 <main+0x288>)
 80006b8:	2202      	movs	r2, #2
 80006ba:	701a      	strb	r2, [r3, #0]
 80006bc:	e041      	b.n	8000742 <main+0x176>
		} else if (state == 1) {
 80006be:	4b65      	ldr	r3, [pc, #404]	; (8000854 <main+0x288>)
 80006c0:	781b      	ldrb	r3, [r3, #0]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d13d      	bne.n	8000742 <main+0x176>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80006c6:	bf00      	nop
 80006c8:	4b63      	ldr	r3, [pc, #396]	; (8000858 <main+0x28c>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	69db      	ldr	r3, [r3, #28]
 80006ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006d2:	2b40      	cmp	r3, #64	; 0x40
 80006d4:	d1f8      	bne.n	80006c8 <main+0xfc>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str), 1000);
 80006d6:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80006da:	4618      	mov	r0, r3
 80006dc:	f7ff fdac 	bl	8000238 <strlen>
 80006e0:	4603      	mov	r3, r0
 80006e2:	b29a      	uxth	r2, r3
 80006e4:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 80006e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006ec:	485a      	ldr	r0, [pc, #360]	; (8000858 <main+0x28c>)
 80006ee:	f001 fec9 	bl	8002484 <HAL_UART_Transmit>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE) == RESET) {
 80006f2:	bf00      	nop
 80006f4:	4b58      	ldr	r3, [pc, #352]	; (8000858 <main+0x28c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	69db      	ldr	r3, [r3, #28]
 80006fa:	f003 0320 	and.w	r3, r3, #32
 80006fe:	2b20      	cmp	r3, #32
 8000700:	d1f8      	bne.n	80006f4 <main+0x128>
			}
			HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
 8000702:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000706:	2201      	movs	r2, #1
 8000708:	4954      	ldr	r1, [pc, #336]	; (800085c <main+0x290>)
 800070a:	4853      	ldr	r0, [pc, #332]	; (8000858 <main+0x28c>)
 800070c:	f001 ff3d 	bl	800258a <HAL_UART_Receive>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000710:	bf00      	nop
 8000712:	4b51      	ldr	r3, [pc, #324]	; (8000858 <main+0x28c>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	69db      	ldr	r3, [r3, #28]
 8000718:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800071c:	2b40      	cmp	r3, #64	; 0x40
 800071e:	d1f8      	bne.n	8000712 <main+0x146>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1, 1000);
 8000720:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000724:	2201      	movs	r2, #1
 8000726:	494d      	ldr	r1, [pc, #308]	; (800085c <main+0x290>)
 8000728:	484b      	ldr	r0, [pc, #300]	; (8000858 <main+0x28c>)
 800072a:	f001 feab 	bl	8002484 <HAL_UART_Transmit>
			HAL_UART_Transmit(&huart3, "\n\r", 2, 1000);
 800072e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000732:	2202      	movs	r2, #2
 8000734:	494a      	ldr	r1, [pc, #296]	; (8000860 <main+0x294>)
 8000736:	4848      	ldr	r0, [pc, #288]	; (8000858 <main+0x28c>)
 8000738:	f001 fea4 	bl	8002484 <HAL_UART_Transmit>
			state = 2;
 800073c:	4b45      	ldr	r3, [pc, #276]	; (8000854 <main+0x288>)
 800073e:	2202      	movs	r2, #2
 8000740:	701a      	strb	r2, [r3, #0]
		}
		if (ch1 == '1' && state == 2) {
 8000742:	4b46      	ldr	r3, [pc, #280]	; (800085c <main+0x290>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b31      	cmp	r3, #49	; 0x31
 8000748:	d128      	bne.n	800079c <main+0x1d0>
 800074a:	4b42      	ldr	r3, [pc, #264]	; (8000854 <main+0x288>)
 800074c:	781b      	ldrb	r3, [r3, #0]
 800074e:	2b02      	cmp	r3, #2
 8000750:	d124      	bne.n	800079c <main+0x1d0>
			for (int i = 0; i < 3; i++) {
 8000752:	2300      	movs	r3, #0
 8000754:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8000758:	e018      	b.n	800078c <main+0x1c0>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 0);
 800075a:	2200      	movs	r2, #0
 800075c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000760:	483b      	ldr	r0, [pc, #236]	; (8000850 <main+0x284>)
 8000762:	f000 fd6b 	bl	800123c <HAL_GPIO_WritePin>
				HAL_Delay(300);
 8000766:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800076a:	f000 fab1 	bl	8000cd0 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, 1);
 800076e:	2201      	movs	r2, #1
 8000770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000774:	4836      	ldr	r0, [pc, #216]	; (8000850 <main+0x284>)
 8000776:	f000 fd61 	bl	800123c <HAL_GPIO_WritePin>
				HAL_Delay(300);
 800077a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800077e:	f000 faa7 	bl	8000cd0 <HAL_Delay>
			for (int i = 0; i < 3; i++) {
 8000782:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000786:	3301      	adds	r3, #1
 8000788:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800078c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000790:	2b02      	cmp	r3, #2
 8000792:	dde2      	ble.n	800075a <main+0x18e>
			}
			state = 1;
 8000794:	4b2f      	ldr	r3, [pc, #188]	; (8000854 <main+0x288>)
 8000796:	2201      	movs	r2, #1
 8000798:	701a      	strb	r2, [r3, #0]
 800079a:	e09a      	b.n	80008d2 <main+0x306>
		} else if (ch1 == '2' && state == 2) {
 800079c:	4b2f      	ldr	r3, [pc, #188]	; (800085c <main+0x290>)
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	2b32      	cmp	r3, #50	; 0x32
 80007a2:	d128      	bne.n	80007f6 <main+0x22a>
 80007a4:	4b2b      	ldr	r3, [pc, #172]	; (8000854 <main+0x288>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	2b02      	cmp	r3, #2
 80007aa:	d124      	bne.n	80007f6 <main+0x22a>
			for (int i = 0; i < 3; i++) {
 80007ac:	2300      	movs	r3, #0
 80007ae:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80007b2:	e018      	b.n	80007e6 <main+0x21a>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 0);
 80007b4:	2200      	movs	r2, #0
 80007b6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ba:	4825      	ldr	r0, [pc, #148]	; (8000850 <main+0x284>)
 80007bc:	f000 fd3e 	bl	800123c <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80007c0:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007c4:	f000 fa84 	bl	8000cd0 <HAL_Delay>
				HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, 1);
 80007c8:	2201      	movs	r2, #1
 80007ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80007ce:	4820      	ldr	r0, [pc, #128]	; (8000850 <main+0x284>)
 80007d0:	f000 fd34 	bl	800123c <HAL_GPIO_WritePin>
				HAL_Delay(300);
 80007d4:	f44f 7096 	mov.w	r0, #300	; 0x12c
 80007d8:	f000 fa7a 	bl	8000cd0 <HAL_Delay>
			for (int i = 0; i < 3; i++) {
 80007dc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80007e0:	3301      	adds	r3, #1
 80007e2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80007e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80007ea:	2b02      	cmp	r3, #2
 80007ec:	dde2      	ble.n	80007b4 <main+0x1e8>
			}
			state = 1;
 80007ee:	4b19      	ldr	r3, [pc, #100]	; (8000854 <main+0x288>)
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e06d      	b.n	80008d2 <main+0x306>
		} else if (ch1 == 'm' && state == 2) {
 80007f6:	4b19      	ldr	r3, [pc, #100]	; (800085c <main+0x290>)
 80007f8:	781b      	ldrb	r3, [r3, #0]
 80007fa:	2b6d      	cmp	r3, #109	; 0x6d
 80007fc:	d134      	bne.n	8000868 <main+0x29c>
 80007fe:	4b15      	ldr	r3, [pc, #84]	; (8000854 <main+0x288>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	2b02      	cmp	r3, #2
 8000804:	d130      	bne.n	8000868 <main+0x29c>
			char name[] = "63010631\n\rPhacharaphol Chokkhun\n\r";
 8000806:	4b17      	ldr	r3, [pc, #92]	; (8000864 <main+0x298>)
 8000808:	463c      	mov	r4, r7
 800080a:	461d      	mov	r5, r3
 800080c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800080e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000810:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000812:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000814:	682b      	ldr	r3, [r5, #0]
 8000816:	8023      	strh	r3, [r4, #0]
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 8000818:	bf00      	nop
 800081a:	4b0f      	ldr	r3, [pc, #60]	; (8000858 <main+0x28c>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	69db      	ldr	r3, [r3, #28]
 8000820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000824:	2b40      	cmp	r3, #64	; 0x40
 8000826:	d1f8      	bne.n	800081a <main+0x24e>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) name, strlen(name), 1000);
 8000828:	463b      	mov	r3, r7
 800082a:	4618      	mov	r0, r3
 800082c:	f7ff fd04 	bl	8000238 <strlen>
 8000830:	4603      	mov	r3, r0
 8000832:	b29a      	uxth	r2, r3
 8000834:	4639      	mov	r1, r7
 8000836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800083a:	4807      	ldr	r0, [pc, #28]	; (8000858 <main+0x28c>)
 800083c:	f001 fe22 	bl	8002484 <HAL_UART_Transmit>
			state = 1;
 8000840:	4b04      	ldr	r3, [pc, #16]	; (8000854 <main+0x288>)
 8000842:	2201      	movs	r2, #1
 8000844:	701a      	strb	r2, [r3, #0]
		} else if (ch1 == 'm' && state == 2) {
 8000846:	e044      	b.n	80008d2 <main+0x306>
 8000848:	08002fe0 	.word	0x08002fe0
 800084c:	08002fec 	.word	0x08002fec
 8000850:	40020800 	.word	0x40020800
 8000854:	20000029 	.word	0x20000029
 8000858:	2000002c 	.word	0x2000002c
 800085c:	20000028 	.word	0x20000028
 8000860:	08002fd4 	.word	0x08002fd4
 8000864:	08003040 	.word	0x08003040
		} else if (ch1 != '1' && ch1 != '2' && ch1 != 'm' && ch1 != 'q'
 8000868:	4b28      	ldr	r3, [pc, #160]	; (800090c <main+0x340>)
 800086a:	781b      	ldrb	r3, [r3, #0]
 800086c:	2b31      	cmp	r3, #49	; 0x31
 800086e:	d030      	beq.n	80008d2 <main+0x306>
 8000870:	4b26      	ldr	r3, [pc, #152]	; (800090c <main+0x340>)
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	2b32      	cmp	r3, #50	; 0x32
 8000876:	d02c      	beq.n	80008d2 <main+0x306>
 8000878:	4b24      	ldr	r3, [pc, #144]	; (800090c <main+0x340>)
 800087a:	781b      	ldrb	r3, [r3, #0]
 800087c:	2b6d      	cmp	r3, #109	; 0x6d
 800087e:	d028      	beq.n	80008d2 <main+0x306>
 8000880:	4b22      	ldr	r3, [pc, #136]	; (800090c <main+0x340>)
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	2b71      	cmp	r3, #113	; 0x71
 8000886:	d024      	beq.n	80008d2 <main+0x306>
				&& state == 2) {
 8000888:	4b21      	ldr	r3, [pc, #132]	; (8000910 <main+0x344>)
 800088a:	781b      	ldrb	r3, [r3, #0]
 800088c:	2b02      	cmp	r3, #2
 800088e:	d120      	bne.n	80008d2 <main+0x306>
			char unknow[] = "Unknow Command\n\r";
 8000890:	4b20      	ldr	r3, [pc, #128]	; (8000914 <main+0x348>)
 8000892:	f107 0478 	add.w	r4, r7, #120	; 0x78
 8000896:	461d      	mov	r5, r3
 8000898:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800089a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800089c:	682b      	ldr	r3, [r5, #0]
 800089e:	7023      	strb	r3, [r4, #0]
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80008a0:	bf00      	nop
 80008a2:	4b1d      	ldr	r3, [pc, #116]	; (8000918 <main+0x34c>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	69db      	ldr	r3, [r3, #28]
 80008a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008ac:	2b40      	cmp	r3, #64	; 0x40
 80008ae:	d1f8      	bne.n	80008a2 <main+0x2d6>
			}
			HAL_UART_Transmit(&huart3, (uint8_t*) unknow, strlen(unknow), 1000);
 80008b0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80008b4:	4618      	mov	r0, r3
 80008b6:	f7ff fcbf 	bl	8000238 <strlen>
 80008ba:	4603      	mov	r3, r0
 80008bc:	b29a      	uxth	r2, r3
 80008be:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80008c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008c6:	4814      	ldr	r0, [pc, #80]	; (8000918 <main+0x34c>)
 80008c8:	f001 fddc 	bl	8002484 <HAL_UART_Transmit>
			state = 1;
 80008cc:	4b10      	ldr	r3, [pc, #64]	; (8000910 <main+0x344>)
 80008ce:	2201      	movs	r2, #1
 80008d0:	701a      	strb	r2, [r3, #0]
		}
		if (ch1 == 'q' && state != 3) {
 80008d2:	4b0e      	ldr	r3, [pc, #56]	; (800090c <main+0x340>)
 80008d4:	781b      	ldrb	r3, [r3, #0]
 80008d6:	2b71      	cmp	r3, #113	; 0x71
 80008d8:	f47f ae83 	bne.w	80005e2 <main+0x16>
 80008dc:	4b0c      	ldr	r3, [pc, #48]	; (8000910 <main+0x344>)
 80008de:	781b      	ldrb	r3, [r3, #0]
 80008e0:	2b03      	cmp	r3, #3
 80008e2:	f43f ae7e 	beq.w	80005e2 <main+0x16>
			while (__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC) == RESET) {
 80008e6:	bf00      	nop
 80008e8:	4b0b      	ldr	r3, [pc, #44]	; (8000918 <main+0x34c>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	69db      	ldr	r3, [r3, #28]
 80008ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008f2:	2b40      	cmp	r3, #64	; 0x40
 80008f4:	d1f8      	bne.n	80008e8 <main+0x31c>
			}
			HAL_UART_Transmit(&huart3, "Quit", 4, 1000);
 80008f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008fa:	2204      	movs	r2, #4
 80008fc:	4907      	ldr	r1, [pc, #28]	; (800091c <main+0x350>)
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <main+0x34c>)
 8000900:	f001 fdc0 	bl	8002484 <HAL_UART_Transmit>
			state = 3;
 8000904:	4b02      	ldr	r3, [pc, #8]	; (8000910 <main+0x344>)
 8000906:	2203      	movs	r2, #3
 8000908:	701a      	strb	r2, [r3, #0]
	while (1) {
 800090a:	e66a      	b.n	80005e2 <main+0x16>
 800090c:	20000028 	.word	0x20000028
 8000910:	20000029 	.word	0x20000029
 8000914:	08003064 	.word	0x08003064
 8000918:	2000002c 	.word	0x2000002c
 800091c:	08002fd8 	.word	0x08002fd8

08000920 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000920:	b580      	push	{r7, lr}
 8000922:	b094      	sub	sp, #80	; 0x50
 8000924:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	2234      	movs	r2, #52	; 0x34
 800092c:	2100      	movs	r1, #0
 800092e:	4618      	mov	r0, r3
 8000930:	f002 fb3c 	bl	8002fac <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000934:	f107 0308 	add.w	r3, r7, #8
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
 800093c:	605a      	str	r2, [r3, #4]
 800093e:	609a      	str	r2, [r3, #8]
 8000940:	60da      	str	r2, [r3, #12]
 8000942:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000944:	4b22      	ldr	r3, [pc, #136]	; (80009d0 <SystemClock_Config+0xb0>)
 8000946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000948:	4a21      	ldr	r2, [pc, #132]	; (80009d0 <SystemClock_Config+0xb0>)
 800094a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094e:	6413      	str	r3, [r2, #64]	; 0x40
 8000950:	4b1f      	ldr	r3, [pc, #124]	; (80009d0 <SystemClock_Config+0xb0>)
 8000952:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000954:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000958:	607b      	str	r3, [r7, #4]
 800095a:	687b      	ldr	r3, [r7, #4]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800095c:	4b1d      	ldr	r3, [pc, #116]	; (80009d4 <SystemClock_Config+0xb4>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000964:	4a1b      	ldr	r2, [pc, #108]	; (80009d4 <SystemClock_Config+0xb4>)
 8000966:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <SystemClock_Config+0xb4>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	683b      	ldr	r3, [r7, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000978:	2302      	movs	r3, #2
 800097a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800097c:	2301      	movs	r3, #1
 800097e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000980:	2310      	movs	r3, #16
 8000982:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000984:	2300      	movs	r3, #0
 8000986:	637b      	str	r3, [r7, #52]	; 0x34
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000988:	f107 031c 	add.w	r3, r7, #28
 800098c:	4618      	mov	r0, r3
 800098e:	f000 fc6f 	bl	8001270 <HAL_RCC_OscConfig>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <SystemClock_Config+0x7c>
		Error_Handler();
 8000998:	f000 f81e 	bl	80009d8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 800099c:	230f      	movs	r3, #15
 800099e:	60bb      	str	r3, [r7, #8]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80009a0:	2300      	movs	r3, #0
 80009a2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80009a8:	2300      	movs	r3, #0
 80009aa:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	61bb      	str	r3, [r7, #24]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80009b0:	f107 0308 	add.w	r3, r7, #8
 80009b4:	2100      	movs	r1, #0
 80009b6:	4618      	mov	r0, r3
 80009b8:	f000 ff08 	bl	80017cc <HAL_RCC_ClockConfig>
 80009bc:	4603      	mov	r3, r0
 80009be:	2b00      	cmp	r3, #0
 80009c0:	d001      	beq.n	80009c6 <SystemClock_Config+0xa6>
		Error_Handler();
 80009c2:	f000 f809 	bl	80009d8 <Error_Handler>
	}
}
 80009c6:	bf00      	nop
 80009c8:	3750      	adds	r7, #80	; 0x50
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023800 	.word	0x40023800
 80009d4:	40007000 	.word	0x40007000

080009d8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80009d8:	b480      	push	{r7}
 80009da:	af00      	add	r7, sp, #0
 \brief   Disable IRQ Interrupts
 \details Disables IRQ interrupts by setting the I-bit in the CPSR.
 Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void) {
	__ASM volatile ("cpsid i" : : : "memory");
 80009dc:	b672      	cpsid	i
}
 80009de:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80009e0:	e7fe      	b.n	80009e0 <Error_Handler+0x8>
	...

080009e4 <HAL_MspInit>:

/* USER CODE END 0 */
/**
 * Initializes the Global MSP.
 */
void HAL_MspInit(void) {
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MspInit 0 */

	/* USER CODE END MspInit 0 */

	__HAL_RCC_PWR_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	; (8000a28 <HAL_MspInit+0x44>)
 80009ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ee:	4a0e      	ldr	r2, [pc, #56]	; (8000a28 <HAL_MspInit+0x44>)
 80009f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009f4:	6413      	str	r3, [r2, #64]	; 0x40
 80009f6:	4b0c      	ldr	r3, [pc, #48]	; (8000a28 <HAL_MspInit+0x44>)
 80009f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009fe:	607b      	str	r3, [r7, #4]
 8000a00:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a02:	4b09      	ldr	r3, [pc, #36]	; (8000a28 <HAL_MspInit+0x44>)
 8000a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a06:	4a08      	ldr	r2, [pc, #32]	; (8000a28 <HAL_MspInit+0x44>)
 8000a08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a0c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a0e:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_MspInit+0x44>)
 8000a10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a16:	603b      	str	r3, [r7, #0]
 8000a18:	683b      	ldr	r3, [r7, #0]
	/* System interrupt init*/

	/* USER CODE BEGIN MspInit 1 */

	/* USER CODE END MspInit 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	370c      	adds	r7, #12
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	40023800 	.word	0x40023800

08000a2c <NMI_Handler>:
/*           Cortex-M7 Processor Interruption and Exception Handlers          */
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void) {
 8000a2c:	b480      	push	{r7}
 8000a2e:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN NonMaskableInt_IRQn 0 */

	/* USER CODE END NonMaskableInt_IRQn 0 */
	/* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8000a30:	e7fe      	b.n	8000a30 <NMI_Handler+0x4>

08000a32 <HardFault_Handler>:
}

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void) {
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN HardFault_IRQn 0 */

	/* USER CODE END HardFault_IRQn 0 */
	while (1) {
 8000a36:	e7fe      	b.n	8000a36 <HardFault_Handler+0x4>

08000a38 <MemManage_Handler>:
}

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void) {
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN MemoryManagement_IRQn 0 */

	/* USER CODE END MemoryManagement_IRQn 0 */
	while (1) {
 8000a3c:	e7fe      	b.n	8000a3c <MemManage_Handler+0x4>

08000a3e <BusFault_Handler>:
}

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void) {
 8000a3e:	b480      	push	{r7}
 8000a40:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN BusFault_IRQn 0 */

	/* USER CODE END BusFault_IRQn 0 */
	while (1) {
 8000a42:	e7fe      	b.n	8000a42 <BusFault_Handler+0x4>

08000a44 <UsageFault_Handler>:
}

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void) {
 8000a44:	b480      	push	{r7}
 8000a46:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN UsageFault_IRQn 0 */

	/* USER CODE END UsageFault_IRQn 0 */
	while (1) {
 8000a48:	e7fe      	b.n	8000a48 <UsageFault_Handler+0x4>

08000a4a <SVC_Handler>:
}

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void) {
 8000a4a:	b480      	push	{r7}
 8000a4c:	af00      	add	r7, sp, #0

	/* USER CODE END SVCall_IRQn 0 */
	/* USER CODE BEGIN SVCall_IRQn 1 */

	/* USER CODE END SVCall_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void) {
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0

	/* USER CODE END DebugMonitor_IRQn 0 */
	/* USER CODE BEGIN DebugMonitor_IRQn 1 */

	/* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a64:	4770      	bx	lr

08000a66 <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void) {
 8000a66:	b480      	push	{r7}
 8000a68:	af00      	add	r7, sp, #0

	/* USER CODE END PendSV_IRQn 0 */
	/* USER CODE BEGIN PendSV_IRQn 1 */

	/* USER CODE END PendSV_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr

08000a74 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) {
 8000a74:	b580      	push	{r7, lr}
 8000a76:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN SysTick_IRQn 0 */

	/* USER CODE END SysTick_IRQn 0 */
	HAL_IncTick();
 8000a78:	f000 f90a 	bl	8000c90 <HAL_IncTick>
	/* USER CODE BEGIN SysTick_IRQn 1 */

	/* USER CODE END SysTick_IRQn 1 */
}
 8000a7c:	bf00      	nop
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <SystemInit>:
 *         Initialize the Embedded Flash Interface, the PLL and update the 
 *         SystemFrequency variable.
 * @param  None
 * @retval None
 */
void SystemInit(void) {
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
	/* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
	SCB->CPACR |= ((3UL << 10 * 2) | (3UL << 11 * 2)); /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

	/* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <MX_USART3_UART_Init>:

UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void) {
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART3_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
	huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
	huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ae8:	f001 fc7e 	bl	80023e8 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x52>
		Error_Handler();
 8000af2:	f7ff ff71 	bl	80009d8 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000002c 	.word	0x2000002c
 8000b00:	40004800 	.word	0x40004800

08000b04 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef *uartHandle) {
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b0ae      	sub	sp, #184	; 0xb8
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]

	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000b0c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000b10:	2200      	movs	r2, #0
 8000b12:	601a      	str	r2, [r3, #0]
 8000b14:	605a      	str	r2, [r3, #4]
 8000b16:	609a      	str	r2, [r3, #8]
 8000b18:	60da      	str	r2, [r3, #12]
 8000b1a:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = { 0 };
 8000b1c:	f107 0314 	add.w	r3, r7, #20
 8000b20:	2290      	movs	r2, #144	; 0x90
 8000b22:	2100      	movs	r1, #0
 8000b24:	4618      	mov	r0, r3
 8000b26:	f002 fa41 	bl	8002fac <memset>
	if (uartHandle->Instance == USART3) {
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a22      	ldr	r2, [pc, #136]	; (8000bb8 <HAL_UART_MspInit+0xb4>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d13c      	bne.n	8000bae <HAL_UART_MspInit+0xaa>

		/* USER CODE END USART3_MspInit 0 */

		/** Initializes the peripherals clock
		 */
		PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000b34:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000b38:	617b      	str	r3, [r7, #20]
		PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	663b      	str	r3, [r7, #96]	; 0x60
		if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK) {
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4618      	mov	r0, r3
 8000b44:	f001 f828 	bl	8001b98 <HAL_RCCEx_PeriphCLKConfig>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_UART_MspInit+0x4e>
			Error_Handler();
 8000b4e:	f7ff ff43 	bl	80009d8 <Error_Handler>
		}

		/* USART3 clock enable */
		__HAL_RCC_USART3_CLK_ENABLE();
 8000b52:	4b1a      	ldr	r3, [pc, #104]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b56:	4a19      	ldr	r2, [pc, #100]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000b5c:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5e:	4b17      	ldr	r3, [pc, #92]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	693b      	ldr	r3, [r7, #16]

		__HAL_RCC_GPIOD_CLK_ENABLE();
 8000b6a:	4b14      	ldr	r3, [pc, #80]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6e:	4a13      	ldr	r2, [pc, #76]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b70:	f043 0308 	orr.w	r3, r3, #8
 8000b74:	6313      	str	r3, [r2, #48]	; 0x30
 8000b76:	4b11      	ldr	r3, [pc, #68]	; (8000bbc <HAL_UART_MspInit+0xb8>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	f003 0308 	and.w	r3, r3, #8
 8000b7e:	60fb      	str	r3, [r7, #12]
 8000b80:	68fb      	ldr	r3, [r7, #12]
		/**USART3 GPIO Configuration
		 PD8     ------> USART3_TX
		 PD9     ------> USART3_RX
		 */
		GPIO_InitStruct.Pin = GPIO_PIN_8 | GPIO_PIN_9;
 8000b82:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b86:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
		GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b90:	2300      	movs	r3, #0
 8000b92:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
		GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b96:	2303      	movs	r3, #3
 8000b98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000b9c:	2307      	movs	r3, #7
 8000b9e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
		HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ba2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4805      	ldr	r0, [pc, #20]	; (8000bc0 <HAL_UART_MspInit+0xbc>)
 8000baa:	f000 f99b 	bl	8000ee4 <HAL_GPIO_Init>

		/* USER CODE BEGIN USART3_MspInit 1 */

		/* USER CODE END USART3_MspInit 1 */
	}
}
 8000bae:	bf00      	nop
 8000bb0:	37b8      	adds	r7, #184	; 0xb8
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	bd80      	pop	{r7, pc}
 8000bb6:	bf00      	nop
 8000bb8:	40004800 	.word	0x40004800
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40020c00 	.word	0x40020c00

08000bc4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bc4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bfc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc8:	480d      	ldr	r0, [pc, #52]	; (8000c00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bca:	490e      	ldr	r1, [pc, #56]	; (8000c04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bcc:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bd0:	e002      	b.n	8000bd8 <LoopCopyDataInit>

08000bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bd6:	3304      	adds	r3, #4

08000bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bdc:	d3f9      	bcc.n	8000bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bde:	4a0b      	ldr	r2, [pc, #44]	; (8000c0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000be0:	4c0b      	ldr	r4, [pc, #44]	; (8000c10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000be4:	e001      	b.n	8000bea <LoopFillZerobss>

08000be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be8:	3204      	adds	r2, #4

08000bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bec:	d3fb      	bcc.n	8000be6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000bee:	f7ff ff47 	bl	8000a80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bf2:	f002 f9a9 	bl	8002f48 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bf6:	f7ff fce9 	bl	80005cc <main>
  bx  lr    
 8000bfa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bfc:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c04:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000c08:	080030a0 	.word	0x080030a0
  ldr r2, =_sbss
 8000c0c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000c10:	200000b8 	.word	0x200000b8

08000c14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c14:	e7fe      	b.n	8000c14 <ADC_IRQHandler>

08000c16 <HAL_Init>:
 * @note   SysTick is used as time base for the HAL_Delay() function, the application
 *         need to ensure that the SysTick time base is always set to 1 millisecond
 *         to have correct HAL operation.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_Init(void) {
 8000c16:	b580      	push	{r7, lr}
 8000c18:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

	/* Set Interrupt Group Priority */
	HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c1a:	2003      	movs	r0, #3
 8000c1c:	f000 f92e 	bl	8000e7c <HAL_NVIC_SetPriorityGrouping>

	/* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
	HAL_InitTick(TICK_INT_PRIORITY);
 8000c20:	200f      	movs	r0, #15
 8000c22:	f000 f805 	bl	8000c30 <HAL_InitTick>

	/* Init the low level hardware */
	HAL_MspInit();
 8000c26:	f7ff fedd 	bl	80009e4 <HAL_MspInit>

	/* Return function status */
	return HAL_OK;
 8000c2a:	2300      	movs	r3, #0
}
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	bd80      	pop	{r7, pc}

08000c30 <HAL_InitTick>:
 *       The function is declared as __weak  to be overwritten  in case of other
 *       implementation  in user file.
 * @param TickPriority Tick interrupt priority.
 * @retval HAL status
 */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority) {
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	/* Configure the SysTick to have interrupt in 1ms time basis*/
	if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U) {
 8000c38:	4b12      	ldr	r3, [pc, #72]	; (8000c84 <HAL_InitTick+0x54>)
 8000c3a:	681a      	ldr	r2, [r3, #0]
 8000c3c:	4b12      	ldr	r3, [pc, #72]	; (8000c88 <HAL_InitTick+0x58>)
 8000c3e:	781b      	ldrb	r3, [r3, #0]
 8000c40:	4619      	mov	r1, r3
 8000c42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c4e:	4618      	mov	r0, r3
 8000c50:	f000 f93b 	bl	8000eca <HAL_SYSTICK_Config>
 8000c54:	4603      	mov	r3, r0
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d001      	beq.n	8000c5e <HAL_InitTick+0x2e>
		return HAL_ERROR;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	e00e      	b.n	8000c7c <HAL_InitTick+0x4c>
	}

	/* Configure the SysTick IRQ priority */
	if (TickPriority < (1UL << __NVIC_PRIO_BITS)) {
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2b0f      	cmp	r3, #15
 8000c62:	d80a      	bhi.n	8000c7a <HAL_InitTick+0x4a>
		HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c64:	2200      	movs	r2, #0
 8000c66:	6879      	ldr	r1, [r7, #4]
 8000c68:	f04f 30ff 	mov.w	r0, #4294967295
 8000c6c:	f000 f911 	bl	8000e92 <HAL_NVIC_SetPriority>
		uwTickPrio = TickPriority;
 8000c70:	4a06      	ldr	r2, [pc, #24]	; (8000c8c <HAL_InitTick+0x5c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6013      	str	r3, [r2, #0]
	} else {
		return HAL_ERROR;
	}

	/* Return function status */
	return HAL_OK;
 8000c76:	2300      	movs	r3, #0
 8000c78:	e000      	b.n	8000c7c <HAL_InitTick+0x4c>
		return HAL_ERROR;
 8000c7a:	2301      	movs	r3, #1
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	3708      	adds	r7, #8
 8000c80:	46bd      	mov	sp, r7
 8000c82:	bd80      	pop	{r7, pc}
 8000c84:	20000000 	.word	0x20000000
 8000c88:	20000008 	.word	0x20000008
 8000c8c:	20000004 	.word	0x20000004

08000c90 <HAL_IncTick>:
 *       in SysTick ISR.
 * @note This function is declared as __weak to be overwritten in case of other 
 *      implementations in user file.
 * @retval None
 */
__weak void HAL_IncTick(void) {
 8000c90:	b480      	push	{r7}
 8000c92:	af00      	add	r7, sp, #0
	uwTick += uwTickFreq;
 8000c94:	4b06      	ldr	r3, [pc, #24]	; (8000cb0 <HAL_IncTick+0x20>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	461a      	mov	r2, r3
 8000c9a:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <HAL_IncTick+0x24>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	4413      	add	r3, r2
 8000ca0:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_IncTick+0x24>)
 8000ca2:	6013      	str	r3, [r2, #0]
}
 8000ca4:	bf00      	nop
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008
 8000cb4:	200000b4 	.word	0x200000b4

08000cb8 <HAL_GetTick>:
 * @brief Provides a tick value in millisecond.
 * @note This function is declared as __weak to be overwritten in case of other 
 *       implementations in user file.
 * @retval tick value
 */
__weak uint32_t HAL_GetTick(void) {
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
	return uwTick;
 8000cbc:	4b03      	ldr	r3, [pc, #12]	; (8000ccc <HAL_GetTick+0x14>)
 8000cbe:	681b      	ldr	r3, [r3, #0]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc8:	4770      	bx	lr
 8000cca:	bf00      	nop
 8000ccc:	200000b4 	.word	0x200000b4

08000cd0 <HAL_Delay>:
 * @note This function is declared as __weak to be overwritten in case of other
 *       implementations in user file.
 * @param Delay  specifies the delay time length, in milliseconds.
 * @retval None
 */
__weak void HAL_Delay(uint32_t Delay) {
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = HAL_GetTick();
 8000cd8:	f7ff ffee 	bl	8000cb8 <HAL_GetTick>
 8000cdc:	60b8      	str	r0, [r7, #8]
	uint32_t wait = Delay;
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	60fb      	str	r3, [r7, #12]

	/* Add a freq to guarantee minimum wait */
	if (wait < HAL_MAX_DELAY) {
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ce8:	d005      	beq.n	8000cf6 <HAL_Delay+0x26>
		wait += (uint32_t) (uwTickFreq);
 8000cea:	4b0a      	ldr	r3, [pc, #40]	; (8000d14 <HAL_Delay+0x44>)
 8000cec:	781b      	ldrb	r3, [r3, #0]
 8000cee:	461a      	mov	r2, r3
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	60fb      	str	r3, [r7, #12]
	}

	while ((HAL_GetTick() - tickstart) < wait) {
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ffde 	bl	8000cb8 <HAL_GetTick>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	68bb      	ldr	r3, [r7, #8]
 8000d00:	1ad3      	subs	r3, r2, r3
 8000d02:	68fa      	ldr	r2, [r7, #12]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d8f7      	bhi.n	8000cf8 <HAL_Delay+0x28>
	}
}
 8000d08:	bf00      	nop
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	20000008 	.word	0x20000008

08000d18 <__NVIC_SetPriorityGrouping>:
	 Only values from 0..7 are used.
	 In case of a conflict between priority grouping and available
	 priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
	 \param [in]      PriorityGroup  Priority grouping field.
	 */
	__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000d18:	b480      	push	{r7}
 8000d1a:	b085      	sub	sp, #20
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
		uint32_t reg_value;
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	60fb      	str	r3, [r7, #12]

		reg_value = SCB->AIRCR; /* read old register configuration    */
 8000d28:	4b0b      	ldr	r3, [pc, #44]	; (8000d58 <__NVIC_SetPriorityGrouping+0x40>)
 8000d2a:	68db      	ldr	r3, [r3, #12]
 8000d2c:	60bb      	str	r3, [r7, #8]
		reg_value &= ~((uint32_t) (SCB_AIRCR_VECTKEY_Msk
 8000d2e:	68ba      	ldr	r2, [r7, #8]
 8000d30:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d34:	4013      	ands	r3, r2
 8000d36:	60bb      	str	r3, [r7, #8]
				| SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
				| (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)); /* Insert write key and priority group */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	021a      	lsls	r2, r3, #8
 8000d3c:	68bb      	ldr	r3, [r7, #8]
 8000d3e:	431a      	orrs	r2, r3
		reg_value = (reg_value | ((uint32_t) 0x5FAUL << SCB_AIRCR_VECTKEY_Pos)
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <__NVIC_SetPriorityGrouping+0x44>)
 8000d42:	4313      	orrs	r3, r2
 8000d44:	60bb      	str	r3, [r7, #8]
		SCB->AIRCR = reg_value;
 8000d46:	4a04      	ldr	r2, [pc, #16]	; (8000d58 <__NVIC_SetPriorityGrouping+0x40>)
 8000d48:	68bb      	ldr	r3, [r7, #8]
 8000d4a:	60d3      	str	r3, [r2, #12]
	}
 8000d4c:	bf00      	nop
 8000d4e:	3714      	adds	r7, #20
 8000d50:	46bd      	mov	sp, r7
 8000d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d56:	4770      	bx	lr
 8000d58:	e000ed00 	.word	0xe000ed00
 8000d5c:	05fa0000 	.word	0x05fa0000

08000d60 <__NVIC_GetPriorityGrouping>:
	/**
	 \brief   Get Priority Grouping
	 \details Reads the priority grouping field from the NVIC Interrupt Controller.
	 \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
	 */
	__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void) {
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
		return ((uint32_t) ((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk)
 8000d64:	4b04      	ldr	r3, [pc, #16]	; (8000d78 <__NVIC_GetPriorityGrouping+0x18>)
 8000d66:	68db      	ldr	r3, [r3, #12]
 8000d68:	0a1b      	lsrs	r3, r3, #8
 8000d6a:	f003 0307 	and.w	r3, r3, #7
				>> SCB_AIRCR_PRIGROUP_Pos));
	}
 8000d6e:	4618      	mov	r0, r3
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	e000ed00 	.word	0xe000ed00

08000d7c <__NVIC_SetPriority>:
	 or negative to specify a processor exception.
	 \param [in]      IRQn  Interrupt number.
	 \param [in]  priority  Priority to set.
	 \note    The priority cannot be set for every processor exception.
	 */
	__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority) {
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]
		if ((int32_t) (IRQn) >= 0) {
 8000d88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	db0a      	blt.n	8000da6 <__NVIC_SetPriority+0x2a>
			NVIC->IP[((uint32_t) IRQn)] = (uint8_t) ((priority
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	b2da      	uxtb	r2, r3
 8000d94:	490c      	ldr	r1, [pc, #48]	; (8000dc8 <__NVIC_SetPriority+0x4c>)
 8000d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d9a:	0112      	lsls	r2, r2, #4
 8000d9c:	b2d2      	uxtb	r2, r2
 8000d9e:	440b      	add	r3, r1
 8000da0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		} else {
			SCB->SHPR[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
					<< (8U - __NVIC_PRIO_BITS)) & (uint32_t) 0xFFUL);
		}
	}
 8000da4:	e00a      	b.n	8000dbc <__NVIC_SetPriority+0x40>
			SCB->SHPR[(((uint32_t) IRQn) & 0xFUL) - 4UL] = (uint8_t) ((priority
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	b2da      	uxtb	r2, r3
 8000daa:	4908      	ldr	r1, [pc, #32]	; (8000dcc <__NVIC_SetPriority+0x50>)
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f003 030f 	and.w	r3, r3, #15
 8000db2:	3b04      	subs	r3, #4
 8000db4:	0112      	lsls	r2, r2, #4
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	440b      	add	r3, r1
 8000dba:	761a      	strb	r2, [r3, #24]
	}
 8000dbc:	bf00      	nop
 8000dbe:	370c      	adds	r7, #12
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <NVIC_EncodePriority>:
	 \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
	 \param [in]       SubPriority  Subpriority value (starting from 0).
	 \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
	 */
	__STATIC_INLINE uint32_t NVIC_EncodePriority(uint32_t PriorityGroup,
			uint32_t PreemptPriority, uint32_t SubPriority) {
 8000dd0:	b480      	push	{r7}
 8000dd2:	b089      	sub	sp, #36	; 0x24
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	60f8      	str	r0, [r7, #12]
 8000dd8:	60b9      	str	r1, [r7, #8]
 8000dda:	607a      	str	r2, [r7, #4]
		uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t) 0x07UL); /* only values 0..7 are used          */
 8000ddc:	68fb      	ldr	r3, [r7, #12]
 8000dde:	f003 0307 	and.w	r3, r3, #7
 8000de2:	61fb      	str	r3, [r7, #28]
		uint32_t PreemptPriorityBits;
		uint32_t SubPriorityBits;

		PreemptPriorityBits =
				((7UL - PriorityGroupTmp) > (uint32_t) (__NVIC_PRIO_BITS)) ?
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	f1c3 0307 	rsb	r3, r3, #7
		PreemptPriorityBits =
 8000dea:	2b04      	cmp	r3, #4
 8000dec:	bf28      	it	cs
 8000dee:	2304      	movcs	r3, #4
 8000df0:	61bb      	str	r3, [r7, #24]
						(uint32_t) (__NVIC_PRIO_BITS) :
						(uint32_t) (7UL - PriorityGroupTmp);
		SubPriorityBits =
				((PriorityGroupTmp + (uint32_t) (__NVIC_PRIO_BITS))
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3304      	adds	r3, #4
						< (uint32_t) 7UL) ?
						(uint32_t) 0UL :
 8000df6:	2b06      	cmp	r3, #6
 8000df8:	d902      	bls.n	8000e00 <NVIC_EncodePriority+0x30>
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3b03      	subs	r3, #3
 8000dfe:	e000      	b.n	8000e02 <NVIC_EncodePriority+0x32>
 8000e00:	2300      	movs	r3, #0
		SubPriorityBits =
 8000e02:	617b      	str	r3, [r7, #20]
						(uint32_t) ((PriorityGroupTmp - 7UL)
								+ (uint32_t) (__NVIC_PRIO_BITS));

		return (((PreemptPriority
				& (uint32_t) ((1UL << (PreemptPriorityBits)) - 1UL))
 8000e04:	f04f 32ff 	mov.w	r2, #4294967295
 8000e08:	69bb      	ldr	r3, [r7, #24]
 8000e0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0e:	43da      	mvns	r2, r3
 8000e10:	68bb      	ldr	r3, [r7, #8]
 8000e12:	401a      	ands	r2, r3
				<< SubPriorityBits)
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	409a      	lsls	r2, r3
				| ((SubPriority & (uint32_t) ((1UL << (SubPriorityBits)) - 1UL))));
 8000e18:	f04f 31ff 	mov.w	r1, #4294967295
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e22:	43d9      	mvns	r1, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	400b      	ands	r3, r1
 8000e28:	4313      	orrs	r3, r2
	}
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	3724      	adds	r7, #36	; 0x24
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e34:	4770      	bx	lr
	...

08000e38 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	3b01      	subs	r3, #1
 8000e44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e48:	d301      	bcc.n	8000e4e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e00f      	b.n	8000e6e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e4e:	4a0a      	ldr	r2, [pc, #40]	; (8000e78 <SysTick_Config+0x40>)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	3b01      	subs	r3, #1
 8000e54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e56:	210f      	movs	r1, #15
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	f7ff ff8e 	bl	8000d7c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SysTick_Config+0x40>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e66:	4b04      	ldr	r3, [pc, #16]	; (8000e78 <SysTick_Config+0x40>)
 8000e68:	2207      	movs	r2, #7
 8000e6a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	3708      	adds	r7, #8
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	e000e010 	.word	0xe000e010

08000e7c <HAL_NVIC_SetPriorityGrouping>:
 *                                    0 bits for subpriority
 * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
 *         The pending IRQ priority will be managed only by the subpriority. 
 * @retval None
 */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b082      	sub	sp, #8
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
	/* Check the parameters */
	assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

	/* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
	NVIC_SetPriorityGrouping(PriorityGroup);
 8000e84:	6878      	ldr	r0, [r7, #4]
 8000e86:	f7ff ff47 	bl	8000d18 <__NVIC_SetPriorityGrouping>
}
 8000e8a:	bf00      	nop
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_NVIC_SetPriority>:
 *         This parameter can be a value between 0 and 15
 *         A lower priority value indicates a higher priority.          
 * @retval None
 */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority,
		uint32_t SubPriority) {
 8000e92:	b580      	push	{r7, lr}
 8000e94:	b086      	sub	sp, #24
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	4603      	mov	r3, r0
 8000e9a:	60b9      	str	r1, [r7, #8]
 8000e9c:	607a      	str	r2, [r7, #4]
 8000e9e:	73fb      	strb	r3, [r7, #15]
	uint32_t prioritygroup = 0x00;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	617b      	str	r3, [r7, #20]

	/* Check the parameters */
	assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
	assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

	prioritygroup = NVIC_GetPriorityGrouping();
 8000ea4:	f7ff ff5c 	bl	8000d60 <__NVIC_GetPriorityGrouping>
 8000ea8:	6178      	str	r0, [r7, #20]

	NVIC_SetPriority(IRQn,
 8000eaa:	687a      	ldr	r2, [r7, #4]
 8000eac:	68b9      	ldr	r1, [r7, #8]
 8000eae:	6978      	ldr	r0, [r7, #20]
 8000eb0:	f7ff ff8e 	bl	8000dd0 <NVIC_EncodePriority>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eba:	4611      	mov	r1, r2
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	f7ff ff5d 	bl	8000d7c <__NVIC_SetPriority>
			NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8000ec2:	bf00      	nop
 8000ec4:	3718      	adds	r7, #24
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <HAL_SYSTICK_Config>:
 *         Counter is in free running mode to generate periodic interrupts.
 * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
 * @retval status:  - 0  Function succeeded.
 *                  - 1  Function failed.
 */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb) {
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b082      	sub	sp, #8
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
	return SysTick_Config(TicksNumb);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ffb0 	bl	8000e38 <SysTick_Config>
 8000ed8:	4603      	mov	r3, r0
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	3708      	adds	r7, #8
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	bd80      	pop	{r7, pc}
	...

08000ee4 <HAL_GPIO_Init>:
 * @param  GPIOx where x can be (A..K) to select the GPIO peripheral.
 * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
 *         the configuration information for the specified GPIO peripheral.
 * @retval None
 */
void HAL_GPIO_Init(GPIO_TypeDef *GPIOx, GPIO_InitTypeDef *GPIO_Init) {
 8000ee4:	b480      	push	{r7}
 8000ee6:	b089      	sub	sp, #36	; 0x24
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
 8000eec:	6039      	str	r1, [r7, #0]
	uint32_t position = 0x00;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	61fb      	str	r3, [r7, #28]
	uint32_t ioposition = 0x00;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	617b      	str	r3, [r7, #20]
	uint32_t iocurrent = 0x00;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	613b      	str	r3, [r7, #16]
	uint32_t temp = 0x00;
 8000efa:	2300      	movs	r3, #0
 8000efc:	61bb      	str	r3, [r7, #24]
	assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
	assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
	assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

	/* Configure the port pins */
	for (position = 0; position < GPIO_NUMBER; position++) {
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
 8000f02:	e175      	b.n	80011f0 <HAL_GPIO_Init+0x30c>
		/* Get the IO position */
		ioposition = ((uint32_t) 0x01) << position;
 8000f04:	2201      	movs	r2, #1
 8000f06:	69fb      	ldr	r3, [r7, #28]
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	617b      	str	r3, [r7, #20]
		/* Get the current IO position */
		iocurrent = (uint32_t) (GPIO_Init->Pin) & ioposition;
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]

		if (iocurrent == ioposition) {
 8000f18:	693a      	ldr	r2, [r7, #16]
 8000f1a:	697b      	ldr	r3, [r7, #20]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	f040 8164 	bne.w	80011ea <HAL_GPIO_Init+0x306>
			/*--------------------- GPIO Mode Configuration ------------------------*/
			/* In case of Output or Alternate function mode selection */
			if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT)
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f003 0303 	and.w	r3, r3, #3
 8000f2a:	2b01      	cmp	r3, #1
 8000f2c:	d005      	beq.n	8000f3a <HAL_GPIO_Init+0x56>
					|| ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)) {
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	f003 0303 	and.w	r3, r3, #3
 8000f36:	2b02      	cmp	r3, #2
 8000f38:	d130      	bne.n	8000f9c <HAL_GPIO_Init+0xb8>
				/* Check the Speed parameter */
				assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
				/* Configure the IO Speed */
				temp = GPIOx->OSPEEDR;
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	689b      	ldr	r3, [r3, #8]
 8000f3e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000f40:	69fb      	ldr	r3, [r7, #28]
 8000f42:	005b      	lsls	r3, r3, #1
 8000f44:	2203      	movs	r2, #3
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
				temp |= (GPIO_Init->Speed << (position * 2));
 8000f52:	683b      	ldr	r3, [r7, #0]
 8000f54:	68da      	ldr	r2, [r3, #12]
 8000f56:	69fb      	ldr	r3, [r7, #28]
 8000f58:	005b      	lsls	r3, r3, #1
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	4313      	orrs	r3, r2
 8000f62:	61bb      	str	r3, [r7, #24]
				GPIOx->OSPEEDR = temp;
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	69ba      	ldr	r2, [r7, #24]
 8000f68:	609a      	str	r2, [r3, #8]

				/* Configure the IO Output Type */
				temp = GPIOx->OTYPER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_OTYPER_OT_0 << position);
 8000f70:	2201      	movs	r2, #1
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	69ba      	ldr	r2, [r7, #24]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	61bb      	str	r3, [r7, #24]
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	685b      	ldr	r3, [r3, #4]
 8000f84:	091b      	lsrs	r3, r3, #4
 8000f86:	f003 0201 	and.w	r2, r3, #1
						<< position);
 8000f8a:	69fb      	ldr	r3, [r7, #28]
 8000f8c:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos)
 8000f90:	69ba      	ldr	r2, [r7, #24]
 8000f92:	4313      	orrs	r3, r2
 8000f94:	61bb      	str	r3, [r7, #24]
				GPIOx->OTYPER = temp;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	605a      	str	r2, [r3, #4]
			}

			if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG) {
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	685b      	ldr	r3, [r3, #4]
 8000fa0:	f003 0303 	and.w	r3, r3, #3
 8000fa4:	2b03      	cmp	r3, #3
 8000fa6:	d017      	beq.n	8000fd8 <HAL_GPIO_Init+0xf4>
				/* Check the Pull parameter */
				assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

				/* Activate the Pull-up or Pull down resistor for the current IO */
				temp = GPIOx->PUPDR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	68db      	ldr	r3, [r3, #12]
 8000fac:	61bb      	str	r3, [r7, #24]
				temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8000fae:	69fb      	ldr	r3, [r7, #28]
 8000fb0:	005b      	lsls	r3, r3, #1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb8:	43db      	mvns	r3, r3
 8000fba:	69ba      	ldr	r2, [r7, #24]
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	61bb      	str	r3, [r7, #24]
				temp |= ((GPIO_Init->Pull) << (position * 2));
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	689a      	ldr	r2, [r3, #8]
 8000fc4:	69fb      	ldr	r3, [r7, #28]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	4313      	orrs	r3, r2
 8000fd0:	61bb      	str	r3, [r7, #24]
				GPIOx->PUPDR = temp;
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	69ba      	ldr	r2, [r7, #24]
 8000fd6:	60da      	str	r2, [r3, #12]
			}

			/* In case of Alternate function mode selection */
			if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF) {
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 0303 	and.w	r3, r3, #3
 8000fe0:	2b02      	cmp	r3, #2
 8000fe2:	d123      	bne.n	800102c <HAL_GPIO_Init+0x148>
				/* Check the Alternate function parameter */
				assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

				/* Configure Alternate function mapped with the current IO */
				temp = GPIOx->AFR[position >> 3];
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	08da      	lsrs	r2, r3, #3
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	3208      	adds	r2, #8
 8000fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff0:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) 0xF
						<< ((uint32_t) (position & (uint32_t) 0x07) * 4));
 8000ff2:	69fb      	ldr	r3, [r7, #28]
 8000ff4:	f003 0307 	and.w	r3, r3, #7
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	220f      	movs	r2, #15
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
				temp &= ~((uint32_t) 0xF
 8001000:	43db      	mvns	r3, r3
 8001002:	69ba      	ldr	r2, [r7, #24]
 8001004:	4013      	ands	r3, r2
 8001006:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	691a      	ldr	r2, [r3, #16]
						<< (((uint32_t) position & (uint32_t) 0x07) * 4));
 800100c:	69fb      	ldr	r3, [r7, #28]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	fa02 f303 	lsl.w	r3, r2, r3
				temp |= ((uint32_t) (GPIO_Init->Alternate)
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	4313      	orrs	r3, r2
 800101c:	61bb      	str	r3, [r7, #24]
				GPIOx->AFR[position >> 3] = temp;
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	08da      	lsrs	r2, r3, #3
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	3208      	adds	r2, #8
 8001026:	69b9      	ldr	r1, [r7, #24]
 8001028:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			}

			/* Configure IO Direction mode (Input, Output, Alternate or Analog) */
			temp = GPIOx->MODER;
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	61bb      	str	r3, [r7, #24]
			temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001032:	69fb      	ldr	r3, [r7, #28]
 8001034:	005b      	lsls	r3, r3, #1
 8001036:	2203      	movs	r2, #3
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	69ba      	ldr	r2, [r7, #24]
 8001040:	4013      	ands	r3, r2
 8001042:	61bb      	str	r3, [r7, #24]
			temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f003 0203 	and.w	r2, r3, #3
 800104c:	69fb      	ldr	r3, [r7, #28]
 800104e:	005b      	lsls	r3, r3, #1
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	69ba      	ldr	r2, [r7, #24]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
			GPIOx->MODER = temp;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	69ba      	ldr	r2, [r7, #24]
 800105e:	601a      	str	r2, [r3, #0]

			/*--------------------- EXTI Mode Configuration ------------------------*/
			/* Configure the External Interrupt or event for the current IO */
			if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u) {
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001068:	2b00      	cmp	r3, #0
 800106a:	f000 80be 	beq.w	80011ea <HAL_GPIO_Init+0x306>
				/* Enable SYSCFG Clock */
				__HAL_RCC_SYSCFG_CLK_ENABLE();
 800106e:	4b66      	ldr	r3, [pc, #408]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001070:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001072:	4a65      	ldr	r2, [pc, #404]	; (8001208 <HAL_GPIO_Init+0x324>)
 8001074:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001078:	6453      	str	r3, [r2, #68]	; 0x44
 800107a:	4b63      	ldr	r3, [pc, #396]	; (8001208 <HAL_GPIO_Init+0x324>)
 800107c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800107e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	68fb      	ldr	r3, [r7, #12]

				temp = SYSCFG->EXTICR[position >> 2];
 8001086:	4a61      	ldr	r2, [pc, #388]	; (800120c <HAL_GPIO_Init+0x328>)
 8001088:	69fb      	ldr	r3, [r7, #28]
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	3302      	adds	r3, #2
 800108e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001092:	61bb      	str	r3, [r7, #24]
				temp &= ~(((uint32_t) 0x0F) << (4 * (position & 0x03)));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	f003 0303 	and.w	r3, r3, #3
 800109a:	009b      	lsls	r3, r3, #2
 800109c:	220f      	movs	r2, #15
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43db      	mvns	r3, r3
 80010a4:	69ba      	ldr	r2, [r7, #24]
 80010a6:	4013      	ands	r3, r2
 80010a8:	61bb      	str	r3, [r7, #24]
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4a58      	ldr	r2, [pc, #352]	; (8001210 <HAL_GPIO_Init+0x32c>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d037      	beq.n	8001122 <HAL_GPIO_Init+0x23e>
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a57      	ldr	r2, [pc, #348]	; (8001214 <HAL_GPIO_Init+0x330>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d031      	beq.n	800111e <HAL_GPIO_Init+0x23a>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a56      	ldr	r2, [pc, #344]	; (8001218 <HAL_GPIO_Init+0x334>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d02b      	beq.n	800111a <HAL_GPIO_Init+0x236>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a55      	ldr	r2, [pc, #340]	; (800121c <HAL_GPIO_Init+0x338>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d025      	beq.n	8001116 <HAL_GPIO_Init+0x232>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a54      	ldr	r2, [pc, #336]	; (8001220 <HAL_GPIO_Init+0x33c>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d01f      	beq.n	8001112 <HAL_GPIO_Init+0x22e>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a53      	ldr	r2, [pc, #332]	; (8001224 <HAL_GPIO_Init+0x340>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d019      	beq.n	800110e <HAL_GPIO_Init+0x22a>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a52      	ldr	r2, [pc, #328]	; (8001228 <HAL_GPIO_Init+0x344>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d013      	beq.n	800110a <HAL_GPIO_Init+0x226>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a51      	ldr	r2, [pc, #324]	; (800122c <HAL_GPIO_Init+0x348>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d00d      	beq.n	8001106 <HAL_GPIO_Init+0x222>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a50      	ldr	r2, [pc, #320]	; (8001230 <HAL_GPIO_Init+0x34c>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d007      	beq.n	8001102 <HAL_GPIO_Init+0x21e>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	4a4f      	ldr	r2, [pc, #316]	; (8001234 <HAL_GPIO_Init+0x350>)
 80010f6:	4293      	cmp	r3, r2
 80010f8:	d101      	bne.n	80010fe <HAL_GPIO_Init+0x21a>
 80010fa:	2309      	movs	r3, #9
 80010fc:	e012      	b.n	8001124 <HAL_GPIO_Init+0x240>
 80010fe:	230a      	movs	r3, #10
 8001100:	e010      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001102:	2308      	movs	r3, #8
 8001104:	e00e      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001106:	2307      	movs	r3, #7
 8001108:	e00c      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800110a:	2306      	movs	r3, #6
 800110c:	e00a      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800110e:	2305      	movs	r3, #5
 8001110:	e008      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001112:	2304      	movs	r3, #4
 8001114:	e006      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001116:	2303      	movs	r3, #3
 8001118:	e004      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800111a:	2302      	movs	r3, #2
 800111c:	e002      	b.n	8001124 <HAL_GPIO_Init+0x240>
 800111e:	2301      	movs	r3, #1
 8001120:	e000      	b.n	8001124 <HAL_GPIO_Init+0x240>
 8001122:	2300      	movs	r3, #0
						<< (4 * (position & 0x03)));
 8001124:	69fa      	ldr	r2, [r7, #28]
 8001126:	f002 0203 	and.w	r2, r2, #3
 800112a:	0092      	lsls	r2, r2, #2
 800112c:	4093      	lsls	r3, r2
				temp |= ((uint32_t) (GPIO_GET_INDEX(GPIOx))
 800112e:	69ba      	ldr	r2, [r7, #24]
 8001130:	4313      	orrs	r3, r2
 8001132:	61bb      	str	r3, [r7, #24]
				SYSCFG->EXTICR[position >> 2] = temp;
 8001134:	4935      	ldr	r1, [pc, #212]	; (800120c <HAL_GPIO_Init+0x328>)
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	089b      	lsrs	r3, r3, #2
 800113a:	3302      	adds	r3, #2
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

				/* Clear Rising Falling edge configuration */
				temp = EXTI->RTSR;
 8001142:	4b3d      	ldr	r3, [pc, #244]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	43db      	mvns	r3, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4013      	ands	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u) {
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x282>
					temp |= iocurrent;
 800115e:	69ba      	ldr	r2, [r7, #24]
 8001160:	693b      	ldr	r3, [r7, #16]
 8001162:	4313      	orrs	r3, r2
 8001164:	61bb      	str	r3, [r7, #24]
				}
				EXTI->RTSR = temp;
 8001166:	4a34      	ldr	r2, [pc, #208]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001168:	69bb      	ldr	r3, [r7, #24]
 800116a:	6093      	str	r3, [r2, #8]

				temp = EXTI->FTSR;
 800116c:	4b32      	ldr	r3, [pc, #200]	; (8001238 <HAL_GPIO_Init+0x354>)
 800116e:	68db      	ldr	r3, [r3, #12]
 8001170:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 8001172:	693b      	ldr	r3, [r7, #16]
 8001174:	43db      	mvns	r3, r3
 8001176:	69ba      	ldr	r2, [r7, #24]
 8001178:	4013      	ands	r3, r2
 800117a:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u) {
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x2ac>
					temp |= iocurrent;
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	693b      	ldr	r3, [r7, #16]
 800118c:	4313      	orrs	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
				}
				EXTI->FTSR = temp;
 8001190:	4a29      	ldr	r2, [pc, #164]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001192:	69bb      	ldr	r3, [r7, #24]
 8001194:	60d3      	str	r3, [r2, #12]

				temp = EXTI->EMR;
 8001196:	4b28      	ldr	r3, [pc, #160]	; (8001238 <HAL_GPIO_Init+0x354>)
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u) {
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2d6>
					temp |= iocurrent;
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	693b      	ldr	r3, [r7, #16]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	61bb      	str	r3, [r7, #24]
				}
				EXTI->EMR = temp;
 80011ba:	4a1f      	ldr	r2, [pc, #124]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	6053      	str	r3, [r2, #4]

				/* Clear EXTI line configuration */
				temp = EXTI->IMR;
 80011c0:	4b1d      	ldr	r3, [pc, #116]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	61bb      	str	r3, [r7, #24]
				temp &= ~((uint32_t) iocurrent);
 80011c6:	693b      	ldr	r3, [r7, #16]
 80011c8:	43db      	mvns	r3, r3
 80011ca:	69ba      	ldr	r2, [r7, #24]
 80011cc:	4013      	ands	r3, r2
 80011ce:	61bb      	str	r3, [r7, #24]
				if ((GPIO_Init->Mode & EXTI_IT) != 0x00u) {
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d003      	beq.n	80011e4 <HAL_GPIO_Init+0x300>
					temp |= iocurrent;
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	61bb      	str	r3, [r7, #24]
				}
				EXTI->IMR = temp;
 80011e4:	4a14      	ldr	r2, [pc, #80]	; (8001238 <HAL_GPIO_Init+0x354>)
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	6013      	str	r3, [r2, #0]
	for (position = 0; position < GPIO_NUMBER; position++) {
 80011ea:	69fb      	ldr	r3, [r7, #28]
 80011ec:	3301      	adds	r3, #1
 80011ee:	61fb      	str	r3, [r7, #28]
 80011f0:	69fb      	ldr	r3, [r7, #28]
 80011f2:	2b0f      	cmp	r3, #15
 80011f4:	f67f ae86 	bls.w	8000f04 <HAL_GPIO_Init+0x20>
			}
		}
	}
}
 80011f8:	bf00      	nop
 80011fa:	bf00      	nop
 80011fc:	3724      	adds	r7, #36	; 0x24
 80011fe:	46bd      	mov	sp, r7
 8001200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001204:	4770      	bx	lr
 8001206:	bf00      	nop
 8001208:	40023800 	.word	0x40023800
 800120c:	40013800 	.word	0x40013800
 8001210:	40020000 	.word	0x40020000
 8001214:	40020400 	.word	0x40020400
 8001218:	40020800 	.word	0x40020800
 800121c:	40020c00 	.word	0x40020c00
 8001220:	40021000 	.word	0x40021000
 8001224:	40021400 	.word	0x40021400
 8001228:	40021800 	.word	0x40021800
 800122c:	40021c00 	.word	0x40021c00
 8001230:	40022000 	.word	0x40022000
 8001234:	40022400 	.word	0x40022400
 8001238:	40013c00 	.word	0x40013c00

0800123c <HAL_GPIO_WritePin>:
 *            @arg GPIO_PIN_RESET: to clear the port pin
 *            @arg GPIO_PIN_SET: to set the port pin
 * @retval None
 */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin,
		GPIO_PinState PinState) {
 800123c:	b480      	push	{r7}
 800123e:	b083      	sub	sp, #12
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
 8001244:	460b      	mov	r3, r1
 8001246:	807b      	strh	r3, [r7, #2]
 8001248:	4613      	mov	r3, r2
 800124a:	707b      	strb	r3, [r7, #1]
	/* Check the parameters */
	assert_param(IS_GPIO_PIN(GPIO_Pin));
	assert_param(IS_GPIO_PIN_ACTION(PinState));

	if (PinState != GPIO_PIN_RESET) {
 800124c:	787b      	ldrb	r3, [r7, #1]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d003      	beq.n	800125a <HAL_GPIO_WritePin+0x1e>
		GPIOx->BSRR = GPIO_Pin;
 8001252:	887a      	ldrh	r2, [r7, #2]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	619a      	str	r2, [r3, #24]
	} else {
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
	}
}
 8001258:	e003      	b.n	8001262 <HAL_GPIO_WritePin+0x26>
		GPIOx->BSRR = (uint32_t) GPIO_Pin << 16;
 800125a:	887b      	ldrh	r3, [r7, #2]
 800125c:	041a      	lsls	r2, r3, #16
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	619a      	str	r2, [r3, #24]
}
 8001262:	bf00      	nop
 8001264:	370c      	adds	r7, #12
 8001266:	46bd      	mov	sp, r7
 8001268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126c:	4770      	bx	lr
	...

08001270 <HAL_RCC_OscConfig>:
 * @note   Transition HSE Bypass to HSE On and HSE On to HSE Bypass are not
 *         supported by this function. User should request a transition to HSE Off
 *         first and then HSE On or HSE Bypass.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef *RCC_OscInitStruct) {
 8001270:	b580      	push	{r7, lr}
 8001272:	b086      	sub	sp, #24
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;
	uint32_t pll_config;
	FlagStatus pwrclkchanged = RESET;
 8001278:	2300      	movs	r3, #0
 800127a:	75fb      	strb	r3, [r7, #23]

	/* Check Null pointer */
	if (RCC_OscInitStruct == NULL) {
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d101      	bne.n	8001286 <HAL_RCC_OscConfig+0x16>
		return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e29b      	b.n	80017be <HAL_RCC_OscConfig+0x54e>

	/* Check the parameters */
	assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

	/*------------------------------- HSE Configuration ------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 8087 	beq.w	80013a2 <HAL_RCC_OscConfig+0x132>
			== RCC_OSCILLATORTYPE_HSE) {
		/* Check the parameters */
		assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
		/* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001294:	4b96      	ldr	r3, [pc, #600]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x4a>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80012a0:	4b93      	ldr	r3, [pc, #588]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d112      	bne.n	80012d2 <HAL_RCC_OscConfig+0x62>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80012ac:	4b90      	ldr	r3, [pc, #576]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012b8:	d10b      	bne.n	80012d2 <HAL_RCC_OscConfig+0x62>
								== RCC_PLLCFGR_PLLSRC_HSE))) {
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80012ba:	4b8d      	ldr	r3, [pc, #564]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d06c      	beq.n	80013a0 <HAL_RCC_OscConfig+0x130>
					&& (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)) {
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d168      	bne.n	80013a0 <HAL_RCC_OscConfig+0x130>
				return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e275      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
			}
		} else {
			/* Set the new HSE configuration ---------------------------------------*/
			__HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012da:	d106      	bne.n	80012ea <HAL_RCC_OscConfig+0x7a>
 80012dc:	4b84      	ldr	r3, [pc, #528]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a83      	ldr	r2, [pc, #524]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	e02e      	b.n	8001348 <HAL_RCC_OscConfig+0xd8>
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d10c      	bne.n	800130c <HAL_RCC_OscConfig+0x9c>
 80012f2:	4b7f      	ldr	r3, [pc, #508]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4a7e      	ldr	r2, [pc, #504]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80012f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012fc:	6013      	str	r3, [r2, #0]
 80012fe:	4b7c      	ldr	r3, [pc, #496]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4a7b      	ldr	r2, [pc, #492]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001304:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e01d      	b.n	8001348 <HAL_RCC_OscConfig+0xd8>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001314:	d10c      	bne.n	8001330 <HAL_RCC_OscConfig+0xc0>
 8001316:	4b76      	ldr	r3, [pc, #472]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a75      	ldr	r2, [pc, #468]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800131c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001320:	6013      	str	r3, [r2, #0]
 8001322:	4b73      	ldr	r3, [pc, #460]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a72      	ldr	r2, [pc, #456]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e00b      	b.n	8001348 <HAL_RCC_OscConfig+0xd8>
 8001330:	4b6f      	ldr	r3, [pc, #444]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a6e      	ldr	r2, [pc, #440]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001336:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800133a:	6013      	str	r3, [r2, #0]
 800133c:	4b6c      	ldr	r3, [pc, #432]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a6b      	ldr	r2, [pc, #428]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001342:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001346:	6013      	str	r3, [r2, #0]

			/* Check the HSE State */
			if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF) {
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	685b      	ldr	r3, [r3, #4]
 800134c:	2b00      	cmp	r3, #0
 800134e:	d013      	beq.n	8001378 <HAL_RCC_OscConfig+0x108>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001350:	f7ff fcb2 	bl	8000cb8 <HAL_GetTick>
 8001354:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001356:	e008      	b.n	800136a <HAL_RCC_OscConfig+0xfa>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001358:	f7ff fcae 	bl	8000cb8 <HAL_GetTick>
 800135c:	4602      	mov	r2, r0
 800135e:	693b      	ldr	r3, [r7, #16]
 8001360:	1ad3      	subs	r3, r2, r3
 8001362:	2b64      	cmp	r3, #100	; 0x64
 8001364:	d901      	bls.n	800136a <HAL_RCC_OscConfig+0xfa>
						return HAL_TIMEOUT;
 8001366:	2303      	movs	r3, #3
 8001368:	e229      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 800136a:	4b61      	ldr	r3, [pc, #388]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d0f0      	beq.n	8001358 <HAL_RCC_OscConfig+0xe8>
 8001376:	e014      	b.n	80013a2 <HAL_RCC_OscConfig+0x132>
					}
				}
			} else {
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001378:	f7ff fc9e 	bl	8000cb8 <HAL_GetTick>
 800137c:	6138      	str	r0, [r7, #16]

				/* Wait till HSE is bypassed or disabled */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 800137e:	e008      	b.n	8001392 <HAL_RCC_OscConfig+0x122>
					if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE) {
 8001380:	f7ff fc9a 	bl	8000cb8 <HAL_GetTick>
 8001384:	4602      	mov	r2, r0
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b64      	cmp	r3, #100	; 0x64
 800138c:	d901      	bls.n	8001392 <HAL_RCC_OscConfig+0x122>
						return HAL_TIMEOUT;
 800138e:	2303      	movs	r3, #3
 8001390:	e215      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) {
 8001392:	4b57      	ldr	r3, [pc, #348]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800139a:	2b00      	cmp	r3, #0
 800139c:	d1f0      	bne.n	8001380 <HAL_RCC_OscConfig+0x110>
 800139e:	e000      	b.n	80013a2 <HAL_RCC_OscConfig+0x132>
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a0:	bf00      	nop
				}
			}
		}
	}
	/*----------------------------- HSI Configuration --------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d069      	beq.n	8001482 <HAL_RCC_OscConfig+0x212>
		assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
		assert_param(
				IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

		/* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
		if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80013ae:	4b50      	ldr	r3, [pc, #320]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013b0:	689b      	ldr	r3, [r3, #8]
 80013b2:	f003 030c 	and.w	r3, r3, #12
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_RCC_OscConfig+0x162>
				|| ((__HAL_RCC_GET_SYSCLK_SOURCE()
 80013ba:	4b4d      	ldr	r3, [pc, #308]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	f003 030c 	and.w	r3, r3, #12
 80013c2:	2b08      	cmp	r3, #8
 80013c4:	d11c      	bne.n	8001400 <HAL_RCC_OscConfig+0x190>
						== RCC_SYSCLKSOURCE_STATUS_PLLCLK)
						&& ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC)
 80013c6:	4b4a      	ldr	r3, [pc, #296]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013c8:	685b      	ldr	r3, [r3, #4]
 80013ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d116      	bne.n	8001400 <HAL_RCC_OscConfig+0x190>
								== RCC_PLLCFGR_PLLSRC_HSI))) {
			/* When HSI is used as system clock it will not disabled */
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013d2:	4b47      	ldr	r3, [pc, #284]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d005      	beq.n	80013ea <HAL_RCC_OscConfig+0x17a>
					&& (RCC_OscInitStruct->HSIState != RCC_HSI_ON)) {
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	68db      	ldr	r3, [r3, #12]
 80013e2:	2b01      	cmp	r3, #1
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0x17a>
				return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e1e9      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
			}
			/* Otherwise, just the calibration is allowed */
			else {
				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 80013ea:	4b41      	ldr	r3, [pc, #260]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	691b      	ldr	r3, [r3, #16]
 80013f6:	00db      	lsls	r3, r3, #3
 80013f8:	493d      	ldr	r1, [pc, #244]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
			if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80013fe:	e040      	b.n	8001482 <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			}
		} else {
			/* Check the HSI State */
			if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF) {
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	68db      	ldr	r3, [r3, #12]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d023      	beq.n	8001450 <HAL_RCC_OscConfig+0x1e0>
				/* Enable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_ENABLE();
 8001408:	4b39      	ldr	r3, [pc, #228]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a38      	ldr	r2, [pc, #224]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800140e:	f043 0301 	orr.w	r3, r3, #1
 8001412:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001414:	f7ff fc50 	bl	8000cb8 <HAL_GetTick>
 8001418:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800141a:	e008      	b.n	800142e <HAL_RCC_OscConfig+0x1be>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 800141c:	f7ff fc4c 	bl	8000cb8 <HAL_GetTick>
 8001420:	4602      	mov	r2, r0
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	2b02      	cmp	r3, #2
 8001428:	d901      	bls.n	800142e <HAL_RCC_OscConfig+0x1be>
						return HAL_TIMEOUT;
 800142a:	2303      	movs	r3, #3
 800142c:	e1c7      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800142e:	4b30      	ldr	r3, [pc, #192]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	f003 0302 	and.w	r3, r3, #2
 8001436:	2b00      	cmp	r3, #0
 8001438:	d0f0      	beq.n	800141c <HAL_RCC_OscConfig+0x1ac>
					}
				}

				/* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
				__HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(
 800143a:	4b2d      	ldr	r3, [pc, #180]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	691b      	ldr	r3, [r3, #16]
 8001446:	00db      	lsls	r3, r3, #3
 8001448:	4929      	ldr	r1, [pc, #164]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
 800144e:	e018      	b.n	8001482 <HAL_RCC_OscConfig+0x212>
						RCC_OscInitStruct->HSICalibrationValue);
			} else {
				/* Disable the Internal High Speed oscillator (HSI). */
				__HAL_RCC_HSI_DISABLE();
 8001450:	4b27      	ldr	r3, [pc, #156]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	4a26      	ldr	r2, [pc, #152]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001456:	f023 0301 	bic.w	r3, r3, #1
 800145a:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 800145c:	f7ff fc2c 	bl	8000cb8 <HAL_GetTick>
 8001460:	6138      	str	r0, [r7, #16]

				/* Wait till HSI is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001462:	e008      	b.n	8001476 <HAL_RCC_OscConfig+0x206>
					if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE) {
 8001464:	f7ff fc28 	bl	8000cb8 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	2b02      	cmp	r3, #2
 8001470:	d901      	bls.n	8001476 <HAL_RCC_OscConfig+0x206>
						return HAL_TIMEOUT;
 8001472:	2303      	movs	r3, #3
 8001474:	e1a3      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) {
 8001476:	4b1e      	ldr	r3, [pc, #120]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 0302 	and.w	r3, r3, #2
 800147e:	2b00      	cmp	r3, #0
 8001480:	d1f0      	bne.n	8001464 <HAL_RCC_OscConfig+0x1f4>
				}
			}
		}
	}
	/*------------------------------ LSI Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	2b00      	cmp	r3, #0
 800148c:	d038      	beq.n	8001500 <HAL_RCC_OscConfig+0x290>
			== RCC_OSCILLATORTYPE_LSI) {
		/* Check the parameters */
		assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

		/* Check the LSI State */
		if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF) {
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	695b      	ldr	r3, [r3, #20]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d019      	beq.n	80014ca <HAL_RCC_OscConfig+0x25a>
			/* Enable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_ENABLE();
 8001496:	4b16      	ldr	r3, [pc, #88]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 8001498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800149a:	4a15      	ldr	r2, [pc, #84]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80014a2:	f7ff fc09 	bl	8000cb8 <HAL_GetTick>
 80014a6:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80014a8:	e008      	b.n	80014bc <HAL_RCC_OscConfig+0x24c>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80014aa:	f7ff fc05 	bl	8000cb8 <HAL_GetTick>
 80014ae:	4602      	mov	r2, r0
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	1ad3      	subs	r3, r2, r3
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	d901      	bls.n	80014bc <HAL_RCC_OscConfig+0x24c>
					return HAL_TIMEOUT;
 80014b8:	2303      	movs	r3, #3
 80014ba:	e180      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET) {
 80014bc:	4b0c      	ldr	r3, [pc, #48]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80014be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014c0:	f003 0302 	and.w	r3, r3, #2
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d0f0      	beq.n	80014aa <HAL_RCC_OscConfig+0x23a>
 80014c8:	e01a      	b.n	8001500 <HAL_RCC_OscConfig+0x290>
				}
			}
		} else {
			/* Disable the Internal Low Speed oscillator (LSI). */
			__HAL_RCC_LSI_DISABLE();
 80014ca:	4b09      	ldr	r3, [pc, #36]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80014cc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014ce:	4a08      	ldr	r2, [pc, #32]	; (80014f0 <HAL_RCC_OscConfig+0x280>)
 80014d0:	f023 0301 	bic.w	r3, r3, #1
 80014d4:	6753      	str	r3, [r2, #116]	; 0x74

			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80014d6:	f7ff fbef 	bl	8000cb8 <HAL_GetTick>
 80014da:	6138      	str	r0, [r7, #16]

			/* Wait till LSI is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80014dc:	e00a      	b.n	80014f4 <HAL_RCC_OscConfig+0x284>
				if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE) {
 80014de:	f7ff fbeb 	bl	8000cb8 <HAL_GetTick>
 80014e2:	4602      	mov	r2, r0
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	1ad3      	subs	r3, r2, r3
 80014e8:	2b02      	cmp	r3, #2
 80014ea:	d903      	bls.n	80014f4 <HAL_RCC_OscConfig+0x284>
					return HAL_TIMEOUT;
 80014ec:	2303      	movs	r3, #3
 80014ee:	e166      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
 80014f0:	40023800 	.word	0x40023800
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET) {
 80014f4:	4b92      	ldr	r3, [pc, #584]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80014f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014f8:	f003 0302 	and.w	r3, r3, #2
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d1ee      	bne.n	80014de <HAL_RCC_OscConfig+0x26e>
				}
			}
		}
	}
	/*------------------------------ LSE Configuration -------------------------*/
	if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f003 0304 	and.w	r3, r3, #4
 8001508:	2b00      	cmp	r3, #0
 800150a:	f000 80a4 	beq.w	8001656 <HAL_RCC_OscConfig+0x3e6>
		/* Check the parameters */
		assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

		/* Update LSE configuration in Backup Domain control register    */
		/* Requires to enable write access to Backup Domain of necessary */
		if (__HAL_RCC_PWR_IS_CLK_DISABLED()) {
 800150e:	4b8c      	ldr	r3, [pc, #560]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001512:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001516:	2b00      	cmp	r3, #0
 8001518:	d10d      	bne.n	8001536 <HAL_RCC_OscConfig+0x2c6>
			/* Enable Power Clock*/
			__HAL_RCC_PWR_CLK_ENABLE();
 800151a:	4b89      	ldr	r3, [pc, #548]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800151c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151e:	4a88      	ldr	r2, [pc, #544]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001524:	6413      	str	r3, [r2, #64]	; 0x40
 8001526:	4b86      	ldr	r3, [pc, #536]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	60bb      	str	r3, [r7, #8]
 8001530:	68bb      	ldr	r3, [r7, #8]
			pwrclkchanged = SET;
 8001532:	2301      	movs	r3, #1
 8001534:	75fb      	strb	r3, [r7, #23]
		}

		if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001536:	4b83      	ldr	r3, [pc, #524]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800153e:	2b00      	cmp	r3, #0
 8001540:	d118      	bne.n	8001574 <HAL_RCC_OscConfig+0x304>
			/* Enable write access to Backup domain */
			PWR->CR1 |= PWR_CR1_DBP;
 8001542:	4b80      	ldr	r3, [pc, #512]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a7f      	ldr	r2, [pc, #508]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 8001548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800154c:	6013      	str	r3, [r2, #0]

			/* Wait for Backup domain Write protection disable */
			tickstart = HAL_GetTick();
 800154e:	f7ff fbb3 	bl	8000cb8 <HAL_GetTick>
 8001552:	6138      	str	r0, [r7, #16]

			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001554:	e008      	b.n	8001568 <HAL_RCC_OscConfig+0x2f8>
				if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001556:	f7ff fbaf 	bl	8000cb8 <HAL_GetTick>
 800155a:	4602      	mov	r2, r0
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	1ad3      	subs	r3, r2, r3
 8001560:	2b64      	cmp	r3, #100	; 0x64
 8001562:	d901      	bls.n	8001568 <HAL_RCC_OscConfig+0x2f8>
					return HAL_TIMEOUT;
 8001564:	2303      	movs	r3, #3
 8001566:	e12a      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
			while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP)) {
 8001568:	4b76      	ldr	r3, [pc, #472]	; (8001744 <HAL_RCC_OscConfig+0x4d4>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d0f0      	beq.n	8001556 <HAL_RCC_OscConfig+0x2e6>
				}
			}
		}

		/* Set the new LSE configuration -----------------------------------------*/
		__HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	689b      	ldr	r3, [r3, #8]
 8001578:	2b01      	cmp	r3, #1
 800157a:	d106      	bne.n	800158a <HAL_RCC_OscConfig+0x31a>
 800157c:	4b70      	ldr	r3, [pc, #448]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800157e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001580:	4a6f      	ldr	r2, [pc, #444]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001582:	f043 0301 	orr.w	r3, r3, #1
 8001586:	6713      	str	r3, [r2, #112]	; 0x70
 8001588:	e02d      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	2b00      	cmp	r3, #0
 8001590:	d10c      	bne.n	80015ac <HAL_RCC_OscConfig+0x33c>
 8001592:	4b6b      	ldr	r3, [pc, #428]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001596:	4a6a      	ldr	r2, [pc, #424]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001598:	f023 0301 	bic.w	r3, r3, #1
 800159c:	6713      	str	r3, [r2, #112]	; 0x70
 800159e:	4b68      	ldr	r3, [pc, #416]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015a2:	4a67      	ldr	r2, [pc, #412]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015a4:	f023 0304 	bic.w	r3, r3, #4
 80015a8:	6713      	str	r3, [r2, #112]	; 0x70
 80015aa:	e01c      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	2b05      	cmp	r3, #5
 80015b2:	d10c      	bne.n	80015ce <HAL_RCC_OscConfig+0x35e>
 80015b4:	4b62      	ldr	r3, [pc, #392]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b8:	4a61      	ldr	r2, [pc, #388]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015ba:	f043 0304 	orr.w	r3, r3, #4
 80015be:	6713      	str	r3, [r2, #112]	; 0x70
 80015c0:	4b5f      	ldr	r3, [pc, #380]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015c4:	4a5e      	ldr	r2, [pc, #376]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6713      	str	r3, [r2, #112]	; 0x70
 80015cc:	e00b      	b.n	80015e6 <HAL_RCC_OscConfig+0x376>
 80015ce:	4b5c      	ldr	r3, [pc, #368]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d2:	4a5b      	ldr	r2, [pc, #364]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6713      	str	r3, [r2, #112]	; 0x70
 80015da:	4b59      	ldr	r3, [pc, #356]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015de:	4a58      	ldr	r2, [pc, #352]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80015e0:	f023 0304 	bic.w	r3, r3, #4
 80015e4:	6713      	str	r3, [r2, #112]	; 0x70
		/* Check the LSE State */
		if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF) {
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	689b      	ldr	r3, [r3, #8]
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d015      	beq.n	800161a <HAL_RCC_OscConfig+0x3aa>
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 80015ee:	f7ff fb63 	bl	8000cb8 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 80015f4:	e00a      	b.n	800160c <HAL_RCC_OscConfig+0x39c>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 80015f6:	f7ff fb5f 	bl	8000cb8 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	f241 3288 	movw	r2, #5000	; 0x1388
 8001604:	4293      	cmp	r3, r2
 8001606:	d901      	bls.n	800160c <HAL_RCC_OscConfig+0x39c>
					return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e0d8      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 800160c:	4b4c      	ldr	r3, [pc, #304]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800160e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001610:	f003 0302 	and.w	r3, r3, #2
 8001614:	2b00      	cmp	r3, #0
 8001616:	d0ee      	beq.n	80015f6 <HAL_RCC_OscConfig+0x386>
 8001618:	e014      	b.n	8001644 <HAL_RCC_OscConfig+0x3d4>
				}
			}
		} else {
			/* Get Start Tick*/
			tickstart = HAL_GetTick();
 800161a:	f7ff fb4d 	bl	8000cb8 <HAL_GetTick>
 800161e:	6138      	str	r0, [r7, #16]

			/* Wait till LSE is ready */
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001620:	e00a      	b.n	8001638 <HAL_RCC_OscConfig+0x3c8>
				if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001622:	f7ff fb49 	bl	8000cb8 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	693b      	ldr	r3, [r7, #16]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_OscConfig+0x3c8>
					return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e0c2      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
			while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET) {
 8001638:	4b41      	ldr	r3, [pc, #260]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800163a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800163c:	f003 0302 	and.w	r3, r3, #2
 8001640:	2b00      	cmp	r3, #0
 8001642:	d1ee      	bne.n	8001622 <HAL_RCC_OscConfig+0x3b2>
				}
			}
		}

		/* Restore clock configuration if changed */
		if (pwrclkchanged == SET) {
 8001644:	7dfb      	ldrb	r3, [r7, #23]
 8001646:	2b01      	cmp	r3, #1
 8001648:	d105      	bne.n	8001656 <HAL_RCC_OscConfig+0x3e6>
			__HAL_RCC_PWR_CLK_DISABLE();
 800164a:	4b3d      	ldr	r3, [pc, #244]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	4a3c      	ldr	r2, [pc, #240]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001650:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001654:	6413      	str	r3, [r2, #64]	; 0x40
		}
	}
	/*-------------------------------- PLL Configuration -----------------------*/
	/* Check the parameters */
	assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
	if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE) {
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	699b      	ldr	r3, [r3, #24]
 800165a:	2b00      	cmp	r3, #0
 800165c:	f000 80ae 	beq.w	80017bc <HAL_RCC_OscConfig+0x54c>
		/* Check if the PLL is used as system clock or not */
		if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK) {
 8001660:	4b37      	ldr	r3, [pc, #220]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b08      	cmp	r3, #8
 800166a:	d06d      	beq.n	8001748 <HAL_RCC_OscConfig+0x4d8>
			if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON) {
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b02      	cmp	r3, #2
 8001672:	d14b      	bne.n	800170c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
				assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 8001674:	4b32      	ldr	r3, [pc, #200]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	4a31      	ldr	r2, [pc, #196]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800167a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800167e:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001680:	f7ff fb1a 	bl	8000cb8 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x42a>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001688:	f7ff fb16 	bl	8000cb8 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x42a>
						return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e091      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800169a:	4b29      	ldr	r3, [pc, #164]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x418>
					}
				}

				/* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
				__HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	69da      	ldr	r2, [r3, #28]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	431a      	orrs	r2, r3
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b4:	019b      	lsls	r3, r3, #6
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016bc:	085b      	lsrs	r3, r3, #1
 80016be:	3b01      	subs	r3, #1
 80016c0:	041b      	lsls	r3, r3, #16
 80016c2:	431a      	orrs	r2, r3
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c8:	061b      	lsls	r3, r3, #24
 80016ca:	431a      	orrs	r2, r3
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d0:	071b      	lsls	r3, r3, #28
 80016d2:	491b      	ldr	r1, [pc, #108]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80016d4:	4313      	orrs	r3, r2
 80016d6:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

				/* Enable the main PLL. */
				__HAL_RCC_PLL_ENABLE();
 80016d8:	4b19      	ldr	r3, [pc, #100]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a18      	ldr	r2, [pc, #96]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 80016de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80016e2:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 80016e4:	f7ff fae8 	bl	8000cb8 <HAL_GetTick>
 80016e8:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80016ea:	e008      	b.n	80016fe <HAL_RCC_OscConfig+0x48e>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 80016ec:	f7ff fae4 	bl	8000cb8 <HAL_GetTick>
 80016f0:	4602      	mov	r2, r0
 80016f2:	693b      	ldr	r3, [r7, #16]
 80016f4:	1ad3      	subs	r3, r2, r3
 80016f6:	2b02      	cmp	r3, #2
 80016f8:	d901      	bls.n	80016fe <HAL_RCC_OscConfig+0x48e>
						return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e05f      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001706:	2b00      	cmp	r3, #0
 8001708:	d0f0      	beq.n	80016ec <HAL_RCC_OscConfig+0x47c>
 800170a:	e057      	b.n	80017bc <HAL_RCC_OscConfig+0x54c>
					}
				}
			} else {
				/* Disable the main PLL. */
				__HAL_RCC_PLL_DISABLE();
 800170c:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	4a0b      	ldr	r2, [pc, #44]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001712:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001716:	6013      	str	r3, [r2, #0]

				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001718:	f7ff face 	bl	8000cb8 <HAL_GetTick>
 800171c:	6138      	str	r0, [r7, #16]

				/* Wait till PLL is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x4c2>
					if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE) {
 8001720:	f7ff faca 	bl	8000cb8 <HAL_GetTick>
 8001724:	4602      	mov	r2, r0
 8001726:	693b      	ldr	r3, [r7, #16]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x4c2>
						return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e045      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET) {
 8001732:	4b03      	ldr	r3, [pc, #12]	; (8001740 <HAL_RCC_OscConfig+0x4d0>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800173a:	2b00      	cmp	r3, #0
 800173c:	d1f0      	bne.n	8001720 <HAL_RCC_OscConfig+0x4b0>
 800173e:	e03d      	b.n	80017bc <HAL_RCC_OscConfig+0x54c>
 8001740:	40023800 	.word	0x40023800
 8001744:	40007000 	.word	0x40007000
					}
				}
			}
		} else {
			/* Do not return HAL_ERROR if request repeats the current configuration */
			pll_config = RCC->PLLCFGR;
 8001748:	4b1f      	ldr	r3, [pc, #124]	; (80017c8 <HAL_RCC_OscConfig+0x558>)
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
			if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	699b      	ldr	r3, [r3, #24]
 8001752:	2b01      	cmp	r3, #1
 8001754:	d030      	beq.n	80017b8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8001756:	68fb      	ldr	r3, [r7, #12]
 8001758:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
							!= RCC_OscInitStruct->PLL.PLLSource)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	69db      	ldr	r3, [r3, #28]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)
 8001760:	429a      	cmp	r2, r3
 8001762:	d129      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f003 023f 	and.w	r2, r3, #63	; 0x3f
							!= RCC_OscInitStruct->PLL.PLLM)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6a1b      	ldr	r3, [r3, #32]
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)
 800176e:	429a      	cmp	r2, r3
 8001770:	d122      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8001772:	68fa      	ldr	r2, [r7, #12]
 8001774:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001778:	4013      	ands	r3, r2
							!= (RCC_OscInitStruct->PLL.PLLN
 800177a:	687a      	ldr	r2, [r7, #4]
 800177c:	6a52      	ldr	r2, [r2, #36]	; 0x24
									<< RCC_PLLCFGR_PLLN_Pos))
 800177e:	0192      	lsls	r2, r2, #6
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)
 8001780:	4293      	cmp	r3, r2
 8001782:	d119      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
							!= ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800178e:	085b      	lsrs	r3, r3, #1
 8001790:	3b01      	subs	r3, #1
									<< RCC_PLLCFGR_PLLP_Pos))
 8001792:	041b      	lsls	r3, r3, #16
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)
 8001794:	429a      	cmp	r2, r3
 8001796:	d10f      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
							!= (RCC_OscInitStruct->PLL.PLLQ
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
									<< RCC_PLLCFGR_PLLQ_Pos))
 80017a2:	061b      	lsls	r3, r3, #24
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d107      	bne.n	80017b8 <HAL_RCC_OscConfig+0x548>
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
							!= (RCC_OscInitStruct->PLL.PLLR
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
									<< RCC_PLLCFGR_PLLR_Pos)))
 80017b2:	071b      	lsls	r3, r3, #28
					|| (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)
 80017b4:	429a      	cmp	r2, r3
 80017b6:	d001      	beq.n	80017bc <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
					{
				return HAL_ERROR;
 80017b8:	2301      	movs	r3, #1
 80017ba:	e000      	b.n	80017be <HAL_RCC_OscConfig+0x54e>
			}
		}
	}
	return HAL_OK;
 80017bc:	2300      	movs	r3, #0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3718      	adds	r7, #24
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	40023800 	.word	0x40023800

080017cc <HAL_RCC_ClockConfig>:
 *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
 *         (for more details refer to section above "Initialization/de-initialization functions")
 * @retval None
 */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef *RCC_ClkInitStruct,
		uint32_t FLatency) {
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b084      	sub	sp, #16
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	6078      	str	r0, [r7, #4]
 80017d4:	6039      	str	r1, [r7, #0]
	uint32_t tickstart = 0;
 80017d6:	2300      	movs	r3, #0
 80017d8:	60fb      	str	r3, [r7, #12]

	/* Check Null pointer */
	if (RCC_ClkInitStruct == NULL) {
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_RCC_ClockConfig+0x18>
		return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e0d0      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
	/* To correctly read data from FLASH memory, the number of wait states (LATENCY)
	 must be correctly programmed according to the frequency of the CPU clock
	 (HCLK) and the supply voltage of the device. */

	/* Increasing the CPU frequency */
	if (FLatency > __HAL_FLASH_GET_LATENCY()) {
 80017e4:	4b6a      	ldr	r3, [pc, #424]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f003 030f 	and.w	r3, r3, #15
 80017ec:	683a      	ldr	r2, [r7, #0]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d910      	bls.n	8001814 <HAL_RCC_ClockConfig+0x48>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80017f2:	4b67      	ldr	r3, [pc, #412]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f023 020f 	bic.w	r2, r3, #15
 80017fa:	4965      	ldr	r1, [pc, #404]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	4313      	orrs	r3, r2
 8001800:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 8001802:	4b63      	ldr	r3, [pc, #396]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 030f 	and.w	r3, r3, #15
 800180a:	683a      	ldr	r2, [r7, #0]
 800180c:	429a      	cmp	r2, r3
 800180e:	d001      	beq.n	8001814 <HAL_RCC_ClockConfig+0x48>
			return HAL_ERROR;
 8001810:	2301      	movs	r3, #1
 8001812:	e0b8      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- HCLK Configuration --------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d020      	beq.n	8001862 <HAL_RCC_ClockConfig+0x96>
			== RCC_CLOCKTYPE_HCLK) {
		/* Set the highest APBx dividers in order to ensure that we do not go through
		 a non-spec phase whatever we decrease or increase HCLK. */
		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f003 0304 	and.w	r3, r3, #4
 8001828:	2b00      	cmp	r3, #0
 800182a:	d005      	beq.n	8001838 <HAL_RCC_ClockConfig+0x6c>
				== RCC_CLOCKTYPE_PCLK1) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800182c:	4b59      	ldr	r3, [pc, #356]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	4a58      	ldr	r2, [pc, #352]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001832:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001836:	6093      	str	r3, [r2, #8]
		}

		if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	f003 0308 	and.w	r3, r3, #8
 8001840:	2b00      	cmp	r3, #0
 8001842:	d005      	beq.n	8001850 <HAL_RCC_ClockConfig+0x84>
				== RCC_CLOCKTYPE_PCLK2) {
			MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001844:	4b53      	ldr	r3, [pc, #332]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	4a52      	ldr	r2, [pc, #328]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800184a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800184e:	6093      	str	r3, [r2, #8]
		}

		/* Set the new HCLK clock divider */
		assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001850:	4b50      	ldr	r3, [pc, #320]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	689b      	ldr	r3, [r3, #8]
 800185c:	494d      	ldr	r1, [pc, #308]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800185e:	4313      	orrs	r3, r2
 8001860:	608b      	str	r3, [r1, #8]
	}

	/*------------------------- SYSCLK Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	2b00      	cmp	r3, #0
 800186c:	d040      	beq.n	80018f0 <HAL_RCC_ClockConfig+0x124>
			== RCC_CLOCKTYPE_SYSCLK) {
		assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

		/* HSE is selected as System Clock Source */
		if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE) {
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	685b      	ldr	r3, [r3, #4]
 8001872:	2b01      	cmp	r3, #1
 8001874:	d107      	bne.n	8001886 <HAL_RCC_ClockConfig+0xba>
			/* Check the HSE ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET) {
 8001876:	4b47      	ldr	r3, [pc, #284]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d115      	bne.n	80018ae <HAL_RCC_ClockConfig+0xe2>
				return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e07f      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
			}
		}
		/* PLL is selected as System Clock Source */
		else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK) {
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	685b      	ldr	r3, [r3, #4]
 800188a:	2b02      	cmp	r3, #2
 800188c:	d107      	bne.n	800189e <HAL_RCC_ClockConfig+0xd2>
			/* Check the PLL ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET) {
 800188e:	4b41      	ldr	r3, [pc, #260]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001896:	2b00      	cmp	r3, #0
 8001898:	d109      	bne.n	80018ae <HAL_RCC_ClockConfig+0xe2>
				return HAL_ERROR;
 800189a:	2301      	movs	r3, #1
 800189c:	e073      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
			}
		}
		/* HSI is selected as System Clock Source */
		else {
			/* Check the HSI ready flag */
			if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET) {
 800189e:	4b3d      	ldr	r3, [pc, #244]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0302 	and.w	r3, r3, #2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d101      	bne.n	80018ae <HAL_RCC_ClockConfig+0xe2>
				return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e06b      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
			}
		}

		__HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018ae:	4b39      	ldr	r3, [pc, #228]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	f023 0203 	bic.w	r2, r3, #3
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	4936      	ldr	r1, [pc, #216]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018bc:	4313      	orrs	r3, r2
 80018be:	608b      	str	r3, [r1, #8]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80018c0:	f7ff f9fa 	bl	8000cb8 <HAL_GetTick>
 80018c4:	60f8      	str	r0, [r7, #12]

		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80018c6:	e00a      	b.n	80018de <HAL_RCC_ClockConfig+0x112>
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
			if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE) {
 80018c8:	f7ff f9f6 	bl	8000cb8 <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d901      	bls.n	80018de <HAL_RCC_ClockConfig+0x112>
				return HAL_TIMEOUT;
 80018da:	2303      	movs	r3, #3
 80018dc:	e053      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80018de:	4b2d      	ldr	r3, [pc, #180]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 80018e0:	689b      	ldr	r3, [r3, #8]
 80018e2:	f003 020c 	and.w	r2, r3, #12
				!= (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos)) {
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	009b      	lsls	r3, r3, #2
		while (__HAL_RCC_GET_SYSCLK_SOURCE()
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d1eb      	bne.n	80018c8 <HAL_RCC_ClockConfig+0xfc>
			}
		}
	}

	/* Decreasing the number of wait states because of lower CPU frequency */
	if (FLatency < __HAL_FLASH_GET_LATENCY()) {
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 030f 	and.w	r3, r3, #15
 80018f8:	683a      	ldr	r2, [r7, #0]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d210      	bcs.n	8001920 <HAL_RCC_ClockConfig+0x154>
		/* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
		__HAL_FLASH_SET_LATENCY(FLatency);
 80018fe:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f023 020f 	bic.w	r2, r3, #15
 8001906:	4922      	ldr	r1, [pc, #136]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	683b      	ldr	r3, [r7, #0]
 800190a:	4313      	orrs	r3, r2
 800190c:	600b      	str	r3, [r1, #0]

		/* Check that the new number of wait states is taken into account to access the Flash
		 memory by reading the FLASH_ACR register */
		if (__HAL_FLASH_GET_LATENCY() != FLatency) {
 800190e:	4b20      	ldr	r3, [pc, #128]	; (8001990 <HAL_RCC_ClockConfig+0x1c4>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f003 030f 	and.w	r3, r3, #15
 8001916:	683a      	ldr	r2, [r7, #0]
 8001918:	429a      	cmp	r2, r3
 800191a:	d001      	beq.n	8001920 <HAL_RCC_ClockConfig+0x154>
			return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e032      	b.n	8001986 <HAL_RCC_ClockConfig+0x1ba>
		}
	}

	/*-------------------------- PCLK1 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1)
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f003 0304 	and.w	r3, r3, #4
 8001928:	2b00      	cmp	r3, #0
 800192a:	d008      	beq.n	800193e <HAL_RCC_ClockConfig+0x172>
			== RCC_CLOCKTYPE_PCLK1) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1,
 800192c:	4b19      	ldr	r3, [pc, #100]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800192e:	689b      	ldr	r3, [r3, #8]
 8001930:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	68db      	ldr	r3, [r3, #12]
 8001938:	4916      	ldr	r1, [pc, #88]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800193a:	4313      	orrs	r3, r2
 800193c:	608b      	str	r3, [r1, #8]
				RCC_ClkInitStruct->APB1CLKDivider);
	}

	/*-------------------------- PCLK2 Configuration ---------------------------*/
	if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0308 	and.w	r3, r3, #8
 8001946:	2b00      	cmp	r3, #0
 8001948:	d009      	beq.n	800195e <HAL_RCC_ClockConfig+0x192>
			== RCC_CLOCKTYPE_PCLK2) {
		assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
		MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2,
 800194a:	4b12      	ldr	r3, [pc, #72]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	691b      	ldr	r3, [r3, #16]
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	490e      	ldr	r1, [pc, #56]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 800195a:	4313      	orrs	r3, r2
 800195c:	608b      	str	r3, [r1, #8]
				((RCC_ClkInitStruct->APB2CLKDivider) << 3));
	}

	/* Update the SystemCoreClock global variable */
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 800195e:	f000 f821 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8001962:	4602      	mov	r2, r0
			>> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001964:	4b0b      	ldr	r3, [pc, #44]	; (8001994 <HAL_RCC_ClockConfig+0x1c8>)
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	091b      	lsrs	r3, r3, #4
 800196a:	f003 030f 	and.w	r3, r3, #15
 800196e:	490a      	ldr	r1, [pc, #40]	; (8001998 <HAL_RCC_ClockConfig+0x1cc>)
 8001970:	5ccb      	ldrb	r3, [r1, r3]
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
	SystemCoreClock = HAL_RCC_GetSysClockFreq()
 8001976:	4a09      	ldr	r2, [pc, #36]	; (800199c <HAL_RCC_ClockConfig+0x1d0>)
 8001978:	6013      	str	r3, [r2, #0]

	/* Configure the source of time base considering new system clocks settings*/
	HAL_InitTick(uwTickPrio);
 800197a:	4b09      	ldr	r3, [pc, #36]	; (80019a0 <HAL_RCC_ClockConfig+0x1d4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f956 	bl	8000c30 <HAL_InitTick>

	return HAL_OK;
 8001984:	2300      	movs	r3, #0
}
 8001986:	4618      	mov	r0, r3
 8001988:	3710      	adds	r7, #16
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	40023c00 	.word	0x40023c00
 8001994:	40023800 	.word	0x40023800
 8001998:	08003078 	.word	0x08003078
 800199c:	20000000 	.word	0x20000000
 80019a0:	20000004 	.word	0x20000004

080019a4 <HAL_RCC_GetSysClockFreq>:
 *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
 *
 *
 * @retval SYSCLK frequency
 */
uint32_t HAL_RCC_GetSysClockFreq(void) {
 80019a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80019a8:	b090      	sub	sp, #64	; 0x40
 80019aa:	af00      	add	r7, sp, #0
	uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80019ac:	2300      	movs	r3, #0
 80019ae:	637b      	str	r3, [r7, #52]	; 0x34
 80019b0:	2300      	movs	r3, #0
 80019b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80019b4:	2300      	movs	r3, #0
 80019b6:	633b      	str	r3, [r7, #48]	; 0x30
	uint32_t sysclockfreq = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	63bb      	str	r3, [r7, #56]	; 0x38

	/* Get SYSCLK source -------------------------------------------------------*/
	switch (RCC->CFGR & RCC_CFGR_SWS) {
 80019bc:	4b59      	ldr	r3, [pc, #356]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019be:	689b      	ldr	r3, [r3, #8]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d00d      	beq.n	80019e4 <HAL_RCC_GetSysClockFreq+0x40>
 80019c8:	2b08      	cmp	r3, #8
 80019ca:	f200 80a1 	bhi.w	8001b10 <HAL_RCC_GetSysClockFreq+0x16c>
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d002      	beq.n	80019d8 <HAL_RCC_GetSysClockFreq+0x34>
 80019d2:	2b04      	cmp	r3, #4
 80019d4:	d003      	beq.n	80019de <HAL_RCC_GetSysClockFreq+0x3a>
 80019d6:	e09b      	b.n	8001b10 <HAL_RCC_GetSysClockFreq+0x16c>
	case RCC_SYSCLKSOURCE_STATUS_HSI: /* HSI used as system clock source */
	{
		sysclockfreq = HSI_VALUE;
 80019d8:	4b53      	ldr	r3, [pc, #332]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x184>)
 80019da:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 80019dc:	e09b      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
	}
	case RCC_SYSCLKSOURCE_STATUS_HSE: /* HSE used as system clock  source */
	{
		sysclockfreq = HSE_VALUE;
 80019de:	4b53      	ldr	r3, [pc, #332]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 80019e0:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 80019e2:	e098      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
	}
	case RCC_SYSCLKSOURCE_STATUS_PLLCLK: /* PLL used as system clock  source */
	{
		/* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
		 SYSCLK = PLL_VCO / PLLP */
		pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019e4:	4b4f      	ldr	r3, [pc, #316]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019ec:	637b      	str	r3, [r7, #52]	; 0x34
		if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI) {
 80019ee:	4b4d      	ldr	r3, [pc, #308]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019f0:	685b      	ldr	r3, [r3, #4]
 80019f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d028      	beq.n	8001a4c <HAL_RCC_GetSysClockFreq+0xa8>
			/* HSE used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 80019fa:	4b4a      	ldr	r3, [pc, #296]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80019fc:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 80019fe:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001a00:	2200      	movs	r2, #0
 8001a02:	623b      	str	r3, [r7, #32]
 8001a04:	627a      	str	r2, [r7, #36]	; 0x24
 8001a06:	6a3b      	ldr	r3, [r7, #32]
 8001a08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8001a0c:	2100      	movs	r1, #0
 8001a0e:	4b47      	ldr	r3, [pc, #284]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a10:	fb03 f201 	mul.w	r2, r3, r1
 8001a14:	2300      	movs	r3, #0
 8001a16:	fb00 f303 	mul.w	r3, r0, r3
 8001a1a:	4413      	add	r3, r2
 8001a1c:	4a43      	ldr	r2, [pc, #268]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8001a1e:	fba0 1202 	umull	r1, r2, r0, r2
 8001a22:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a24:	460a      	mov	r2, r1
 8001a26:	62ba      	str	r2, [r7, #40]	; 0x28
 8001a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001a2a:	4413      	add	r3, r2
 8001a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001a2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a30:	2200      	movs	r2, #0
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	61fa      	str	r2, [r7, #28]
 8001a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a3e:	f7fe fc03 	bl	8000248 <__aeabi_uldivmod>
 8001a42:	4602      	mov	r2, r0
 8001a44:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSE_VALUE
 8001a46:	4613      	mov	r3, r2
 8001a48:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a4a:	e053      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0x150>
		} else {
			/* HSI used as PLL clock source */
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001a4c:	4b35      	ldr	r3, [pc, #212]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a4e:	685b      	ldr	r3, [r3, #4]
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001a50:	099b      	lsrs	r3, r3, #6
					* ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN)
 8001a52:	2200      	movs	r2, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	617a      	str	r2, [r7, #20]
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a5e:	f04f 0b00 	mov.w	fp, #0
 8001a62:	4652      	mov	r2, sl
 8001a64:	465b      	mov	r3, fp
 8001a66:	f04f 0000 	mov.w	r0, #0
 8001a6a:	f04f 0100 	mov.w	r1, #0
 8001a6e:	0159      	lsls	r1, r3, #5
 8001a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a74:	0150      	lsls	r0, r2, #5
 8001a76:	4602      	mov	r2, r0
 8001a78:	460b      	mov	r3, r1
 8001a7a:	ebb2 080a 	subs.w	r8, r2, sl
 8001a7e:	eb63 090b 	sbc.w	r9, r3, fp
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	f04f 0300 	mov.w	r3, #0
 8001a8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a96:	ebb2 0408 	subs.w	r4, r2, r8
 8001a9a:	eb63 0509 	sbc.w	r5, r3, r9
 8001a9e:	f04f 0200 	mov.w	r2, #0
 8001aa2:	f04f 0300 	mov.w	r3, #0
 8001aa6:	00eb      	lsls	r3, r5, #3
 8001aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001aac:	00e2      	lsls	r2, r4, #3
 8001aae:	4614      	mov	r4, r2
 8001ab0:	461d      	mov	r5, r3
 8001ab2:	eb14 030a 	adds.w	r3, r4, sl
 8001ab6:	603b      	str	r3, [r7, #0]
 8001ab8:	eb45 030b 	adc.w	r3, r5, fp
 8001abc:	607b      	str	r3, [r7, #4]
 8001abe:	f04f 0200 	mov.w	r2, #0
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aca:	4629      	mov	r1, r5
 8001acc:	028b      	lsls	r3, r1, #10
 8001ace:	4621      	mov	r1, r4
 8001ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ad4:	4621      	mov	r1, r4
 8001ad6:	028a      	lsls	r2, r1, #10
 8001ad8:	4610      	mov	r0, r2
 8001ada:	4619      	mov	r1, r3
							>> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t) pllm);
 8001adc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ade:	2200      	movs	r2, #0
 8001ae0:	60bb      	str	r3, [r7, #8]
 8001ae2:	60fa      	str	r2, [r7, #12]
 8001ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001ae8:	f7fe fbae 	bl	8000248 <__aeabi_uldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
			pllvco = (uint32_t) ((((uint64_t) HSI_VALUE
 8001af0:	4613      	mov	r3, r2
 8001af2:	63fb      	str	r3, [r7, #60]	; 0x3c
		}
		pllp =
				((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos)
 8001af4:	4b0b      	ldr	r3, [pc, #44]	; (8001b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	0c1b      	lsrs	r3, r3, #16
 8001afa:	f003 0303 	and.w	r3, r3, #3
						+ 1) * 2);
 8001afe:	3301      	adds	r3, #1
		pllp =
 8001b00:	005b      	lsls	r3, r3, #1
 8001b02:	633b      	str	r3, [r7, #48]	; 0x30

		sysclockfreq = pllvco / pllp;
 8001b04:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b0c:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 8001b0e:	e002      	b.n	8001b16 <HAL_RCC_GetSysClockFreq+0x172>
	}
	default: {
		sysclockfreq = HSI_VALUE;
 8001b10:	4b05      	ldr	r3, [pc, #20]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x184>)
 8001b12:	63bb      	str	r3, [r7, #56]	; 0x38
		break;
 8001b14:	bf00      	nop
	}
	}
	return sysclockfreq;
 8001b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001b18:	4618      	mov	r0, r3
 8001b1a:	3740      	adds	r7, #64	; 0x40
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001b22:	bf00      	nop
 8001b24:	40023800 	.word	0x40023800
 8001b28:	00f42400 	.word	0x00f42400
 8001b2c:	017d7840 	.word	0x017d7840

08001b30 <HAL_RCC_GetHCLKFreq>:
 * @note   Each time HCLK changes, this function must be called to update the
 *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
 * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
 * @retval HCLK frequency
 */
uint32_t HAL_RCC_GetHCLKFreq(void) {
 8001b30:	b480      	push	{r7}
 8001b32:	af00      	add	r7, sp, #0
	return SystemCoreClock;
 8001b34:	4b03      	ldr	r3, [pc, #12]	; (8001b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b36:	681b      	ldr	r3, [r3, #0]
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
 8001b42:	bf00      	nop
 8001b44:	20000000 	.word	0x20000000

08001b48 <HAL_RCC_GetPCLK1Freq>:
 * @brief  Returns the PCLK1 frequency
 * @note   Each time PCLK1 changes, this function must be called to update the
 *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK1 frequency
 */
uint32_t HAL_RCC_GetPCLK1Freq(void) {
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8001b4c:	f7ff fff0 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b50:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b52:	4b05      	ldr	r3, [pc, #20]	; (8001b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	0a9b      	lsrs	r3, r3, #10
 8001b58:	f003 0307 	and.w	r3, r3, #7
 8001b5c:	4903      	ldr	r1, [pc, #12]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40023800 	.word	0x40023800
 8001b6c:	08003088 	.word	0x08003088

08001b70 <HAL_RCC_GetPCLK2Freq>:
 * @brief  Returns the PCLK2 frequency
 * @note   Each time PCLK2 changes, this function must be called to update the
 *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
 * @retval PCLK2 frequency
 */
uint32_t HAL_RCC_GetPCLK2Freq(void) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	/* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
	return (HAL_RCC_GetHCLKFreq()
 8001b74:	f7ff ffdc 	bl	8001b30 <HAL_RCC_GetHCLKFreq>
 8001b78:	4602      	mov	r2, r0
			>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b7a:	4b05      	ldr	r3, [pc, #20]	; (8001b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	0b5b      	lsrs	r3, r3, #13
 8001b80:	f003 0307 	and.w	r3, r3, #7
 8001b84:	4903      	ldr	r1, [pc, #12]	; (8001b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b86:	5ccb      	ldrb	r3, [r1, r3]
 8001b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	bd80      	pop	{r7, pc}
 8001b90:	40023800 	.word	0x40023800
 8001b94:	08003088 	.word	0x08003088

08001b98 <HAL_RCCEx_PeriphCLKConfig>:
 *         the backup registers) are set to their reset values.
 *
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(
		RCC_PeriphCLKInitTypeDef *PeriphClkInit) {
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
	uint32_t tickstart = 0;
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	617b      	str	r3, [r7, #20]
	uint32_t tmpreg0 = 0;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	613b      	str	r3, [r7, #16]
	uint32_t tmpreg1 = 0;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
	uint32_t plli2sused = 0;
 8001bac:	2300      	movs	r3, #0
 8001bae:	61fb      	str	r3, [r7, #28]
	uint32_t pllsaiused = 0;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	61bb      	str	r3, [r7, #24]

	/* Check the parameters */
	assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

	/*----------------------------------- I2S configuration ----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0301 	and.w	r3, r3, #1
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d012      	beq.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
			== (RCC_PERIPHCLK_I2S)) {
		/* Check the parameters */
		assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

		/* Configure I2S Clock source */
		__HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001bc0:	4b69      	ldr	r3, [pc, #420]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc2:	689b      	ldr	r3, [r3, #8]
 8001bc4:	4a68      	ldr	r2, [pc, #416]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bca:	6093      	str	r3, [r2, #8]
 8001bcc:	4b66      	ldr	r3, [pc, #408]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bce:	689a      	ldr	r2, [r3, #8]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bd4:	4964      	ldr	r1, [pc, #400]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	608b      	str	r3, [r1, #8]

		/* Enable the PLLI2S when it's used as clock source for I2S */
		if (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S) {
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d101      	bne.n	8001be6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
			plli2sused = 1;
 8001be2:	2301      	movs	r3, #1
 8001be4:	61fb      	str	r3, [r7, #28]
		}
	}

	/*------------------------------------ SAI1 configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d017      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
			== (RCC_PERIPHCLK_SAI1)) {
		/* Check the parameters */
		assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

		/* Configure SAI1 Clock source */
		__HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001bf2:	4b5d      	ldr	r3, [pc, #372]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001bf4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001bf8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c00:	4959      	ldr	r1, [pc, #356]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c02:	4313      	orrs	r3, r2
 8001c04:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		/* Enable the PLLI2S when it's used as clock source for SAI */
		if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S) {
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001c10:	d101      	bne.n	8001c16 <HAL_RCCEx_PeriphCLKConfig+0x7e>
			plli2sused = 1;
 8001c12:	2301      	movs	r3, #1
 8001c14:	61fb      	str	r3, [r7, #28]
		}
		/* Enable the PLLSAI when it's used as clock source for SAI */
		if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x8a>
			pllsaiused = 1;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]
		}
	}

	/*------------------------------------ SAI2 configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d017      	beq.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
			== (RCC_PERIPHCLK_SAI2)) {
		/* Check the parameters */
		assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

		/* Configure SAI2 Clock source */
		__HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001c2e:	4b4e      	ldr	r3, [pc, #312]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c30:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001c34:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	494a      	ldr	r1, [pc, #296]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

		/* Enable the PLLI2S when it's used as clock source for SAI */
		if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S) {
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c48:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001c4c:	d101      	bne.n	8001c52 <HAL_RCCEx_PeriphCLKConfig+0xba>
			plli2sused = 1;
 8001c4e:	2301      	movs	r3, #1
 8001c50:	61fb      	str	r3, [r7, #28]
		}
		/* Enable the PLLSAI when it's used as clock source for SAI */
		if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI) {
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCCEx_PeriphCLKConfig+0xc6>
			pllsaiused = 1;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	61bb      	str	r3, [r7, #24]
		}
	}

	/*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_RCCEx_PeriphCLKConfig+0xd6>
			== RCC_PERIPHCLK_SPDIFRX) {
		plli2sused = 1;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	61fb      	str	r3, [r7, #28]
	}

	/*------------------------------------ RTC configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0320 	and.w	r3, r3, #32
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f000 808b 	beq.w	8001d92 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
			== (RCC_PERIPHCLK_RTC)) {
		/* Check for RTC Parameters used to output RTCCLK */
		assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

		/* Enable Power Clock*/
		__HAL_RCC_PWR_CLK_ENABLE();
 8001c7c:	4b3a      	ldr	r3, [pc, #232]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c80:	4a39      	ldr	r2, [pc, #228]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c86:	6413      	str	r3, [r2, #64]	; 0x40
 8001c88:	4b37      	ldr	r3, [pc, #220]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001c8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c90:	60bb      	str	r3, [r7, #8]
 8001c92:	68bb      	ldr	r3, [r7, #8]

		/* Enable write access to Backup domain */
		PWR->CR1 |= PWR_CR1_DBP;
 8001c94:	4b35      	ldr	r3, [pc, #212]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	4a34      	ldr	r2, [pc, #208]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001c9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c9e:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8001ca0:	f7ff f80a 	bl	8000cb8 <HAL_GetTick>
 8001ca4:	6178      	str	r0, [r7, #20]

		/* Wait for Backup domain Write protection disable */
		while ((PWR->CR1 & PWR_CR1_DBP) == RESET) {
 8001ca6:	e008      	b.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x122>
			if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE) {
 8001ca8:	f7ff f806 	bl	8000cb8 <HAL_GetTick>
 8001cac:	4602      	mov	r2, r0
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b64      	cmp	r3, #100	; 0x64
 8001cb4:	d901      	bls.n	8001cba <HAL_RCCEx_PeriphCLKConfig+0x122>
				return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e38f      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
		while ((PWR->CR1 & PWR_CR1_DBP) == RESET) {
 8001cba:	4b2c      	ldr	r3, [pc, #176]	; (8001d6c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d0f0      	beq.n	8001ca8 <HAL_RCCEx_PeriphCLKConfig+0x110>
			}
		}

		/* Reset the Backup domain only if the RTC Clock source selection is modified */
		tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001cc6:	4b28      	ldr	r3, [pc, #160]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001cce:	613b      	str	r3, [r7, #16]

		if ((tmpreg0 != 0x00000000U)
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d035      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				&& (tmpreg0
						!= (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))) {
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cda:	f403 7340 	and.w	r3, r3, #768	; 0x300
				&& (tmpreg0
 8001cde:	693a      	ldr	r2, [r7, #16]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	d02e      	beq.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
			/* Store the content of BDCR register before the reset of Backup Domain */
			tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001ce4:	4b20      	ldr	r3, [pc, #128]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ce6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cec:	613b      	str	r3, [r7, #16]

			/* RTC Clock selection can be changed only if the Backup Domain is reset */
			__HAL_RCC_BACKUPRESET_FORCE();
 8001cee:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cf2:	4a1d      	ldr	r2, [pc, #116]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cf8:	6713      	str	r3, [r2, #112]	; 0x70
			__HAL_RCC_BACKUPRESET_RELEASE();
 8001cfa:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001cfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001cfe:	4a1a      	ldr	r2, [pc, #104]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d04:	6713      	str	r3, [r2, #112]	; 0x70

			/* Restore the Content of BDCR register */
			RCC->BDCR = tmpreg0;
 8001d06:	4a18      	ldr	r2, [pc, #96]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	6713      	str	r3, [r2, #112]	; 0x70

			/* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
			if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON)) {
 8001d0c:	4b16      	ldr	r3, [pc, #88]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b01      	cmp	r3, #1
 8001d16:	d114      	bne.n	8001d42 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
				/* Get Start Tick*/
				tickstart = HAL_GetTick();
 8001d18:	f7fe ffce 	bl	8000cb8 <HAL_GetTick>
 8001d1c:	6178      	str	r0, [r7, #20]

				/* Wait till LSE is ready */
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8001d1e:	e00a      	b.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
					if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE) {
 8001d20:	f7fe ffca 	bl	8000cb8 <HAL_GetTick>
 8001d24:	4602      	mov	r2, r0
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d901      	bls.n	8001d36 <HAL_RCCEx_PeriphCLKConfig+0x19e>
						return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e351      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
				while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET) {
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d3a:	f003 0302 	and.w	r3, r3, #2
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d0ee      	beq.n	8001d20 <HAL_RCCEx_PeriphCLKConfig+0x188>
					}
				}
			}
		}
		__HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001d4a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d4e:	d111      	bne.n	8001d74 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8001d50:	4b05      	ldr	r3, [pc, #20]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001d5c:	4b04      	ldr	r3, [pc, #16]	; (8001d70 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8001d5e:	400b      	ands	r3, r1
 8001d60:	4901      	ldr	r1, [pc, #4]	; (8001d68 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001d62:	4313      	orrs	r3, r2
 8001d64:	608b      	str	r3, [r1, #8]
 8001d66:	e00b      	b.n	8001d80 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8001d68:	40023800 	.word	0x40023800
 8001d6c:	40007000 	.word	0x40007000
 8001d70:	0ffffcff 	.word	0x0ffffcff
 8001d74:	4bac      	ldr	r3, [pc, #688]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	4aab      	ldr	r2, [pc, #684]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d7a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8001d7e:	6093      	str	r3, [r2, #8]
 8001d80:	4ba9      	ldr	r3, [pc, #676]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d82:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d8c:	49a6      	ldr	r1, [pc, #664]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001d8e:	4313      	orrs	r3, r2
 8001d90:	670b      	str	r3, [r1, #112]	; 0x70
	}

	/*------------------------------------ TIM configuration --------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	f003 0310 	and.w	r3, r3, #16
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d010      	beq.n	8001dc0 <HAL_RCCEx_PeriphCLKConfig+0x228>
			== (RCC_PERIPHCLK_TIM)) {
		/* Check the parameters */
		assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

		/* Configure Timer Prescaler */
		__HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8001d9e:	4ba2      	ldr	r3, [pc, #648]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001da4:	4aa0      	ldr	r2, [pc, #640]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001daa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8001dae:	4b9e      	ldr	r3, [pc, #632]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001db0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001db8:	499b      	ldr	r1, [pc, #620]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dba:	4313      	orrs	r3, r2
 8001dbc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}

	/*-------------------------------------- I2C1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00a      	beq.n	8001de2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
			== RCC_PERIPHCLK_I2C1) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

		/* Configure the I2C1 clock source */
		__HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001dcc:	4b96      	ldr	r3, [pc, #600]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001dda:	4993      	ldr	r1, [pc, #588]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C2 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d00a      	beq.n	8001e04 <HAL_RCCEx_PeriphCLKConfig+0x26c>
			== RCC_PERIPHCLK_I2C2) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

		/* Configure the I2C2 clock source */
		__HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001dee:	4b8e      	ldr	r3, [pc, #568]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001dfc:	498a      	ldr	r1, [pc, #552]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C3 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d00a      	beq.n	8001e26 <HAL_RCCEx_PeriphCLKConfig+0x28e>
			== RCC_PERIPHCLK_I2C3) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

		/* Configure the I2C3 clock source */
		__HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001e10:	4b85      	ldr	r3, [pc, #532]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e16:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e1e:	4982      	ldr	r1, [pc, #520]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e20:	4313      	orrs	r3, r2
 8001e22:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- I2C4 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00a      	beq.n	8001e48 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
			== RCC_PERIPHCLK_I2C4) {
		/* Check the parameters */
		assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

		/* Configure the I2C4 clock source */
		__HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8001e32:	4b7d      	ldr	r3, [pc, #500]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e38:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e40:	4979      	ldr	r1, [pc, #484]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e42:	4313      	orrs	r3, r2
 8001e44:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d00a      	beq.n	8001e6a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

		/* Configure the USART1 clock source */
		__HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001e54:	4b74      	ldr	r3, [pc, #464]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5a:	f023 0203 	bic.w	r2, r3, #3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4971      	ldr	r1, [pc, #452]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART2 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00a      	beq.n	8001e8c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

		/* Configure the USART2 clock source */
		__HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001e76:	4b6c      	ldr	r3, [pc, #432]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e7c:	f023 020c 	bic.w	r2, r3, #12
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e84:	4968      	ldr	r1, [pc, #416]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e86:	4313      	orrs	r3, r2
 8001e88:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART3 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d00a      	beq.n	8001eae <HAL_RCCEx_PeriphCLKConfig+0x316>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

		/* Configure the USART3 clock source */
		__HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001e98:	4b63      	ldr	r3, [pc, #396]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e9e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ea6:	4960      	ldr	r1, [pc, #384]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART4 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00a      	beq.n	8001ed0 <HAL_RCCEx_PeriphCLKConfig+0x338>
			== RCC_PERIPHCLK_UART4) {
		/* Check the parameters */
		assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

		/* Configure the UART4 clock source */
		__HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001eba:	4b5b      	ldr	r3, [pc, #364]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ec0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001ec8:	4957      	ldr	r1, [pc, #348]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART5 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d00a      	beq.n	8001ef2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
			== RCC_PERIPHCLK_UART5) {
		/* Check the parameters */
		assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

		/* Configure the UART5 clock source */
		__HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001edc:	4b52      	ldr	r3, [pc, #328]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ee2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eea:	494f      	ldr	r1, [pc, #316]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001eec:	4313      	orrs	r3, r2
 8001eee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- USART6 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d00a      	beq.n	8001f14 <HAL_RCCEx_PeriphCLKConfig+0x37c>
		/* Check the parameters */
		assert_param(
				IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

		/* Configure the USART6 clock source */
		__HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8001efe:	4b4a      	ldr	r3, [pc, #296]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f04:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f0c:	4946      	ldr	r1, [pc, #280]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART7 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00a      	beq.n	8001f36 <HAL_RCCEx_PeriphCLKConfig+0x39e>
			== RCC_PERIPHCLK_UART7) {
		/* Check the parameters */
		assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

		/* Configure the UART7 clock source */
		__HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8001f20:	4b41      	ldr	r3, [pc, #260]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f26:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f2e:	493e      	ldr	r1, [pc, #248]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f30:	4313      	orrs	r3, r2
 8001f32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- UART8 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00a      	beq.n	8001f58 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
			== RCC_PERIPHCLK_UART8) {
		/* Check the parameters */
		assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

		/* Configure the UART8 clock source */
		__HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f50:	4935      	ldr	r1, [pc, #212]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f52:	4313      	orrs	r3, r2
 8001f54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*--------------------------------------- CEC Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d00a      	beq.n	8001f7a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
			== RCC_PERIPHCLK_CEC) {
		/* Check the parameters */
		assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

		/* Configure the CEC clock source */
		__HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8001f64:	4b30      	ldr	r3, [pc, #192]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f6a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001f72:	492d      	ldr	r1, [pc, #180]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*-------------------------------------- CK48 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d011      	beq.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x412>
			== RCC_PERIPHCLK_CLK48) {
		/* Check the parameters */
		assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

		/* Configure the CLK48 source */
		__HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8001f86:	4b28      	ldr	r3, [pc, #160]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f8c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001f94:	4924      	ldr	r1, [pc, #144]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001f96:	4313      	orrs	r3, r2
 8001f98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

		/* Enable the PLLSAI when it's used as clock source for CK48 */
		if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP) {
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001fa0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fa4:	d101      	bne.n	8001faa <HAL_RCCEx_PeriphCLKConfig+0x412>
			pllsaiused = 1;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	61bb      	str	r3, [r7, #24]
		}
	}

	/*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0308 	and.w	r3, r3, #8
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x422>
			== RCC_PERIPHCLK_LTDC) {
		pllsaiused = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	61bb      	str	r3, [r7, #24]
	}
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

	/*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d00a      	beq.n	8001fdc <HAL_RCCEx_PeriphCLKConfig+0x444>
			== RCC_PERIPHCLK_LPTIM1) {
		/* Check the parameters */
		assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

		/* Configure the LTPIM1 clock source */
		__HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001fc6:	4b18      	ldr	r3, [pc, #96]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fcc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fd4:	4914      	ldr	r1, [pc, #80]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fd6:	4313      	orrs	r3, r2
 8001fd8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

	/*------------------------------------- SDMMC1 Configuration ------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d00b      	beq.n	8002000 <HAL_RCCEx_PeriphCLKConfig+0x468>
		/* Check the parameters */
		assert_param(
				IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

		/* Configure the SDMMC1 clock source */
		__HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001fe8:	4b0f      	ldr	r3, [pc, #60]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001fea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001ff8:	490b      	ldr	r1, [pc, #44]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	}

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
	/*------------------------------------- SDMMC2 Configuration ------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002008:	2b00      	cmp	r3, #0
 800200a:	d00f      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x494>
		/* Check the parameters */
		assert_param(
				IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

		/* Configure the SDMMC2 clock source */
		__HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800200c:	4b06      	ldr	r3, [pc, #24]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800200e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002012:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800201c:	4902      	ldr	r1, [pc, #8]	; (8002028 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800201e:	4313      	orrs	r3, r2
 8002020:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002024:	e002      	b.n	800202c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002026:	bf00      	nop
 8002028:	40023800 	.word	0x40023800
	}

	/*------------------------------------- DFSDM1 Configuration -------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002034:	2b00      	cmp	r3, #0
 8002036:	d00b      	beq.n	8002050 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

		/* Configure the DFSDM1 interface clock source */
		__HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002038:	4b8a      	ldr	r3, [pc, #552]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800203a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800203e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002048:	4986      	ldr	r1, [pc, #536]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}

	/*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
	if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002058:	2b00      	cmp	r3, #0
 800205a:	d00b      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
		/* Check the parameters */
		assert_param(
				IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

		/* Configure the DFSDM interface clock source */
		__HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800205c:	4b81      	ldr	r3, [pc, #516]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800205e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002062:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800206c:	497d      	ldr	r1, [pc, #500]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
	}
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

	/*-------------------------------------- PLLI2S Configuration ---------------------------------*/
	/* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
	if ((plli2sused == 1)
 8002074:	69fb      	ldr	r3, [r7, #28]
 8002076:	2b01      	cmp	r3, #1
 8002078:	d006      	beq.n	8002088 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
			|| ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	f000 80d6 	beq.w	8002234 <HAL_RCCEx_PeriphCLKConfig+0x69c>
					== RCC_PERIPHCLK_PLLI2S)) {
		/* Disable the PLLI2S */
		__HAL_RCC_PLLI2S_DISABLE();
 8002088:	4b76      	ldr	r3, [pc, #472]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a75      	ldr	r2, [pc, #468]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800208e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002092:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8002094:	f7fe fe10 	bl	8000cb8 <HAL_GetTick>
 8002098:	6178      	str	r0, [r7, #20]

		/* Wait till PLLI2S is disabled */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 800209a:	e008      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x516>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 800209c:	f7fe fe0c 	bl	8000cb8 <HAL_GetTick>
 80020a0:	4602      	mov	r2, r0
 80020a2:	697b      	ldr	r3, [r7, #20]
 80020a4:	1ad3      	subs	r3, r2, r3
 80020a6:	2b64      	cmp	r3, #100	; 0x64
 80020a8:	d901      	bls.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x516>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80020aa:	2303      	movs	r3, #3
 80020ac:	e195      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET) {
 80020ae:	4b6d      	ldr	r3, [pc, #436]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d1f0      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x504>

		/* check for common PLLI2S Parameters */
		assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

		/*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d021      	beq.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x572>
				== RCC_PERIPHCLK_I2S)
				&& (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S))) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d11d      	bne.n	800210a <HAL_RCCEx_PeriphCLKConfig+0x572>
			/* check for Parameters */
			assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

			/* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 80020ce:	4b65      	ldr	r3, [pc, #404]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80020d4:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 80020d6:	f003 0303 	and.w	r3, r3, #3
 80020da:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 80020dc:	4b61      	ldr	r3, [pc, #388]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80020e2:	0e1b      	lsrs	r3, r3, #24
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 80020e4:	f003 030f 	and.w	r3, r3, #15
 80020e8:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
			/* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0,
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	019a      	lsls	r2, r3, #6
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	041b      	lsls	r3, r3, #16
 80020f4:	431a      	orrs	r2, r3
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	061b      	lsls	r3, r3, #24
 80020fa:	431a      	orrs	r2, r3
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	071b      	lsls	r3, r3, #28
 8002102:	4958      	ldr	r1, [pc, #352]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
		}

		/*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002112:	2b00      	cmp	r3, #0
 8002114:	d004      	beq.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x588>
				== RCC_PERIPHCLK_SAI1)
				&& (PeriphClkInit->Sai1ClockSelection
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800211a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800211e:	d00a      	beq.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x59e>
						== RCC_SAI1CLKSOURCE_PLLI2S))
				|| ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002128:	2b00      	cmp	r3, #0
 800212a:	d02e      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
						== RCC_PERIPHCLK_SAI2)
						&& (PeriphClkInit->Sai2ClockSelection
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002134:	d129      	bne.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
			assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
			/* Check for PLLI2S/DIVQ parameters */
			assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

			/* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 8002136:	4b4b      	ldr	r3, [pc, #300]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002138:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800213c:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP)
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 8002144:	4b47      	ldr	r3, [pc, #284]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002146:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800214a:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
			/* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0,
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	019a      	lsls	r2, r3, #6
 8002158:	693b      	ldr	r3, [r7, #16]
 800215a:	041b      	lsls	r3, r3, #16
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	68db      	ldr	r3, [r3, #12]
 8002162:	061b      	lsls	r3, r3, #24
 8002164:	431a      	orrs	r2, r3
 8002166:	68fb      	ldr	r3, [r7, #12]
 8002168:	071b      	lsls	r3, r3, #28
 800216a:	493e      	ldr	r1, [pc, #248]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800216c:	4313      	orrs	r3, r2
 800216e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);

			/* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
			__HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002172:	4b3c      	ldr	r3, [pc, #240]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002174:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002178:	f023 021f 	bic.w	r2, r3, #31
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002180:	3b01      	subs	r3, #1
 8002182:	4938      	ldr	r1, [pc, #224]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002184:	4313      	orrs	r3, r2
 8002186:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}

		/*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
		if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d01d      	beq.n	80021d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
				== RCC_PERIPHCLK_SPDIFRX) {
			/* check for Parameters */
			assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

			/* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 8002196:	4b33      	ldr	r3, [pc, #204]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002198:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800219c:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ)
 800219e:	f003 030f 	and.w	r3, r3, #15
 80021a2:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80021a4:	4b2f      	ldr	r3, [pc, #188]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
					>> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80021aa:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80021ac:	f003 0307 	and.w	r3, r3, #7
 80021b0:	60fb      	str	r3, [r7, #12]
			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
			/* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	685b      	ldr	r3, [r3, #4]
 80021b6:	019a      	lsls	r2, r3, #6
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	691b      	ldr	r3, [r3, #16]
 80021bc:	041b      	lsls	r3, r3, #16
 80021be:	431a      	orrs	r2, r3
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	061b      	lsls	r3, r3, #24
 80021c4:	431a      	orrs	r2, r3
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	071b      	lsls	r3, r3, #28
 80021ca:	4926      	ldr	r1, [pc, #152]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
		}

		/*----------------- In Case of PLLI2S is just selected  -----------------*/
		if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d011      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x66a>
			assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

			/* Configure the PLLI2S division factors */
			/* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
			/* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
			__HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN,
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	019a      	lsls	r2, r3, #6
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	041b      	lsls	r3, r3, #16
 80021ea:	431a      	orrs	r2, r3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	061b      	lsls	r3, r3, #24
 80021f2:	431a      	orrs	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	071b      	lsls	r3, r3, #28
 80021fa:	491a      	ldr	r1, [pc, #104]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
					PeriphClkInit->PLLI2S.PLLI2SQ,
					PeriphClkInit->PLLI2S.PLLI2SR);
		}

		/* Enable the PLLI2S */
		__HAL_RCC_PLLI2S_ENABLE();
 8002202:	4b18      	ldr	r3, [pc, #96]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a17      	ldr	r2, [pc, #92]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002208:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800220c:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 800220e:	f7fe fd53 	bl	8000cb8 <HAL_GetTick>
 8002212:	6178      	str	r0, [r7, #20]

		/* Wait till PLLI2S is ready */
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8002214:	e008      	b.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x690>
			if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE) {
 8002216:	f7fe fd4f 	bl	8000cb8 <HAL_GetTick>
 800221a:	4602      	mov	r2, r0
 800221c:	697b      	ldr	r3, [r7, #20]
 800221e:	1ad3      	subs	r3, r2, r3
 8002220:	2b64      	cmp	r3, #100	; 0x64
 8002222:	d901      	bls.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x690>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 8002224:	2303      	movs	r3, #3
 8002226:	e0d8      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET) {
 8002228:	4b0e      	ldr	r3, [pc, #56]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d0f0      	beq.n	8002216 <HAL_RCCEx_PeriphCLKConfig+0x67e>
		}
	}

	/*-------------------------------------- PLLSAI Configuration ---------------------------------*/
	/* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
	if (pllsaiused == 1) {
 8002234:	69bb      	ldr	r3, [r7, #24]
 8002236:	2b01      	cmp	r3, #1
 8002238:	f040 80ce 	bne.w	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x840>
		/* Disable PLLSAI Clock */
		__HAL_RCC_PLLSAI_DISABLE();
 800223c:	4b09      	ldr	r3, [pc, #36]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4a08      	ldr	r2, [pc, #32]	; (8002264 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002242:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002246:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 8002248:	f7fe fd36 	bl	8000cb8 <HAL_GetTick>
 800224c:	6178      	str	r0, [r7, #20]

		/* Wait till PLLSAI is disabled */
		while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET) {
 800224e:	e00b      	b.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
			if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE) {
 8002250:	f7fe fd32 	bl	8000cb8 <HAL_GetTick>
 8002254:	4602      	mov	r2, r0
 8002256:	697b      	ldr	r3, [r7, #20]
 8002258:	1ad3      	subs	r3, r2, r3
 800225a:	2b64      	cmp	r3, #100	; 0x64
 800225c:	d904      	bls.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 800225e:	2303      	movs	r3, #3
 8002260:	e0bb      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002262:	bf00      	nop
 8002264:	40023800 	.word	0x40023800
		while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET) {
 8002268:	4b5e      	ldr	r3, [pc, #376]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002270:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002274:	d0ec      	beq.n	8002250 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

		/* Check the PLLSAI division factors */
		assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

		/*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
		if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1)
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d003      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
				== RCC_PERIPHCLK_SAI1)
				&& (PeriphClkInit->Sai1ClockSelection
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002286:	2b00      	cmp	r3, #0
 8002288:	d009      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x706>
						== RCC_SAI1CLKSOURCE_PLLSAI))
				|| ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d02e      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
						== RCC_PERIPHCLK_SAI2)
						&& (PeriphClkInit->Sai2ClockSelection
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229a:	2b00      	cmp	r3, #0
 800229c:	d12a      	bne.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
			assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
			/* check for PLLSAI/DIVQ Parameter */
			assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

			/* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 800229e:	4b51      	ldr	r3, [pc, #324]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80022a4:	0c1b      	lsrs	r3, r3, #16
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 80022a6:	f003 0303 	and.w	r3, r3, #3
 80022aa:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80022ac:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80022b2:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR)
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	60fb      	str	r3, [r7, #12]
			/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
			/* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg0,
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	019a      	lsls	r2, r3, #6
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	041b      	lsls	r3, r3, #16
 80022c4:	431a      	orrs	r2, r3
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	061b      	lsls	r3, r3, #24
 80022cc:	431a      	orrs	r2, r3
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	071b      	lsls	r3, r3, #28
 80022d2:	4944      	ldr	r1, [pc, #272]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022d4:	4313      	orrs	r3, r2
 80022d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);

			/* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
			__HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80022da:	4b42      	ldr	r3, [pc, #264]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80022e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022e8:	3b01      	subs	r3, #1
 80022ea:	021b      	lsls	r3, r3, #8
 80022ec:	493d      	ldr	r1, [pc, #244]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80022ee:	4313      	orrs	r3, r2
 80022f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}

		/*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
		/* In Case of PLLI2S is selected as source clock for CK48 */
		if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d022      	beq.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
				== RCC_PERIPHCLK_CLK48)
				&& (PeriphClkInit->Clk48ClockSelection
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002304:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002308:	d11d      	bne.n	8002346 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
						== RCC_CLK48SOURCE_PLLSAIP)) {
			/* check for Parameters */
			assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
			/* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 800230a:	4b36      	ldr	r3, [pc, #216]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800230c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002310:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 8002312:	f003 030f 	and.w	r3, r3, #15
 8002316:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR)
 8002318:	4b32      	ldr	r3, [pc, #200]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800231a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800231e:	0f1b      	lsrs	r3, r3, #28
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR)
 8002320:	f003 0307 	and.w	r3, r3, #7
 8002324:	60fb      	str	r3, [r7, #12]

			/* Configure the PLLSAI division factors */
			/* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
			/* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN,
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	695b      	ldr	r3, [r3, #20]
 800232a:	019a      	lsls	r2, r3, #6
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a1b      	ldr	r3, [r3, #32]
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	693b      	ldr	r3, [r7, #16]
 8002336:	061b      	lsls	r3, r3, #24
 8002338:	431a      	orrs	r2, r3
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	071b      	lsls	r3, r3, #28
 800233e:	4929      	ldr	r1, [pc, #164]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002340:	4313      	orrs	r3, r2
 8002342:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
		}

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
		/*---------------------------- LTDC configuration -------------------------------*/
		if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC)
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f003 0308 	and.w	r3, r3, #8
 800234e:	2b00      	cmp	r3, #0
 8002350:	d028      	beq.n	80023a4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
				== (RCC_PERIPHCLK_LTDC)) {
			assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
			assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

			/* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 8002352:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002354:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002358:	0e1b      	lsrs	r3, r3, #24
			tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ)
 800235a:	f003 030f 	and.w	r3, r3, #15
 800235e:	613b      	str	r3, [r7, #16]
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
					>> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002366:	0c1b      	lsrs	r3, r3, #16
			tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP)
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	60fb      	str	r3, [r7, #12]

			/* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
			/* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
			/* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
			__HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN, tmpreg1,
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	695b      	ldr	r3, [r3, #20]
 8002372:	019a      	lsls	r2, r3, #6
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	041b      	lsls	r3, r3, #16
 8002378:	431a      	orrs	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	061b      	lsls	r3, r3, #24
 800237e:	431a      	orrs	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	69db      	ldr	r3, [r3, #28]
 8002384:	071b      	lsls	r3, r3, #28
 8002386:	4917      	ldr	r1, [pc, #92]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002388:	4313      	orrs	r3, r2
 800238a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
					tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);

			/* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
			__HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800238e:	4b15      	ldr	r3, [pc, #84]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002390:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002394:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800239c:	4911      	ldr	r1, [pc, #68]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800239e:	4313      	orrs	r3, r2
 80023a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
		}
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

		/* Enable PLLSAI Clock */
		__HAL_RCC_PLLSAI_ENABLE();
 80023a4:	4b0f      	ldr	r3, [pc, #60]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a0e      	ldr	r2, [pc, #56]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ae:	6013      	str	r3, [r2, #0]

		/* Get Start Tick*/
		tickstart = HAL_GetTick();
 80023b0:	f7fe fc82 	bl	8000cb8 <HAL_GetTick>
 80023b4:	6178      	str	r0, [r7, #20]

		/* Wait till PLLSAI is ready */
		while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET) {
 80023b6:	e008      	b.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x832>
			if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE) {
 80023b8:	f7fe fc7e 	bl	8000cb8 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	2b64      	cmp	r3, #100	; 0x64
 80023c4:	d901      	bls.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x832>
				/* return in case of Timeout detected */
				return HAL_TIMEOUT;
 80023c6:	2303      	movs	r3, #3
 80023c8:	e007      	b.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x842>
		while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET) {
 80023ca:	4b06      	ldr	r3, [pc, #24]	; (80023e4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80023d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80023d6:	d1ef      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x820>
			}
		}
	}
	return HAL_OK;
 80023d8:	2300      	movs	r3, #0
}
 80023da:	4618      	mov	r0, r3
 80023dc:	3720      	adds	r7, #32
 80023de:	46bd      	mov	sp, r7
 80023e0:	bd80      	pop	{r7, pc}
 80023e2:	bf00      	nop
 80023e4:	40023800 	.word	0x40023800

080023e8 <HAL_UART_Init>:
 * @brief Initialize the UART mode according to the specified
 *        parameters in the UART_InitTypeDef and initialize the associated handle.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart) {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b082      	sub	sp, #8
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
	/* Check the UART handle allocation */
	if (huart == NULL) {
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d101      	bne.n	80023fa <HAL_UART_Init+0x12>
		return HAL_ERROR;
 80023f6:	2301      	movs	r3, #1
 80023f8:	e040      	b.n	800247c <HAL_UART_Init+0x94>
	} else {
		/* Check the parameters */
		assert_param(IS_UART_INSTANCE(huart->Instance));
	}

	if (huart->gState == HAL_UART_STATE_RESET) {
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d106      	bne.n	8002410 <HAL_UART_Init+0x28>
		/* Allocate lock resource and initialize it */
		huart->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
		/* Init the low level hardware : GPIO, CLOCK */
		HAL_UART_MspInit(huart);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7fe fb7a 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
	}

	huart->gState = HAL_UART_STATE_BUSY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2224      	movs	r2, #36	; 0x24
 8002414:	67da      	str	r2, [r3, #124]	; 0x7c

	__HAL_UART_DISABLE(huart);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f022 0201 	bic.w	r2, r2, #1
 8002424:	601a      	str	r2, [r3, #0]

	/* Set the UART Communication parameters */
	if (UART_SetConfig(huart) == HAL_ERROR) {
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f000 f974 	bl	8002714 <UART_SetConfig>
 800242c:	4603      	mov	r3, r0
 800242e:	2b01      	cmp	r3, #1
 8002430:	d101      	bne.n	8002436 <HAL_UART_Init+0x4e>
		return HAL_ERROR;
 8002432:	2301      	movs	r3, #1
 8002434:	e022      	b.n	800247c <HAL_UART_Init+0x94>
	}

	if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT) {
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800243a:	2b00      	cmp	r3, #0
 800243c:	d002      	beq.n	8002444 <HAL_UART_Init+0x5c>
		UART_AdvFeatureConfig(huart);
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f000 fbcc 	bl	8002bdc <UART_AdvFeatureConfig>
	}

	/* In asynchronous mode, the following bits must be kept cleared:
	 - LINEN and CLKEN bits in the USART_CR2 register,
	 - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
	CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	685a      	ldr	r2, [r3, #4]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002452:	605a      	str	r2, [r3, #4]
	CLEAR_BIT(huart->Instance->CR3,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	689a      	ldr	r2, [r3, #8]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002462:	609a      	str	r2, [r3, #8]
			(USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));

	__HAL_UART_ENABLE(huart);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f042 0201 	orr.w	r2, r2, #1
 8002472:	601a      	str	r2, [r3, #0]

	/* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
	return (UART_CheckIdleState(huart));
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f000 fc53 	bl	8002d20 <UART_CheckIdleState>
 800247a:	4603      	mov	r3, r0
}
 800247c:	4618      	mov	r0, r3
 800247e:	3708      	adds	r7, #8
 8002480:	46bd      	mov	sp, r7
 8002482:	bd80      	pop	{r7, pc}

08002484 <HAL_UART_Transmit>:
 * @param Size    Amount of data elements (u8 or u16) to be sent.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart,
		const uint8_t *pData, uint16_t Size, uint32_t Timeout) {
 8002484:	b580      	push	{r7, lr}
 8002486:	b08a      	sub	sp, #40	; 0x28
 8002488:	af02      	add	r7, sp, #8
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	603b      	str	r3, [r7, #0]
 8002490:	4613      	mov	r3, r2
 8002492:	80fb      	strh	r3, [r7, #6]
	const uint8_t *pdata8bits;
	const uint16_t *pdata16bits;
	uint32_t tickstart;

	/* Check that a Tx process is not already ongoing */
	if (huart->gState == HAL_UART_STATE_READY) {
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002498:	2b20      	cmp	r3, #32
 800249a:	d171      	bne.n	8002580 <HAL_UART_Transmit+0xfc>
		if ((pData == NULL) || (Size == 0U)) {
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d002      	beq.n	80024a8 <HAL_UART_Transmit+0x24>
 80024a2:	88fb      	ldrh	r3, [r7, #6]
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_UART_Transmit+0x28>
			return HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	e06a      	b.n	8002582 <HAL_UART_Transmit+0xfe>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	2200      	movs	r2, #0
 80024b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		huart->gState = HAL_UART_STATE_BUSY_TX;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	2221      	movs	r2, #33	; 0x21
 80024b8:	67da      	str	r2, [r3, #124]	; 0x7c

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 80024ba:	f7fe fbfd 	bl	8000cb8 <HAL_GetTick>
 80024be:	6178      	str	r0, [r7, #20]

		huart->TxXferSize = Size;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	88fa      	ldrh	r2, [r7, #6]
 80024c4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
		huart->TxXferCount = Size;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	88fa      	ldrh	r2, [r7, #6]
 80024cc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

		/* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	689b      	ldr	r3, [r3, #8]
 80024d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80024d8:	d108      	bne.n	80024ec <HAL_UART_Transmit+0x68>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d104      	bne.n	80024ec <HAL_UART_Transmit+0x68>
			pdata8bits = NULL;
 80024e2:	2300      	movs	r3, #0
 80024e4:	61fb      	str	r3, [r7, #28]
			pdata16bits = (const uint16_t*) pData;
 80024e6:	68bb      	ldr	r3, [r7, #8]
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	e003      	b.n	80024f4 <HAL_UART_Transmit+0x70>
		} else {
			pdata8bits = pData;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 80024f0:	2300      	movs	r3, #0
 80024f2:	61bb      	str	r3, [r7, #24]
		}

		while (huart->TxXferCount > 0U) {
 80024f4:	e02c      	b.n	8002550 <HAL_UART_Transmit+0xcc>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET,
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	9300      	str	r3, [sp, #0]
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	2200      	movs	r2, #0
 80024fe:	2180      	movs	r1, #128	; 0x80
 8002500:	68f8      	ldr	r0, [r7, #12]
 8002502:	f000 fc5a 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 8002506:	4603      	mov	r3, r0
 8002508:	2b00      	cmp	r3, #0
 800250a:	d001      	beq.n	8002510 <HAL_UART_Transmit+0x8c>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 800250c:	2303      	movs	r3, #3
 800250e:	e038      	b.n	8002582 <HAL_UART_Transmit+0xfe>
			}
			if (pdata8bits == NULL) {
 8002510:	69fb      	ldr	r3, [r7, #28]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d10b      	bne.n	800252e <HAL_UART_Transmit+0xaa>
				huart->Instance->TDR = (uint16_t) (*pdata16bits & 0x01FFU);
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	881b      	ldrh	r3, [r3, #0]
 800251a:	461a      	mov	r2, r3
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002524:	629a      	str	r2, [r3, #40]	; 0x28
				pdata16bits++;
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	3302      	adds	r3, #2
 800252a:	61bb      	str	r3, [r7, #24]
 800252c:	e007      	b.n	800253e <HAL_UART_Transmit+0xba>
			} else {
				huart->Instance->TDR = (uint8_t) (*pdata8bits & 0xFFU);
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	781a      	ldrb	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	629a      	str	r2, [r3, #40]	; 0x28
				pdata8bits++;
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	3301      	adds	r3, #1
 800253c:	61fb      	str	r3, [r7, #28]
			}
			huart->TxXferCount--;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002544:	b29b      	uxth	r3, r3
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
		while (huart->TxXferCount > 0U) {
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002556:	b29b      	uxth	r3, r3
 8002558:	2b00      	cmp	r3, #0
 800255a:	d1cc      	bne.n	80024f6 <HAL_UART_Transmit+0x72>
		}

		if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart,
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	9300      	str	r3, [sp, #0]
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	2200      	movs	r2, #0
 8002564:	2140      	movs	r1, #64	; 0x40
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f000 fc27 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_Transmit+0xf2>
				Timeout) != HAL_OK) {
			return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e005      	b.n	8002582 <HAL_UART_Transmit+0xfe>
		}

		/* At end of Tx process, restore huart->gState to Ready */
		huart->gState = HAL_UART_STATE_READY;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2220      	movs	r2, #32
 800257a:	67da      	str	r2, [r3, #124]	; 0x7c

		return HAL_OK;
 800257c:	2300      	movs	r3, #0
 800257e:	e000      	b.n	8002582 <HAL_UART_Transmit+0xfe>
	} else {
		return HAL_BUSY;
 8002580:	2302      	movs	r3, #2
	}
}
 8002582:	4618      	mov	r0, r3
 8002584:	3720      	adds	r7, #32
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}

0800258a <HAL_UART_Receive>:
 * @param Size    Amount of data elements (u8 or u16) to be received.
 * @param Timeout Timeout duration.
 * @retval HAL status
 */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData,
		uint16_t Size, uint32_t Timeout) {
 800258a:	b580      	push	{r7, lr}
 800258c:	b08a      	sub	sp, #40	; 0x28
 800258e:	af02      	add	r7, sp, #8
 8002590:	60f8      	str	r0, [r7, #12]
 8002592:	60b9      	str	r1, [r7, #8]
 8002594:	603b      	str	r3, [r7, #0]
 8002596:	4613      	mov	r3, r2
 8002598:	80fb      	strh	r3, [r7, #6]
	uint16_t *pdata16bits;
	uint16_t uhMask;
	uint32_t tickstart;

	/* Check that a Rx process is not already ongoing */
	if (huart->RxState == HAL_UART_STATE_READY) {
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80025a0:	2b20      	cmp	r3, #32
 80025a2:	f040 80b1 	bne.w	8002708 <HAL_UART_Receive+0x17e>
		if ((pData == NULL) || (Size == 0U)) {
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d002      	beq.n	80025b2 <HAL_UART_Receive+0x28>
 80025ac:	88fb      	ldrh	r3, [r7, #6]
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	d101      	bne.n	80025b6 <HAL_UART_Receive+0x2c>
			return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e0a9      	b.n	800270a <HAL_UART_Receive+0x180>
		}

		huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
		huart->RxState = HAL_UART_STATE_BUSY_RX;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2222      	movs	r2, #34	; 0x22
 80025c2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
		huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2200      	movs	r2, #0
 80025ca:	661a      	str	r2, [r3, #96]	; 0x60

		/* Init tickstart for timeout management */
		tickstart = HAL_GetTick();
 80025cc:	f7fe fb74 	bl	8000cb8 <HAL_GetTick>
 80025d0:	6178      	str	r0, [r7, #20]

		huart->RxXferSize = Size;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	88fa      	ldrh	r2, [r7, #6]
 80025d6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
		huart->RxXferCount = Size;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	88fa      	ldrh	r2, [r7, #6]
 80025de:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

		/* Computation of UART mask to apply to RDR register */
		UART_MASK_COMPUTATION(huart);
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	689b      	ldr	r3, [r3, #8]
 80025e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025ea:	d10e      	bne.n	800260a <HAL_UART_Receive+0x80>
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	691b      	ldr	r3, [r3, #16]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d105      	bne.n	8002600 <HAL_UART_Receive+0x76>
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	f240 12ff 	movw	r2, #511	; 0x1ff
 80025fa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80025fe:	e02d      	b.n	800265c <HAL_UART_Receive+0xd2>
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	22ff      	movs	r2, #255	; 0xff
 8002604:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002608:	e028      	b.n	800265c <HAL_UART_Receive+0xd2>
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	689b      	ldr	r3, [r3, #8]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d10d      	bne.n	800262e <HAL_UART_Receive+0xa4>
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	691b      	ldr	r3, [r3, #16]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d104      	bne.n	8002624 <HAL_UART_Receive+0x9a>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	22ff      	movs	r2, #255	; 0xff
 800261e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002622:	e01b      	b.n	800265c <HAL_UART_Receive+0xd2>
 8002624:	68fb      	ldr	r3, [r7, #12]
 8002626:	227f      	movs	r2, #127	; 0x7f
 8002628:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800262c:	e016      	b.n	800265c <HAL_UART_Receive+0xd2>
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002636:	d10d      	bne.n	8002654 <HAL_UART_Receive+0xca>
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	691b      	ldr	r3, [r3, #16]
 800263c:	2b00      	cmp	r3, #0
 800263e:	d104      	bne.n	800264a <HAL_UART_Receive+0xc0>
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	227f      	movs	r2, #127	; 0x7f
 8002644:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002648:	e008      	b.n	800265c <HAL_UART_Receive+0xd2>
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	223f      	movs	r2, #63	; 0x3f
 800264e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002652:	e003      	b.n	800265c <HAL_UART_Receive+0xd2>
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
		uhMask = huart->Mask;
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002662:	827b      	strh	r3, [r7, #18]

		/* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
		if ((huart->Init.WordLength == UART_WORDLENGTH_9B)
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800266c:	d108      	bne.n	8002680 <HAL_UART_Receive+0xf6>
				&& (huart->Init.Parity == UART_PARITY_NONE)) {
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	691b      	ldr	r3, [r3, #16]
 8002672:	2b00      	cmp	r3, #0
 8002674:	d104      	bne.n	8002680 <HAL_UART_Receive+0xf6>
			pdata8bits = NULL;
 8002676:	2300      	movs	r3, #0
 8002678:	61fb      	str	r3, [r7, #28]
			pdata16bits = (uint16_t*) pData;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	61bb      	str	r3, [r7, #24]
 800267e:	e003      	b.n	8002688 <HAL_UART_Receive+0xfe>
		} else {
			pdata8bits = pData;
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	61fb      	str	r3, [r7, #28]
			pdata16bits = NULL;
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
		}

		/* as long as data have to be received */
		while (huart->RxXferCount > 0U) {
 8002688:	e032      	b.n	80026f0 <HAL_UART_Receive+0x166>
			if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET,
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	9300      	str	r3, [sp, #0]
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	2200      	movs	r2, #0
 8002692:	2120      	movs	r1, #32
 8002694:	68f8      	ldr	r0, [r7, #12]
 8002696:	f000 fb90 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <HAL_UART_Receive+0x11a>
					tickstart, Timeout) != HAL_OK) {
				return HAL_TIMEOUT;
 80026a0:	2303      	movs	r3, #3
 80026a2:	e032      	b.n	800270a <HAL_UART_Receive+0x180>
			}
			if (pdata8bits == NULL) {
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d10c      	bne.n	80026c4 <HAL_UART_Receive+0x13a>
				*pdata16bits = (uint16_t) (huart->Instance->RDR & uhMask);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	8a7b      	ldrh	r3, [r7, #18]
 80026b4:	4013      	ands	r3, r2
 80026b6:	b29a      	uxth	r2, r3
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	801a      	strh	r2, [r3, #0]
				pdata16bits++;
 80026bc:	69bb      	ldr	r3, [r7, #24]
 80026be:	3302      	adds	r3, #2
 80026c0:	61bb      	str	r3, [r7, #24]
 80026c2:	e00c      	b.n	80026de <HAL_UART_Receive+0x154>
			} else {
				*pdata8bits =
						(uint8_t) (huart->Instance->RDR & (uint8_t) uhMask);
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026ca:	b2da      	uxtb	r2, r3
 80026cc:	8a7b      	ldrh	r3, [r7, #18]
 80026ce:	b2db      	uxtb	r3, r3
 80026d0:	4013      	ands	r3, r2
 80026d2:	b2da      	uxtb	r2, r3
				*pdata8bits =
 80026d4:	69fb      	ldr	r3, [r7, #28]
 80026d6:	701a      	strb	r2, [r3, #0]
				pdata8bits++;
 80026d8:	69fb      	ldr	r3, [r7, #28]
 80026da:	3301      	adds	r3, #1
 80026dc:	61fb      	str	r3, [r7, #28]
			}
			huart->RxXferCount--;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026e4:	b29b      	uxth	r3, r3
 80026e6:	3b01      	subs	r3, #1
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
		while (huart->RxXferCount > 0U) {
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80026f6:	b29b      	uxth	r3, r3
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d1c6      	bne.n	800268a <HAL_UART_Receive+0x100>
		}

		/* At end of Rx process, restore huart->RxState to Ready */
		huart->RxState = HAL_UART_STATE_READY;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2220      	movs	r2, #32
 8002700:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

		return HAL_OK;
 8002704:	2300      	movs	r3, #0
 8002706:	e000      	b.n	800270a <HAL_UART_Receive+0x180>
	} else {
		return HAL_BUSY;
 8002708:	2302      	movs	r3, #2
	}
}
 800270a:	4618      	mov	r0, r3
 800270c:	3720      	adds	r7, #32
 800270e:	46bd      	mov	sp, r7
 8002710:	bd80      	pop	{r7, pc}
	...

08002714 <UART_SetConfig>:
/**
 * @brief Configure the UART peripheral.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart) {
 8002714:	b580      	push	{r7, lr}
 8002716:	b088      	sub	sp, #32
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
	uint32_t tmpreg;
	uint16_t brrtemp;
	UART_ClockSourceTypeDef clocksource;
	uint32_t usartdiv;
	HAL_StatusTypeDef ret = HAL_OK;
 800271c:	2300      	movs	r3, #0
 800271e:	77bb      	strb	r3, [r7, #30]
	 *  the UART Word Length, Parity, Mode and oversampling:
	 *  set the M bits according to huart->Init.WordLength value
	 *  set PCE and PS bits according to huart->Init.Parity value
	 *  set TE and RE bits according to huart->Init.Mode value
	 *  set OVER8 bit according to huart->Init.OverSampling value */
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	431a      	orrs	r2, r3
			| huart->Init.Mode | huart->Init.OverSampling;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	695b      	ldr	r3, [r3, #20]
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
	tmpreg = (uint32_t) huart->Init.WordLength | huart->Init.Parity
 8002734:	4313      	orrs	r3, r2
 8002736:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	4ba6      	ldr	r3, [pc, #664]	; (80029d8 <UART_SetConfig+0x2c4>)
 8002740:	4013      	ands	r3, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6812      	ldr	r2, [r2, #0]
 8002746:	6979      	ldr	r1, [r7, #20]
 8002748:	430b      	orrs	r3, r1
 800274a:	6013      	str	r3, [r2, #0]

	/*-------------------------- USART CR2 Configuration -----------------------*/
	/* Configure the UART Stop Bits: Set STOP[13:12] bits according
	 * to huart->Init.StopBits value */
	MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	68da      	ldr	r2, [r3, #12]
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	430a      	orrs	r2, r1
 8002760:	605a      	str	r2, [r3, #4]
	/* Configure
	 * - UART HardWare Flow Control: set CTSE and RTSE bits according
	 *   to huart->Init.HwFlowCtl value
	 * - one-bit sampling method versus three samples' majority rule according
	 *   to huart->Init.OneBitSampling (not applicable to LPUART) */
	tmpreg = (uint32_t) huart->Init.HwFlowCtl;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	699b      	ldr	r3, [r3, #24]
 8002766:	617b      	str	r3, [r7, #20]

	tmpreg |= huart->Init.OneBitSampling;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6a1b      	ldr	r3, [r3, #32]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	4313      	orrs	r3, r2
 8002770:	617b      	str	r3, [r7, #20]
	MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	689b      	ldr	r3, [r3, #8]
 8002778:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	430a      	orrs	r2, r1
 8002784:	609a      	str	r2, [r3, #8]

	/*-------------------------- USART BRR Configuration -----------------------*/
	UART_GETCLOCKSOURCE(huart, clocksource);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4a94      	ldr	r2, [pc, #592]	; (80029dc <UART_SetConfig+0x2c8>)
 800278c:	4293      	cmp	r3, r2
 800278e:	d120      	bne.n	80027d2 <UART_SetConfig+0xbe>
 8002790:	4b93      	ldr	r3, [pc, #588]	; (80029e0 <UART_SetConfig+0x2cc>)
 8002792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002796:	f003 0303 	and.w	r3, r3, #3
 800279a:	2b03      	cmp	r3, #3
 800279c:	d816      	bhi.n	80027cc <UART_SetConfig+0xb8>
 800279e:	a201      	add	r2, pc, #4	; (adr r2, 80027a4 <UART_SetConfig+0x90>)
 80027a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027a4:	080027b5 	.word	0x080027b5
 80027a8:	080027c1 	.word	0x080027c1
 80027ac:	080027bb 	.word	0x080027bb
 80027b0:	080027c7 	.word	0x080027c7
 80027b4:	2301      	movs	r3, #1
 80027b6:	77fb      	strb	r3, [r7, #31]
 80027b8:	e150      	b.n	8002a5c <UART_SetConfig+0x348>
 80027ba:	2302      	movs	r3, #2
 80027bc:	77fb      	strb	r3, [r7, #31]
 80027be:	e14d      	b.n	8002a5c <UART_SetConfig+0x348>
 80027c0:	2304      	movs	r3, #4
 80027c2:	77fb      	strb	r3, [r7, #31]
 80027c4:	e14a      	b.n	8002a5c <UART_SetConfig+0x348>
 80027c6:	2308      	movs	r3, #8
 80027c8:	77fb      	strb	r3, [r7, #31]
 80027ca:	e147      	b.n	8002a5c <UART_SetConfig+0x348>
 80027cc:	2310      	movs	r3, #16
 80027ce:	77fb      	strb	r3, [r7, #31]
 80027d0:	e144      	b.n	8002a5c <UART_SetConfig+0x348>
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a83      	ldr	r2, [pc, #524]	; (80029e4 <UART_SetConfig+0x2d0>)
 80027d8:	4293      	cmp	r3, r2
 80027da:	d132      	bne.n	8002842 <UART_SetConfig+0x12e>
 80027dc:	4b80      	ldr	r3, [pc, #512]	; (80029e0 <UART_SetConfig+0x2cc>)
 80027de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027e2:	f003 030c 	and.w	r3, r3, #12
 80027e6:	2b0c      	cmp	r3, #12
 80027e8:	d828      	bhi.n	800283c <UART_SetConfig+0x128>
 80027ea:	a201      	add	r2, pc, #4	; (adr r2, 80027f0 <UART_SetConfig+0xdc>)
 80027ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027f0:	08002825 	.word	0x08002825
 80027f4:	0800283d 	.word	0x0800283d
 80027f8:	0800283d 	.word	0x0800283d
 80027fc:	0800283d 	.word	0x0800283d
 8002800:	08002831 	.word	0x08002831
 8002804:	0800283d 	.word	0x0800283d
 8002808:	0800283d 	.word	0x0800283d
 800280c:	0800283d 	.word	0x0800283d
 8002810:	0800282b 	.word	0x0800282b
 8002814:	0800283d 	.word	0x0800283d
 8002818:	0800283d 	.word	0x0800283d
 800281c:	0800283d 	.word	0x0800283d
 8002820:	08002837 	.word	0x08002837
 8002824:	2300      	movs	r3, #0
 8002826:	77fb      	strb	r3, [r7, #31]
 8002828:	e118      	b.n	8002a5c <UART_SetConfig+0x348>
 800282a:	2302      	movs	r3, #2
 800282c:	77fb      	strb	r3, [r7, #31]
 800282e:	e115      	b.n	8002a5c <UART_SetConfig+0x348>
 8002830:	2304      	movs	r3, #4
 8002832:	77fb      	strb	r3, [r7, #31]
 8002834:	e112      	b.n	8002a5c <UART_SetConfig+0x348>
 8002836:	2308      	movs	r3, #8
 8002838:	77fb      	strb	r3, [r7, #31]
 800283a:	e10f      	b.n	8002a5c <UART_SetConfig+0x348>
 800283c:	2310      	movs	r3, #16
 800283e:	77fb      	strb	r3, [r7, #31]
 8002840:	e10c      	b.n	8002a5c <UART_SetConfig+0x348>
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4a68      	ldr	r2, [pc, #416]	; (80029e8 <UART_SetConfig+0x2d4>)
 8002848:	4293      	cmp	r3, r2
 800284a:	d120      	bne.n	800288e <UART_SetConfig+0x17a>
 800284c:	4b64      	ldr	r3, [pc, #400]	; (80029e0 <UART_SetConfig+0x2cc>)
 800284e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002852:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002856:	2b30      	cmp	r3, #48	; 0x30
 8002858:	d013      	beq.n	8002882 <UART_SetConfig+0x16e>
 800285a:	2b30      	cmp	r3, #48	; 0x30
 800285c:	d814      	bhi.n	8002888 <UART_SetConfig+0x174>
 800285e:	2b20      	cmp	r3, #32
 8002860:	d009      	beq.n	8002876 <UART_SetConfig+0x162>
 8002862:	2b20      	cmp	r3, #32
 8002864:	d810      	bhi.n	8002888 <UART_SetConfig+0x174>
 8002866:	2b00      	cmp	r3, #0
 8002868:	d002      	beq.n	8002870 <UART_SetConfig+0x15c>
 800286a:	2b10      	cmp	r3, #16
 800286c:	d006      	beq.n	800287c <UART_SetConfig+0x168>
 800286e:	e00b      	b.n	8002888 <UART_SetConfig+0x174>
 8002870:	2300      	movs	r3, #0
 8002872:	77fb      	strb	r3, [r7, #31]
 8002874:	e0f2      	b.n	8002a5c <UART_SetConfig+0x348>
 8002876:	2302      	movs	r3, #2
 8002878:	77fb      	strb	r3, [r7, #31]
 800287a:	e0ef      	b.n	8002a5c <UART_SetConfig+0x348>
 800287c:	2304      	movs	r3, #4
 800287e:	77fb      	strb	r3, [r7, #31]
 8002880:	e0ec      	b.n	8002a5c <UART_SetConfig+0x348>
 8002882:	2308      	movs	r3, #8
 8002884:	77fb      	strb	r3, [r7, #31]
 8002886:	e0e9      	b.n	8002a5c <UART_SetConfig+0x348>
 8002888:	2310      	movs	r3, #16
 800288a:	77fb      	strb	r3, [r7, #31]
 800288c:	e0e6      	b.n	8002a5c <UART_SetConfig+0x348>
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4a56      	ldr	r2, [pc, #344]	; (80029ec <UART_SetConfig+0x2d8>)
 8002894:	4293      	cmp	r3, r2
 8002896:	d120      	bne.n	80028da <UART_SetConfig+0x1c6>
 8002898:	4b51      	ldr	r3, [pc, #324]	; (80029e0 <UART_SetConfig+0x2cc>)
 800289a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800289e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80028a2:	2bc0      	cmp	r3, #192	; 0xc0
 80028a4:	d013      	beq.n	80028ce <UART_SetConfig+0x1ba>
 80028a6:	2bc0      	cmp	r3, #192	; 0xc0
 80028a8:	d814      	bhi.n	80028d4 <UART_SetConfig+0x1c0>
 80028aa:	2b80      	cmp	r3, #128	; 0x80
 80028ac:	d009      	beq.n	80028c2 <UART_SetConfig+0x1ae>
 80028ae:	2b80      	cmp	r3, #128	; 0x80
 80028b0:	d810      	bhi.n	80028d4 <UART_SetConfig+0x1c0>
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d002      	beq.n	80028bc <UART_SetConfig+0x1a8>
 80028b6:	2b40      	cmp	r3, #64	; 0x40
 80028b8:	d006      	beq.n	80028c8 <UART_SetConfig+0x1b4>
 80028ba:	e00b      	b.n	80028d4 <UART_SetConfig+0x1c0>
 80028bc:	2300      	movs	r3, #0
 80028be:	77fb      	strb	r3, [r7, #31]
 80028c0:	e0cc      	b.n	8002a5c <UART_SetConfig+0x348>
 80028c2:	2302      	movs	r3, #2
 80028c4:	77fb      	strb	r3, [r7, #31]
 80028c6:	e0c9      	b.n	8002a5c <UART_SetConfig+0x348>
 80028c8:	2304      	movs	r3, #4
 80028ca:	77fb      	strb	r3, [r7, #31]
 80028cc:	e0c6      	b.n	8002a5c <UART_SetConfig+0x348>
 80028ce:	2308      	movs	r3, #8
 80028d0:	77fb      	strb	r3, [r7, #31]
 80028d2:	e0c3      	b.n	8002a5c <UART_SetConfig+0x348>
 80028d4:	2310      	movs	r3, #16
 80028d6:	77fb      	strb	r3, [r7, #31]
 80028d8:	e0c0      	b.n	8002a5c <UART_SetConfig+0x348>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	4a44      	ldr	r2, [pc, #272]	; (80029f0 <UART_SetConfig+0x2dc>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d125      	bne.n	8002930 <UART_SetConfig+0x21c>
 80028e4:	4b3e      	ldr	r3, [pc, #248]	; (80029e0 <UART_SetConfig+0x2cc>)
 80028e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f2:	d017      	beq.n	8002924 <UART_SetConfig+0x210>
 80028f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80028f8:	d817      	bhi.n	800292a <UART_SetConfig+0x216>
 80028fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80028fe:	d00b      	beq.n	8002918 <UART_SetConfig+0x204>
 8002900:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002904:	d811      	bhi.n	800292a <UART_SetConfig+0x216>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d003      	beq.n	8002912 <UART_SetConfig+0x1fe>
 800290a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800290e:	d006      	beq.n	800291e <UART_SetConfig+0x20a>
 8002910:	e00b      	b.n	800292a <UART_SetConfig+0x216>
 8002912:	2300      	movs	r3, #0
 8002914:	77fb      	strb	r3, [r7, #31]
 8002916:	e0a1      	b.n	8002a5c <UART_SetConfig+0x348>
 8002918:	2302      	movs	r3, #2
 800291a:	77fb      	strb	r3, [r7, #31]
 800291c:	e09e      	b.n	8002a5c <UART_SetConfig+0x348>
 800291e:	2304      	movs	r3, #4
 8002920:	77fb      	strb	r3, [r7, #31]
 8002922:	e09b      	b.n	8002a5c <UART_SetConfig+0x348>
 8002924:	2308      	movs	r3, #8
 8002926:	77fb      	strb	r3, [r7, #31]
 8002928:	e098      	b.n	8002a5c <UART_SetConfig+0x348>
 800292a:	2310      	movs	r3, #16
 800292c:	77fb      	strb	r3, [r7, #31]
 800292e:	e095      	b.n	8002a5c <UART_SetConfig+0x348>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a2f      	ldr	r2, [pc, #188]	; (80029f4 <UART_SetConfig+0x2e0>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d125      	bne.n	8002986 <UART_SetConfig+0x272>
 800293a:	4b29      	ldr	r3, [pc, #164]	; (80029e0 <UART_SetConfig+0x2cc>)
 800293c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002940:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002944:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002948:	d017      	beq.n	800297a <UART_SetConfig+0x266>
 800294a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800294e:	d817      	bhi.n	8002980 <UART_SetConfig+0x26c>
 8002950:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002954:	d00b      	beq.n	800296e <UART_SetConfig+0x25a>
 8002956:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800295a:	d811      	bhi.n	8002980 <UART_SetConfig+0x26c>
 800295c:	2b00      	cmp	r3, #0
 800295e:	d003      	beq.n	8002968 <UART_SetConfig+0x254>
 8002960:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002964:	d006      	beq.n	8002974 <UART_SetConfig+0x260>
 8002966:	e00b      	b.n	8002980 <UART_SetConfig+0x26c>
 8002968:	2301      	movs	r3, #1
 800296a:	77fb      	strb	r3, [r7, #31]
 800296c:	e076      	b.n	8002a5c <UART_SetConfig+0x348>
 800296e:	2302      	movs	r3, #2
 8002970:	77fb      	strb	r3, [r7, #31]
 8002972:	e073      	b.n	8002a5c <UART_SetConfig+0x348>
 8002974:	2304      	movs	r3, #4
 8002976:	77fb      	strb	r3, [r7, #31]
 8002978:	e070      	b.n	8002a5c <UART_SetConfig+0x348>
 800297a:	2308      	movs	r3, #8
 800297c:	77fb      	strb	r3, [r7, #31]
 800297e:	e06d      	b.n	8002a5c <UART_SetConfig+0x348>
 8002980:	2310      	movs	r3, #16
 8002982:	77fb      	strb	r3, [r7, #31]
 8002984:	e06a      	b.n	8002a5c <UART_SetConfig+0x348>
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	4a1b      	ldr	r2, [pc, #108]	; (80029f8 <UART_SetConfig+0x2e4>)
 800298c:	4293      	cmp	r3, r2
 800298e:	d138      	bne.n	8002a02 <UART_SetConfig+0x2ee>
 8002990:	4b13      	ldr	r3, [pc, #76]	; (80029e0 <UART_SetConfig+0x2cc>)
 8002992:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002996:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800299a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800299e:	d017      	beq.n	80029d0 <UART_SetConfig+0x2bc>
 80029a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80029a4:	d82a      	bhi.n	80029fc <UART_SetConfig+0x2e8>
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	d00b      	beq.n	80029c4 <UART_SetConfig+0x2b0>
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b0:	d824      	bhi.n	80029fc <UART_SetConfig+0x2e8>
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d003      	beq.n	80029be <UART_SetConfig+0x2aa>
 80029b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ba:	d006      	beq.n	80029ca <UART_SetConfig+0x2b6>
 80029bc:	e01e      	b.n	80029fc <UART_SetConfig+0x2e8>
 80029be:	2300      	movs	r3, #0
 80029c0:	77fb      	strb	r3, [r7, #31]
 80029c2:	e04b      	b.n	8002a5c <UART_SetConfig+0x348>
 80029c4:	2302      	movs	r3, #2
 80029c6:	77fb      	strb	r3, [r7, #31]
 80029c8:	e048      	b.n	8002a5c <UART_SetConfig+0x348>
 80029ca:	2304      	movs	r3, #4
 80029cc:	77fb      	strb	r3, [r7, #31]
 80029ce:	e045      	b.n	8002a5c <UART_SetConfig+0x348>
 80029d0:	2308      	movs	r3, #8
 80029d2:	77fb      	strb	r3, [r7, #31]
 80029d4:	e042      	b.n	8002a5c <UART_SetConfig+0x348>
 80029d6:	bf00      	nop
 80029d8:	efff69f3 	.word	0xefff69f3
 80029dc:	40011000 	.word	0x40011000
 80029e0:	40023800 	.word	0x40023800
 80029e4:	40004400 	.word	0x40004400
 80029e8:	40004800 	.word	0x40004800
 80029ec:	40004c00 	.word	0x40004c00
 80029f0:	40005000 	.word	0x40005000
 80029f4:	40011400 	.word	0x40011400
 80029f8:	40007800 	.word	0x40007800
 80029fc:	2310      	movs	r3, #16
 80029fe:	77fb      	strb	r3, [r7, #31]
 8002a00:	e02c      	b.n	8002a5c <UART_SetConfig+0x348>
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a72      	ldr	r2, [pc, #456]	; (8002bd0 <UART_SetConfig+0x4bc>)
 8002a08:	4293      	cmp	r3, r2
 8002a0a:	d125      	bne.n	8002a58 <UART_SetConfig+0x344>
 8002a0c:	4b71      	ldr	r3, [pc, #452]	; (8002bd4 <UART_SetConfig+0x4c0>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002a16:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a1a:	d017      	beq.n	8002a4c <UART_SetConfig+0x338>
 8002a1c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002a20:	d817      	bhi.n	8002a52 <UART_SetConfig+0x33e>
 8002a22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a26:	d00b      	beq.n	8002a40 <UART_SetConfig+0x32c>
 8002a28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a2c:	d811      	bhi.n	8002a52 <UART_SetConfig+0x33e>
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d003      	beq.n	8002a3a <UART_SetConfig+0x326>
 8002a32:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002a36:	d006      	beq.n	8002a46 <UART_SetConfig+0x332>
 8002a38:	e00b      	b.n	8002a52 <UART_SetConfig+0x33e>
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	77fb      	strb	r3, [r7, #31]
 8002a3e:	e00d      	b.n	8002a5c <UART_SetConfig+0x348>
 8002a40:	2302      	movs	r3, #2
 8002a42:	77fb      	strb	r3, [r7, #31]
 8002a44:	e00a      	b.n	8002a5c <UART_SetConfig+0x348>
 8002a46:	2304      	movs	r3, #4
 8002a48:	77fb      	strb	r3, [r7, #31]
 8002a4a:	e007      	b.n	8002a5c <UART_SetConfig+0x348>
 8002a4c:	2308      	movs	r3, #8
 8002a4e:	77fb      	strb	r3, [r7, #31]
 8002a50:	e004      	b.n	8002a5c <UART_SetConfig+0x348>
 8002a52:	2310      	movs	r3, #16
 8002a54:	77fb      	strb	r3, [r7, #31]
 8002a56:	e001      	b.n	8002a5c <UART_SetConfig+0x348>
 8002a58:	2310      	movs	r3, #16
 8002a5a:	77fb      	strb	r3, [r7, #31]

	if (huart->Init.OverSampling == UART_OVERSAMPLING_8) {
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002a64:	d15b      	bne.n	8002b1e <UART_SetConfig+0x40a>
		switch (clocksource) {
 8002a66:	7ffb      	ldrb	r3, [r7, #31]
 8002a68:	2b08      	cmp	r3, #8
 8002a6a:	d828      	bhi.n	8002abe <UART_SetConfig+0x3aa>
 8002a6c:	a201      	add	r2, pc, #4	; (adr r2, 8002a74 <UART_SetConfig+0x360>)
 8002a6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a72:	bf00      	nop
 8002a74:	08002a99 	.word	0x08002a99
 8002a78:	08002aa1 	.word	0x08002aa1
 8002a7c:	08002aa9 	.word	0x08002aa9
 8002a80:	08002abf 	.word	0x08002abf
 8002a84:	08002aaf 	.word	0x08002aaf
 8002a88:	08002abf 	.word	0x08002abf
 8002a8c:	08002abf 	.word	0x08002abf
 8002a90:	08002abf 	.word	0x08002abf
 8002a94:	08002ab7 	.word	0x08002ab7
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8002a98:	f7ff f856 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002a9c:	61b8      	str	r0, [r7, #24]
			break;
 8002a9e:	e013      	b.n	8002ac8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8002aa0:	f7ff f866 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002aa4:	61b8      	str	r0, [r7, #24]
			break;
 8002aa6:	e00f      	b.n	8002ac8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8002aa8:	4b4b      	ldr	r3, [pc, #300]	; (8002bd8 <UART_SetConfig+0x4c4>)
 8002aaa:	61bb      	str	r3, [r7, #24]
			break;
 8002aac:	e00c      	b.n	8002ac8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8002aae:	f7fe ff79 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8002ab2:	61b8      	str	r0, [r7, #24]
			break;
 8002ab4:	e008      	b.n	8002ac8 <UART_SetConfig+0x3b4>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8002ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002aba:	61bb      	str	r3, [r7, #24]
			break;
 8002abc:	e004      	b.n	8002ac8 <UART_SetConfig+0x3b4>
		default:
			pclk = 0U;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	77bb      	strb	r3, [r7, #30]
			break;
 8002ac6:	bf00      	nop
		}

		/* USARTDIV must be greater than or equal to 0d16 */
		if (pclk != 0U) {
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d074      	beq.n	8002bb8 <UART_SetConfig+0x4a4>
			usartdiv = (uint32_t) (UART_DIV_SAMPLING8(pclk,
 8002ace:	69bb      	ldr	r3, [r7, #24]
 8002ad0:	005a      	lsls	r2, r3, #1
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	085b      	lsrs	r3, r3, #1
 8002ad8:	441a      	add	r2, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	685b      	ldr	r3, [r3, #4]
 8002ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ae2:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	2b0f      	cmp	r3, #15
 8002ae8:	d916      	bls.n	8002b18 <UART_SetConfig+0x404>
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002af0:	d212      	bcs.n	8002b18 <UART_SetConfig+0x404>
				brrtemp = (uint16_t) (usartdiv & 0xFFF0U);
 8002af2:	693b      	ldr	r3, [r7, #16]
 8002af4:	b29b      	uxth	r3, r3
 8002af6:	f023 030f 	bic.w	r3, r3, #15
 8002afa:	81fb      	strh	r3, [r7, #14]
				brrtemp |= (uint16_t) ((usartdiv & (uint16_t) 0x000FU) >> 1U);
 8002afc:	693b      	ldr	r3, [r7, #16]
 8002afe:	085b      	lsrs	r3, r3, #1
 8002b00:	b29b      	uxth	r3, r3
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	b29a      	uxth	r2, r3
 8002b08:	89fb      	ldrh	r3, [r7, #14]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	81fb      	strh	r3, [r7, #14]
				huart->Instance->BRR = brrtemp;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	89fa      	ldrh	r2, [r7, #14]
 8002b14:	60da      	str	r2, [r3, #12]
 8002b16:	e04f      	b.n	8002bb8 <UART_SetConfig+0x4a4>
			} else {
				ret = HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	77bb      	strb	r3, [r7, #30]
 8002b1c:	e04c      	b.n	8002bb8 <UART_SetConfig+0x4a4>
			}
		}
	} else {
		switch (clocksource) {
 8002b1e:	7ffb      	ldrb	r3, [r7, #31]
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d828      	bhi.n	8002b76 <UART_SetConfig+0x462>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x418>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b51 	.word	0x08002b51
 8002b30:	08002b59 	.word	0x08002b59
 8002b34:	08002b61 	.word	0x08002b61
 8002b38:	08002b77 	.word	0x08002b77
 8002b3c:	08002b67 	.word	0x08002b67
 8002b40:	08002b77 	.word	0x08002b77
 8002b44:	08002b77 	.word	0x08002b77
 8002b48:	08002b77 	.word	0x08002b77
 8002b4c:	08002b6f 	.word	0x08002b6f
		case UART_CLOCKSOURCE_PCLK1:
			pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7fe fffa 	bl	8001b48 <HAL_RCC_GetPCLK1Freq>
 8002b54:	61b8      	str	r0, [r7, #24]
			break;
 8002b56:	e013      	b.n	8002b80 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_PCLK2:
			pclk = HAL_RCC_GetPCLK2Freq();
 8002b58:	f7ff f80a 	bl	8001b70 <HAL_RCC_GetPCLK2Freq>
 8002b5c:	61b8      	str	r0, [r7, #24]
			break;
 8002b5e:	e00f      	b.n	8002b80 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_HSI:
			pclk = (uint32_t) HSI_VALUE;
 8002b60:	4b1d      	ldr	r3, [pc, #116]	; (8002bd8 <UART_SetConfig+0x4c4>)
 8002b62:	61bb      	str	r3, [r7, #24]
			break;
 8002b64:	e00c      	b.n	8002b80 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_SYSCLK:
			pclk = HAL_RCC_GetSysClockFreq();
 8002b66:	f7fe ff1d 	bl	80019a4 <HAL_RCC_GetSysClockFreq>
 8002b6a:	61b8      	str	r0, [r7, #24]
			break;
 8002b6c:	e008      	b.n	8002b80 <UART_SetConfig+0x46c>
		case UART_CLOCKSOURCE_LSE:
			pclk = (uint32_t) LSE_VALUE;
 8002b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b72:	61bb      	str	r3, [r7, #24]
			break;
 8002b74:	e004      	b.n	8002b80 <UART_SetConfig+0x46c>
		default:
			pclk = 0U;
 8002b76:	2300      	movs	r3, #0
 8002b78:	61bb      	str	r3, [r7, #24]
			ret = HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	77bb      	strb	r3, [r7, #30]
			break;
 8002b7e:	bf00      	nop
		}

		if (pclk != 0U) {
 8002b80:	69bb      	ldr	r3, [r7, #24]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d018      	beq.n	8002bb8 <UART_SetConfig+0x4a4>
			/* USARTDIV must be greater than or equal to 0d16 */
			usartdiv = (uint32_t) (UART_DIV_SAMPLING16(pclk,
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	685b      	ldr	r3, [r3, #4]
 8002b8a:	085a      	lsrs	r2, r3, #1
 8002b8c:	69bb      	ldr	r3, [r7, #24]
 8002b8e:	441a      	add	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b98:	613b      	str	r3, [r7, #16]
					huart->Init.BaudRate));
			if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX)) {
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	2b0f      	cmp	r3, #15
 8002b9e:	d909      	bls.n	8002bb4 <UART_SetConfig+0x4a0>
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ba6:	d205      	bcs.n	8002bb4 <UART_SetConfig+0x4a0>
				huart->Instance->BRR = (uint16_t) usartdiv;
 8002ba8:	693b      	ldr	r3, [r7, #16]
 8002baa:	b29a      	uxth	r2, r3
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	e001      	b.n	8002bb8 <UART_SetConfig+0x4a4>
			} else {
				ret = HAL_ERROR;
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	77bb      	strb	r3, [r7, #30]
			}
		}
	}

	/* Clear ISR function pointers */
	huart->RxISR = NULL;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	669a      	str	r2, [r3, #104]	; 0x68
	huart->TxISR = NULL;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	66da      	str	r2, [r3, #108]	; 0x6c

	return ret;
 8002bc4:	7fbb      	ldrb	r3, [r7, #30]
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3720      	adds	r7, #32
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40007c00 	.word	0x40007c00
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	00f42400 	.word	0x00f42400

08002bdc <UART_AdvFeatureConfig>:
/**
 * @brief Configure the UART peripheral advanced features.
 * @param huart UART handle.
 * @retval None
 */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart) {
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
	/* Check whether the set of advanced features to configure is properly set */
	assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

	/* if required, configure TX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be8:	f003 0301 	and.w	r3, r3, #1
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d00a      	beq.n	8002c06 <UART_AdvFeatureConfig+0x2a>
			UART_ADVFEATURE_TXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV,
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	430a      	orrs	r2, r1
 8002c04:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.TxPinLevelInvert);
	}

	/* if required, configure RX pin active level inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c0a:	f003 0302 	and.w	r3, r3, #2
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d00a      	beq.n	8002c28 <UART_AdvFeatureConfig+0x4c>
			UART_ADVFEATURE_RXINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV,
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	685b      	ldr	r3, [r3, #4]
 8002c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.RxPinLevelInvert);
	}

	/* if required, configure data inversion */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d00a      	beq.n	8002c4a <UART_AdvFeatureConfig+0x6e>
			UART_ADVFEATURE_DATAINVERT_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV,
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	685b      	ldr	r3, [r3, #4]
 8002c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	430a      	orrs	r2, r1
 8002c48:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.DataInvert);
	}

	/* if required, configure RX/TX pins swap */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c4e:	f003 0308 	and.w	r3, r3, #8
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00a      	beq.n	8002c6c <UART_AdvFeatureConfig+0x90>
			UART_ADVFEATURE_SWAP_INIT)) {
		assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP,
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	430a      	orrs	r2, r1
 8002c6a:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.Swap);
	}

	/* if required, configure RX overrun detection disabling */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d00a      	beq.n	8002c8e <UART_AdvFeatureConfig+0xb2>
			UART_ADVFEATURE_RXOVERRUNDISABLE_INIT)) {
		assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS,
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	689b      	ldr	r3, [r3, #8]
 8002c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.OverrunDisable);
	}

	/* if required, configure DMA disabling on reception error */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c92:	f003 0320 	and.w	r3, r3, #32
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d00a      	beq.n	8002cb0 <UART_AdvFeatureConfig+0xd4>
			UART_ADVFEATURE_DMADISABLEONERROR_INIT)) {
		assert_param(
				IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
		MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE,
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	430a      	orrs	r2, r1
 8002cae:	609a      	str	r2, [r3, #8]
				huart->AdvancedInit.DMADisableonRxError);
	}

	/* if required, configure auto Baud rate detection scheme */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d01a      	beq.n	8002cf2 <UART_AdvFeatureConfig+0x116>
			UART_ADVFEATURE_AUTOBAUDRATE_INIT)) {
		assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
		assert_param(
				IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN,
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.AutoBaudRateEnable);
		/* set auto Baudrate detection parameters if detection is enabled */
		if (huart->AdvancedInit.AutoBaudRateEnable
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002cda:	d10a      	bne.n	8002cf2 <UART_AdvFeatureConfig+0x116>
				== UART_ADVFEATURE_AUTOBAUDRATE_ENABLE) {
			assert_param(
					IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
			MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE,
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	430a      	orrs	r2, r1
 8002cf0:	605a      	str	r2, [r3, #4]
					huart->AdvancedInit.AutoBaudRateMode);
		}
	}

	/* if required, configure MSB first on communication line */
	if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit,
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00a      	beq.n	8002d14 <UART_AdvFeatureConfig+0x138>
			UART_ADVFEATURE_MSBFIRST_INIT)) {
		assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
		MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST,
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	430a      	orrs	r2, r1
 8002d12:	605a      	str	r2, [r3, #4]
				huart->AdvancedInit.MSBFirst);
	}
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr

08002d20 <UART_CheckIdleState>:
/**
 * @brief Check the UART Idle State.
 * @param huart UART handle.
 * @retval HAL status
 */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart) {
 8002d20:	b580      	push	{r7, lr}
 8002d22:	b086      	sub	sp, #24
 8002d24:	af02      	add	r7, sp, #8
 8002d26:	6078      	str	r0, [r7, #4]
	uint32_t tickstart;

	/* Initialize the UART ErrorCode */
	huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

	/* Init tickstart for timeout management */
	tickstart = HAL_GetTick();
 8002d30:	f7fd ffc2 	bl	8000cb8 <HAL_GetTick>
 8002d34:	60f8      	str	r0, [r7, #12]

	/* Check if the Transmitter is enabled */
	if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE) {
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f003 0308 	and.w	r3, r3, #8
 8002d40:	2b08      	cmp	r3, #8
 8002d42:	d10e      	bne.n	8002d62 <UART_CheckIdleState+0x42>
		/* Wait until TEACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET,
 8002d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d48:	9300      	str	r3, [sp, #0]
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f831 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 8002d58:	4603      	mov	r3, r0
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d001      	beq.n	8002d62 <UART_CheckIdleState+0x42>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e027      	b.n	8002db2 <UART_CheckIdleState+0x92>
		}
	}
#if defined(USART_ISR_REACK)

	/* Check if the Receiver is enabled */
	if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE) {
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b04      	cmp	r3, #4
 8002d6e:	d10e      	bne.n	8002d8e <UART_CheckIdleState+0x6e>
		/* Wait until REACK flag is set */
		if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET,
 8002d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f000 f81b 	bl	8002dba <UART_WaitOnFlagUntilTimeout>
 8002d84:	4603      	mov	r3, r0
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d001      	beq.n	8002d8e <UART_CheckIdleState+0x6e>
				tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK) {
			/* Timeout occurred */
			return HAL_TIMEOUT;
 8002d8a:	2303      	movs	r3, #3
 8002d8c:	e011      	b.n	8002db2 <UART_CheckIdleState+0x92>
		}
	}
#endif /* USART_ISR_REACK */

	/* Initialize the UART State */
	huart->gState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	67da      	str	r2, [r3, #124]	; 0x7c
	huart->RxState = HAL_UART_STATE_READY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2220      	movs	r2, #32
 8002d98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2200      	movs	r2, #0
 8002da0:	661a      	str	r2, [r3, #96]	; 0x60
	huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	665a      	str	r2, [r3, #100]	; 0x64

	__HAL_UNLOCK(huart);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

	return HAL_OK;
 8002db0:	2300      	movs	r3, #0
}
 8002db2:	4618      	mov	r0, r3
 8002db4:	3710      	adds	r7, #16
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <UART_WaitOnFlagUntilTimeout>:
 * @param Tickstart Tick start value
 * @param Timeout   Timeout duration
 * @retval HAL status
 */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart,
		uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout) {
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b09c      	sub	sp, #112	; 0x70
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	60f8      	str	r0, [r7, #12]
 8002dc2:	60b9      	str	r1, [r7, #8]
 8002dc4:	603b      	str	r3, [r7, #0]
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	71fb      	strb	r3, [r7, #7]
	/* Wait until flag is set */
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8002dca:	e0a7      	b.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x162>
		/* Check for the Timeout */
		if (Timeout != HAL_MAX_DELAY) {
 8002dcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	f000 80a3 	beq.w	8002f1c <UART_WaitOnFlagUntilTimeout+0x162>
			if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) {
 8002dd6:	f7fd ff6f 	bl	8000cb8 <HAL_GetTick>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	1ad3      	subs	r3, r2, r3
 8002de0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002de2:	429a      	cmp	r2, r3
 8002de4:	d302      	bcc.n	8002dec <UART_WaitOnFlagUntilTimeout+0x32>
 8002de6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d13f      	bne.n	8002e6c <UART_WaitOnFlagUntilTimeout+0xb2>
				/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
				 interrupts for the interrupt process */
				ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	653b      	str	r3, [r7, #80]	; 0x50
 \return        value of type uint32_t at (*ptr)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002df4:	e853 3f00 	ldrex	r3, [r3]
 8002df8:	64fb      	str	r3, [r7, #76]	; 0x4c
	return (result);
 8002dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002dfc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002e00:	667b      	str	r3, [r7, #100]	; 0x64
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	461a      	mov	r2, r3
 8002e08:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002e0a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002e0c:	65ba      	str	r2, [r7, #88]	; 0x58
 \return          1  Function failed
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr) {
	uint32_t result;

	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e0e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002e10:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002e12:	e841 2300 	strex	r3, r2, [r1]
 8002e16:	657b      	str	r3, [r7, #84]	; 0x54
	return (result);
 8002e18:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d1e6      	bne.n	8002dec <UART_WaitOnFlagUntilTimeout+0x32>
						(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
				ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	3308      	adds	r3, #8
 8002e24:	63fb      	str	r3, [r7, #60]	; 0x3c
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e28:	e853 3f00 	ldrex	r3, [r3]
 8002e2c:	63bb      	str	r3, [r7, #56]	; 0x38
	return (result);
 8002e2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e30:	f023 0301 	bic.w	r3, r3, #1
 8002e34:	663b      	str	r3, [r7, #96]	; 0x60
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	3308      	adds	r3, #8
 8002e3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002e3e:	64ba      	str	r2, [r7, #72]	; 0x48
 8002e40:	647b      	str	r3, [r7, #68]	; 0x44
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002e44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	643b      	str	r3, [r7, #64]	; 0x40
	return (result);
 8002e4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e5      	bne.n	8002e1e <UART_WaitOnFlagUntilTimeout+0x64>

				huart->gState = HAL_UART_STATE_READY;
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	2220      	movs	r2, #32
 8002e56:	67da      	str	r2, [r3, #124]	; 0x7c
				huart->RxState = HAL_UART_STATE_READY;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	2220      	movs	r2, #32
 8002e5c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

				__HAL_UNLOCK(huart);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	2200      	movs	r2, #0
 8002e64:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

				return HAL_TIMEOUT;
 8002e68:	2303      	movs	r3, #3
 8002e6a:	e068      	b.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x184>
			}

			if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) {
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d050      	beq.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x162>
				if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET) {
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	69db      	ldr	r3, [r3, #28]
 8002e80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e88:	d148      	bne.n	8002f1c <UART_WaitOnFlagUntilTimeout+0x162>
					/* Clear Receiver Timeout flag*/
					__HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002e92:	621a      	str	r2, [r3, #32]

					/* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
					 interrupts for the interrupt process */
					ATOMIC_CLEAR_BIT(huart->Instance->CR1,
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	62bb      	str	r3, [r7, #40]	; 0x28
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e9c:	e853 3f00 	ldrex	r3, [r3]
 8002ea0:	627b      	str	r3, [r7, #36]	; 0x24
	return (result);
 8002ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ea8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	461a      	mov	r2, r3
 8002eb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8002eb4:	633a      	str	r2, [r7, #48]	; 0x30
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eb6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002eb8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002eba:	e841 2300 	strex	r3, r2, [r1]
 8002ebe:	62fb      	str	r3, [r7, #44]	; 0x2c
	return (result);
 8002ec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1e6      	bne.n	8002e94 <UART_WaitOnFlagUntilTimeout+0xda>
							(USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
					ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	617b      	str	r3, [r7, #20]
	__ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	697b      	ldr	r3, [r7, #20]
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	613b      	str	r3, [r7, #16]
	return (result);
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	66bb      	str	r3, [r7, #104]	; 0x68
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	3308      	adds	r3, #8
 8002ee4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002ee6:	623a      	str	r2, [r7, #32]
 8002ee8:	61fb      	str	r3, [r7, #28]
	__ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eea:	69f9      	ldr	r1, [r7, #28]
 8002eec:	6a3a      	ldr	r2, [r7, #32]
 8002eee:	e841 2300 	strex	r3, r2, [r1]
 8002ef2:	61bb      	str	r3, [r7, #24]
	return (result);
 8002ef4:	69bb      	ldr	r3, [r7, #24]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d1e5      	bne.n	8002ec6 <UART_WaitOnFlagUntilTimeout+0x10c>

					huart->gState = HAL_UART_STATE_READY;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	2220      	movs	r2, #32
 8002efe:	67da      	str	r2, [r3, #124]	; 0x7c
					huart->RxState = HAL_UART_STATE_READY;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	2220      	movs	r2, #32
 8002f04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
					huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	2220      	movs	r2, #32
 8002f0c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

					/* Process Unlocked */
					__HAL_UNLOCK(huart);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

					return HAL_TIMEOUT;
 8002f18:	2303      	movs	r3, #3
 8002f1a:	e010      	b.n	8002f3e <UART_WaitOnFlagUntilTimeout+0x184>
	while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status) {
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	69da      	ldr	r2, [r3, #28]
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	4013      	ands	r3, r2
 8002f26:	68ba      	ldr	r2, [r7, #8]
 8002f28:	429a      	cmp	r2, r3
 8002f2a:	bf0c      	ite	eq
 8002f2c:	2301      	moveq	r3, #1
 8002f2e:	2300      	movne	r3, #0
 8002f30:	b2db      	uxtb	r3, r3
 8002f32:	461a      	mov	r2, r3
 8002f34:	79fb      	ldrb	r3, [r7, #7]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	f43f af48 	beq.w	8002dcc <UART_WaitOnFlagUntilTimeout+0x12>
				}
			}
		}
	}
	return HAL_OK;
 8002f3c:	2300      	movs	r3, #0
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	3770      	adds	r7, #112	; 0x70
 8002f42:	46bd      	mov	sp, r7
 8002f44:	bd80      	pop	{r7, pc}
	...

08002f48 <__libc_init_array>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	4d0d      	ldr	r5, [pc, #52]	; (8002f80 <__libc_init_array+0x38>)
 8002f4c:	4c0d      	ldr	r4, [pc, #52]	; (8002f84 <__libc_init_array+0x3c>)
 8002f4e:	1b64      	subs	r4, r4, r5
 8002f50:	10a4      	asrs	r4, r4, #2
 8002f52:	2600      	movs	r6, #0
 8002f54:	42a6      	cmp	r6, r4
 8002f56:	d109      	bne.n	8002f6c <__libc_init_array+0x24>
 8002f58:	4d0b      	ldr	r5, [pc, #44]	; (8002f88 <__libc_init_array+0x40>)
 8002f5a:	4c0c      	ldr	r4, [pc, #48]	; (8002f8c <__libc_init_array+0x44>)
 8002f5c:	f000 f82e 	bl	8002fbc <_init>
 8002f60:	1b64      	subs	r4, r4, r5
 8002f62:	10a4      	asrs	r4, r4, #2
 8002f64:	2600      	movs	r6, #0
 8002f66:	42a6      	cmp	r6, r4
 8002f68:	d105      	bne.n	8002f76 <__libc_init_array+0x2e>
 8002f6a:	bd70      	pop	{r4, r5, r6, pc}
 8002f6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f70:	4798      	blx	r3
 8002f72:	3601      	adds	r6, #1
 8002f74:	e7ee      	b.n	8002f54 <__libc_init_array+0xc>
 8002f76:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f7a:	4798      	blx	r3
 8002f7c:	3601      	adds	r6, #1
 8002f7e:	e7f2      	b.n	8002f66 <__libc_init_array+0x1e>
 8002f80:	08003098 	.word	0x08003098
 8002f84:	08003098 	.word	0x08003098
 8002f88:	08003098 	.word	0x08003098
 8002f8c:	0800309c 	.word	0x0800309c

08002f90 <memcpy>:
 8002f90:	440a      	add	r2, r1
 8002f92:	4291      	cmp	r1, r2
 8002f94:	f100 33ff 	add.w	r3, r0, #4294967295
 8002f98:	d100      	bne.n	8002f9c <memcpy+0xc>
 8002f9a:	4770      	bx	lr
 8002f9c:	b510      	push	{r4, lr}
 8002f9e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002fa2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002fa6:	4291      	cmp	r1, r2
 8002fa8:	d1f9      	bne.n	8002f9e <memcpy+0xe>
 8002faa:	bd10      	pop	{r4, pc}

08002fac <memset>:
 8002fac:	4402      	add	r2, r0
 8002fae:	4603      	mov	r3, r0
 8002fb0:	4293      	cmp	r3, r2
 8002fb2:	d100      	bne.n	8002fb6 <memset+0xa>
 8002fb4:	4770      	bx	lr
 8002fb6:	f803 1b01 	strb.w	r1, [r3], #1
 8002fba:	e7f9      	b.n	8002fb0 <memset+0x4>

08002fbc <_init>:
 8002fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fbe:	bf00      	nop
 8002fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fc2:	bc08      	pop	{r3}
 8002fc4:	469e      	mov	lr, r3
 8002fc6:	4770      	bx	lr

08002fc8 <_fini>:
 8002fc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002fca:	bf00      	nop
 8002fcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002fce:	bc08      	pop	{r3}
 8002fd0:	469e      	mov	lr, r3
 8002fd2:	4770      	bx	lr
