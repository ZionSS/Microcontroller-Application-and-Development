
mad_project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007620  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002a8  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007ac8  08007ac8  000201c8  2**0
                  CONTENTS
  4 .ARM          00000008  08007ac8  08007ac8  00017ac8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007ad0  08007ad0  000201c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007ad0  08007ad0  00017ad0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007ad4  08007ad4  00017ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  20000000  08007ad8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000088  08007b60  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000128  08007c00  00020128  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000844  200001c8  08007ca0  000201c8  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000a0c  08007ca0  00020a0c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001c9cf  00000000  00000000  000201f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003acc  00000000  00000000  0003cbc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001668  00000000  00000000  00040698  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000014d0  00000000  00000000  00041d00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002bb6a  00000000  00000000  000431d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c6c3  00000000  00000000  0006ed3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00107a8d  00000000  00000000  0008b3fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00192e8a  2**0
                  CONTENTS, READONLY
 22 .debug_frame  000061d4  00000000  00000000  00192edc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001c8 	.word	0x200001c8
 800021c:	00000000 	.word	0x00000000
 8000220:	08007808 	.word	0x08007808

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001cc 	.word	0x200001cc
 800023c:	08007808 	.word	0x08007808

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <__aeabi_uldivmod>:
 80002e0:	b953      	cbnz	r3, 80002f8 <__aeabi_uldivmod+0x18>
 80002e2:	b94a      	cbnz	r2, 80002f8 <__aeabi_uldivmod+0x18>
 80002e4:	2900      	cmp	r1, #0
 80002e6:	bf08      	it	eq
 80002e8:	2800      	cmpeq	r0, #0
 80002ea:	bf1c      	itt	ne
 80002ec:	f04f 31ff 	movne.w	r1, #4294967295
 80002f0:	f04f 30ff 	movne.w	r0, #4294967295
 80002f4:	f000 b974 	b.w	80005e0 <__aeabi_idiv0>
 80002f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000300:	f000 f806 	bl	8000310 <__udivmoddi4>
 8000304:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000308:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800030c:	b004      	add	sp, #16
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9d08      	ldr	r5, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	468e      	mov	lr, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14d      	bne.n	80003ba <__udivmoddi4+0xaa>
 800031e:	428a      	cmp	r2, r1
 8000320:	4694      	mov	ip, r2
 8000322:	d969      	bls.n	80003f8 <__udivmoddi4+0xe8>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b152      	cbz	r2, 8000340 <__udivmoddi4+0x30>
 800032a:	fa01 f302 	lsl.w	r3, r1, r2
 800032e:	f1c2 0120 	rsb	r1, r2, #32
 8000332:	fa20 f101 	lsr.w	r1, r0, r1
 8000336:	fa0c fc02 	lsl.w	ip, ip, r2
 800033a:	ea41 0e03 	orr.w	lr, r1, r3
 800033e:	4094      	lsls	r4, r2
 8000340:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000344:	0c21      	lsrs	r1, r4, #16
 8000346:	fbbe f6f8 	udiv	r6, lr, r8
 800034a:	fa1f f78c 	uxth.w	r7, ip
 800034e:	fb08 e316 	mls	r3, r8, r6, lr
 8000352:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000356:	fb06 f107 	mul.w	r1, r6, r7
 800035a:	4299      	cmp	r1, r3
 800035c:	d90a      	bls.n	8000374 <__udivmoddi4+0x64>
 800035e:	eb1c 0303 	adds.w	r3, ip, r3
 8000362:	f106 30ff 	add.w	r0, r6, #4294967295
 8000366:	f080 811f 	bcs.w	80005a8 <__udivmoddi4+0x298>
 800036a:	4299      	cmp	r1, r3
 800036c:	f240 811c 	bls.w	80005a8 <__udivmoddi4+0x298>
 8000370:	3e02      	subs	r6, #2
 8000372:	4463      	add	r3, ip
 8000374:	1a5b      	subs	r3, r3, r1
 8000376:	b2a4      	uxth	r4, r4
 8000378:	fbb3 f0f8 	udiv	r0, r3, r8
 800037c:	fb08 3310 	mls	r3, r8, r0, r3
 8000380:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000384:	fb00 f707 	mul.w	r7, r0, r7
 8000388:	42a7      	cmp	r7, r4
 800038a:	d90a      	bls.n	80003a2 <__udivmoddi4+0x92>
 800038c:	eb1c 0404 	adds.w	r4, ip, r4
 8000390:	f100 33ff 	add.w	r3, r0, #4294967295
 8000394:	f080 810a 	bcs.w	80005ac <__udivmoddi4+0x29c>
 8000398:	42a7      	cmp	r7, r4
 800039a:	f240 8107 	bls.w	80005ac <__udivmoddi4+0x29c>
 800039e:	4464      	add	r4, ip
 80003a0:	3802      	subs	r0, #2
 80003a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003a6:	1be4      	subs	r4, r4, r7
 80003a8:	2600      	movs	r6, #0
 80003aa:	b11d      	cbz	r5, 80003b4 <__udivmoddi4+0xa4>
 80003ac:	40d4      	lsrs	r4, r2
 80003ae:	2300      	movs	r3, #0
 80003b0:	e9c5 4300 	strd	r4, r3, [r5]
 80003b4:	4631      	mov	r1, r6
 80003b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ba:	428b      	cmp	r3, r1
 80003bc:	d909      	bls.n	80003d2 <__udivmoddi4+0xc2>
 80003be:	2d00      	cmp	r5, #0
 80003c0:	f000 80ef 	beq.w	80005a2 <__udivmoddi4+0x292>
 80003c4:	2600      	movs	r6, #0
 80003c6:	e9c5 0100 	strd	r0, r1, [r5]
 80003ca:	4630      	mov	r0, r6
 80003cc:	4631      	mov	r1, r6
 80003ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003d2:	fab3 f683 	clz	r6, r3
 80003d6:	2e00      	cmp	r6, #0
 80003d8:	d14a      	bne.n	8000470 <__udivmoddi4+0x160>
 80003da:	428b      	cmp	r3, r1
 80003dc:	d302      	bcc.n	80003e4 <__udivmoddi4+0xd4>
 80003de:	4282      	cmp	r2, r0
 80003e0:	f200 80f9 	bhi.w	80005d6 <__udivmoddi4+0x2c6>
 80003e4:	1a84      	subs	r4, r0, r2
 80003e6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ea:	2001      	movs	r0, #1
 80003ec:	469e      	mov	lr, r3
 80003ee:	2d00      	cmp	r5, #0
 80003f0:	d0e0      	beq.n	80003b4 <__udivmoddi4+0xa4>
 80003f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003f6:	e7dd      	b.n	80003b4 <__udivmoddi4+0xa4>
 80003f8:	b902      	cbnz	r2, 80003fc <__udivmoddi4+0xec>
 80003fa:	deff      	udf	#255	; 0xff
 80003fc:	fab2 f282 	clz	r2, r2
 8000400:	2a00      	cmp	r2, #0
 8000402:	f040 8092 	bne.w	800052a <__udivmoddi4+0x21a>
 8000406:	eba1 010c 	sub.w	r1, r1, ip
 800040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800040e:	fa1f fe8c 	uxth.w	lr, ip
 8000412:	2601      	movs	r6, #1
 8000414:	0c20      	lsrs	r0, r4, #16
 8000416:	fbb1 f3f7 	udiv	r3, r1, r7
 800041a:	fb07 1113 	mls	r1, r7, r3, r1
 800041e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000422:	fb0e f003 	mul.w	r0, lr, r3
 8000426:	4288      	cmp	r0, r1
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x12c>
 800042a:	eb1c 0101 	adds.w	r1, ip, r1
 800042e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x12a>
 8000434:	4288      	cmp	r0, r1
 8000436:	f200 80cb 	bhi.w	80005d0 <__udivmoddi4+0x2c0>
 800043a:	4643      	mov	r3, r8
 800043c:	1a09      	subs	r1, r1, r0
 800043e:	b2a4      	uxth	r4, r4
 8000440:	fbb1 f0f7 	udiv	r0, r1, r7
 8000444:	fb07 1110 	mls	r1, r7, r0, r1
 8000448:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800044c:	fb0e fe00 	mul.w	lr, lr, r0
 8000450:	45a6      	cmp	lr, r4
 8000452:	d908      	bls.n	8000466 <__udivmoddi4+0x156>
 8000454:	eb1c 0404 	adds.w	r4, ip, r4
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d202      	bcs.n	8000464 <__udivmoddi4+0x154>
 800045e:	45a6      	cmp	lr, r4
 8000460:	f200 80bb 	bhi.w	80005da <__udivmoddi4+0x2ca>
 8000464:	4608      	mov	r0, r1
 8000466:	eba4 040e 	sub.w	r4, r4, lr
 800046a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800046e:	e79c      	b.n	80003aa <__udivmoddi4+0x9a>
 8000470:	f1c6 0720 	rsb	r7, r6, #32
 8000474:	40b3      	lsls	r3, r6
 8000476:	fa22 fc07 	lsr.w	ip, r2, r7
 800047a:	ea4c 0c03 	orr.w	ip, ip, r3
 800047e:	fa20 f407 	lsr.w	r4, r0, r7
 8000482:	fa01 f306 	lsl.w	r3, r1, r6
 8000486:	431c      	orrs	r4, r3
 8000488:	40f9      	lsrs	r1, r7
 800048a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800048e:	fa00 f306 	lsl.w	r3, r0, r6
 8000492:	fbb1 f8f9 	udiv	r8, r1, r9
 8000496:	0c20      	lsrs	r0, r4, #16
 8000498:	fa1f fe8c 	uxth.w	lr, ip
 800049c:	fb09 1118 	mls	r1, r9, r8, r1
 80004a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004a4:	fb08 f00e 	mul.w	r0, r8, lr
 80004a8:	4288      	cmp	r0, r1
 80004aa:	fa02 f206 	lsl.w	r2, r2, r6
 80004ae:	d90b      	bls.n	80004c8 <__udivmoddi4+0x1b8>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004b8:	f080 8088 	bcs.w	80005cc <__udivmoddi4+0x2bc>
 80004bc:	4288      	cmp	r0, r1
 80004be:	f240 8085 	bls.w	80005cc <__udivmoddi4+0x2bc>
 80004c2:	f1a8 0802 	sub.w	r8, r8, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	1a09      	subs	r1, r1, r0
 80004ca:	b2a4      	uxth	r4, r4
 80004cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004d0:	fb09 1110 	mls	r1, r9, r0, r1
 80004d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004dc:	458e      	cmp	lr, r1
 80004de:	d908      	bls.n	80004f2 <__udivmoddi4+0x1e2>
 80004e0:	eb1c 0101 	adds.w	r1, ip, r1
 80004e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004e8:	d26c      	bcs.n	80005c4 <__udivmoddi4+0x2b4>
 80004ea:	458e      	cmp	lr, r1
 80004ec:	d96a      	bls.n	80005c4 <__udivmoddi4+0x2b4>
 80004ee:	3802      	subs	r0, #2
 80004f0:	4461      	add	r1, ip
 80004f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004f6:	fba0 9402 	umull	r9, r4, r0, r2
 80004fa:	eba1 010e 	sub.w	r1, r1, lr
 80004fe:	42a1      	cmp	r1, r4
 8000500:	46c8      	mov	r8, r9
 8000502:	46a6      	mov	lr, r4
 8000504:	d356      	bcc.n	80005b4 <__udivmoddi4+0x2a4>
 8000506:	d053      	beq.n	80005b0 <__udivmoddi4+0x2a0>
 8000508:	b15d      	cbz	r5, 8000522 <__udivmoddi4+0x212>
 800050a:	ebb3 0208 	subs.w	r2, r3, r8
 800050e:	eb61 010e 	sbc.w	r1, r1, lr
 8000512:	fa01 f707 	lsl.w	r7, r1, r7
 8000516:	fa22 f306 	lsr.w	r3, r2, r6
 800051a:	40f1      	lsrs	r1, r6
 800051c:	431f      	orrs	r7, r3
 800051e:	e9c5 7100 	strd	r7, r1, [r5]
 8000522:	2600      	movs	r6, #0
 8000524:	4631      	mov	r1, r6
 8000526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800052a:	f1c2 0320 	rsb	r3, r2, #32
 800052e:	40d8      	lsrs	r0, r3
 8000530:	fa0c fc02 	lsl.w	ip, ip, r2
 8000534:	fa21 f303 	lsr.w	r3, r1, r3
 8000538:	4091      	lsls	r1, r2
 800053a:	4301      	orrs	r1, r0
 800053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000540:	fa1f fe8c 	uxth.w	lr, ip
 8000544:	fbb3 f0f7 	udiv	r0, r3, r7
 8000548:	fb07 3610 	mls	r6, r7, r0, r3
 800054c:	0c0b      	lsrs	r3, r1, #16
 800054e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000552:	fb00 f60e 	mul.w	r6, r0, lr
 8000556:	429e      	cmp	r6, r3
 8000558:	fa04 f402 	lsl.w	r4, r4, r2
 800055c:	d908      	bls.n	8000570 <__udivmoddi4+0x260>
 800055e:	eb1c 0303 	adds.w	r3, ip, r3
 8000562:	f100 38ff 	add.w	r8, r0, #4294967295
 8000566:	d22f      	bcs.n	80005c8 <__udivmoddi4+0x2b8>
 8000568:	429e      	cmp	r6, r3
 800056a:	d92d      	bls.n	80005c8 <__udivmoddi4+0x2b8>
 800056c:	3802      	subs	r0, #2
 800056e:	4463      	add	r3, ip
 8000570:	1b9b      	subs	r3, r3, r6
 8000572:	b289      	uxth	r1, r1
 8000574:	fbb3 f6f7 	udiv	r6, r3, r7
 8000578:	fb07 3316 	mls	r3, r7, r6, r3
 800057c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000580:	fb06 f30e 	mul.w	r3, r6, lr
 8000584:	428b      	cmp	r3, r1
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x28a>
 8000588:	eb1c 0101 	adds.w	r1, ip, r1
 800058c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000590:	d216      	bcs.n	80005c0 <__udivmoddi4+0x2b0>
 8000592:	428b      	cmp	r3, r1
 8000594:	d914      	bls.n	80005c0 <__udivmoddi4+0x2b0>
 8000596:	3e02      	subs	r6, #2
 8000598:	4461      	add	r1, ip
 800059a:	1ac9      	subs	r1, r1, r3
 800059c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005a0:	e738      	b.n	8000414 <__udivmoddi4+0x104>
 80005a2:	462e      	mov	r6, r5
 80005a4:	4628      	mov	r0, r5
 80005a6:	e705      	b.n	80003b4 <__udivmoddi4+0xa4>
 80005a8:	4606      	mov	r6, r0
 80005aa:	e6e3      	b.n	8000374 <__udivmoddi4+0x64>
 80005ac:	4618      	mov	r0, r3
 80005ae:	e6f8      	b.n	80003a2 <__udivmoddi4+0x92>
 80005b0:	454b      	cmp	r3, r9
 80005b2:	d2a9      	bcs.n	8000508 <__udivmoddi4+0x1f8>
 80005b4:	ebb9 0802 	subs.w	r8, r9, r2
 80005b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005bc:	3801      	subs	r0, #1
 80005be:	e7a3      	b.n	8000508 <__udivmoddi4+0x1f8>
 80005c0:	4646      	mov	r6, r8
 80005c2:	e7ea      	b.n	800059a <__udivmoddi4+0x28a>
 80005c4:	4620      	mov	r0, r4
 80005c6:	e794      	b.n	80004f2 <__udivmoddi4+0x1e2>
 80005c8:	4640      	mov	r0, r8
 80005ca:	e7d1      	b.n	8000570 <__udivmoddi4+0x260>
 80005cc:	46d0      	mov	r8, sl
 80005ce:	e77b      	b.n	80004c8 <__udivmoddi4+0x1b8>
 80005d0:	3b02      	subs	r3, #2
 80005d2:	4461      	add	r1, ip
 80005d4:	e732      	b.n	800043c <__udivmoddi4+0x12c>
 80005d6:	4630      	mov	r0, r6
 80005d8:	e709      	b.n	80003ee <__udivmoddi4+0xde>
 80005da:	4464      	add	r4, ip
 80005dc:	3802      	subs	r0, #2
 80005de:	e742      	b.n	8000466 <__udivmoddi4+0x156>

080005e0 <__aeabi_idiv0>:
 80005e0:	4770      	bx	lr
 80005e2:	bf00      	nop

080005e4 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80005e4:	b580      	push	{r7, lr}
 80005e6:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <MX_ETH_Init+0x84>)
 80005ea:	4a20      	ldr	r2, [pc, #128]	; (800066c <MX_ETH_Init+0x88>)
 80005ec:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80005ee:	4b20      	ldr	r3, [pc, #128]	; (8000670 <MX_ETH_Init+0x8c>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <MX_ETH_Init+0x8c>)
 80005f6:	2280      	movs	r2, #128	; 0x80
 80005f8:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80005fa:	4b1d      	ldr	r3, [pc, #116]	; (8000670 <MX_ETH_Init+0x8c>)
 80005fc:	22e1      	movs	r2, #225	; 0xe1
 80005fe:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000600:	4b1b      	ldr	r3, [pc, #108]	; (8000670 <MX_ETH_Init+0x8c>)
 8000602:	2200      	movs	r2, #0
 8000604:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000606:	4b1a      	ldr	r3, [pc, #104]	; (8000670 <MX_ETH_Init+0x8c>)
 8000608:	2200      	movs	r2, #0
 800060a:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <MX_ETH_Init+0x8c>)
 800060e:	2200      	movs	r2, #0
 8000610:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000612:	4b15      	ldr	r3, [pc, #84]	; (8000668 <MX_ETH_Init+0x84>)
 8000614:	4a16      	ldr	r2, [pc, #88]	; (8000670 <MX_ETH_Init+0x8c>)
 8000616:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000618:	4b13      	ldr	r3, [pc, #76]	; (8000668 <MX_ETH_Init+0x84>)
 800061a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800061e:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <MX_ETH_Init+0x84>)
 8000622:	4a14      	ldr	r2, [pc, #80]	; (8000674 <MX_ETH_Init+0x90>)
 8000624:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000626:	4b10      	ldr	r3, [pc, #64]	; (8000668 <MX_ETH_Init+0x84>)
 8000628:	4a13      	ldr	r2, [pc, #76]	; (8000678 <MX_ETH_Init+0x94>)
 800062a:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800062c:	4b0e      	ldr	r3, [pc, #56]	; (8000668 <MX_ETH_Init+0x84>)
 800062e:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000632:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000634:	480c      	ldr	r0, [pc, #48]	; (8000668 <MX_ETH_Init+0x84>)
 8000636:	f001 ff8b 	bl	8002550 <HAL_ETH_Init>
 800063a:	4603      	mov	r3, r0
 800063c:	2b00      	cmp	r3, #0
 800063e:	d001      	beq.n	8000644 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000640:	f000 fde0 	bl	8001204 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000644:	2238      	movs	r2, #56	; 0x38
 8000646:	2100      	movs	r1, #0
 8000648:	480c      	ldr	r0, [pc, #48]	; (800067c <MX_ETH_Init+0x98>)
 800064a:	f006 fc67 	bl	8006f1c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800064e:	4b0b      	ldr	r3, [pc, #44]	; (800067c <MX_ETH_Init+0x98>)
 8000650:	2221      	movs	r2, #33	; 0x21
 8000652:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000654:	4b09      	ldr	r3, [pc, #36]	; (800067c <MX_ETH_Init+0x98>)
 8000656:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800065a:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800065c:	4b07      	ldr	r3, [pc, #28]	; (800067c <MX_ETH_Init+0x98>)
 800065e:	2200      	movs	r2, #0
 8000660:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000662:	bf00      	nop
 8000664:	bd80      	pop	{r7, pc}
 8000666:	bf00      	nop
 8000668:	2000021c 	.word	0x2000021c
 800066c:	40028000 	.word	0x40028000
 8000670:	200002cc 	.word	0x200002cc
 8000674:	20000128 	.word	0x20000128
 8000678:	20000088 	.word	0x20000088
 800067c:	200001e4 	.word	0x200001e4

08000680 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b08e      	sub	sp, #56	; 0x38
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	4a4e      	ldr	r2, [pc, #312]	; (80007d8 <HAL_ETH_MspInit+0x158>)
 800069e:	4293      	cmp	r3, r2
 80006a0:	f040 8096 	bne.w	80007d0 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 80006a4:	4b4d      	ldr	r3, [pc, #308]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a8:	4a4c      	ldr	r2, [pc, #304]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006aa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006ae:	6313      	str	r3, [r2, #48]	; 0x30
 80006b0:	4b4a      	ldr	r3, [pc, #296]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006b8:	623b      	str	r3, [r7, #32]
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	4b47      	ldr	r3, [pc, #284]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c0:	4a46      	ldr	r2, [pc, #280]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006c6:	6313      	str	r3, [r2, #48]	; 0x30
 80006c8:	4b44      	ldr	r3, [pc, #272]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006cc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80006d0:	61fb      	str	r3, [r7, #28]
 80006d2:	69fb      	ldr	r3, [r7, #28]
 80006d4:	4b41      	ldr	r3, [pc, #260]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d8:	4a40      	ldr	r2, [pc, #256]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006da:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80006de:	6313      	str	r3, [r2, #48]	; 0x30
 80006e0:	4b3e      	ldr	r3, [pc, #248]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80006e8:	61bb      	str	r3, [r7, #24]
 80006ea:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ec:	4b3b      	ldr	r3, [pc, #236]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006f0:	4a3a      	ldr	r2, [pc, #232]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006f2:	f043 0304 	orr.w	r3, r3, #4
 80006f6:	6313      	str	r3, [r2, #48]	; 0x30
 80006f8:	4b38      	ldr	r3, [pc, #224]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 80006fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006fc:	f003 0304 	and.w	r3, r3, #4
 8000700:	617b      	str	r3, [r7, #20]
 8000702:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000704:	4b35      	ldr	r3, [pc, #212]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 8000706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000708:	4a34      	ldr	r2, [pc, #208]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 800070a:	f043 0301 	orr.w	r3, r3, #1
 800070e:	6313      	str	r3, [r2, #48]	; 0x30
 8000710:	4b32      	ldr	r3, [pc, #200]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 8000712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000714:	f003 0301 	and.w	r3, r3, #1
 8000718:	613b      	str	r3, [r7, #16]
 800071a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800071c:	4b2f      	ldr	r3, [pc, #188]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 800071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000720:	4a2e      	ldr	r2, [pc, #184]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 8000722:	f043 0302 	orr.w	r3, r3, #2
 8000726:	6313      	str	r3, [r2, #48]	; 0x30
 8000728:	4b2c      	ldr	r3, [pc, #176]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 800072a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800072c:	f003 0302 	and.w	r3, r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000734:	4b29      	ldr	r3, [pc, #164]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 8000736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000738:	4a28      	ldr	r2, [pc, #160]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 800073a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800073e:	6313      	str	r3, [r2, #48]	; 0x30
 8000740:	4b26      	ldr	r3, [pc, #152]	; (80007dc <HAL_ETH_MspInit+0x15c>)
 8000742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000744:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000748:	60bb      	str	r3, [r7, #8]
 800074a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800074c:	2332      	movs	r3, #50	; 0x32
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000758:	2303      	movs	r3, #3
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800075c:	230b      	movs	r3, #11
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	4619      	mov	r1, r3
 8000766:	481e      	ldr	r0, [pc, #120]	; (80007e0 <HAL_ETH_MspInit+0x160>)
 8000768:	f002 fa18 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800076c:	2386      	movs	r3, #134	; 0x86
 800076e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000770:	2302      	movs	r3, #2
 8000772:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000774:	2300      	movs	r3, #0
 8000776:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000778:	2303      	movs	r3, #3
 800077a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800077c:	230b      	movs	r3, #11
 800077e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000780:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000784:	4619      	mov	r1, r3
 8000786:	4817      	ldr	r0, [pc, #92]	; (80007e4 <HAL_ETH_MspInit+0x164>)
 8000788:	f002 fa08 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800078c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000790:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000792:	2302      	movs	r3, #2
 8000794:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800079e:	230b      	movs	r3, #11
 80007a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80007a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a6:	4619      	mov	r1, r3
 80007a8:	480f      	ldr	r0, [pc, #60]	; (80007e8 <HAL_ETH_MspInit+0x168>)
 80007aa:	f002 f9f7 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80007ae:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80007b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b4:	2302      	movs	r3, #2
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2300      	movs	r3, #0
 80007ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007bc:	2303      	movs	r3, #3
 80007be:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80007c0:	230b      	movs	r3, #11
 80007c2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80007c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007c8:	4619      	mov	r1, r3
 80007ca:	4808      	ldr	r0, [pc, #32]	; (80007ec <HAL_ETH_MspInit+0x16c>)
 80007cc:	f002 f9e6 	bl	8002b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80007d0:	bf00      	nop
 80007d2:	3738      	adds	r7, #56	; 0x38
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40028000 	.word	0x40028000
 80007dc:	40023800 	.word	0x40023800
 80007e0:	40020800 	.word	0x40020800
 80007e4:	40020000 	.word	0x40020000
 80007e8:	40020400 	.word	0x40020400
 80007ec:	40021800 	.word	0x40021800

080007f0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b08e      	sub	sp, #56	; 0x38
 80007f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000806:	4bac      	ldr	r3, [pc, #688]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	4aab      	ldr	r2, [pc, #684]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6313      	str	r3, [r2, #48]	; 0x30
 8000812:	4ba9      	ldr	r3, [pc, #676]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	f003 0310 	and.w	r3, r3, #16
 800081a:	623b      	str	r3, [r7, #32]
 800081c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800081e:	4ba6      	ldr	r3, [pc, #664]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	4aa5      	ldr	r2, [pc, #660]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000824:	f043 0304 	orr.w	r3, r3, #4
 8000828:	6313      	str	r3, [r2, #48]	; 0x30
 800082a:	4ba3      	ldr	r3, [pc, #652]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	f003 0304 	and.w	r3, r3, #4
 8000832:	61fb      	str	r3, [r7, #28]
 8000834:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000836:	4ba0      	ldr	r3, [pc, #640]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	4a9f      	ldr	r2, [pc, #636]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 800083c:	f043 0320 	orr.w	r3, r3, #32
 8000840:	6313      	str	r3, [r2, #48]	; 0x30
 8000842:	4b9d      	ldr	r3, [pc, #628]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	f003 0320 	and.w	r3, r3, #32
 800084a:	61bb      	str	r3, [r7, #24]
 800084c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800084e:	4b9a      	ldr	r3, [pc, #616]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	4a99      	ldr	r2, [pc, #612]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000858:	6313      	str	r3, [r2, #48]	; 0x30
 800085a:	4b97      	ldr	r3, [pc, #604]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000862:	617b      	str	r3, [r7, #20]
 8000864:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000866:	4b94      	ldr	r3, [pc, #592]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	4a93      	ldr	r2, [pc, #588]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 800086c:	f043 0301 	orr.w	r3, r3, #1
 8000870:	6313      	str	r3, [r2, #48]	; 0x30
 8000872:	4b91      	ldr	r3, [pc, #580]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000876:	f003 0301 	and.w	r3, r3, #1
 800087a:	613b      	str	r3, [r7, #16]
 800087c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800087e:	4b8e      	ldr	r3, [pc, #568]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000880:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000882:	4a8d      	ldr	r2, [pc, #564]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000884:	f043 0302 	orr.w	r3, r3, #2
 8000888:	6313      	str	r3, [r2, #48]	; 0x30
 800088a:	4b8b      	ldr	r3, [pc, #556]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088e:	f003 0302 	and.w	r3, r3, #2
 8000892:	60fb      	str	r3, [r7, #12]
 8000894:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000896:	4b88      	ldr	r3, [pc, #544]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800089a:	4a87      	ldr	r2, [pc, #540]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 800089c:	f043 0308 	orr.w	r3, r3, #8
 80008a0:	6313      	str	r3, [r2, #48]	; 0x30
 80008a2:	4b85      	ldr	r3, [pc, #532]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	f003 0308 	and.w	r3, r3, #8
 80008aa:	60bb      	str	r3, [r7, #8]
 80008ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ae:	4b82      	ldr	r3, [pc, #520]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a81      	ldr	r2, [pc, #516]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 80008b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b7f      	ldr	r3, [pc, #508]	; (8000ab8 <MX_GPIO_Init+0x2c8>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008c2:	607b      	str	r3, [r7, #4]
 80008c4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|T_CS_Pin|T_CLK_Pin|LD3_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	f644 4181 	movw	r1, #19585	; 0x4c81
 80008cc:	487b      	ldr	r0, [pc, #492]	; (8000abc <MX_GPIO_Init+0x2cc>)
 80008ce:	f002 fb29 	bl	8002f24 <HAL_GPIO_WritePin>
                          |LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(T_MOSI_GPIO_Port, T_MOSI_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80008d8:	4879      	ldr	r0, [pc, #484]	; (8000ac0 <MX_GPIO_Init+0x2d0>)
 80008da:	f002 fb23 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	2140      	movs	r1, #64	; 0x40
 80008e2:	4878      	ldr	r0, [pc, #480]	; (8000ac4 <MX_GPIO_Init+0x2d4>)
 80008e4:	f002 fb1e 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80008e8:	2200      	movs	r2, #0
 80008ea:	f44f 7140 	mov.w	r1, #768	; 0x300
 80008ee:	4876      	ldr	r0, [pc, #472]	; (8000ac8 <MX_GPIO_Init+0x2d8>)
 80008f0:	f002 fb18 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, CS_Pin|RST_Pin|DC_Pin, GPIO_PIN_RESET);
 80008f4:	2200      	movs	r2, #0
 80008f6:	21e0      	movs	r1, #224	; 0xe0
 80008f8:	4874      	ldr	r0, [pc, #464]	; (8000acc <MX_GPIO_Init+0x2dc>)
 80008fa:	f002 fb13 	bl	8002f24 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 80008fe:	2308      	movs	r3, #8
 8000900:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000902:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000906:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000908:	2300      	movs	r3, #0
 800090a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000910:	4619      	mov	r1, r3
 8000912:	486b      	ldr	r0, [pc, #428]	; (8000ac0 <MX_GPIO_Init+0x2d0>)
 8000914:	f002 f942 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000918:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800091c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800091e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000922:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000928:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800092c:	4619      	mov	r1, r3
 800092e:	4866      	ldr	r0, [pc, #408]	; (8000ac8 <MX_GPIO_Init+0x2d8>)
 8000930:	f002 f934 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000934:	2302      	movs	r3, #2
 8000936:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000940:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000944:	4619      	mov	r1, r3
 8000946:	4862      	ldr	r0, [pc, #392]	; (8000ad0 <MX_GPIO_Init+0x2e0>)
 8000948:	f002 f928 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800094c:	2301      	movs	r3, #1
 800094e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000950:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000954:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	485c      	ldr	r0, [pc, #368]	; (8000ad4 <MX_GPIO_Init+0x2e4>)
 8000962:	f002 f91b 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|T_CS_Pin|T_CLK_Pin|LD3_Pin
 8000966:	f644 4381 	movw	r3, #19585	; 0x4c81
 800096a:	627b      	str	r3, [r7, #36]	; 0x24
                          |LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800096c:	2301      	movs	r3, #1
 800096e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000970:	2300      	movs	r3, #0
 8000972:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000974:	2300      	movs	r3, #0
 8000976:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	484f      	ldr	r0, [pc, #316]	; (8000abc <MX_GPIO_Init+0x2cc>)
 8000980:	f002 f90c 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PEPin PEPin */
  GPIO_InitStruct.Pin = T_IRQ_Pin|T_MISO_Pin;
 8000984:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000988:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800098a:	2300      	movs	r3, #0
 800098c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098e:	2300      	movs	r3, #0
 8000990:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	4849      	ldr	r0, [pc, #292]	; (8000ac0 <MX_GPIO_Init+0x2d0>)
 800099a:	f002 f8ff 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = T_MOSI_Pin;
 800099e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a4:	2301      	movs	r3, #1
 80009a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a8:	2300      	movs	r3, #0
 80009aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ac:	2300      	movs	r3, #0
 80009ae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(T_MOSI_GPIO_Port, &GPIO_InitStruct);
 80009b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b4:	4619      	mov	r1, r3
 80009b6:	4842      	ldr	r0, [pc, #264]	; (8000ac0 <MX_GPIO_Init+0x2d0>)
 80009b8:	f002 f8f0 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_15;
 80009bc:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 80009c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ce:	4619      	mov	r1, r3
 80009d0:	483a      	ldr	r0, [pc, #232]	; (8000abc <MX_GPIO_Init+0x2cc>)
 80009d2:	f002 f8e3 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009da:	2301      	movs	r3, #1
 80009dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e2:	2300      	movs	r3, #0
 80009e4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80009e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009ea:	4619      	mov	r1, r3
 80009ec:	4835      	ldr	r0, [pc, #212]	; (8000ac4 <MX_GPIO_Init+0x2d4>)
 80009ee:	f002 f8d5 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80009f2:	2380      	movs	r3, #128	; 0x80
 80009f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009f6:	2300      	movs	r3, #0
 80009f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fa:	2300      	movs	r3, #0
 80009fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80009fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a02:	4619      	mov	r1, r3
 8000a04:	482f      	ldr	r0, [pc, #188]	; (8000ac4 <MX_GPIO_Init+0x2d4>)
 8000a06:	f002 f8c9 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a0a:	2340      	movs	r3, #64	; 0x40
 8000a0c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	482a      	ldr	r0, [pc, #168]	; (8000ac8 <MX_GPIO_Init+0x2d8>)
 8000a1e:	f002 f8bd 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000a26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a28:	2301      	movs	r3, #1
 8000a2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a30:	2300      	movs	r3, #0
 8000a32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4823      	ldr	r0, [pc, #140]	; (8000ac8 <MX_GPIO_Init+0x2d8>)
 8000a3c:	f002 f8ae 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000a44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a52:	4619      	mov	r1, r3
 8000a54:	481f      	ldr	r0, [pc, #124]	; (8000ad4 <MX_GPIO_Init+0x2e4>)
 8000a56:	f002 f8a1 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000a5a:	2303      	movs	r3, #3
 8000a5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a5e:	2300      	movs	r3, #0
 8000a60:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a62:	2300      	movs	r3, #0
 8000a64:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a66:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a6a:	4619      	mov	r1, r3
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <MX_GPIO_Init+0x2dc>)
 8000a6e:	f002 f895 	bl	8002b9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = CS_Pin|RST_Pin|DC_Pin;
 8000a72:	23e0      	movs	r3, #224	; 0xe0
 8000a74:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a76:	2301      	movs	r3, #1
 8000a78:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a86:	4619      	mov	r1, r3
 8000a88:	4810      	ldr	r0, [pc, #64]	; (8000acc <MX_GPIO_Init+0x2dc>)
 8000a8a:	f002 f887 	bl	8002b9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 2, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	2102      	movs	r1, #2
 8000a92:	2006      	movs	r0, #6
 8000a94:	f001 fd25 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000a98:	2006      	movs	r0, #6
 8000a9a:	f001 fd3e 	bl	800251a <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 1, 0);
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	2101      	movs	r1, #1
 8000aa2:	2009      	movs	r0, #9
 8000aa4:	f001 fd1d 	bl	80024e2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000aa8:	2009      	movs	r0, #9
 8000aaa:	f001 fd36 	bl	800251a <HAL_NVIC_EnableIRQ>

}
 8000aae:	bf00      	nop
 8000ab0:	3738      	adds	r7, #56	; 0x38
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	bd80      	pop	{r7, pc}
 8000ab6:	bf00      	nop
 8000ab8:	40023800 	.word	0x40023800
 8000abc:	40020400 	.word	0x40020400
 8000ac0:	40021000 	.word	0x40021000
 8000ac4:	40021800 	.word	0x40021800
 8000ac8:	40020800 	.word	0x40020800
 8000acc:	40020c00 	.word	0x40020c00
 8000ad0:	40021400 	.word	0x40021400
 8000ad4:	40020000 	.word	0x40020000

08000ad8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b084      	sub	sp, #16
 8000adc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ade:	f001 fba3 	bl	8002228 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ae2:	f000 fa75 	bl	8000fd0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ae6:	f7ff fe83 	bl	80007f0 <MX_GPIO_Init>
  MX_ETH_Init();
 8000aea:	f7ff fd7b 	bl	80005e4 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000aee:	f000 fe9f 	bl	8001830 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000af2:	f000 ff2d 	bl	8001950 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM4_Init();
 8000af6:	f000 fd87 	bl	8001608 <MX_TIM4_Init>
  MX_TIM3_Init();
 8000afa:	f000 fd37 	bl	800156c <MX_TIM3_Init>
  MX_SPI5_Init();
 8000afe:	f000 fb87 	bl	8001210 <MX_SPI5_Init>
  MX_TIM2_Init();
 8000b02:	f000 fce5 	bl	80014d0 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8000b06:	4884      	ldr	r0, [pc, #528]	; (8000d18 <main+0x240>)
 8000b08:	f004 f8f6 	bl	8004cf8 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim4);
 8000b0c:	4883      	ldr	r0, [pc, #524]	; (8000d1c <main+0x244>)
 8000b0e:	f004 f8f3 	bl	8004cf8 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000b12:	2100      	movs	r1, #0
 8000b14:	4881      	ldr	r0, [pc, #516]	; (8000d1c <main+0x244>)
 8000b16:	f004 f9e7 	bl	8004ee8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000b1a:	2104      	movs	r1, #4
 8000b1c:	487f      	ldr	r0, [pc, #508]	; (8000d1c <main+0x244>)
 8000b1e:	f004 f9e3 	bl	8004ee8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000b22:	2108      	movs	r1, #8
 8000b24:	487d      	ldr	r0, [pc, #500]	; (8000d1c <main+0x244>)
 8000b26:	f004 f9df 	bl	8004ee8 <HAL_TIM_PWM_Start>

  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, grabSteps);
 8000b2a:	4b7d      	ldr	r3, [pc, #500]	; (8000d20 <main+0x248>)
 8000b2c:	681a      	ldr	r2, [r3, #0]
 8000b2e:	4b7b      	ldr	r3, [pc, #492]	; (8000d1c <main+0x244>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, RSteps);
 8000b34:	4b7b      	ldr	r3, [pc, #492]	; (8000d24 <main+0x24c>)
 8000b36:	681a      	ldr	r2, [r3, #0]
 8000b38:	4b78      	ldr	r3, [pc, #480]	; (8000d1c <main+0x244>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, LSteps);
 8000b3e:	4b7a      	ldr	r3, [pc, #488]	; (8000d28 <main+0x250>)
 8000b40:	681a      	ldr	r2, [r3, #0]
 8000b42:	4b76      	ldr	r3, [pc, #472]	; (8000d1c <main+0x244>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	63da      	str	r2, [r3, #60]	; 0x3c

  HAL_TIM_Base_Stop(&htim4);
 8000b48:	4874      	ldr	r0, [pc, #464]	; (8000d1c <main+0x244>)
 8000b4a:	f004 f945 	bl	8004dd8 <HAL_TIM_Base_Stop>

  HAL_TIM_Base_Start(&htim2);
 8000b4e:	4877      	ldr	r0, [pc, #476]	; (8000d2c <main+0x254>)
 8000b50:	f004 f8d2 	bl	8004cf8 <HAL_TIM_Base_Start>
  ILI9341_Set_Rotation(SCREEN_VERTICAL_1);
 8000b54:	2000      	movs	r0, #0
 8000b56:	f001 f931 	bl	8001dbc <ILI9341_Set_Rotation>
  ILI9341_Fill_Screen(WHITE);
 8000b5a:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8000b5e:	f001 fa19 	bl	8001f94 <ILI9341_Fill_Screen>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  if(isAuto == 1)
 8000b62:	4b73      	ldr	r3, [pc, #460]	; (8000d30 <main+0x258>)
 8000b64:	681b      	ldr	r3, [r3, #0]
 8000b66:	2b01      	cmp	r3, #1
 8000b68:	f040 812a 	bne.w	8000dc0 <main+0x2e8>
	  {
		  sprintf(str,"AUTOMATIC...");
 8000b6c:	4971      	ldr	r1, [pc, #452]	; (8000d34 <main+0x25c>)
 8000b6e:	4872      	ldr	r0, [pc, #456]	; (8000d38 <main+0x260>)
 8000b70:	f006 f9dc 	bl	8006f2c <siprintf>
		  ILI9341_Draw_Text(str, 10, 10, BLACK, 2, WHITE);
 8000b74:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b78:	9301      	str	r3, [sp, #4]
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	9300      	str	r3, [sp, #0]
 8000b7e:	2300      	movs	r3, #0
 8000b80:	220a      	movs	r2, #10
 8000b82:	210a      	movs	r1, #10
 8000b84:	486c      	ldr	r0, [pc, #432]	; (8000d38 <main+0x260>)
 8000b86:	f001 f84f 	bl	8001c28 <ILI9341_Draw_Text>
//		  			  }
//		  		  }
//		  stepMotorSteps = 200;
//		  HAL_Delay(100);

		  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN,GPIO_PIN_SET);
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000b90:	486a      	ldr	r0, [pc, #424]	; (8000d3c <main+0x264>)
 8000b92:	f002 f9c7 	bl	8002f24 <HAL_GPIO_WritePin>
		  for(int i = 0; i <51;i = i+1){
 8000b96:	2300      	movs	r3, #0
 8000b98:	607b      	str	r3, [r7, #4]
 8000b9a:	e014      	b.n	8000bc6 <main+0xee>
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ba2:	4866      	ldr	r0, [pc, #408]	; (8000d3c <main+0x264>)
 8000ba4:	f002 f9be 	bl	8002f24 <HAL_GPIO_WritePin>
			  HAL_Delay(10);
 8000ba8:	200a      	movs	r0, #10
 8000baa:	f001 fb9b 	bl	80022e4 <HAL_Delay>
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb4:	4861      	ldr	r0, [pc, #388]	; (8000d3c <main+0x264>)
 8000bb6:	f002 f9b5 	bl	8002f24 <HAL_GPIO_WritePin>
			  HAL_Delay(10);
 8000bba:	200a      	movs	r0, #10
 8000bbc:	f001 fb92 	bl	80022e4 <HAL_Delay>
		  for(int i = 0; i <51;i = i+1){
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	3301      	adds	r3, #1
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	2b32      	cmp	r3, #50	; 0x32
 8000bca:	dde7      	ble.n	8000b9c <main+0xc4>
		  }
		  HAL_Delay(500);
 8000bcc:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000bd0:	f001 fb88 	bl	80022e4 <HAL_Delay>

		  while( LSteps < 50){
 8000bd4:	e013      	b.n	8000bfe <main+0x126>
			  LSteps++;
 8000bd6:	4b54      	ldr	r3, [pc, #336]	; (8000d28 <main+0x250>)
 8000bd8:	681b      	ldr	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	4a52      	ldr	r2, [pc, #328]	; (8000d28 <main+0x250>)
 8000bde:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000be0:	2108      	movs	r1, #8
 8000be2:	484e      	ldr	r0, [pc, #312]	; (8000d1c <main+0x244>)
 8000be4:	f004 f980 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, LSteps);
 8000be8:	4b4f      	ldr	r3, [pc, #316]	; (8000d28 <main+0x250>)
 8000bea:	681a      	ldr	r2, [r3, #0]
 8000bec:	4b4b      	ldr	r3, [pc, #300]	; (8000d1c <main+0x244>)
 8000bee:	681b      	ldr	r3, [r3, #0]
 8000bf0:	63da      	str	r2, [r3, #60]	; 0x3c
			  HAL_TIM_Base_Stop(&htim4);
 8000bf2:	484a      	ldr	r0, [pc, #296]	; (8000d1c <main+0x244>)
 8000bf4:	f004 f8f0 	bl	8004dd8 <HAL_TIM_Base_Stop>
			  HAL_Delay(10);
 8000bf8:	200a      	movs	r0, #10
 8000bfa:	f001 fb73 	bl	80022e4 <HAL_Delay>
		  while( LSteps < 50){
 8000bfe:	4b4a      	ldr	r3, [pc, #296]	; (8000d28 <main+0x250>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	2b31      	cmp	r3, #49	; 0x31
 8000c04:	dde7      	ble.n	8000bd6 <main+0xfe>
		  }
		  HAL_Delay(800);
 8000c06:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c0a:	f001 fb6b 	bl	80022e4 <HAL_Delay>

		  // Gripper OPEN
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c0e:	2100      	movs	r1, #0
 8000c10:	4842      	ldr	r0, [pc, #264]	; (8000d1c <main+0x244>)
 8000c12:	f004 f969 	bl	8004ee8 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 40);
 8000c16:	4b41      	ldr	r3, [pc, #260]	; (8000d1c <main+0x244>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	2228      	movs	r2, #40	; 0x28
 8000c1c:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Stop(&htim4);
 8000c1e:	483f      	ldr	r0, [pc, #252]	; (8000d1c <main+0x244>)
 8000c20:	f004 f8da 	bl	8004dd8 <HAL_TIM_Base_Stop>
		  HAL_Delay(10);
 8000c24:	200a      	movs	r0, #10
 8000c26:	f001 fb5d 	bl	80022e4 <HAL_Delay>
		  HAL_Delay(800);
 8000c2a:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c2e:	f001 fb59 	bl	80022e4 <HAL_Delay>

		  while( RSteps < 35) {
 8000c32:	e013      	b.n	8000c5c <main+0x184>
			  RSteps++;
 8000c34:	4b3b      	ldr	r3, [pc, #236]	; (8000d24 <main+0x24c>)
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	4a3a      	ldr	r2, [pc, #232]	; (8000d24 <main+0x24c>)
 8000c3c:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c3e:	2104      	movs	r1, #4
 8000c40:	4836      	ldr	r0, [pc, #216]	; (8000d1c <main+0x244>)
 8000c42:	f004 f951 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, RSteps);
 8000c46:	4b37      	ldr	r3, [pc, #220]	; (8000d24 <main+0x24c>)
 8000c48:	681a      	ldr	r2, [r3, #0]
 8000c4a:	4b34      	ldr	r3, [pc, #208]	; (8000d1c <main+0x244>)
 8000c4c:	681b      	ldr	r3, [r3, #0]
 8000c4e:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_TIM_Base_Stop(&htim4);
 8000c50:	4832      	ldr	r0, [pc, #200]	; (8000d1c <main+0x244>)
 8000c52:	f004 f8c1 	bl	8004dd8 <HAL_TIM_Base_Stop>
			  HAL_Delay(10);
 8000c56:	200a      	movs	r0, #10
 8000c58:	f001 fb44 	bl	80022e4 <HAL_Delay>
		  while( RSteps < 35) {
 8000c5c:	4b31      	ldr	r3, [pc, #196]	; (8000d24 <main+0x24c>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	2b22      	cmp	r3, #34	; 0x22
 8000c62:	dde7      	ble.n	8000c34 <main+0x15c>
		  }
		  HAL_Delay(800);
 8000c64:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c68:	f001 fb3c 	bl	80022e4 <HAL_Delay>

		  // Gripper CLOSE
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000c6c:	2100      	movs	r1, #0
 8000c6e:	482b      	ldr	r0, [pc, #172]	; (8000d1c <main+0x244>)
 8000c70:	f004 f93a 	bl	8004ee8 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 25);
 8000c74:	4b29      	ldr	r3, [pc, #164]	; (8000d1c <main+0x244>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	2219      	movs	r2, #25
 8000c7a:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Stop(&htim4);
 8000c7c:	4827      	ldr	r0, [pc, #156]	; (8000d1c <main+0x244>)
 8000c7e:	f004 f8ab 	bl	8004dd8 <HAL_TIM_Base_Stop>
		  HAL_Delay(10);
 8000c82:	200a      	movs	r0, #10
 8000c84:	f001 fb2e 	bl	80022e4 <HAL_Delay>
		  HAL_Delay(800);
 8000c88:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000c8c:	f001 fb2a 	bl	80022e4 <HAL_Delay>

		  while( RSteps > 25) {
 8000c90:	e013      	b.n	8000cba <main+0x1e2>
			  RSteps--;
 8000c92:	4b24      	ldr	r3, [pc, #144]	; (8000d24 <main+0x24c>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	4a22      	ldr	r2, [pc, #136]	; (8000d24 <main+0x24c>)
 8000c9a:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c9c:	2104      	movs	r1, #4
 8000c9e:	481f      	ldr	r0, [pc, #124]	; (8000d1c <main+0x244>)
 8000ca0:	f004 f922 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, RSteps);
 8000ca4:	4b1f      	ldr	r3, [pc, #124]	; (8000d24 <main+0x24c>)
 8000ca6:	681a      	ldr	r2, [r3, #0]
 8000ca8:	4b1c      	ldr	r3, [pc, #112]	; (8000d1c <main+0x244>)
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_TIM_Base_Stop(&htim4);
 8000cae:	481b      	ldr	r0, [pc, #108]	; (8000d1c <main+0x244>)
 8000cb0:	f004 f892 	bl	8004dd8 <HAL_TIM_Base_Stop>
			  HAL_Delay(10);
 8000cb4:	200a      	movs	r0, #10
 8000cb6:	f001 fb15 	bl	80022e4 <HAL_Delay>
		  while( RSteps > 25) {
 8000cba:	4b1a      	ldr	r3, [pc, #104]	; (8000d24 <main+0x24c>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	2b19      	cmp	r3, #25
 8000cc0:	dce7      	bgt.n	8000c92 <main+0x1ba>
		  }
		  HAL_Delay(800);
 8000cc2:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000cc6:	f001 fb0d 	bl	80022e4 <HAL_Delay>

		  while( LSteps > 25){
 8000cca:	e013      	b.n	8000cf4 <main+0x21c>
			  LSteps--;
 8000ccc:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <main+0x250>)
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	4a15      	ldr	r2, [pc, #84]	; (8000d28 <main+0x250>)
 8000cd4:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4810      	ldr	r0, [pc, #64]	; (8000d1c <main+0x244>)
 8000cda:	f004 f905 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, LSteps);
 8000cde:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <main+0x250>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	4b0e      	ldr	r3, [pc, #56]	; (8000d1c <main+0x244>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	63da      	str	r2, [r3, #60]	; 0x3c
			  HAL_TIM_Base_Stop(&htim4);
 8000ce8:	480c      	ldr	r0, [pc, #48]	; (8000d1c <main+0x244>)
 8000cea:	f004 f875 	bl	8004dd8 <HAL_TIM_Base_Stop>
			  HAL_Delay(10);
 8000cee:	200a      	movs	r0, #10
 8000cf0:	f001 faf8 	bl	80022e4 <HAL_Delay>
		  while( LSteps > 25){
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <main+0x250>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b19      	cmp	r3, #25
 8000cfa:	dce7      	bgt.n	8000ccc <main+0x1f4>
		  }
		  HAL_Delay(800);
 8000cfc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d00:	f001 faf0 	bl	80022e4 <HAL_Delay>

		  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN,GPIO_PIN_RESET);
 8000d04:	2200      	movs	r2, #0
 8000d06:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000d0a:	480c      	ldr	r0, [pc, #48]	; (8000d3c <main+0x264>)
 8000d0c:	f002 f90a 	bl	8002f24 <HAL_GPIO_WritePin>
		  for(int i = 0; i <51;i = i+1){
 8000d10:	2300      	movs	r3, #0
 8000d12:	603b      	str	r3, [r7, #0]
 8000d14:	e029      	b.n	8000d6a <main+0x292>
 8000d16:	bf00      	nop
 8000d18:	200003d0 	.word	0x200003d0
 8000d1c:	2000041c 	.word	0x2000041c
 8000d20:	20000008 	.word	0x20000008
 8000d24:	20000000 	.word	0x20000000
 8000d28:	20000004 	.word	0x20000004
 8000d2c:	20000384 	.word	0x20000384
 8000d30:	200002d4 	.word	0x200002d4
 8000d34:	08007820 	.word	0x08007820
 8000d38:	200002e8 	.word	0x200002e8
 8000d3c:	40020800 	.word	0x40020800
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000d40:	2201      	movs	r2, #1
 8000d42:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d46:	4895      	ldr	r0, [pc, #596]	; (8000f9c <main+0x4c4>)
 8000d48:	f002 f8ec 	bl	8002f24 <HAL_GPIO_WritePin>
			  HAL_Delay(10);
 8000d4c:	200a      	movs	r0, #10
 8000d4e:	f001 fac9 	bl	80022e4 <HAL_Delay>
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000d52:	2200      	movs	r2, #0
 8000d54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000d58:	4890      	ldr	r0, [pc, #576]	; (8000f9c <main+0x4c4>)
 8000d5a:	f002 f8e3 	bl	8002f24 <HAL_GPIO_WritePin>
			  HAL_Delay(10);
 8000d5e:	200a      	movs	r0, #10
 8000d60:	f001 fac0 	bl	80022e4 <HAL_Delay>
		  for(int i = 0; i <51;i = i+1){
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	3301      	adds	r3, #1
 8000d68:	603b      	str	r3, [r7, #0]
 8000d6a:	683b      	ldr	r3, [r7, #0]
 8000d6c:	2b32      	cmp	r3, #50	; 0x32
 8000d6e:	dde7      	ble.n	8000d40 <main+0x268>
		  }
		  HAL_Delay(500);
 8000d70:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000d74:	f001 fab6 	bl	80022e4 <HAL_Delay>

		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d78:	2100      	movs	r1, #0
 8000d7a:	4889      	ldr	r0, [pc, #548]	; (8000fa0 <main+0x4c8>)
 8000d7c:	f004 f8b4 	bl	8004ee8 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 40);
 8000d80:	4b87      	ldr	r3, [pc, #540]	; (8000fa0 <main+0x4c8>)
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	2228      	movs	r2, #40	; 0x28
 8000d86:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Stop(&htim4);
 8000d88:	4885      	ldr	r0, [pc, #532]	; (8000fa0 <main+0x4c8>)
 8000d8a:	f004 f825 	bl	8004dd8 <HAL_TIM_Base_Stop>
		  HAL_Delay(10);
 8000d8e:	200a      	movs	r0, #10
 8000d90:	f001 faa8 	bl	80022e4 <HAL_Delay>
		  HAL_Delay(800);
 8000d94:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000d98:	f001 faa4 	bl	80022e4 <HAL_Delay>

		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4880      	ldr	r0, [pc, #512]	; (8000fa0 <main+0x4c8>)
 8000da0:	f004 f8a2 	bl	8004ee8 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, 25);
 8000da4:	4b7e      	ldr	r3, [pc, #504]	; (8000fa0 <main+0x4c8>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	2219      	movs	r2, #25
 8000daa:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_Base_Stop(&htim4);
 8000dac:	487c      	ldr	r0, [pc, #496]	; (8000fa0 <main+0x4c8>)
 8000dae:	f004 f813 	bl	8004dd8 <HAL_TIM_Base_Stop>
		  HAL_Delay(10);
 8000db2:	200a      	movs	r0, #10
 8000db4:	f001 fa96 	bl	80022e4 <HAL_Delay>
		  HAL_Delay(800);
 8000db8:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000dbc:	f001 fa92 	bl	80022e4 <HAL_Delay>
//
//
//
//		  HAL_Delay(1000);
	  }
	  if(isAuto == 0)
 8000dc0:	4b78      	ldr	r3, [pc, #480]	; (8000fa4 <main+0x4cc>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f47f aecc 	bne.w	8000b62 <main+0x8a>
	  {
		  sprintf(str,"MANUAL...");
 8000dca:	4977      	ldr	r1, [pc, #476]	; (8000fa8 <main+0x4d0>)
 8000dcc:	4877      	ldr	r0, [pc, #476]	; (8000fac <main+0x4d4>)
 8000dce:	f006 f8ad 	bl	8006f2c <siprintf>
		  ILI9341_Draw_Text(str, 10, 10, BLACK, 2, WHITE);
 8000dd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000dd6:	9301      	str	r3, [sp, #4]
 8000dd8:	2302      	movs	r3, #2
 8000dda:	9300      	str	r3, [sp, #0]
 8000ddc:	2300      	movs	r3, #0
 8000dde:	220a      	movs	r2, #10
 8000de0:	210a      	movs	r1, #10
 8000de2:	4872      	ldr	r0, [pc, #456]	; (8000fac <main+0x4d4>)
 8000de4:	f000 ff20 	bl	8001c28 <ILI9341_Draw_Text>
		  // SERVO MOTOR RIGHT
		  if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_6) == GPIO_PIN_RESET && RSteps < 35)
 8000de8:	2140      	movs	r1, #64	; 0x40
 8000dea:	486c      	ldr	r0, [pc, #432]	; (8000f9c <main+0x4c4>)
 8000dec:	f002 f882 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d115      	bne.n	8000e22 <main+0x34a>
 8000df6:	4b6e      	ldr	r3, [pc, #440]	; (8000fb0 <main+0x4d8>)
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	2b22      	cmp	r3, #34	; 0x22
 8000dfc:	dc11      	bgt.n	8000e22 <main+0x34a>
		  {
			  RSteps++;
 8000dfe:	4b6c      	ldr	r3, [pc, #432]	; (8000fb0 <main+0x4d8>)
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	3301      	adds	r3, #1
 8000e04:	4a6a      	ldr	r2, [pc, #424]	; (8000fb0 <main+0x4d8>)
 8000e06:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e08:	2104      	movs	r1, #4
 8000e0a:	4865      	ldr	r0, [pc, #404]	; (8000fa0 <main+0x4c8>)
 8000e0c:	f004 f86c 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, RSteps);
 8000e10:	4b67      	ldr	r3, [pc, #412]	; (8000fb0 <main+0x4d8>)
 8000e12:	681a      	ldr	r2, [r3, #0]
 8000e14:	4b62      	ldr	r3, [pc, #392]	; (8000fa0 <main+0x4c8>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_TIM_Base_Stop(&htim4);
 8000e1a:	4861      	ldr	r0, [pc, #388]	; (8000fa0 <main+0x4c8>)
 8000e1c:	f003 ffdc 	bl	8004dd8 <HAL_TIM_Base_Stop>
 8000e20:	e01c      	b.n	8000e5c <main+0x384>

			  //HAL_UART_Transmit(&huart3, "test", 10, 100);
		  }
		  else if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15) == GPIO_PIN_RESET && RSteps > 25)
 8000e22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e26:	4863      	ldr	r0, [pc, #396]	; (8000fb4 <main+0x4dc>)
 8000e28:	f002 f864 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	d114      	bne.n	8000e5c <main+0x384>
 8000e32:	4b5f      	ldr	r3, [pc, #380]	; (8000fb0 <main+0x4d8>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	2b19      	cmp	r3, #25
 8000e38:	dd10      	ble.n	8000e5c <main+0x384>
		  {
			  RSteps--;
 8000e3a:	4b5d      	ldr	r3, [pc, #372]	; (8000fb0 <main+0x4d8>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	3b01      	subs	r3, #1
 8000e40:	4a5b      	ldr	r2, [pc, #364]	; (8000fb0 <main+0x4d8>)
 8000e42:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000e44:	2104      	movs	r1, #4
 8000e46:	4856      	ldr	r0, [pc, #344]	; (8000fa0 <main+0x4c8>)
 8000e48:	f004 f84e 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, RSteps);
 8000e4c:	4b58      	ldr	r3, [pc, #352]	; (8000fb0 <main+0x4d8>)
 8000e4e:	681a      	ldr	r2, [r3, #0]
 8000e50:	4b53      	ldr	r3, [pc, #332]	; (8000fa0 <main+0x4c8>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	639a      	str	r2, [r3, #56]	; 0x38
			  HAL_TIM_Base_Stop(&htim4);
 8000e56:	4852      	ldr	r0, [pc, #328]	; (8000fa0 <main+0x4c8>)
 8000e58:	f003 ffbe 	bl	8004dd8 <HAL_TIM_Base_Stop>

			  //HAL_UART_Transmit(&huart3, "stes", 10, 100);

		  // SERVO MOTOR LEFT
		  }
		  if(HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_12) == GPIO_PIN_RESET && LSteps < 50)
 8000e5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e60:	4854      	ldr	r0, [pc, #336]	; (8000fb4 <main+0x4dc>)
 8000e62:	f002 f847 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	d115      	bne.n	8000e98 <main+0x3c0>
 8000e6c:	4b52      	ldr	r3, [pc, #328]	; (8000fb8 <main+0x4e0>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	2b31      	cmp	r3, #49	; 0x31
 8000e72:	dc11      	bgt.n	8000e98 <main+0x3c0>
		  {
			  LSteps++;
 8000e74:	4b50      	ldr	r3, [pc, #320]	; (8000fb8 <main+0x4e0>)
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	3301      	adds	r3, #1
 8000e7a:	4a4f      	ldr	r2, [pc, #316]	; (8000fb8 <main+0x4e0>)
 8000e7c:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000e7e:	2108      	movs	r1, #8
 8000e80:	4847      	ldr	r0, [pc, #284]	; (8000fa0 <main+0x4c8>)
 8000e82:	f004 f831 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, LSteps);
 8000e86:	4b4c      	ldr	r3, [pc, #304]	; (8000fb8 <main+0x4e0>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b45      	ldr	r3, [pc, #276]	; (8000fa0 <main+0x4c8>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c
			  HAL_TIM_Base_Stop(&htim4);
 8000e90:	4843      	ldr	r0, [pc, #268]	; (8000fa0 <main+0x4c8>)
 8000e92:	f003 ffa1 	bl	8004dd8 <HAL_TIM_Base_Stop>
 8000e96:	e01c      	b.n	8000ed2 <main+0x3fa>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_15) == GPIO_PIN_RESET && LSteps > 25)
 8000e98:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9c:	4847      	ldr	r0, [pc, #284]	; (8000fbc <main+0x4e4>)
 8000e9e:	f002 f829 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d114      	bne.n	8000ed2 <main+0x3fa>
 8000ea8:	4b43      	ldr	r3, [pc, #268]	; (8000fb8 <main+0x4e0>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b19      	cmp	r3, #25
 8000eae:	dd10      	ble.n	8000ed2 <main+0x3fa>
		  {
			  LSteps--;
 8000eb0:	4b41      	ldr	r3, [pc, #260]	; (8000fb8 <main+0x4e0>)
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	3b01      	subs	r3, #1
 8000eb6:	4a40      	ldr	r2, [pc, #256]	; (8000fb8 <main+0x4e0>)
 8000eb8:	6013      	str	r3, [r2, #0]
			  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000eba:	2108      	movs	r1, #8
 8000ebc:	4838      	ldr	r0, [pc, #224]	; (8000fa0 <main+0x4c8>)
 8000ebe:	f004 f813 	bl	8004ee8 <HAL_TIM_PWM_Start>
			  __HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, LSteps);
 8000ec2:	4b3d      	ldr	r3, [pc, #244]	; (8000fb8 <main+0x4e0>)
 8000ec4:	681a      	ldr	r2, [r3, #0]
 8000ec6:	4b36      	ldr	r3, [pc, #216]	; (8000fa0 <main+0x4c8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	63da      	str	r2, [r3, #60]	; 0x3c
			  HAL_TIM_Base_Stop(&htim4);
 8000ecc:	4834      	ldr	r0, [pc, #208]	; (8000fa0 <main+0x4c8>)
 8000ece:	f003 ff83 	bl	8004dd8 <HAL_TIM_Base_Stop>
		  }

		  // STEPPER MOTOR
		  if(HAL_GPIO_ReadPin(GPIOF, GPIO_PIN_1) == GPIO_PIN_RESET && stepMotorSteps < 400)
 8000ed2:	2102      	movs	r1, #2
 8000ed4:	483a      	ldr	r0, [pc, #232]	; (8000fc0 <main+0x4e8>)
 8000ed6:	f002 f80d 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d128      	bne.n	8000f32 <main+0x45a>
 8000ee0:	4b38      	ldr	r3, [pc, #224]	; (8000fc4 <main+0x4ec>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8000ee8:	da23      	bge.n	8000f32 <main+0x45a>
		  {
			  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_SET);
 8000eea:	2201      	movs	r2, #1
 8000eec:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ef0:	482a      	ldr	r0, [pc, #168]	; (8000f9c <main+0x4c4>)
 8000ef2:	f002 f817 	bl	8002f24 <HAL_GPIO_WritePin>
			  stepMotorSteps++;
 8000ef6:	4b33      	ldr	r3, [pc, #204]	; (8000fc4 <main+0x4ec>)
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	3301      	adds	r3, #1
 8000efc:	4a31      	ldr	r2, [pc, #196]	; (8000fc4 <main+0x4ec>)
 8000efe:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000f00:	2201      	movs	r2, #1
 8000f02:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f06:	4825      	ldr	r0, [pc, #148]	; (8000f9c <main+0x4c4>)
 8000f08:	f002 f80c 	bl	8002f24 <HAL_GPIO_WritePin>
			  microDelay(stepMotorDelay);
 8000f0c:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <main+0x4f0>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f8cc 	bl	80010b0 <microDelay>
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000f18:	2200      	movs	r2, #0
 8000f1a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f1e:	481f      	ldr	r0, [pc, #124]	; (8000f9c <main+0x4c4>)
 8000f20:	f002 f800 	bl	8002f24 <HAL_GPIO_WritePin>
			  microDelay(stepMotorDelay);
 8000f24:	4b28      	ldr	r3, [pc, #160]	; (8000fc8 <main+0x4f0>)
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	f000 f8c0 	bl	80010b0 <microDelay>
 8000f30:	e02d      	b.n	8000f8e <main+0x4b6>
		  }
		  else if(HAL_GPIO_ReadPin(GPIOD, GPIO_PIN_1) == GPIO_PIN_RESET && stepMotorSteps > 0)
 8000f32:	2102      	movs	r1, #2
 8000f34:	4825      	ldr	r0, [pc, #148]	; (8000fcc <main+0x4f4>)
 8000f36:	f001 ffdd 	bl	8002ef4 <HAL_GPIO_ReadPin>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d126      	bne.n	8000f8e <main+0x4b6>
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <main+0x4ec>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	dd22      	ble.n	8000f8e <main+0x4b6>
		  {
			  HAL_GPIO_WritePin(DIR_PORT, DIR_PIN, GPIO_PIN_RESET);
 8000f48:	2200      	movs	r2, #0
 8000f4a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f4e:	4813      	ldr	r0, [pc, #76]	; (8000f9c <main+0x4c4>)
 8000f50:	f001 ffe8 	bl	8002f24 <HAL_GPIO_WritePin>
			  stepMotorSteps--;
 8000f54:	4b1b      	ldr	r3, [pc, #108]	; (8000fc4 <main+0x4ec>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	4a1a      	ldr	r2, [pc, #104]	; (8000fc4 <main+0x4ec>)
 8000f5c:	6013      	str	r3, [r2, #0]
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_SET);
 8000f5e:	2201      	movs	r2, #1
 8000f60:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f64:	480d      	ldr	r0, [pc, #52]	; (8000f9c <main+0x4c4>)
 8000f66:	f001 ffdd 	bl	8002f24 <HAL_GPIO_WritePin>
			  microDelay(stepMotorDelay);
 8000f6a:	4b17      	ldr	r3, [pc, #92]	; (8000fc8 <main+0x4f0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	b29b      	uxth	r3, r3
 8000f70:	4618      	mov	r0, r3
 8000f72:	f000 f89d 	bl	80010b0 <microDelay>
			  HAL_GPIO_WritePin(STEP_PORT, STEP_PIN, GPIO_PIN_RESET);
 8000f76:	2200      	movs	r2, #0
 8000f78:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f7c:	4807      	ldr	r0, [pc, #28]	; (8000f9c <main+0x4c4>)
 8000f7e:	f001 ffd1 	bl	8002f24 <HAL_GPIO_WritePin>
			  microDelay(stepMotorDelay);
 8000f82:	4b11      	ldr	r3, [pc, #68]	; (8000fc8 <main+0x4f0>)
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	b29b      	uxth	r3, r3
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f891 	bl	80010b0 <microDelay>
		  }
		  HAL_Delay(20);
 8000f8e:	2014      	movs	r0, #20
 8000f90:	f001 f9a8 	bl	80022e4 <HAL_Delay>
		  HAL_TIM_Base_Stop(&htim4);
 8000f94:	4802      	ldr	r0, [pc, #8]	; (8000fa0 <main+0x4c8>)
 8000f96:	f003 ff1f 	bl	8004dd8 <HAL_TIM_Base_Stop>
	  if(isAuto == 1)
 8000f9a:	e5e2      	b.n	8000b62 <main+0x8a>
 8000f9c:	40020800 	.word	0x40020800
 8000fa0:	2000041c 	.word	0x2000041c
 8000fa4:	200002d4 	.word	0x200002d4
 8000fa8:	08007830 	.word	0x08007830
 8000fac:	200002e8 	.word	0x200002e8
 8000fb0:	20000000 	.word	0x20000000
 8000fb4:	40020400 	.word	0x40020400
 8000fb8:	20000004 	.word	0x20000004
 8000fbc:	40020000 	.word	0x40020000
 8000fc0:	40021400 	.word	0x40021400
 8000fc4:	20000010 	.word	0x20000010
 8000fc8:	2000000c 	.word	0x2000000c
 8000fcc:	40020c00 	.word	0x40020c00

08000fd0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b094      	sub	sp, #80	; 0x50
 8000fd4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd6:	f107 031c 	add.w	r3, r7, #28
 8000fda:	2234      	movs	r2, #52	; 0x34
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f005 ff9c 	bl	8006f1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe4:	f107 0308 	add.w	r3, r7, #8
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000ff4:	f002 f92a 	bl	800324c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff8:	4b2b      	ldr	r3, [pc, #172]	; (80010a8 <SystemClock_Config+0xd8>)
 8000ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffc:	4a2a      	ldr	r2, [pc, #168]	; (80010a8 <SystemClock_Config+0xd8>)
 8000ffe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001002:	6413      	str	r3, [r2, #64]	; 0x40
 8001004:	4b28      	ldr	r3, [pc, #160]	; (80010a8 <SystemClock_Config+0xd8>)
 8001006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001008:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800100c:	607b      	str	r3, [r7, #4]
 800100e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001010:	4b26      	ldr	r3, [pc, #152]	; (80010ac <SystemClock_Config+0xdc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a25      	ldr	r2, [pc, #148]	; (80010ac <SystemClock_Config+0xdc>)
 8001016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b23      	ldr	r3, [pc, #140]	; (80010ac <SystemClock_Config+0xdc>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	603b      	str	r3, [r7, #0]
 8001026:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001028:	2301      	movs	r3, #1
 800102a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800102c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001030:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001032:	2302      	movs	r3, #2
 8001034:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001036:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800103a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800103c:	2304      	movs	r3, #4
 800103e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001040:	23d8      	movs	r3, #216	; 0xd8
 8001042:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001044:	2302      	movs	r3, #2
 8001046:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8001048:	2309      	movs	r3, #9
 800104a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800104c:	2302      	movs	r3, #2
 800104e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001050:	f107 031c 	add.w	r3, r7, #28
 8001054:	4618      	mov	r0, r3
 8001056:	f002 f959 	bl	800330c <HAL_RCC_OscConfig>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001060:	f000 f8d0 	bl	8001204 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001064:	f002 f902 	bl	800326c <HAL_PWREx_EnableOverDrive>
 8001068:	4603      	mov	r3, r0
 800106a:	2b00      	cmp	r3, #0
 800106c:	d001      	beq.n	8001072 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800106e:	f000 f8c9 	bl	8001204 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001072:	230f      	movs	r3, #15
 8001074:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001076:	2302      	movs	r3, #2
 8001078:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800107a:	2300      	movs	r3, #0
 800107c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800107e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001082:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001084:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001088:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800108a:	f107 0308 	add.w	r3, r7, #8
 800108e:	2107      	movs	r1, #7
 8001090:	4618      	mov	r0, r3
 8001092:	f002 fbe9 	bl	8003868 <HAL_RCC_ClockConfig>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800109c:	f000 f8b2 	bl	8001204 <Error_Handler>
  }
}
 80010a0:	bf00      	nop
 80010a2:	3750      	adds	r7, #80	; 0x50
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}
 80010a8:	40023800 	.word	0x40023800
 80010ac:	40007000 	.word	0x40007000

080010b0 <microDelay>:

/* USER CODE BEGIN 4 */
void microDelay(uint16_t delay)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	4603      	mov	r3, r0
 80010b8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim3, 0);
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <microDelay+0x30>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2200      	movs	r2, #0
 80010c0:	625a      	str	r2, [r3, #36]	; 0x24
	while(__HAL_TIM_GET_COUNTER(&htim3) < delay);
 80010c2:	bf00      	nop
 80010c4:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <microDelay+0x30>)
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ca:	88fb      	ldrh	r3, [r7, #6]
 80010cc:	429a      	cmp	r2, r3
 80010ce:	d3f9      	bcc.n	80010c4 <microDelay+0x14>
}
 80010d0:	bf00      	nop
 80010d2:	bf00      	nop
 80010d4:	370c      	adds	r7, #12
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	200003d0 	.word	0x200003d0

080010e4 <servoMotorToOrigin>:
		}
	}
}

void servoMotorToOrigin()
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	af00      	add	r7, sp, #0
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80010e8:	2100      	movs	r1, #0
 80010ea:	4814      	ldr	r0, [pc, #80]	; (800113c <servoMotorToOrigin+0x58>)
 80010ec:	f003 fefc 	bl	8004ee8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80010f0:	2104      	movs	r1, #4
 80010f2:	4812      	ldr	r0, [pc, #72]	; (800113c <servoMotorToOrigin+0x58>)
 80010f4:	f003 fef8 	bl	8004ee8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80010f8:	2108      	movs	r1, #8
 80010fa:	4810      	ldr	r0, [pc, #64]	; (800113c <servoMotorToOrigin+0x58>)
 80010fc:	f003 fef4 	bl	8004ee8 <HAL_TIM_PWM_Start>

	LSteps = 25;
 8001100:	4b0f      	ldr	r3, [pc, #60]	; (8001140 <servoMotorToOrigin+0x5c>)
 8001102:	2219      	movs	r2, #25
 8001104:	601a      	str	r2, [r3, #0]
	RSteps = 25;
 8001106:	4b0f      	ldr	r3, [pc, #60]	; (8001144 <servoMotorToOrigin+0x60>)
 8001108:	2219      	movs	r2, #25
 800110a:	601a      	str	r2, [r3, #0]
	grabSteps = 40;
 800110c:	4b0e      	ldr	r3, [pc, #56]	; (8001148 <servoMotorToOrigin+0x64>)
 800110e:	2228      	movs	r2, #40	; 0x28
 8001110:	601a      	str	r2, [r3, #0]

	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_1, grabSteps);
 8001112:	4b0d      	ldr	r3, [pc, #52]	; (8001148 <servoMotorToOrigin+0x64>)
 8001114:	681a      	ldr	r2, [r3, #0]
 8001116:	4b09      	ldr	r3, [pc, #36]	; (800113c <servoMotorToOrigin+0x58>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_2, LSteps);
 800111c:	4b08      	ldr	r3, [pc, #32]	; (8001140 <servoMotorToOrigin+0x5c>)
 800111e:	681a      	ldr	r2, [r3, #0]
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <servoMotorToOrigin+0x58>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	639a      	str	r2, [r3, #56]	; 0x38
	__HAL_TIM_SetCompare(&htim4, TIM_CHANNEL_3, RSteps);
 8001126:	4b07      	ldr	r3, [pc, #28]	; (8001144 <servoMotorToOrigin+0x60>)
 8001128:	681a      	ldr	r2, [r3, #0]
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <servoMotorToOrigin+0x58>)
 800112c:	681b      	ldr	r3, [r3, #0]
 800112e:	63da      	str	r2, [r3, #60]	; 0x3c

	HAL_TIM_Base_Stop(&htim4);
 8001130:	4802      	ldr	r0, [pc, #8]	; (800113c <servoMotorToOrigin+0x58>)
 8001132:	f003 fe51 	bl	8004dd8 <HAL_TIM_Base_Stop>
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	2000041c 	.word	0x2000041c
 8001140:	20000004 	.word	0x20000004
 8001144:	20000000 	.word	0x20000000
 8001148:	20000008 	.word	0x20000008

0800114c <HAL_GPIO_EXTI_Callback>:
	HAL_TIM_Base_Stop(&htim4);
	HAL_Delay(500);
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b082      	sub	sp, #8
 8001150:	af00      	add	r7, sp, #0
 8001152:	4603      	mov	r3, r0
 8001154:	80fb      	strh	r3, [r7, #6]
	HAL_Delay(50);
 8001156:	2032      	movs	r0, #50	; 0x32
 8001158:	f001 f8c4 	bl	80022e4 <HAL_Delay>
//			__HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, grabSteps);
//			HAL_Delay(5);
//		}
//	}

	if (GPIO_Pin == GPIO_PIN_0)
 800115c:	88fb      	ldrh	r3, [r7, #6]
 800115e:	2b01      	cmp	r3, #1
 8001160:	d12d      	bne.n	80011be <HAL_GPIO_EXTI_Callback+0x72>
	{
	  if(isGrip == 0){
 8001162:	4b24      	ldr	r3, [pc, #144]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d103      	bne.n	8001172 <HAL_GPIO_EXTI_Callback+0x26>
		  isGrip = 1;
 800116a:	4b22      	ldr	r3, [pc, #136]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800116c:	2201      	movs	r2, #1
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	e002      	b.n	8001178 <HAL_GPIO_EXTI_Callback+0x2c>
	  }
	  else
	  {
		  isGrip = 0;
 8001172:	4b20      	ldr	r3, [pc, #128]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 8001174:	2200      	movs	r2, #0
 8001176:	601a      	str	r2, [r3, #0]
	  }

	  if(isGrip == 0){
 8001178:	4b1e      	ldr	r3, [pc, #120]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10b      	bne.n	8001198 <HAL_GPIO_EXTI_Callback+0x4c>
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001180:	2100      	movs	r1, #0
 8001182:	481d      	ldr	r0, [pc, #116]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xac>)
 8001184:	f003 feb0 	bl	8004ee8 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, 25);
 8001188:	4b1b      	ldr	r3, [pc, #108]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xac>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	2219      	movs	r2, #25
 800118e:	635a      	str	r2, [r3, #52]	; 0x34
		  //isGrip = 1;
		  HAL_Delay(5);
 8001190:	2005      	movs	r0, #5
 8001192:	f001 f8a7 	bl	80022e4 <HAL_Delay>
 8001196:	e00e      	b.n	80011b6 <HAL_GPIO_EXTI_Callback+0x6a>
  //		  {
  //			__HAL_TIM_SET_COMPARE(&htim4,TIM_CHANNEL_1, grabSteps);
  //			HAL_Delay(5);
  //		  }
	  }
	  else if(isGrip == 1){
 8001198:	4b16      	ldr	r3, [pc, #88]	; (80011f4 <HAL_GPIO_EXTI_Callback+0xa8>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	2b01      	cmp	r3, #1
 800119e:	d10a      	bne.n	80011b6 <HAL_GPIO_EXTI_Callback+0x6a>
		  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80011a0:	2100      	movs	r1, #0
 80011a2:	4815      	ldr	r0, [pc, #84]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xac>)
 80011a4:	f003 fea0 	bl	8004ee8 <HAL_TIM_PWM_Start>
		  __HAL_TIM_SetCompare(&htim4,TIM_CHANNEL_1, 40);
 80011a8:	4b13      	ldr	r3, [pc, #76]	; (80011f8 <HAL_GPIO_EXTI_Callback+0xac>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2228      	movs	r2, #40	; 0x28
 80011ae:	635a      	str	r2, [r3, #52]	; 0x34
		  //isGrip = 0;
		  HAL_Delay(5);
 80011b0:	2005      	movs	r0, #5
 80011b2:	f001 f897 	bl	80022e4 <HAL_Delay>

	  }
	  HAL_Delay(500);
 80011b6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80011ba:	f001 f893 	bl	80022e4 <HAL_Delay>

	}

	if(GPIO_Pin == GPIO_PIN_3)
 80011be:	88fb      	ldrh	r3, [r7, #6]
 80011c0:	2b08      	cmp	r3, #8
 80011c2:	d112      	bne.n	80011ea <HAL_GPIO_EXTI_Callback+0x9e>
	{
		if(isAuto == 0)
 80011c4:	4b0d      	ldr	r3, [pc, #52]	; (80011fc <HAL_GPIO_EXTI_Callback+0xb0>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d108      	bne.n	80011de <HAL_GPIO_EXTI_Callback+0x92>
		{
			isAuto = 1;
 80011cc:	4b0b      	ldr	r3, [pc, #44]	; (80011fc <HAL_GPIO_EXTI_Callback+0xb0>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	601a      	str	r2, [r3, #0]
			stepMotorSteps = 200;
 80011d2:	4b0b      	ldr	r3, [pc, #44]	; (8001200 <HAL_GPIO_EXTI_Callback+0xb4>)
 80011d4:	22c8      	movs	r2, #200	; 0xc8
 80011d6:	601a      	str	r2, [r3, #0]
			servoMotorToOrigin();
 80011d8:	f7ff ff84 	bl	80010e4 <servoMotorToOrigin>
 80011dc:	e002      	b.n	80011e4 <HAL_GPIO_EXTI_Callback+0x98>

		}
		else
		{
			isAuto = 0;
 80011de:	4b07      	ldr	r3, [pc, #28]	; (80011fc <HAL_GPIO_EXTI_Callback+0xb0>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	601a      	str	r2, [r3, #0]


		}
		HAL_Delay(200);
 80011e4:	20c8      	movs	r0, #200	; 0xc8
 80011e6:	f001 f87d 	bl	80022e4 <HAL_Delay>
	}
}
 80011ea:	bf00      	nop
 80011ec:	3708      	adds	r7, #8
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002d8 	.word	0x200002d8
 80011f8:	2000041c 	.word	0x2000041c
 80011fc:	200002d4 	.word	0x200002d4
 8001200:	20000010 	.word	0x20000010

08001204 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001208:	b672      	cpsid	i
}
 800120a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800120c:	e7fe      	b.n	800120c <Error_Handler+0x8>
	...

08001210 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001214:	4b1b      	ldr	r3, [pc, #108]	; (8001284 <MX_SPI5_Init+0x74>)
 8001216:	4a1c      	ldr	r2, [pc, #112]	; (8001288 <MX_SPI5_Init+0x78>)
 8001218:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800121a:	4b1a      	ldr	r3, [pc, #104]	; (8001284 <MX_SPI5_Init+0x74>)
 800121c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001220:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 8001222:	4b18      	ldr	r3, [pc, #96]	; (8001284 <MX_SPI5_Init+0x74>)
 8001224:	2200      	movs	r2, #0
 8001226:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001228:	4b16      	ldr	r3, [pc, #88]	; (8001284 <MX_SPI5_Init+0x74>)
 800122a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800122e:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001230:	4b14      	ldr	r3, [pc, #80]	; (8001284 <MX_SPI5_Init+0x74>)
 8001232:	2200      	movs	r2, #0
 8001234:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001236:	4b13      	ldr	r3, [pc, #76]	; (8001284 <MX_SPI5_Init+0x74>)
 8001238:	2200      	movs	r2, #0
 800123a:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800123c:	4b11      	ldr	r3, [pc, #68]	; (8001284 <MX_SPI5_Init+0x74>)
 800123e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001242:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001244:	4b0f      	ldr	r3, [pc, #60]	; (8001284 <MX_SPI5_Init+0x74>)
 8001246:	2200      	movs	r2, #0
 8001248:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800124a:	4b0e      	ldr	r3, [pc, #56]	; (8001284 <MX_SPI5_Init+0x74>)
 800124c:	2200      	movs	r2, #0
 800124e:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001250:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_SPI5_Init+0x74>)
 8001252:	2200      	movs	r2, #0
 8001254:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001256:	4b0b      	ldr	r3, [pc, #44]	; (8001284 <MX_SPI5_Init+0x74>)
 8001258:	2200      	movs	r2, #0
 800125a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 800125c:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_SPI5_Init+0x74>)
 800125e:	2207      	movs	r2, #7
 8001260:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001262:	4b08      	ldr	r3, [pc, #32]	; (8001284 <MX_SPI5_Init+0x74>)
 8001264:	2200      	movs	r2, #0
 8001266:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001268:	4b06      	ldr	r3, [pc, #24]	; (8001284 <MX_SPI5_Init+0x74>)
 800126a:	2200      	movs	r2, #0
 800126c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800126e:	4805      	ldr	r0, [pc, #20]	; (8001284 <MX_SPI5_Init+0x74>)
 8001270:	f003 f948 	bl	8004504 <HAL_SPI_Init>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 800127a:	f7ff ffc3 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	2000031c 	.word	0x2000031c
 8001288:	40015000 	.word	0x40015000

0800128c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b08a      	sub	sp, #40	; 0x28
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001294:	f107 0314 	add.w	r3, r7, #20
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI5)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	4a17      	ldr	r2, [pc, #92]	; (8001308 <HAL_SPI_MspInit+0x7c>)
 80012aa:	4293      	cmp	r3, r2
 80012ac:	d128      	bne.n	8001300 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI5_MspInit 0 */

  /* USER CODE END SPI5_MspInit 0 */
    /* SPI5 clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 80012ae:	4b17      	ldr	r3, [pc, #92]	; (800130c <HAL_SPI_MspInit+0x80>)
 80012b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012b2:	4a16      	ldr	r2, [pc, #88]	; (800130c <HAL_SPI_MspInit+0x80>)
 80012b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80012b8:	6453      	str	r3, [r2, #68]	; 0x44
 80012ba:	4b14      	ldr	r3, [pc, #80]	; (800130c <HAL_SPI_MspInit+0x80>)
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 80012c6:	4b11      	ldr	r3, [pc, #68]	; (800130c <HAL_SPI_MspInit+0x80>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a10      	ldr	r2, [pc, #64]	; (800130c <HAL_SPI_MspInit+0x80>)
 80012cc:	f043 0320 	orr.w	r3, r3, #32
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b0e      	ldr	r3, [pc, #56]	; (800130c <HAL_SPI_MspInit+0x80>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0320 	and.w	r3, r3, #32
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80012de:	f44f 7360 	mov.w	r3, #896	; 0x380
 80012e2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80012f0:	2305      	movs	r3, #5
 80012f2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80012f4:	f107 0314 	add.w	r3, r7, #20
 80012f8:	4619      	mov	r1, r3
 80012fa:	4805      	ldr	r0, [pc, #20]	; (8001310 <HAL_SPI_MspInit+0x84>)
 80012fc:	f001 fc4e 	bl	8002b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	; 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40015000 	.word	0x40015000
 800130c:	40023800 	.word	0x40023800
 8001310:	40021400 	.word	0x40021400

08001314 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001314:	b580      	push	{r7, lr}
 8001316:	b082      	sub	sp, #8
 8001318:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800131a:	4b0f      	ldr	r3, [pc, #60]	; (8001358 <HAL_MspInit+0x44>)
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	4a0e      	ldr	r2, [pc, #56]	; (8001358 <HAL_MspInit+0x44>)
 8001320:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001324:	6413      	str	r3, [r2, #64]	; 0x40
 8001326:	4b0c      	ldr	r3, [pc, #48]	; (8001358 <HAL_MspInit+0x44>)
 8001328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800132a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800132e:	607b      	str	r3, [r7, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	4b09      	ldr	r3, [pc, #36]	; (8001358 <HAL_MspInit+0x44>)
 8001334:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001336:	4a08      	ldr	r2, [pc, #32]	; (8001358 <HAL_MspInit+0x44>)
 8001338:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800133c:	6453      	str	r3, [r2, #68]	; 0x44
 800133e:	4b06      	ldr	r3, [pc, #24]	; (8001358 <HAL_MspInit+0x44>)
 8001340:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001342:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001346:	603b      	str	r3, [r7, #0]
 8001348:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800134a:	2005      	movs	r0, #5
 800134c:	f001 f8be 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40023800 	.word	0x40023800

0800135c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001360:	e7fe      	b.n	8001360 <NMI_Handler+0x4>

08001362 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001362:	b480      	push	{r7}
 8001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001366:	e7fe      	b.n	8001366 <HardFault_Handler+0x4>

08001368 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800136c:	e7fe      	b.n	800136c <MemManage_Handler+0x4>

0800136e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800136e:	b480      	push	{r7}
 8001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001372:	e7fe      	b.n	8001372 <BusFault_Handler+0x4>

08001374 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001374:	b480      	push	{r7}
 8001376:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001378:	e7fe      	b.n	8001378 <UsageFault_Handler+0x4>

0800137a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800137a:	b480      	push	{r7}
 800137c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800137e:	bf00      	nop
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800138c:	bf00      	nop
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr

08001396 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001396:	b480      	push	{r7}
 8001398:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800139a:	bf00      	nop
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr

080013a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013a8:	f000 ff7c 	bl	80022a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013ac:	bf00      	nop
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80013b0:	b580      	push	{r7, lr}
 80013b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

	HAL_Delay(50);
 80013b4:	2032      	movs	r0, #50	; 0x32
 80013b6:	f000 ff95 	bl	80022e4 <HAL_Delay>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80013ba:	2001      	movs	r0, #1
 80013bc:	f001 fde6 	bl	8002f8c <HAL_GPIO_EXTI_IRQHandler>
//  			gripState = 1;
//  			gripstart = counter;
//  		}

  /* USER CODE END EXTI0_IRQn 1 */
}
 80013c0:	bf00      	nop
 80013c2:	bd80      	pop	{r7, pc}

080013c4 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 80013c4:	b580      	push	{r7, lr}
 80013c6:	af00      	add	r7, sp, #0
//		//HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
//		stateCanToggle = 1;
//		bounce = 1;
//		start = counter;
//	}
	HAL_Delay(50);
 80013c8:	2032      	movs	r0, #50	; 0x32
 80013ca:	f000 ff8b 	bl	80022e4 <HAL_Delay>
  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 80013ce:	2008      	movs	r0, #8
 80013d0:	f001 fddc 	bl	8002f8c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 80013d4:	2101      	movs	r1, #1
 80013d6:	4802      	ldr	r0, [pc, #8]	; (80013e0 <EXTI3_IRQHandler+0x1c>)
 80013d8:	f001 fdbd 	bl	8002f56 <HAL_GPIO_TogglePin>

  /* USER CODE END EXTI3_IRQn 1 */
}
 80013dc:	bf00      	nop
 80013de:	bd80      	pop	{r7, pc}
 80013e0:	40020400 	.word	0x40020400

080013e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80013e8:	4810      	ldr	r0, [pc, #64]	; (800142c <TIM2_IRQHandler+0x48>)
 80013ea:	f003 fe77 	bl	80050dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  if(counter % 1000 == 1)
 80013ee:	4b10      	ldr	r3, [pc, #64]	; (8001430 <TIM2_IRQHandler+0x4c>)
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	4b10      	ldr	r3, [pc, #64]	; (8001434 <TIM2_IRQHandler+0x50>)
 80013f4:	fba3 1302 	umull	r1, r3, r3, r2
 80013f8:	099b      	lsrs	r3, r3, #6
 80013fa:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	1ad3      	subs	r3, r2, r3
 8001404:	2b01      	cmp	r3, #1
 8001406:	d104      	bne.n	8001412 <TIM2_IRQHandler+0x2e>
  {
	  sec++;
 8001408:	4b0b      	ldr	r3, [pc, #44]	; (8001438 <TIM2_IRQHandler+0x54>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	3301      	adds	r3, #1
 800140e:	4a0a      	ldr	r2, [pc, #40]	; (8001438 <TIM2_IRQHandler+0x54>)
 8001410:	6013      	str	r3, [r2, #0]
  }
  counter++;
 8001412:	4b07      	ldr	r3, [pc, #28]	; (8001430 <TIM2_IRQHandler+0x4c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	3301      	adds	r3, #1
 8001418:	4a05      	ldr	r2, [pc, #20]	; (8001430 <TIM2_IRQHandler+0x4c>)
 800141a:	6013      	str	r3, [r2, #0]
  tick++;
 800141c:	4b07      	ldr	r3, [pc, #28]	; (800143c <TIM2_IRQHandler+0x58>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	3301      	adds	r3, #1
 8001422:	4a06      	ldr	r2, [pc, #24]	; (800143c <TIM2_IRQHandler+0x58>)
 8001424:	6013      	str	r3, [r2, #0]
//  	else {
//  		bounce = 1;
//  			stateCanToggle = 0;
//  		}
  /* USER CODE END TIM2_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000384 	.word	0x20000384
 8001430:	200002dc 	.word	0x200002dc
 8001434:	10624dd3 	.word	0x10624dd3
 8001438:	200002e0 	.word	0x200002e0
 800143c:	200002e4 	.word	0x200002e4

08001440 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b086      	sub	sp, #24
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001448:	4a14      	ldr	r2, [pc, #80]	; (800149c <_sbrk+0x5c>)
 800144a:	4b15      	ldr	r3, [pc, #84]	; (80014a0 <_sbrk+0x60>)
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001454:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_sbrk+0x64>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	2b00      	cmp	r3, #0
 800145a:	d102      	bne.n	8001462 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800145c:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_sbrk+0x64>)
 800145e:	4a12      	ldr	r2, [pc, #72]	; (80014a8 <_sbrk+0x68>)
 8001460:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001462:	4b10      	ldr	r3, [pc, #64]	; (80014a4 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	429a      	cmp	r2, r3
 800146e:	d207      	bcs.n	8001480 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001470:	f005 fd2a 	bl	8006ec8 <__errno>
 8001474:	4603      	mov	r3, r0
 8001476:	220c      	movs	r2, #12
 8001478:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147a:	f04f 33ff 	mov.w	r3, #4294967295
 800147e:	e009      	b.n	8001494 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001480:	4b08      	ldr	r3, [pc, #32]	; (80014a4 <_sbrk+0x64>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001486:	4b07      	ldr	r3, [pc, #28]	; (80014a4 <_sbrk+0x64>)
 8001488:	681a      	ldr	r2, [r3, #0]
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	4413      	add	r3, r2
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <_sbrk+0x64>)
 8001490:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001492:	68fb      	ldr	r3, [r7, #12]
}
 8001494:	4618      	mov	r0, r3
 8001496:	3718      	adds	r7, #24
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20080000 	.word	0x20080000
 80014a0:	00000400 	.word	0x00000400
 80014a4:	20000380 	.word	0x20000380
 80014a8:	20000a10 	.word	0x20000a10

080014ac <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <SystemInit+0x20>)
 80014b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014b6:	4a05      	ldr	r2, [pc, #20]	; (80014cc <SystemInit+0x20>)
 80014b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	e000ed00 	.word	0xe000ed00

080014d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b088      	sub	sp, #32
 80014d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014d6:	f107 0310 	add.w	r3, r7, #16
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014e4:	1d3b      	adds	r3, r7, #4
 80014e6:	2200      	movs	r2, #0
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	605a      	str	r2, [r3, #4]
 80014ec:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014ee:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_TIM2_Init+0x98>)
 80014f0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014f4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 216-1;
 80014f6:	4b1c      	ldr	r3, [pc, #112]	; (8001568 <MX_TIM2_Init+0x98>)
 80014f8:	22d7      	movs	r2, #215	; 0xd7
 80014fa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014fc:	4b1a      	ldr	r3, [pc, #104]	; (8001568 <MX_TIM2_Init+0x98>)
 80014fe:	2200      	movs	r2, #0
 8001500:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 8001502:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_TIM2_Init+0x98>)
 8001504:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001508:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150a:	4b17      	ldr	r3, [pc, #92]	; (8001568 <MX_TIM2_Init+0x98>)
 800150c:	2200      	movs	r2, #0
 800150e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001510:	4b15      	ldr	r3, [pc, #84]	; (8001568 <MX_TIM2_Init+0x98>)
 8001512:	2200      	movs	r2, #0
 8001514:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001516:	4814      	ldr	r0, [pc, #80]	; (8001568 <MX_TIM2_Init+0x98>)
 8001518:	f003 fb96 	bl	8004c48 <HAL_TIM_Base_Init>
 800151c:	4603      	mov	r3, r0
 800151e:	2b00      	cmp	r3, #0
 8001520:	d001      	beq.n	8001526 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 8001522:	f7ff fe6f 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001526:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	4619      	mov	r1, r3
 8001532:	480d      	ldr	r0, [pc, #52]	; (8001568 <MX_TIM2_Init+0x98>)
 8001534:	f004 f806 	bl	8005544 <HAL_TIM_ConfigClockSource>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d001      	beq.n	8001542 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800153e:	f7ff fe61 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001546:	2300      	movs	r3, #0
 8001548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800154a:	1d3b      	adds	r3, r7, #4
 800154c:	4619      	mov	r1, r3
 800154e:	4806      	ldr	r0, [pc, #24]	; (8001568 <MX_TIM2_Init+0x98>)
 8001550:	f004 fcb2 	bl	8005eb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001554:	4603      	mov	r3, r0
 8001556:	2b00      	cmp	r3, #0
 8001558:	d001      	beq.n	800155e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800155a:	f7ff fe53 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800155e:	bf00      	nop
 8001560:	3720      	adds	r7, #32
 8001562:	46bd      	mov	sp, r7
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000384 	.word	0x20000384

0800156c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
 800157c:	609a      	str	r2, [r3, #8]
 800157e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001580:	1d3b      	adds	r3, r7, #4
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
 8001586:	605a      	str	r2, [r3, #4]
 8001588:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800158a:	4b1d      	ldr	r3, [pc, #116]	; (8001600 <MX_TIM3_Init+0x94>)
 800158c:	4a1d      	ldr	r2, [pc, #116]	; (8001604 <MX_TIM3_Init+0x98>)
 800158e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 216-1;
 8001590:	4b1b      	ldr	r3, [pc, #108]	; (8001600 <MX_TIM3_Init+0x94>)
 8001592:	22d7      	movs	r2, #215	; 0xd7
 8001594:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001596:	4b1a      	ldr	r3, [pc, #104]	; (8001600 <MX_TIM3_Init+0x94>)
 8001598:	2200      	movs	r2, #0
 800159a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <MX_TIM3_Init+0x94>)
 800159e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a4:	4b16      	ldr	r3, [pc, #88]	; (8001600 <MX_TIM3_Init+0x94>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015aa:	4b15      	ldr	r3, [pc, #84]	; (8001600 <MX_TIM3_Init+0x94>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80015b0:	4813      	ldr	r0, [pc, #76]	; (8001600 <MX_TIM3_Init+0x94>)
 80015b2:	f003 fb49 	bl	8004c48 <HAL_TIM_Base_Init>
 80015b6:	4603      	mov	r3, r0
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d001      	beq.n	80015c0 <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80015bc:	f7ff fe22 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015c4:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	480c      	ldr	r0, [pc, #48]	; (8001600 <MX_TIM3_Init+0x94>)
 80015ce:	f003 ffb9 	bl	8005544 <HAL_TIM_ConfigClockSource>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015d8:	f7ff fe14 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015dc:	2300      	movs	r3, #0
 80015de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e0:	2300      	movs	r3, #0
 80015e2:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015e4:	1d3b      	adds	r3, r7, #4
 80015e6:	4619      	mov	r1, r3
 80015e8:	4805      	ldr	r0, [pc, #20]	; (8001600 <MX_TIM3_Init+0x94>)
 80015ea:	f004 fc65 	bl	8005eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80015f4:	f7ff fe06 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015f8:	bf00      	nop
 80015fa:	3720      	adds	r7, #32
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	200003d0 	.word	0x200003d0
 8001604:	40000400 	.word	0x40000400

08001608 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08e      	sub	sp, #56	; 0x38
 800160c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800160e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
 800161a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161c:	f107 031c 	add.w	r3, r7, #28
 8001620:	2200      	movs	r2, #0
 8001622:	601a      	str	r2, [r3, #0]
 8001624:	605a      	str	r2, [r3, #4]
 8001626:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001628:	463b      	mov	r3, r7
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800163a:	4b39      	ldr	r3, [pc, #228]	; (8001720 <MX_TIM4_Init+0x118>)
 800163c:	4a39      	ldr	r2, [pc, #228]	; (8001724 <MX_TIM4_Init+0x11c>)
 800163e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 2160-1;
 8001640:	4b37      	ldr	r3, [pc, #220]	; (8001720 <MX_TIM4_Init+0x118>)
 8001642:	f640 026f 	movw	r2, #2159	; 0x86f
 8001646:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001648:	4b35      	ldr	r3, [pc, #212]	; (8001720 <MX_TIM4_Init+0x118>)
 800164a:	2200      	movs	r2, #0
 800164c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000;
 800164e:	4b34      	ldr	r3, [pc, #208]	; (8001720 <MX_TIM4_Init+0x118>)
 8001650:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001654:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001656:	4b32      	ldr	r3, [pc, #200]	; (8001720 <MX_TIM4_Init+0x118>)
 8001658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800165c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800165e:	4b30      	ldr	r3, [pc, #192]	; (8001720 <MX_TIM4_Init+0x118>)
 8001660:	2200      	movs	r2, #0
 8001662:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001664:	482e      	ldr	r0, [pc, #184]	; (8001720 <MX_TIM4_Init+0x118>)
 8001666:	f003 faef 	bl	8004c48 <HAL_TIM_Base_Init>
 800166a:	4603      	mov	r3, r0
 800166c:	2b00      	cmp	r3, #0
 800166e:	d001      	beq.n	8001674 <MX_TIM4_Init+0x6c>
  {
    Error_Handler();
 8001670:	f7ff fdc8 	bl	8001204 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001678:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800167a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167e:	4619      	mov	r1, r3
 8001680:	4827      	ldr	r0, [pc, #156]	; (8001720 <MX_TIM4_Init+0x118>)
 8001682:	f003 ff5f 	bl	8005544 <HAL_TIM_ConfigClockSource>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <MX_TIM4_Init+0x88>
  {
    Error_Handler();
 800168c:	f7ff fdba 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001690:	4823      	ldr	r0, [pc, #140]	; (8001720 <MX_TIM4_Init+0x118>)
 8001692:	f003 fbc8 	bl	8004e26 <HAL_TIM_PWM_Init>
 8001696:	4603      	mov	r3, r0
 8001698:	2b00      	cmp	r3, #0
 800169a:	d001      	beq.n	80016a0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 800169c:	f7ff fdb2 	bl	8001204 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016a0:	2300      	movs	r3, #0
 80016a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016a4:	2300      	movs	r3, #0
 80016a6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	4619      	mov	r1, r3
 80016ae:	481c      	ldr	r0, [pc, #112]	; (8001720 <MX_TIM4_Init+0x118>)
 80016b0:	f004 fc02 	bl	8005eb8 <HAL_TIMEx_MasterConfigSynchronization>
 80016b4:	4603      	mov	r3, r0
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d001      	beq.n	80016be <MX_TIM4_Init+0xb6>
  {
    Error_Handler();
 80016ba:	f7ff fda3 	bl	8001204 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016be:	2360      	movs	r3, #96	; 0x60
 80016c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 500;
 80016c2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016c6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016c8:	2300      	movs	r3, #0
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016cc:	2300      	movs	r3, #0
 80016ce:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016d0:	463b      	mov	r3, r7
 80016d2:	2200      	movs	r2, #0
 80016d4:	4619      	mov	r1, r3
 80016d6:	4812      	ldr	r0, [pc, #72]	; (8001720 <MX_TIM4_Init+0x118>)
 80016d8:	f003 fe20 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d001      	beq.n	80016e6 <MX_TIM4_Init+0xde>
  {
    Error_Handler();
 80016e2:	f7ff fd8f 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016e6:	463b      	mov	r3, r7
 80016e8:	2204      	movs	r2, #4
 80016ea:	4619      	mov	r1, r3
 80016ec:	480c      	ldr	r0, [pc, #48]	; (8001720 <MX_TIM4_Init+0x118>)
 80016ee:	f003 fe15 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_TIM4_Init+0xf4>
  {
    Error_Handler();
 80016f8:	f7ff fd84 	bl	8001204 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016fc:	463b      	mov	r3, r7
 80016fe:	2208      	movs	r2, #8
 8001700:	4619      	mov	r1, r3
 8001702:	4807      	ldr	r0, [pc, #28]	; (8001720 <MX_TIM4_Init+0x118>)
 8001704:	f003 fe0a 	bl	800531c <HAL_TIM_PWM_ConfigChannel>
 8001708:	4603      	mov	r3, r0
 800170a:	2b00      	cmp	r3, #0
 800170c:	d001      	beq.n	8001712 <MX_TIM4_Init+0x10a>
  {
    Error_Handler();
 800170e:	f7ff fd79 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001712:	4803      	ldr	r0, [pc, #12]	; (8001720 <MX_TIM4_Init+0x118>)
 8001714:	f000 f854 	bl	80017c0 <HAL_TIM_MspPostInit>

}
 8001718:	bf00      	nop
 800171a:	3738      	adds	r7, #56	; 0x38
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	2000041c 	.word	0x2000041c
 8001724:	40000800 	.word	0x40000800

08001728 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001738:	d114      	bne.n	8001764 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173a:	4b1e      	ldr	r3, [pc, #120]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a1d      	ldr	r2, [pc, #116]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b1b      	ldr	r3, [pc, #108]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001752:	2200      	movs	r2, #0
 8001754:	2100      	movs	r1, #0
 8001756:	201c      	movs	r0, #28
 8001758:	f000 fec3 	bl	80024e2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800175c:	201c      	movs	r0, #28
 800175e:	f000 fedc 	bl	800251a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_TIM4_CLK_ENABLE();
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001762:	e022      	b.n	80017aa <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM3)
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a13      	ldr	r2, [pc, #76]	; (80017b8 <HAL_TIM_Base_MspInit+0x90>)
 800176a:	4293      	cmp	r3, r2
 800176c:	d10c      	bne.n	8001788 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a10      	ldr	r2, [pc, #64]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001774:	f043 0302 	orr.w	r3, r3, #2
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f003 0302 	and.w	r3, r3, #2
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
}
 8001786:	e010      	b.n	80017aa <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM4)
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a0b      	ldr	r2, [pc, #44]	; (80017bc <HAL_TIM_Base_MspInit+0x94>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d10b      	bne.n	80017aa <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001792:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001796:	4a07      	ldr	r2, [pc, #28]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6413      	str	r3, [r2, #64]	; 0x40
 800179e:	4b05      	ldr	r3, [pc, #20]	; (80017b4 <HAL_TIM_Base_MspInit+0x8c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
}
 80017aa:	bf00      	nop
 80017ac:	3718      	adds	r7, #24
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40023800 	.word	0x40023800
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40000800 	.word	0x40000800

080017c0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b088      	sub	sp, #32
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017c8:	f107 030c 	add.w	r3, r7, #12
 80017cc:	2200      	movs	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
 80017d0:	605a      	str	r2, [r3, #4]
 80017d2:	609a      	str	r2, [r3, #8]
 80017d4:	60da      	str	r2, [r3, #12]
 80017d6:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	4a11      	ldr	r2, [pc, #68]	; (8001824 <HAL_TIM_MspPostInit+0x64>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d11c      	bne.n	800181c <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80017e2:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_TIM_MspPostInit+0x68>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e6:	4a10      	ldr	r2, [pc, #64]	; (8001828 <HAL_TIM_MspPostInit+0x68>)
 80017e8:	f043 0308 	orr.w	r3, r3, #8
 80017ec:	6313      	str	r3, [r2, #48]	; 0x30
 80017ee:	4b0e      	ldr	r3, [pc, #56]	; (8001828 <HAL_TIM_MspPostInit+0x68>)
 80017f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f2:	f003 0308 	and.w	r3, r3, #8
 80017f6:	60bb      	str	r3, [r7, #8]
 80017f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 80017fa:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 80017fe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001800:	2302      	movs	r3, #2
 8001802:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001808:	2300      	movs	r3, #0
 800180a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800180c:	2302      	movs	r3, #2
 800180e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001810:	f107 030c 	add.w	r3, r7, #12
 8001814:	4619      	mov	r1, r3
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <HAL_TIM_MspPostInit+0x6c>)
 8001818:	f001 f9c0 	bl	8002b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800181c:	bf00      	nop
 800181e:	3720      	adds	r7, #32
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	40000800 	.word	0x40000800
 8001828:	40023800 	.word	0x40023800
 800182c:	40020c00 	.word	0x40020c00

08001830 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001834:	4b14      	ldr	r3, [pc, #80]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001836:	4a15      	ldr	r2, [pc, #84]	; (800188c <MX_USART3_UART_Init+0x5c>)
 8001838:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800183a:	4b13      	ldr	r3, [pc, #76]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800183c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001840:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001844:	2200      	movs	r2, #0
 8001846:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001848:	4b0f      	ldr	r3, [pc, #60]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800184a:	2200      	movs	r2, #0
 800184c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001850:	2200      	movs	r2, #0
 8001852:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001854:	4b0c      	ldr	r3, [pc, #48]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001856:	220c      	movs	r2, #12
 8001858:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800185a:	4b0b      	ldr	r3, [pc, #44]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800185c:	2200      	movs	r2, #0
 800185e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001860:	4b09      	ldr	r3, [pc, #36]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001862:	2200      	movs	r2, #0
 8001864:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001866:	4b08      	ldr	r3, [pc, #32]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001868:	2200      	movs	r2, #0
 800186a:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800186c:	4b06      	ldr	r3, [pc, #24]	; (8001888 <MX_USART3_UART_Init+0x58>)
 800186e:	2200      	movs	r2, #0
 8001870:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_USART3_UART_Init+0x58>)
 8001874:	f004 fbcc 	bl	8006010 <HAL_UART_Init>
 8001878:	4603      	mov	r3, r0
 800187a:	2b00      	cmp	r3, #0
 800187c:	d001      	beq.n	8001882 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800187e:	f7ff fcc1 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001882:	bf00      	nop
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	20000468 	.word	0x20000468
 800188c:	40004800 	.word	0x40004800

08001890 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b0ae      	sub	sp, #184	; 0xb8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001898:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
 80018a2:	609a      	str	r2, [r3, #8]
 80018a4:	60da      	str	r2, [r3, #12]
 80018a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018a8:	f107 0314 	add.w	r3, r7, #20
 80018ac:	2290      	movs	r2, #144	; 0x90
 80018ae:	2100      	movs	r1, #0
 80018b0:	4618      	mov	r0, r3
 80018b2:	f005 fb33 	bl	8006f1c <memset>
  if(uartHandle->Instance==USART3)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a22      	ldr	r2, [pc, #136]	; (8001944 <HAL_UART_MspInit+0xb4>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d13c      	bne.n	800193a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80018c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80018c4:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80018c6:	2300      	movs	r3, #0
 80018c8:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80018ca:	f107 0314 	add.w	r3, r7, #20
 80018ce:	4618      	mov	r0, r3
 80018d0:	f002 f9f0 	bl	8003cb4 <HAL_RCCEx_PeriphCLKConfig>
 80018d4:	4603      	mov	r3, r0
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d001      	beq.n	80018de <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80018da:	f7ff fc93 	bl	8001204 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80018de:	4b1a      	ldr	r3, [pc, #104]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018e2:	4a19      	ldr	r2, [pc, #100]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80018e8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ea:	4b17      	ldr	r3, [pc, #92]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018f2:	613b      	str	r3, [r7, #16]
 80018f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80018f6:	4b14      	ldr	r3, [pc, #80]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	4a13      	ldr	r2, [pc, #76]	; (8001948 <HAL_UART_MspInit+0xb8>)
 80018fc:	f043 0308 	orr.w	r3, r3, #8
 8001900:	6313      	str	r3, [r2, #48]	; 0x30
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_UART_MspInit+0xb8>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	f003 0308 	and.w	r3, r3, #8
 800190a:	60fb      	str	r3, [r7, #12]
 800190c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800190e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001912:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001916:	2302      	movs	r3, #2
 8001918:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800191c:	2300      	movs	r3, #0
 800191e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001922:	2303      	movs	r3, #3
 8001924:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001928:	2307      	movs	r3, #7
 800192a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800192e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001932:	4619      	mov	r1, r3
 8001934:	4805      	ldr	r0, [pc, #20]	; (800194c <HAL_UART_MspInit+0xbc>)
 8001936:	f001 f931 	bl	8002b9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 800193a:	bf00      	nop
 800193c:	37b8      	adds	r7, #184	; 0xb8
 800193e:	46bd      	mov	sp, r7
 8001940:	bd80      	pop	{r7, pc}
 8001942:	bf00      	nop
 8001944:	40004800 	.word	0x40004800
 8001948:	40023800 	.word	0x40023800
 800194c:	40020c00 	.word	0x40020c00

08001950 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001954:	4b14      	ldr	r3, [pc, #80]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001956:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800195a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 800195c:	4b12      	ldr	r3, [pc, #72]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800195e:	2206      	movs	r2, #6
 8001960:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001962:	4b11      	ldr	r3, [pc, #68]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001964:	2202      	movs	r2, #2
 8001966:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001968:	4b0f      	ldr	r3, [pc, #60]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800196a:	2200      	movs	r2, #0
 800196c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800196e:	4b0e      	ldr	r3, [pc, #56]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001970:	2202      	movs	r2, #2
 8001972:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001974:	4b0c      	ldr	r3, [pc, #48]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001976:	2201      	movs	r2, #1
 8001978:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800197a:	4b0b      	ldr	r3, [pc, #44]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800197c:	2200      	movs	r2, #0
 800197e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001980:	4b09      	ldr	r3, [pc, #36]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001982:	2200      	movs	r2, #0
 8001984:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001988:	2201      	movs	r2, #1
 800198a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800198c:	4b06      	ldr	r3, [pc, #24]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800198e:	2200      	movs	r2, #0
 8001990:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001994:	f001 fb12 	bl	8002fbc <HAL_PCD_Init>
 8001998:	4603      	mov	r3, r0
 800199a:	2b00      	cmp	r3, #0
 800199c:	d001      	beq.n	80019a2 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 800199e:	f7ff fc31 	bl	8001204 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80019a2:	bf00      	nop
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	200004f0 	.word	0x200004f0

080019ac <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b0ae      	sub	sp, #184	; 0xb8
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80019c4:	f107 0314 	add.w	r3, r7, #20
 80019c8:	2290      	movs	r2, #144	; 0x90
 80019ca:	2100      	movs	r1, #0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f005 faa5 	bl	8006f1c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019da:	d159      	bne.n	8001a90 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80019dc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019e0:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4618      	mov	r0, r3
 80019ee:	f002 f961 	bl	8003cb4 <HAL_RCCEx_PeriphCLKConfig>
 80019f2:	4603      	mov	r3, r0
 80019f4:	2b00      	cmp	r3, #0
 80019f6:	d001      	beq.n	80019fc <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80019f8:	f7ff fc04 	bl	8001204 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019fc:	4b26      	ldr	r3, [pc, #152]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 80019fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a00:	4a25      	ldr	r2, [pc, #148]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a02:	f043 0301 	orr.w	r3, r3, #1
 8001a06:	6313      	str	r3, [r2, #48]	; 0x30
 8001a08:	4b23      	ldr	r3, [pc, #140]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	f003 0301 	and.w	r3, r3, #1
 8001a10:	613b      	str	r3, [r7, #16]
 8001a12:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001a14:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001a18:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a22:	2300      	movs	r3, #0
 8001a24:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a2e:	230a      	movs	r3, #10
 8001a30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4818      	ldr	r0, [pc, #96]	; (8001a9c <HAL_PCD_MspInit+0xf0>)
 8001a3c:	f001 f8ae 	bl	8002b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001a40:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001a44:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001a54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4810      	ldr	r0, [pc, #64]	; (8001a9c <HAL_PCD_MspInit+0xf0>)
 8001a5c:	f001 f89e 	bl	8002b9c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001a60:	4b0d      	ldr	r3, [pc, #52]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a64:	4a0c      	ldr	r2, [pc, #48]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a6a:	6353      	str	r3, [r2, #52]	; 0x34
 8001a6c:	4b0a      	ldr	r3, [pc, #40]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a70:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	4b07      	ldr	r3, [pc, #28]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7c:	4a06      	ldr	r2, [pc, #24]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a7e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a82:	6453      	str	r3, [r2, #68]	; 0x44
 8001a84:	4b04      	ldr	r3, [pc, #16]	; (8001a98 <HAL_PCD_MspInit+0xec>)
 8001a86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8001a90:	bf00      	nop
 8001a92:	37b8      	adds	r7, #184	; 0xb8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	40023800 	.word	0x40023800
 8001a9c:	40020000 	.word	0x40020000

08001aa0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
                                                                                                                                                                                                                                                                                     ldr   sp, =_estack      /* set stack pointer */
 8001aa0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ad8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001aa4:	480d      	ldr	r0, [pc, #52]	; (8001adc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001aa6:	490e      	ldr	r1, [pc, #56]	; (8001ae0 <LoopFillZerobss+0x1a>)
                                                                                                                                                                                                                                            ldr r2, =_sidata
 8001aa8:	4a0e      	ldr	r2, [pc, #56]	; (8001ae4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001aaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001aac:	e002      	b.n	8001ab4 <LoopCopyDataInit>

08001aae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001aae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ab0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ab2:	3304      	adds	r3, #4

08001ab4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ab4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ab6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ab8:	d3f9      	bcc.n	8001aae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aba:	4a0b      	ldr	r2, [pc, #44]	; (8001ae8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001abc:	4c0b      	ldr	r4, [pc, #44]	; (8001aec <LoopFillZerobss+0x26>)
  movs r3, #0
 8001abe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ac0:	e001      	b.n	8001ac6 <LoopFillZerobss>

08001ac2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001ac2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001ac4:	3204      	adds	r2, #4

08001ac6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001ac6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ac8:	d3fb      	bcc.n	8001ac2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001aca:	f7ff fcef 	bl	80014ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001ace:	f005 fa01 	bl	8006ed4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ad2:	f7ff f801 	bl	8000ad8 <main>
  bx  lr    
 8001ad6:	4770      	bx	lr
                                                                                                                                                                                                                                                                                     ldr   sp, =_estack      /* set stack pointer */
 8001ad8:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8001adc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ae0:	20000088 	.word	0x20000088
                                                                                                                                                                                                                                            ldr r2, =_sidata
 8001ae4:	08007ad8 	.word	0x08007ad8
  ldr r2, =_sbss
 8001ae8:	200001c8 	.word	0x200001c8
  ldr r4, =_ebss
 8001aec:	20000a0c 	.word	0x20000a0c

08001af0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001af0:	e7fe      	b.n	8001af0 <ADC_IRQHandler>
	...

08001af4 <ILI9341_Draw_Char>:
}

/*Draws a character (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Char(char Character, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour) 
{
 8001af4:	b590      	push	{r4, r7, lr}
 8001af6:	b089      	sub	sp, #36	; 0x24
 8001af8:	af02      	add	r7, sp, #8
 8001afa:	4604      	mov	r4, r0
 8001afc:	4608      	mov	r0, r1
 8001afe:	4611      	mov	r1, r2
 8001b00:	461a      	mov	r2, r3
 8001b02:	4623      	mov	r3, r4
 8001b04:	71fb      	strb	r3, [r7, #7]
 8001b06:	4603      	mov	r3, r0
 8001b08:	71bb      	strb	r3, [r7, #6]
 8001b0a:	460b      	mov	r3, r1
 8001b0c:	717b      	strb	r3, [r7, #5]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	807b      	strh	r3, [r7, #2]
		uint8_t 	function_char;
    uint8_t 	i,j;
		
		function_char = Character;
 8001b12:	79fb      	ldrb	r3, [r7, #7]
 8001b14:	75fb      	strb	r3, [r7, #23]
		
    if (function_char < ' ') {
 8001b16:	7dfb      	ldrb	r3, [r7, #23]
 8001b18:	2b1f      	cmp	r3, #31
 8001b1a:	d802      	bhi.n	8001b22 <ILI9341_Draw_Char+0x2e>
        Character = 0;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	71fb      	strb	r3, [r7, #7]
 8001b20:	e002      	b.n	8001b28 <ILI9341_Draw_Char+0x34>
    } else {
        function_char -= 32;
 8001b22:	7dfb      	ldrb	r3, [r7, #23]
 8001b24:	3b20      	subs	r3, #32
 8001b26:	75fb      	strb	r3, [r7, #23]
		}
   	
		char temp[CHAR_WIDTH];
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001b28:	2300      	movs	r3, #0
 8001b2a:	753b      	strb	r3, [r7, #20]
 8001b2c:	e012      	b.n	8001b54 <ILI9341_Draw_Char+0x60>
		{
		temp[k] = font[function_char][k];
 8001b2e:	7dfa      	ldrb	r2, [r7, #23]
 8001b30:	7d38      	ldrb	r0, [r7, #20]
 8001b32:	7d39      	ldrb	r1, [r7, #20]
 8001b34:	4c3b      	ldr	r4, [pc, #236]	; (8001c24 <ILI9341_Draw_Char+0x130>)
 8001b36:	4613      	mov	r3, r2
 8001b38:	005b      	lsls	r3, r3, #1
 8001b3a:	4413      	add	r3, r2
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	4423      	add	r3, r4
 8001b40:	4403      	add	r3, r0
 8001b42:	781a      	ldrb	r2, [r3, #0]
 8001b44:	f101 0318 	add.w	r3, r1, #24
 8001b48:	443b      	add	r3, r7
 8001b4a:	f803 2c0c 	strb.w	r2, [r3, #-12]
		for(uint8_t k = 0; k<CHAR_WIDTH; k++)
 8001b4e:	7d3b      	ldrb	r3, [r7, #20]
 8001b50:	3301      	adds	r3, #1
 8001b52:	753b      	strb	r3, [r7, #20]
 8001b54:	7d3b      	ldrb	r3, [r7, #20]
 8001b56:	2b05      	cmp	r3, #5
 8001b58:	d9e9      	bls.n	8001b2e <ILI9341_Draw_Char+0x3a>
		}
		
    // Draw pixels
		ILI9341_Draw_Rectangle(X, Y, CHAR_WIDTH*Size, CHAR_HEIGHT*Size, Background_Colour);
 8001b5a:	79bb      	ldrb	r3, [r7, #6]
 8001b5c:	b298      	uxth	r0, r3
 8001b5e:	797b      	ldrb	r3, [r7, #5]
 8001b60:	b299      	uxth	r1, r3
 8001b62:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b64:	461a      	mov	r2, r3
 8001b66:	0052      	lsls	r2, r2, #1
 8001b68:	4413      	add	r3, r2
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	b29a      	uxth	r2, r3
 8001b6e:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001b70:	00db      	lsls	r3, r3, #3
 8001b72:	b29c      	uxth	r4, r3
 8001b74:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	4623      	mov	r3, r4
 8001b7a:	f000 faf9 	bl	8002170 <ILI9341_Draw_Rectangle>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001b7e:	2300      	movs	r3, #0
 8001b80:	757b      	strb	r3, [r7, #21]
 8001b82:	e047      	b.n	8001c14 <ILI9341_Draw_Char+0x120>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	75bb      	strb	r3, [r7, #22]
 8001b88:	e03e      	b.n	8001c08 <ILI9341_Draw_Char+0x114>
            if (temp[j] & (1<<i)) {			
 8001b8a:	7d7b      	ldrb	r3, [r7, #21]
 8001b8c:	3318      	adds	r3, #24
 8001b8e:	443b      	add	r3, r7
 8001b90:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001b94:	461a      	mov	r2, r3
 8001b96:	7dbb      	ldrb	r3, [r7, #22]
 8001b98:	fa42 f303 	asr.w	r3, r2, r3
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d02e      	beq.n	8001c02 <ILI9341_Draw_Char+0x10e>
							if(Size == 1)
 8001ba4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001ba6:	2b01      	cmp	r3, #1
 8001ba8:	d110      	bne.n	8001bcc <ILI9341_Draw_Char+0xd8>
							{
              ILI9341_Draw_Pixel(X+j, Y+i, Colour);
 8001baa:	79bb      	ldrb	r3, [r7, #6]
 8001bac:	b29a      	uxth	r2, r3
 8001bae:	7d7b      	ldrb	r3, [r7, #21]
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	4413      	add	r3, r2
 8001bb4:	b298      	uxth	r0, r3
 8001bb6:	797b      	ldrb	r3, [r7, #5]
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	7dbb      	ldrb	r3, [r7, #22]
 8001bbc:	b29b      	uxth	r3, r3
 8001bbe:	4413      	add	r3, r2
 8001bc0:	b29b      	uxth	r3, r3
 8001bc2:	887a      	ldrh	r2, [r7, #2]
 8001bc4:	4619      	mov	r1, r3
 8001bc6:	f000 fa0b 	bl	8001fe0 <ILI9341_Draw_Pixel>
 8001bca:	e01a      	b.n	8001c02 <ILI9341_Draw_Char+0x10e>
							}
							else
							{
							ILI9341_Draw_Rectangle(X+(j*Size), Y+(i*Size), Size, Size, Colour);
 8001bcc:	79bb      	ldrb	r3, [r7, #6]
 8001bce:	b29a      	uxth	r2, r3
 8001bd0:	7d7b      	ldrb	r3, [r7, #21]
 8001bd2:	b29b      	uxth	r3, r3
 8001bd4:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001bd6:	fb11 f303 	smulbb	r3, r1, r3
 8001bda:	b29b      	uxth	r3, r3
 8001bdc:	4413      	add	r3, r2
 8001bde:	b298      	uxth	r0, r3
 8001be0:	797b      	ldrb	r3, [r7, #5]
 8001be2:	b29a      	uxth	r2, r3
 8001be4:	7dbb      	ldrb	r3, [r7, #22]
 8001be6:	b29b      	uxth	r3, r3
 8001be8:	8d39      	ldrh	r1, [r7, #40]	; 0x28
 8001bea:	fb11 f303 	smulbb	r3, r1, r3
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	b299      	uxth	r1, r3
 8001bf4:	8d3c      	ldrh	r4, [r7, #40]	; 0x28
 8001bf6:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001bf8:	887b      	ldrh	r3, [r7, #2]
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	f000 fab7 	bl	8002170 <ILI9341_Draw_Rectangle>
        for (i=0; i<CHAR_HEIGHT; i++) {
 8001c02:	7dbb      	ldrb	r3, [r7, #22]
 8001c04:	3301      	adds	r3, #1
 8001c06:	75bb      	strb	r3, [r7, #22]
 8001c08:	7dbb      	ldrb	r3, [r7, #22]
 8001c0a:	2b07      	cmp	r3, #7
 8001c0c:	d9bd      	bls.n	8001b8a <ILI9341_Draw_Char+0x96>
    for (j=0; j<CHAR_WIDTH; j++) {
 8001c0e:	7d7b      	ldrb	r3, [r7, #21]
 8001c10:	3301      	adds	r3, #1
 8001c12:	757b      	strb	r3, [r7, #21]
 8001c14:	7d7b      	ldrb	r3, [r7, #21]
 8001c16:	2b05      	cmp	r3, #5
 8001c18:	d9b4      	bls.n	8001b84 <ILI9341_Draw_Char+0x90>
							}
            }						
        }
    }
}
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	371c      	adds	r7, #28
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd90      	pop	{r4, r7, pc}
 8001c24:	08007854 	.word	0x08007854

08001c28 <ILI9341_Draw_Text>:

/*Draws an array of characters (fonts imported from fonts.h) at X,Y location with specified font colour, size and Background colour*/
/*See fonts.h implementation of font on what is required for changing to a different font when switching fonts libraries*/
void ILI9341_Draw_Text(const char* Text, uint8_t X, uint8_t Y, uint16_t Colour, uint16_t Size, uint16_t Background_Colour)
{
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b085      	sub	sp, #20
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	70fb      	strb	r3, [r7, #3]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	70bb      	strb	r3, [r7, #2]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	803b      	strh	r3, [r7, #0]
    while (*Text) {
 8001c42:	e017      	b.n	8001c74 <ILI9341_Draw_Text+0x4c>
        ILI9341_Draw_Char(*Text++, X, Y, Colour, Size, Background_Colour);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	1c5a      	adds	r2, r3, #1
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	7818      	ldrb	r0, [r3, #0]
 8001c4c:	883c      	ldrh	r4, [r7, #0]
 8001c4e:	78ba      	ldrb	r2, [r7, #2]
 8001c50:	78f9      	ldrb	r1, [r7, #3]
 8001c52:	8bbb      	ldrh	r3, [r7, #28]
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	8b3b      	ldrh	r3, [r7, #24]
 8001c58:	9300      	str	r3, [sp, #0]
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	f7ff ff4a 	bl	8001af4 <ILI9341_Draw_Char>
        X += CHAR_WIDTH*Size;
 8001c60:	8b3b      	ldrh	r3, [r7, #24]
 8001c62:	b2db      	uxtb	r3, r3
 8001c64:	461a      	mov	r2, r3
 8001c66:	0052      	lsls	r2, r2, #1
 8001c68:	4413      	add	r3, r2
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	b2da      	uxtb	r2, r3
 8001c6e:	78fb      	ldrb	r3, [r7, #3]
 8001c70:	4413      	add	r3, r2
 8001c72:	70fb      	strb	r3, [r7, #3]
    while (*Text) {
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d1e3      	bne.n	8001c44 <ILI9341_Draw_Text+0x1c>
    }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bd90      	pop	{r4, r7, pc}
	...

08001c88 <ILI9341_SPI_Send>:
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	//CS OFF
}

/*Send data (char) to LCD*/
void ILI9341_SPI_Send(unsigned char SPI_Data)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	4603      	mov	r3, r0
 8001c90:	71fb      	strb	r3, [r7, #7]
HAL_SPI_Transmit(HSPI_INSTANCE, &SPI_Data, 1, 1);
 8001c92:	1df9      	adds	r1, r7, #7
 8001c94:	2301      	movs	r3, #1
 8001c96:	2201      	movs	r2, #1
 8001c98:	4803      	ldr	r0, [pc, #12]	; (8001ca8 <ILI9341_SPI_Send+0x20>)
 8001c9a:	f002 fcde 	bl	800465a <HAL_SPI_Transmit>
}
 8001c9e:	bf00      	nop
 8001ca0:	3708      	adds	r7, #8
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	bd80      	pop	{r7, pc}
 8001ca6:	bf00      	nop
 8001ca8:	2000031c 	.word	0x2000031c

08001cac <ILI9341_Write_Command>:

/* Send command (char) to LCD */
void ILI9341_Write_Command(uint8_t Command)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	2120      	movs	r1, #32
 8001cba:	480a      	ldr	r0, [pc, #40]	; (8001ce4 <ILI9341_Write_Command+0x38>)
 8001cbc:	f001 f932 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8001cc0:	2200      	movs	r2, #0
 8001cc2:	2180      	movs	r1, #128	; 0x80
 8001cc4:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <ILI9341_Write_Command+0x38>)
 8001cc6:	f001 f92d 	bl	8002f24 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Command);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ffdb 	bl	8001c88 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8001cd2:	2201      	movs	r2, #1
 8001cd4:	2120      	movs	r1, #32
 8001cd6:	4803      	ldr	r0, [pc, #12]	; (8001ce4 <ILI9341_Write_Command+0x38>)
 8001cd8:	f001 f924 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40020c00 	.word	0x40020c00

08001ce8 <ILI9341_Write_Data>:

/* Send Data (char) to LCD */
void ILI9341_Write_Data(uint8_t Data)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	b082      	sub	sp, #8
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	4603      	mov	r3, r0
 8001cf0:	71fb      	strb	r3, [r7, #7]
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2180      	movs	r1, #128	; 0x80
 8001cf6:	480a      	ldr	r0, [pc, #40]	; (8001d20 <ILI9341_Write_Data+0x38>)
 8001cf8:	f001 f914 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	2120      	movs	r1, #32
 8001d00:	4807      	ldr	r0, [pc, #28]	; (8001d20 <ILI9341_Write_Data+0x38>)
 8001d02:	f001 f90f 	bl	8002f24 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(Data);	
 8001d06:	79fb      	ldrb	r3, [r7, #7]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ffbd 	bl	8001c88 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001d0e:	2201      	movs	r2, #1
 8001d10:	2120      	movs	r1, #32
 8001d12:	4803      	ldr	r0, [pc, #12]	; (8001d20 <ILI9341_Write_Data+0x38>)
 8001d14:	f001 f906 	bl	8002f24 <HAL_GPIO_WritePin>
}
 8001d18:	bf00      	nop
 8001d1a:	3708      	adds	r7, #8
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	bd80      	pop	{r7, pc}
 8001d20:	40020c00 	.word	0x40020c00

08001d24 <ILI9341_Set_Address>:

/* Set Address - Location block - to draw into */
void ILI9341_Set_Address(uint16_t X1, uint16_t Y1, uint16_t X2, uint16_t Y2)
{
 8001d24:	b590      	push	{r4, r7, lr}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	4608      	mov	r0, r1
 8001d2e:	4611      	mov	r1, r2
 8001d30:	461a      	mov	r2, r3
 8001d32:	4623      	mov	r3, r4
 8001d34:	80fb      	strh	r3, [r7, #6]
 8001d36:	4603      	mov	r3, r0
 8001d38:	80bb      	strh	r3, [r7, #4]
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	807b      	strh	r3, [r7, #2]
 8001d3e:	4613      	mov	r3, r2
 8001d40:	803b      	strh	r3, [r7, #0]
ILI9341_Write_Command(0x2A);
 8001d42:	202a      	movs	r0, #42	; 0x2a
 8001d44:	f7ff ffb2 	bl	8001cac <ILI9341_Write_Command>
ILI9341_Write_Data(X1>>8);
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	0a1b      	lsrs	r3, r3, #8
 8001d4c:	b29b      	uxth	r3, r3
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	4618      	mov	r0, r3
 8001d52:	f7ff ffc9 	bl	8001ce8 <ILI9341_Write_Data>
ILI9341_Write_Data(X1);
 8001d56:	88fb      	ldrh	r3, [r7, #6]
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff ffc4 	bl	8001ce8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2>>8);
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	0a1b      	lsrs	r3, r3, #8
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	b2db      	uxtb	r3, r3
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f7ff ffbd 	bl	8001ce8 <ILI9341_Write_Data>
ILI9341_Write_Data(X2);
 8001d6e:	887b      	ldrh	r3, [r7, #2]
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff ffb8 	bl	8001ce8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2B);
 8001d78:	202b      	movs	r0, #43	; 0x2b
 8001d7a:	f7ff ff97 	bl	8001cac <ILI9341_Write_Command>
ILI9341_Write_Data(Y1>>8);
 8001d7e:	88bb      	ldrh	r3, [r7, #4]
 8001d80:	0a1b      	lsrs	r3, r3, #8
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	b2db      	uxtb	r3, r3
 8001d86:	4618      	mov	r0, r3
 8001d88:	f7ff ffae 	bl	8001ce8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y1);
 8001d8c:	88bb      	ldrh	r3, [r7, #4]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	4618      	mov	r0, r3
 8001d92:	f7ff ffa9 	bl	8001ce8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2>>8);
 8001d96:	883b      	ldrh	r3, [r7, #0]
 8001d98:	0a1b      	lsrs	r3, r3, #8
 8001d9a:	b29b      	uxth	r3, r3
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f7ff ffa2 	bl	8001ce8 <ILI9341_Write_Data>
ILI9341_Write_Data(Y2);
 8001da4:	883b      	ldrh	r3, [r7, #0]
 8001da6:	b2db      	uxtb	r3, r3
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7ff ff9d 	bl	8001ce8 <ILI9341_Write_Data>

ILI9341_Write_Command(0x2C);
 8001dae:	202c      	movs	r0, #44	; 0x2c
 8001db0:	f7ff ff7c 	bl	8001cac <ILI9341_Write_Command>
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd90      	pop	{r4, r7, pc}

08001dbc <ILI9341_Set_Rotation>:
HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET);	
}

/*Ser rotation of the screen - changes x0 and y0*/
void ILI9341_Set_Rotation(uint8_t Rotation) 
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b084      	sub	sp, #16
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	71fb      	strb	r3, [r7, #7]
	
uint8_t screen_rotation = Rotation;
 8001dc6:	79fb      	ldrb	r3, [r7, #7]
 8001dc8:	73fb      	strb	r3, [r7, #15]

ILI9341_Write_Command(0x36);
 8001dca:	2036      	movs	r0, #54	; 0x36
 8001dcc:	f7ff ff6e 	bl	8001cac <ILI9341_Write_Command>
HAL_Delay(1);
 8001dd0:	2001      	movs	r0, #1
 8001dd2:	f000 fa87 	bl	80022e4 <HAL_Delay>
	
switch(screen_rotation) 
 8001dd6:	7bfb      	ldrb	r3, [r7, #15]
 8001dd8:	2b03      	cmp	r3, #3
 8001dda:	d837      	bhi.n	8001e4c <ILI9341_Set_Rotation+0x90>
 8001ddc:	a201      	add	r2, pc, #4	; (adr r2, 8001de4 <ILI9341_Set_Rotation+0x28>)
 8001dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001de2:	bf00      	nop
 8001de4:	08001df5 	.word	0x08001df5
 8001de8:	08001e0b 	.word	0x08001e0b
 8001dec:	08001e21 	.word	0x08001e21
 8001df0:	08001e37 	.word	0x08001e37
	{
		case SCREEN_VERTICAL_1:
			ILI9341_Write_Data(0x40|0x08);
 8001df4:	2048      	movs	r0, #72	; 0x48
 8001df6:	f7ff ff77 	bl	8001ce8 <ILI9341_Write_Data>
			LCD_WIDTH = 240;
 8001dfa:	4b17      	ldr	r3, [pc, #92]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001dfc:	22f0      	movs	r2, #240	; 0xf0
 8001dfe:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001e00:	4b16      	ldr	r3, [pc, #88]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e02:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e06:	801a      	strh	r2, [r3, #0]
			break;
 8001e08:	e021      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_1:
			ILI9341_Write_Data(0x20|0x08);
 8001e0a:	2028      	movs	r0, #40	; 0x28
 8001e0c:	f7ff ff6c 	bl	8001ce8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001e10:	4b11      	ldr	r3, [pc, #68]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001e12:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e16:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e1a:	22f0      	movs	r2, #240	; 0xf0
 8001e1c:	801a      	strh	r2, [r3, #0]
			break;
 8001e1e:	e016      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		case SCREEN_VERTICAL_2:
			ILI9341_Write_Data(0x80|0x08);
 8001e20:	2088      	movs	r0, #136	; 0x88
 8001e22:	f7ff ff61 	bl	8001ce8 <ILI9341_Write_Data>
			LCD_WIDTH  = 240;
 8001e26:	4b0c      	ldr	r3, [pc, #48]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001e28:	22f0      	movs	r2, #240	; 0xf0
 8001e2a:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 320;
 8001e2c:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e2e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e32:	801a      	strh	r2, [r3, #0]
			break;
 8001e34:	e00b      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		case SCREEN_HORIZONTAL_2:
			ILI9341_Write_Data(0x40|0x80|0x20|0x08);
 8001e36:	20e8      	movs	r0, #232	; 0xe8
 8001e38:	f7ff ff56 	bl	8001ce8 <ILI9341_Write_Data>
			LCD_WIDTH  = 320;
 8001e3c:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <ILI9341_Set_Rotation+0x9c>)
 8001e3e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8001e42:	801a      	strh	r2, [r3, #0]
			LCD_HEIGHT = 240;
 8001e44:	4b05      	ldr	r3, [pc, #20]	; (8001e5c <ILI9341_Set_Rotation+0xa0>)
 8001e46:	22f0      	movs	r2, #240	; 0xf0
 8001e48:	801a      	strh	r2, [r3, #0]
			break;
 8001e4a:	e000      	b.n	8001e4e <ILI9341_Set_Rotation+0x92>
		default:
			//EXIT IF SCREEN ROTATION NOT VALID!
			break;
 8001e4c:	bf00      	nop
	}
}
 8001e4e:	bf00      	nop
 8001e50:	3710      	adds	r7, #16
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd80      	pop	{r7, pc}
 8001e56:	bf00      	nop
 8001e58:	2000001a 	.word	0x2000001a
 8001e5c:	20000018 	.word	0x20000018

08001e60 <ILI9341_Draw_Colour_Burst>:
}

//INTERNAL FUNCTION OF LIBRARY
/*Sends block colour information to LCD*/
void ILI9341_Draw_Colour_Burst(uint16_t Colour, uint32_t Size)
{
 8001e60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001e64:	b08d      	sub	sp, #52	; 0x34
 8001e66:	af00      	add	r7, sp, #0
 8001e68:	4603      	mov	r3, r0
 8001e6a:	6039      	str	r1, [r7, #0]
 8001e6c:	80fb      	strh	r3, [r7, #6]
 8001e6e:	466b      	mov	r3, sp
 8001e70:	461e      	mov	r6, r3
//SENDS COLOUR
uint32_t Buffer_Size = 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	627b      	str	r3, [r7, #36]	; 0x24
if((Size*2) < BURST_MAX_SIZE)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	005b      	lsls	r3, r3, #1
 8001e7a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001e7e:	d202      	bcs.n	8001e86 <ILI9341_Draw_Colour_Burst+0x26>
{
	Buffer_Size = Size;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	627b      	str	r3, [r7, #36]	; 0x24
 8001e84:	e002      	b.n	8001e8c <ILI9341_Draw_Colour_Burst+0x2c>
}
else
{
	Buffer_Size = BURST_MAX_SIZE;
 8001e86:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
}
	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8001e8c:	2201      	movs	r2, #1
 8001e8e:	2180      	movs	r1, #128	; 0x80
 8001e90:	483e      	ldr	r0, [pc, #248]	; (8001f8c <ILI9341_Draw_Colour_Burst+0x12c>)
 8001e92:	f001 f847 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8001e96:	2200      	movs	r2, #0
 8001e98:	2120      	movs	r1, #32
 8001e9a:	483c      	ldr	r0, [pc, #240]	; (8001f8c <ILI9341_Draw_Colour_Burst+0x12c>)
 8001e9c:	f001 f842 	bl	8002f24 <HAL_GPIO_WritePin>

unsigned char chifted = 	Colour>>8;;
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	0a1b      	lsrs	r3, r3, #8
 8001ea4:	b29b      	uxth	r3, r3
 8001ea6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
unsigned char burst_buffer[Buffer_Size];
 8001eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eac:	460b      	mov	r3, r1
 8001eae:	3b01      	subs	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	4688      	mov	r8, r1
 8001eb6:	4699      	mov	r9, r3
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ec4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ec8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ecc:	2300      	movs	r3, #0
 8001ece:	460c      	mov	r4, r1
 8001ed0:	461d      	mov	r5, r3
 8001ed2:	f04f 0200 	mov.w	r2, #0
 8001ed6:	f04f 0300 	mov.w	r3, #0
 8001eda:	00eb      	lsls	r3, r5, #3
 8001edc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001ee0:	00e2      	lsls	r2, r4, #3
 8001ee2:	1dcb      	adds	r3, r1, #7
 8001ee4:	08db      	lsrs	r3, r3, #3
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	ebad 0d03 	sub.w	sp, sp, r3
 8001eec:	466b      	mov	r3, sp
 8001eee:	3300      	adds	r3, #0
 8001ef0:	61bb      	str	r3, [r7, #24]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ef6:	e00e      	b.n	8001f16 <ILI9341_Draw_Colour_Burst+0xb6>
	{
		burst_buffer[j] = 	chifted;
 8001ef8:	69ba      	ldr	r2, [r7, #24]
 8001efa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001efc:	4413      	add	r3, r2
 8001efe:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 8001f02:	701a      	strb	r2, [r3, #0]
		burst_buffer[j+1] = Colour;
 8001f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f06:	3301      	adds	r3, #1
 8001f08:	88fa      	ldrh	r2, [r7, #6]
 8001f0a:	b2d1      	uxtb	r1, r2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	54d1      	strb	r1, [r2, r3]
for(uint32_t j = 0; j < Buffer_Size; j+=2)
 8001f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f12:	3302      	adds	r3, #2
 8001f14:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d3ec      	bcc.n	8001ef8 <ILI9341_Draw_Colour_Burst+0x98>
	}

uint32_t Sending_Size = Size*2;
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
uint32_t Sending_in_Block = Sending_Size/Buffer_Size;
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	613b      	str	r3, [r7, #16]
uint32_t Remainder_from_block = Sending_Size%Buffer_Size;
 8001f2e:	697b      	ldr	r3, [r7, #20]
 8001f30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f32:	fbb3 f2f2 	udiv	r2, r3, r2
 8001f36:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f38:	fb01 f202 	mul.w	r2, r1, r2
 8001f3c:	1a9b      	subs	r3, r3, r2
 8001f3e:	60fb      	str	r3, [r7, #12]

if(Sending_in_Block != 0)
 8001f40:	693b      	ldr	r3, [r7, #16]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d010      	beq.n	8001f68 <ILI9341_Draw_Colour_Burst+0x108>
{
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f46:	2300      	movs	r3, #0
 8001f48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f4a:	e009      	b.n	8001f60 <ILI9341_Draw_Colour_Burst+0x100>
		{
		HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Buffer_Size, 10);	
 8001f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4e:	b29a      	uxth	r2, r3
 8001f50:	230a      	movs	r3, #10
 8001f52:	69b9      	ldr	r1, [r7, #24]
 8001f54:	480e      	ldr	r0, [pc, #56]	; (8001f90 <ILI9341_Draw_Colour_Burst+0x130>)
 8001f56:	f002 fb80 	bl	800465a <HAL_SPI_Transmit>
	for(uint32_t j = 0; j < (Sending_in_Block); j++)
 8001f5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d3f1      	bcc.n	8001f4c <ILI9341_Draw_Colour_Burst+0xec>
		}
}

//REMAINDER!
HAL_SPI_Transmit(HSPI_INSTANCE, (unsigned char *)burst_buffer, Remainder_from_block, 10);	
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	b29a      	uxth	r2, r3
 8001f6c:	230a      	movs	r3, #10
 8001f6e:	69b9      	ldr	r1, [r7, #24]
 8001f70:	4807      	ldr	r0, [pc, #28]	; (8001f90 <ILI9341_Draw_Colour_Burst+0x130>)
 8001f72:	f002 fb72 	bl	800465a <HAL_SPI_Transmit>
	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8001f76:	2201      	movs	r2, #1
 8001f78:	2120      	movs	r1, #32
 8001f7a:	4804      	ldr	r0, [pc, #16]	; (8001f8c <ILI9341_Draw_Colour_Burst+0x12c>)
 8001f7c:	f000 ffd2 	bl	8002f24 <HAL_GPIO_WritePin>
 8001f80:	46b5      	mov	sp, r6
}
 8001f82:	bf00      	nop
 8001f84:	3734      	adds	r7, #52	; 0x34
 8001f86:	46bd      	mov	sp, r7
 8001f88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001f8c:	40020c00 	.word	0x40020c00
 8001f90:	2000031c 	.word	0x2000031c

08001f94 <ILI9341_Fill_Screen>:

//FILL THE ENTIRE SCREEN WITH SELECTED COLOUR (either #define-d ones or custom 16bit)
/*Sets address (entire screen) and Sends Height*Width ammount of colour information to LCD*/
void ILI9341_Fill_Screen(uint16_t Colour)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b082      	sub	sp, #8
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	80fb      	strh	r3, [r7, #6]
ILI9341_Set_Address(0,0,LCD_WIDTH,LCD_HEIGHT);	
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <ILI9341_Fill_Screen+0x44>)
 8001fa0:	881b      	ldrh	r3, [r3, #0]
 8001fa2:	b29a      	uxth	r2, r3
 8001fa4:	4b0d      	ldr	r3, [pc, #52]	; (8001fdc <ILI9341_Fill_Screen+0x48>)
 8001fa6:	881b      	ldrh	r3, [r3, #0]
 8001fa8:	b29b      	uxth	r3, r3
 8001faa:	2100      	movs	r1, #0
 8001fac:	2000      	movs	r0, #0
 8001fae:	f7ff feb9 	bl	8001d24 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, LCD_WIDTH*LCD_HEIGHT);	
 8001fb2:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <ILI9341_Fill_Screen+0x44>)
 8001fb4:	881b      	ldrh	r3, [r3, #0]
 8001fb6:	b29b      	uxth	r3, r3
 8001fb8:	461a      	mov	r2, r3
 8001fba:	4b08      	ldr	r3, [pc, #32]	; (8001fdc <ILI9341_Fill_Screen+0x48>)
 8001fbc:	881b      	ldrh	r3, [r3, #0]
 8001fbe:	b29b      	uxth	r3, r3
 8001fc0:	fb02 f303 	mul.w	r3, r2, r3
 8001fc4:	461a      	mov	r2, r3
 8001fc6:	88fb      	ldrh	r3, [r7, #6]
 8001fc8:	4611      	mov	r1, r2
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7ff ff48 	bl	8001e60 <ILI9341_Draw_Colour_Burst>
}
 8001fd0:	bf00      	nop
 8001fd2:	3708      	adds	r7, #8
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	2000001a 	.word	0x2000001a
 8001fdc:	20000018 	.word	0x20000018

08001fe0 <ILI9341_Draw_Pixel>:
//Location is dependant on screen orientation. x0 and y0 locations change with orientations.
//Using pixels to draw big simple structures is not recommended as it is really slow
//Try using either rectangles or lines if possible
//
void ILI9341_Draw_Pixel(uint16_t X,uint16_t Y,uint16_t Colour) 
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b086      	sub	sp, #24
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	4603      	mov	r3, r0
 8001fe8:	80fb      	strh	r3, [r7, #6]
 8001fea:	460b      	mov	r3, r1
 8001fec:	80bb      	strh	r3, [r7, #4]
 8001fee:	4613      	mov	r3, r2
 8001ff0:	807b      	strh	r3, [r7, #2]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8001ff2:	4b5b      	ldr	r3, [pc, #364]	; (8002160 <ILI9341_Draw_Pixel+0x180>)
 8001ff4:	881b      	ldrh	r3, [r3, #0]
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	88fa      	ldrh	r2, [r7, #6]
 8001ffa:	429a      	cmp	r2, r3
 8001ffc:	f080 80ac 	bcs.w	8002158 <ILI9341_Draw_Pixel+0x178>
 8002000:	4b58      	ldr	r3, [pc, #352]	; (8002164 <ILI9341_Draw_Pixel+0x184>)
 8002002:	881b      	ldrh	r3, [r3, #0]
 8002004:	b29b      	uxth	r3, r3
 8002006:	88ba      	ldrh	r2, [r7, #4]
 8002008:	429a      	cmp	r2, r3
 800200a:	f080 80a5 	bcs.w	8002158 <ILI9341_Draw_Pixel+0x178>
	
//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 800200e:	2200      	movs	r2, #0
 8002010:	2180      	movs	r1, #128	; 0x80
 8002012:	4855      	ldr	r0, [pc, #340]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002014:	f000 ff86 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002018:	2200      	movs	r2, #0
 800201a:	2120      	movs	r1, #32
 800201c:	4852      	ldr	r0, [pc, #328]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 800201e:	f000 ff81 	bl	8002f24 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2A);
 8002022:	202a      	movs	r0, #42	; 0x2a
 8002024:	f7ff fe30 	bl	8001c88 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);	
 8002028:	2201      	movs	r2, #1
 800202a:	2180      	movs	r1, #128	; 0x80
 800202c:	484e      	ldr	r0, [pc, #312]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 800202e:	f000 ff79 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);		
 8002032:	2201      	movs	r2, #1
 8002034:	2120      	movs	r1, #32
 8002036:	484c      	ldr	r0, [pc, #304]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002038:	f000 ff74 	bl	8002f24 <HAL_GPIO_WritePin>

//XDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800203c:	2200      	movs	r2, #0
 800203e:	2120      	movs	r1, #32
 8002040:	4849      	ldr	r0, [pc, #292]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002042:	f000 ff6f 	bl	8002f24 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer[4] = {X>>8,X, (X+1)>>8, (X+1)};
 8002046:	88fb      	ldrh	r3, [r7, #6]
 8002048:	0a1b      	lsrs	r3, r3, #8
 800204a:	b29b      	uxth	r3, r3
 800204c:	b2db      	uxtb	r3, r3
 800204e:	753b      	strb	r3, [r7, #20]
 8002050:	88fb      	ldrh	r3, [r7, #6]
 8002052:	b2db      	uxtb	r3, r3
 8002054:	757b      	strb	r3, [r7, #21]
 8002056:	88fb      	ldrh	r3, [r7, #6]
 8002058:	3301      	adds	r3, #1
 800205a:	121b      	asrs	r3, r3, #8
 800205c:	b2db      	uxtb	r3, r3
 800205e:	75bb      	strb	r3, [r7, #22]
 8002060:	88fb      	ldrh	r3, [r7, #6]
 8002062:	b2db      	uxtb	r3, r3
 8002064:	3301      	adds	r3, #1
 8002066:	b2db      	uxtb	r3, r3
 8002068:	75fb      	strb	r3, [r7, #23]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer, 4, 1);
 800206a:	f107 0114 	add.w	r1, r7, #20
 800206e:	2301      	movs	r3, #1
 8002070:	2204      	movs	r2, #4
 8002072:	483e      	ldr	r0, [pc, #248]	; (800216c <ILI9341_Draw_Pixel+0x18c>)
 8002074:	f002 faf1 	bl	800465a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 8002078:	2201      	movs	r2, #1
 800207a:	2120      	movs	r1, #32
 800207c:	483a      	ldr	r0, [pc, #232]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 800207e:	f000 ff51 	bl	8002f24 <HAL_GPIO_WritePin>

//ADDRESS
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 8002082:	2200      	movs	r2, #0
 8002084:	2180      	movs	r1, #128	; 0x80
 8002086:	4838      	ldr	r0, [pc, #224]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002088:	f000 ff4c 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 800208c:	2200      	movs	r2, #0
 800208e:	2120      	movs	r1, #32
 8002090:	4835      	ldr	r0, [pc, #212]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002092:	f000 ff47 	bl	8002f24 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2B);
 8002096:	202b      	movs	r0, #43	; 0x2b
 8002098:	f7ff fdf6 	bl	8001c88 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 800209c:	2201      	movs	r2, #1
 800209e:	2180      	movs	r1, #128	; 0x80
 80020a0:	4831      	ldr	r0, [pc, #196]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 80020a2:	f000 ff3f 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 80020a6:	2201      	movs	r2, #1
 80020a8:	2120      	movs	r1, #32
 80020aa:	482f      	ldr	r0, [pc, #188]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 80020ac:	f000 ff3a 	bl	8002f24 <HAL_GPIO_WritePin>

//YDATA
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 80020b0:	2200      	movs	r2, #0
 80020b2:	2120      	movs	r1, #32
 80020b4:	482c      	ldr	r0, [pc, #176]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 80020b6:	f000 ff35 	bl	8002f24 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer1[4] = {Y>>8,Y, (Y+1)>>8, (Y+1)};
 80020ba:	88bb      	ldrh	r3, [r7, #4]
 80020bc:	0a1b      	lsrs	r3, r3, #8
 80020be:	b29b      	uxth	r3, r3
 80020c0:	b2db      	uxtb	r3, r3
 80020c2:	743b      	strb	r3, [r7, #16]
 80020c4:	88bb      	ldrh	r3, [r7, #4]
 80020c6:	b2db      	uxtb	r3, r3
 80020c8:	747b      	strb	r3, [r7, #17]
 80020ca:	88bb      	ldrh	r3, [r7, #4]
 80020cc:	3301      	adds	r3, #1
 80020ce:	121b      	asrs	r3, r3, #8
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	74bb      	strb	r3, [r7, #18]
 80020d4:	88bb      	ldrh	r3, [r7, #4]
 80020d6:	b2db      	uxtb	r3, r3
 80020d8:	3301      	adds	r3, #1
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	74fb      	strb	r3, [r7, #19]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer1, 4, 1);
 80020de:	f107 0110 	add.w	r1, r7, #16
 80020e2:	2301      	movs	r3, #1
 80020e4:	2204      	movs	r2, #4
 80020e6:	4821      	ldr	r0, [pc, #132]	; (800216c <ILI9341_Draw_Pixel+0x18c>)
 80020e8:	f002 fab7 	bl	800465a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 80020ec:	2201      	movs	r2, #1
 80020ee:	2120      	movs	r1, #32
 80020f0:	481d      	ldr	r0, [pc, #116]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 80020f2:	f000 ff17 	bl	8002f24 <HAL_GPIO_WritePin>

//ADDRESS	
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_RESET);	
 80020f6:	2200      	movs	r2, #0
 80020f8:	2180      	movs	r1, #128	; 0x80
 80020fa:	481b      	ldr	r0, [pc, #108]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 80020fc:	f000 ff12 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);	
 8002100:	2200      	movs	r2, #0
 8002102:	2120      	movs	r1, #32
 8002104:	4818      	ldr	r0, [pc, #96]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002106:	f000 ff0d 	bl	8002f24 <HAL_GPIO_WritePin>
ILI9341_SPI_Send(0x2C);
 800210a:	202c      	movs	r0, #44	; 0x2c
 800210c:	f7ff fdbc 	bl	8001c88 <ILI9341_SPI_Send>
HAL_GPIO_WritePin(LCD_DC_PORT, LCD_DC_PIN, GPIO_PIN_SET);			
 8002110:	2201      	movs	r2, #1
 8002112:	2180      	movs	r1, #128	; 0x80
 8002114:	4814      	ldr	r0, [pc, #80]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002116:	f000 ff05 	bl	8002f24 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);			
 800211a:	2201      	movs	r2, #1
 800211c:	2120      	movs	r1, #32
 800211e:	4812      	ldr	r0, [pc, #72]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002120:	f000 ff00 	bl	8002f24 <HAL_GPIO_WritePin>

//COLOUR	
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_RESET);
 8002124:	2200      	movs	r2, #0
 8002126:	2120      	movs	r1, #32
 8002128:	480f      	ldr	r0, [pc, #60]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 800212a:	f000 fefb 	bl	8002f24 <HAL_GPIO_WritePin>
unsigned char Temp_Buffer2[2] = {Colour>>8, Colour};
 800212e:	887b      	ldrh	r3, [r7, #2]
 8002130:	0a1b      	lsrs	r3, r3, #8
 8002132:	b29b      	uxth	r3, r3
 8002134:	b2db      	uxtb	r3, r3
 8002136:	733b      	strb	r3, [r7, #12]
 8002138:	887b      	ldrh	r3, [r7, #2]
 800213a:	b2db      	uxtb	r3, r3
 800213c:	737b      	strb	r3, [r7, #13]
HAL_SPI_Transmit(HSPI_INSTANCE, Temp_Buffer2, 2, 1);
 800213e:	f107 010c 	add.w	r1, r7, #12
 8002142:	2301      	movs	r3, #1
 8002144:	2202      	movs	r2, #2
 8002146:	4809      	ldr	r0, [pc, #36]	; (800216c <ILI9341_Draw_Pixel+0x18c>)
 8002148:	f002 fa87 	bl	800465a <HAL_SPI_Transmit>
HAL_GPIO_WritePin(LCD_CS_PORT, LCD_CS_PIN, GPIO_PIN_SET);
 800214c:	2201      	movs	r2, #1
 800214e:	2120      	movs	r1, #32
 8002150:	4805      	ldr	r0, [pc, #20]	; (8002168 <ILI9341_Draw_Pixel+0x188>)
 8002152:	f000 fee7 	bl	8002f24 <HAL_GPIO_WritePin>
 8002156:	e000      	b.n	800215a <ILI9341_Draw_Pixel+0x17a>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;	//OUT OF BOUNDS!
 8002158:	bf00      	nop
	
}
 800215a:	3718      	adds	r7, #24
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	2000001a 	.word	0x2000001a
 8002164:	20000018 	.word	0x20000018
 8002168:	40020c00 	.word	0x40020c00
 800216c:	2000031c 	.word	0x2000031c

08002170 <ILI9341_Draw_Rectangle>:
//Rectangle is hollow. X and Y positions mark the upper left corner of rectangle
//As with all other draw calls x0 and y0 locations dependant on screen orientation
//

void ILI9341_Draw_Rectangle(uint16_t X, uint16_t Y, uint16_t Width, uint16_t Height, uint16_t Colour)
{
 8002170:	b590      	push	{r4, r7, lr}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	4604      	mov	r4, r0
 8002178:	4608      	mov	r0, r1
 800217a:	4611      	mov	r1, r2
 800217c:	461a      	mov	r2, r3
 800217e:	4623      	mov	r3, r4
 8002180:	80fb      	strh	r3, [r7, #6]
 8002182:	4603      	mov	r3, r0
 8002184:	80bb      	strh	r3, [r7, #4]
 8002186:	460b      	mov	r3, r1
 8002188:	807b      	strh	r3, [r7, #2]
 800218a:	4613      	mov	r3, r2
 800218c:	803b      	strh	r3, [r7, #0]
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 800218e:	4b24      	ldr	r3, [pc, #144]	; (8002220 <ILI9341_Draw_Rectangle+0xb0>)
 8002190:	881b      	ldrh	r3, [r3, #0]
 8002192:	b29b      	uxth	r3, r3
 8002194:	88fa      	ldrh	r2, [r7, #6]
 8002196:	429a      	cmp	r2, r3
 8002198:	d23d      	bcs.n	8002216 <ILI9341_Draw_Rectangle+0xa6>
 800219a:	4b22      	ldr	r3, [pc, #136]	; (8002224 <ILI9341_Draw_Rectangle+0xb4>)
 800219c:	881b      	ldrh	r3, [r3, #0]
 800219e:	b29b      	uxth	r3, r3
 80021a0:	88ba      	ldrh	r2, [r7, #4]
 80021a2:	429a      	cmp	r2, r3
 80021a4:	d237      	bcs.n	8002216 <ILI9341_Draw_Rectangle+0xa6>
if((X+Width-1)>=LCD_WIDTH)
 80021a6:	88fa      	ldrh	r2, [r7, #6]
 80021a8:	887b      	ldrh	r3, [r7, #2]
 80021aa:	4413      	add	r3, r2
 80021ac:	4a1c      	ldr	r2, [pc, #112]	; (8002220 <ILI9341_Draw_Rectangle+0xb0>)
 80021ae:	8812      	ldrh	r2, [r2, #0]
 80021b0:	b292      	uxth	r2, r2
 80021b2:	4293      	cmp	r3, r2
 80021b4:	dd05      	ble.n	80021c2 <ILI9341_Draw_Rectangle+0x52>
	{
		Width=LCD_WIDTH-X;
 80021b6:	4b1a      	ldr	r3, [pc, #104]	; (8002220 <ILI9341_Draw_Rectangle+0xb0>)
 80021b8:	881b      	ldrh	r3, [r3, #0]
 80021ba:	b29a      	uxth	r2, r3
 80021bc:	88fb      	ldrh	r3, [r7, #6]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	807b      	strh	r3, [r7, #2]
	}
if((Y+Height-1)>=LCD_HEIGHT)
 80021c2:	88ba      	ldrh	r2, [r7, #4]
 80021c4:	883b      	ldrh	r3, [r7, #0]
 80021c6:	4413      	add	r3, r2
 80021c8:	4a16      	ldr	r2, [pc, #88]	; (8002224 <ILI9341_Draw_Rectangle+0xb4>)
 80021ca:	8812      	ldrh	r2, [r2, #0]
 80021cc:	b292      	uxth	r2, r2
 80021ce:	4293      	cmp	r3, r2
 80021d0:	dd05      	ble.n	80021de <ILI9341_Draw_Rectangle+0x6e>
	{
		Height=LCD_HEIGHT-Y;
 80021d2:	4b14      	ldr	r3, [pc, #80]	; (8002224 <ILI9341_Draw_Rectangle+0xb4>)
 80021d4:	881b      	ldrh	r3, [r3, #0]
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	88bb      	ldrh	r3, [r7, #4]
 80021da:	1ad3      	subs	r3, r2, r3
 80021dc:	803b      	strh	r3, [r7, #0]
	}
ILI9341_Set_Address(X, Y, X+Width-1, Y+Height-1);
 80021de:	88fa      	ldrh	r2, [r7, #6]
 80021e0:	887b      	ldrh	r3, [r7, #2]
 80021e2:	4413      	add	r3, r2
 80021e4:	b29b      	uxth	r3, r3
 80021e6:	3b01      	subs	r3, #1
 80021e8:	b29c      	uxth	r4, r3
 80021ea:	88ba      	ldrh	r2, [r7, #4]
 80021ec:	883b      	ldrh	r3, [r7, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	b29b      	uxth	r3, r3
 80021f2:	3b01      	subs	r3, #1
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	88b9      	ldrh	r1, [r7, #4]
 80021f8:	88f8      	ldrh	r0, [r7, #6]
 80021fa:	4622      	mov	r2, r4
 80021fc:	f7ff fd92 	bl	8001d24 <ILI9341_Set_Address>
ILI9341_Draw_Colour_Burst(Colour, Height*Width);
 8002200:	883b      	ldrh	r3, [r7, #0]
 8002202:	887a      	ldrh	r2, [r7, #2]
 8002204:	fb02 f303 	mul.w	r3, r2, r3
 8002208:	461a      	mov	r2, r3
 800220a:	8b3b      	ldrh	r3, [r7, #24]
 800220c:	4611      	mov	r1, r2
 800220e:	4618      	mov	r0, r3
 8002210:	f7ff fe26 	bl	8001e60 <ILI9341_Draw_Colour_Burst>
 8002214:	e000      	b.n	8002218 <ILI9341_Draw_Rectangle+0xa8>
if((X >=LCD_WIDTH) || (Y >=LCD_HEIGHT)) return;
 8002216:	bf00      	nop
}
 8002218:	370c      	adds	r7, #12
 800221a:	46bd      	mov	sp, r7
 800221c:	bd90      	pop	{r4, r7, pc}
 800221e:	bf00      	nop
 8002220:	2000001a 	.word	0x2000001a
 8002224:	20000018 	.word	0x20000018

08002228 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800222c:	2003      	movs	r0, #3
 800222e:	f000 f94d 	bl	80024cc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002232:	2000      	movs	r0, #0
 8002234:	f000 f806 	bl	8002244 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002238:	f7ff f86c 	bl	8001314 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800223c:	2300      	movs	r3, #0
}
 800223e:	4618      	mov	r0, r3
 8002240:	bd80      	pop	{r7, pc}
	...

08002244 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800224c:	4b12      	ldr	r3, [pc, #72]	; (8002298 <HAL_InitTick+0x54>)
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	4b12      	ldr	r3, [pc, #72]	; (800229c <HAL_InitTick+0x58>)
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	4619      	mov	r1, r3
 8002256:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800225a:	fbb3 f3f1 	udiv	r3, r3, r1
 800225e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002262:	4618      	mov	r0, r3
 8002264:	f000 f967 	bl	8002536 <HAL_SYSTICK_Config>
 8002268:	4603      	mov	r3, r0
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800226e:	2301      	movs	r3, #1
 8002270:	e00e      	b.n	8002290 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b0f      	cmp	r3, #15
 8002276:	d80a      	bhi.n	800228e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002278:	2200      	movs	r2, #0
 800227a:	6879      	ldr	r1, [r7, #4]
 800227c:	f04f 30ff 	mov.w	r0, #4294967295
 8002280:	f000 f92f 	bl	80024e2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002284:	4a06      	ldr	r2, [pc, #24]	; (80022a0 <HAL_InitTick+0x5c>)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800228a:	2300      	movs	r3, #0
 800228c:	e000      	b.n	8002290 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
}
 8002290:	4618      	mov	r0, r3
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	20000014 	.word	0x20000014
 800229c:	20000020 	.word	0x20000020
 80022a0:	2000001c 	.word	0x2000001c

080022a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80022a8:	4b06      	ldr	r3, [pc, #24]	; (80022c4 <HAL_IncTick+0x20>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	461a      	mov	r2, r3
 80022ae:	4b06      	ldr	r3, [pc, #24]	; (80022c8 <HAL_IncTick+0x24>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	4413      	add	r3, r2
 80022b4:	4a04      	ldr	r2, [pc, #16]	; (80022c8 <HAL_IncTick+0x24>)
 80022b6:	6013      	str	r3, [r2, #0]
}
 80022b8:	bf00      	nop
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
 80022c2:	bf00      	nop
 80022c4:	20000020 	.word	0x20000020
 80022c8:	200009f8 	.word	0x200009f8

080022cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  return uwTick;
 80022d0:	4b03      	ldr	r3, [pc, #12]	; (80022e0 <HAL_GetTick+0x14>)
 80022d2:	681b      	ldr	r3, [r3, #0]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022dc:	4770      	bx	lr
 80022de:	bf00      	nop
 80022e0:	200009f8 	.word	0x200009f8

080022e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80022ec:	f7ff ffee 	bl	80022cc <HAL_GetTick>
 80022f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022fc:	d005      	beq.n	800230a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80022fe:	4b0a      	ldr	r3, [pc, #40]	; (8002328 <HAL_Delay+0x44>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4413      	add	r3, r2
 8002308:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800230a:	bf00      	nop
 800230c:	f7ff ffde 	bl	80022cc <HAL_GetTick>
 8002310:	4602      	mov	r2, r0
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	1ad3      	subs	r3, r2, r3
 8002316:	68fa      	ldr	r2, [r7, #12]
 8002318:	429a      	cmp	r2, r3
 800231a:	d8f7      	bhi.n	800230c <HAL_Delay+0x28>
  {
  }
}
 800231c:	bf00      	nop
 800231e:	bf00      	nop
 8002320:	3710      	adds	r7, #16
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}
 8002326:	bf00      	nop
 8002328:	20000020 	.word	0x20000020

0800232c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	f003 0307 	and.w	r3, r3, #7
 800233a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800233c:	4b0b      	ldr	r3, [pc, #44]	; (800236c <__NVIC_SetPriorityGrouping+0x40>)
 800233e:	68db      	ldr	r3, [r3, #12]
 8002340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002342:	68ba      	ldr	r2, [r7, #8]
 8002344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002348:	4013      	ands	r3, r2
 800234a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002350:	68bb      	ldr	r3, [r7, #8]
 8002352:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002354:	4b06      	ldr	r3, [pc, #24]	; (8002370 <__NVIC_SetPriorityGrouping+0x44>)
 8002356:	4313      	orrs	r3, r2
 8002358:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800235a:	4a04      	ldr	r2, [pc, #16]	; (800236c <__NVIC_SetPriorityGrouping+0x40>)
 800235c:	68bb      	ldr	r3, [r7, #8]
 800235e:	60d3      	str	r3, [r2, #12]
}
 8002360:	bf00      	nop
 8002362:	3714      	adds	r7, #20
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr
 800236c:	e000ed00 	.word	0xe000ed00
 8002370:	05fa0000 	.word	0x05fa0000

08002374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002374:	b480      	push	{r7}
 8002376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002378:	4b04      	ldr	r3, [pc, #16]	; (800238c <__NVIC_GetPriorityGrouping+0x18>)
 800237a:	68db      	ldr	r3, [r3, #12]
 800237c:	0a1b      	lsrs	r3, r3, #8
 800237e:	f003 0307 	and.w	r3, r3, #7
}
 8002382:	4618      	mov	r0, r3
 8002384:	46bd      	mov	sp, r7
 8002386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238a:	4770      	bx	lr
 800238c:	e000ed00 	.word	0xe000ed00

08002390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002390:	b480      	push	{r7}
 8002392:	b083      	sub	sp, #12
 8002394:	af00      	add	r7, sp, #0
 8002396:	4603      	mov	r3, r0
 8002398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800239a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	db0b      	blt.n	80023ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80023a2:	79fb      	ldrb	r3, [r7, #7]
 80023a4:	f003 021f 	and.w	r2, r3, #31
 80023a8:	4907      	ldr	r1, [pc, #28]	; (80023c8 <__NVIC_EnableIRQ+0x38>)
 80023aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ae:	095b      	lsrs	r3, r3, #5
 80023b0:	2001      	movs	r0, #1
 80023b2:	fa00 f202 	lsl.w	r2, r0, r2
 80023b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80023ba:	bf00      	nop
 80023bc:	370c      	adds	r7, #12
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	e000e100 	.word	0xe000e100

080023cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	6039      	str	r1, [r7, #0]
 80023d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80023d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	db0a      	blt.n	80023f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	b2da      	uxtb	r2, r3
 80023e4:	490c      	ldr	r1, [pc, #48]	; (8002418 <__NVIC_SetPriority+0x4c>)
 80023e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80023ea:	0112      	lsls	r2, r2, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	440b      	add	r3, r1
 80023f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80023f4:	e00a      	b.n	800240c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	b2da      	uxtb	r2, r3
 80023fa:	4908      	ldr	r1, [pc, #32]	; (800241c <__NVIC_SetPriority+0x50>)
 80023fc:	79fb      	ldrb	r3, [r7, #7]
 80023fe:	f003 030f 	and.w	r3, r3, #15
 8002402:	3b04      	subs	r3, #4
 8002404:	0112      	lsls	r2, r2, #4
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	440b      	add	r3, r1
 800240a:	761a      	strb	r2, [r3, #24]
}
 800240c:	bf00      	nop
 800240e:	370c      	adds	r7, #12
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	e000e100 	.word	0xe000e100
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002420:	b480      	push	{r7}
 8002422:	b089      	sub	sp, #36	; 0x24
 8002424:	af00      	add	r7, sp, #0
 8002426:	60f8      	str	r0, [r7, #12]
 8002428:	60b9      	str	r1, [r7, #8]
 800242a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f1c3 0307 	rsb	r3, r3, #7
 800243a:	2b04      	cmp	r3, #4
 800243c:	bf28      	it	cs
 800243e:	2304      	movcs	r3, #4
 8002440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	3304      	adds	r3, #4
 8002446:	2b06      	cmp	r3, #6
 8002448:	d902      	bls.n	8002450 <NVIC_EncodePriority+0x30>
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	3b03      	subs	r3, #3
 800244e:	e000      	b.n	8002452 <NVIC_EncodePriority+0x32>
 8002450:	2300      	movs	r3, #0
 8002452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002454:	f04f 32ff 	mov.w	r2, #4294967295
 8002458:	69bb      	ldr	r3, [r7, #24]
 800245a:	fa02 f303 	lsl.w	r3, r2, r3
 800245e:	43da      	mvns	r2, r3
 8002460:	68bb      	ldr	r3, [r7, #8]
 8002462:	401a      	ands	r2, r3
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002468:	f04f 31ff 	mov.w	r1, #4294967295
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	fa01 f303 	lsl.w	r3, r1, r3
 8002472:	43d9      	mvns	r1, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002478:	4313      	orrs	r3, r2
         );
}
 800247a:	4618      	mov	r0, r3
 800247c:	3724      	adds	r7, #36	; 0x24
 800247e:	46bd      	mov	sp, r7
 8002480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002484:	4770      	bx	lr
	...

08002488 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3b01      	subs	r3, #1
 8002494:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002498:	d301      	bcc.n	800249e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800249a:	2301      	movs	r3, #1
 800249c:	e00f      	b.n	80024be <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800249e:	4a0a      	ldr	r2, [pc, #40]	; (80024c8 <SysTick_Config+0x40>)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	3b01      	subs	r3, #1
 80024a4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80024a6:	210f      	movs	r1, #15
 80024a8:	f04f 30ff 	mov.w	r0, #4294967295
 80024ac:	f7ff ff8e 	bl	80023cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80024b0:	4b05      	ldr	r3, [pc, #20]	; (80024c8 <SysTick_Config+0x40>)
 80024b2:	2200      	movs	r2, #0
 80024b4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024b6:	4b04      	ldr	r3, [pc, #16]	; (80024c8 <SysTick_Config+0x40>)
 80024b8:	2207      	movs	r2, #7
 80024ba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80024bc:	2300      	movs	r3, #0
}
 80024be:	4618      	mov	r0, r3
 80024c0:	3708      	adds	r7, #8
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bd80      	pop	{r7, pc}
 80024c6:	bf00      	nop
 80024c8:	e000e010 	.word	0xe000e010

080024cc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b082      	sub	sp, #8
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80024d4:	6878      	ldr	r0, [r7, #4]
 80024d6:	f7ff ff29 	bl	800232c <__NVIC_SetPriorityGrouping>
}
 80024da:	bf00      	nop
 80024dc:	3708      	adds	r7, #8
 80024de:	46bd      	mov	sp, r7
 80024e0:	bd80      	pop	{r7, pc}

080024e2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80024e2:	b580      	push	{r7, lr}
 80024e4:	b086      	sub	sp, #24
 80024e6:	af00      	add	r7, sp, #0
 80024e8:	4603      	mov	r3, r0
 80024ea:	60b9      	str	r1, [r7, #8]
 80024ec:	607a      	str	r2, [r7, #4]
 80024ee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80024f4:	f7ff ff3e 	bl	8002374 <__NVIC_GetPriorityGrouping>
 80024f8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80024fa:	687a      	ldr	r2, [r7, #4]
 80024fc:	68b9      	ldr	r1, [r7, #8]
 80024fe:	6978      	ldr	r0, [r7, #20]
 8002500:	f7ff ff8e 	bl	8002420 <NVIC_EncodePriority>
 8002504:	4602      	mov	r2, r0
 8002506:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800250a:	4611      	mov	r1, r2
 800250c:	4618      	mov	r0, r3
 800250e:	f7ff ff5d 	bl	80023cc <__NVIC_SetPriority>
}
 8002512:	bf00      	nop
 8002514:	3718      	adds	r7, #24
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}

0800251a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800251a:	b580      	push	{r7, lr}
 800251c:	b082      	sub	sp, #8
 800251e:	af00      	add	r7, sp, #0
 8002520:	4603      	mov	r3, r0
 8002522:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002524:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ff31 	bl	8002390 <__NVIC_EnableIRQ>
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}

08002536 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002536:	b580      	push	{r7, lr}
 8002538:	b082      	sub	sp, #8
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff ffa2 	bl	8002488 <SysTick_Config>
 8002544:	4603      	mov	r3, r0
}
 8002546:	4618      	mov	r0, r3
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}
	...

08002550 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b084      	sub	sp, #16
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
 8002560:	e06a      	b.n	8002638 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002568:	2b00      	cmp	r3, #0
 800256a:	d106      	bne.n	800257a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2223      	movs	r2, #35	; 0x23
 8002570:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f7fe f883 	bl	8000680 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800257a:	4b31      	ldr	r3, [pc, #196]	; (8002640 <HAL_ETH_Init+0xf0>)
 800257c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257e:	4a30      	ldr	r2, [pc, #192]	; (8002640 <HAL_ETH_Init+0xf0>)
 8002580:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002584:	6453      	str	r3, [r2, #68]	; 0x44
 8002586:	4b2e      	ldr	r3, [pc, #184]	; (8002640 <HAL_ETH_Init+0xf0>)
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002592:	4b2c      	ldr	r3, [pc, #176]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	4a2b      	ldr	r2, [pc, #172]	; (8002644 <HAL_ETH_Init+0xf4>)
 8002598:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800259c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800259e:	4b29      	ldr	r3, [pc, #164]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025a0:	685a      	ldr	r2, [r3, #4]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	4927      	ldr	r1, [pc, #156]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025ac:	4b25      	ldr	r3, [pc, #148]	; (8002644 <HAL_ETH_Init+0xf4>)
 80025ae:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	6812      	ldr	r2, [r2, #0]
 80025be:	f043 0301 	orr.w	r3, r3, #1
 80025c2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025c6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025c8:	f7ff fe80 	bl	80022cc <HAL_GetTick>
 80025cc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025ce:	e011      	b.n	80025f4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025d0:	f7ff fe7c 	bl	80022cc <HAL_GetTick>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	1ad3      	subs	r3, r2, r3
 80025da:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025de:	d909      	bls.n	80025f4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2204      	movs	r2, #4
 80025e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	22e0      	movs	r2, #224	; 0xe0
 80025ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e021      	b.n	8002638 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f003 0301 	and.w	r3, r3, #1
 8002602:	2b00      	cmp	r3, #0
 8002604:	d1e4      	bne.n	80025d0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002606:	6878      	ldr	r0, [r7, #4]
 8002608:	f000 f958 	bl	80028bc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800260c:	6878      	ldr	r0, [r7, #4]
 800260e:	f000 f9ff 	bl	8002a10 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f000 fa55 	bl	8002ac2 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	685b      	ldr	r3, [r3, #4]
 800261c:	461a      	mov	r2, r3
 800261e:	2100      	movs	r1, #0
 8002620:	6878      	ldr	r0, [r7, #4]
 8002622:	f000 f9bd 	bl	80029a0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	2210      	movs	r2, #16
 8002632:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002636:	2300      	movs	r3, #0
}
 8002638:	4618      	mov	r0, r3
 800263a:	3710      	adds	r7, #16
 800263c:	46bd      	mov	sp, r7
 800263e:	bd80      	pop	{r7, pc}
 8002640:	40023800 	.word	0x40023800
 8002644:	40013800 	.word	0x40013800

08002648 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002648:	b580      	push	{r7, lr}
 800264a:	b084      	sub	sp, #16
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
 8002650:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800265a:	68fa      	ldr	r2, [r7, #12]
 800265c:	4b51      	ldr	r3, [pc, #324]	; (80027a4 <ETH_SetMACConfig+0x15c>)
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	7c1b      	ldrb	r3, [r3, #16]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d102      	bne.n	8002670 <ETH_SetMACConfig+0x28>
 800266a:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800266e:	e000      	b.n	8002672 <ETH_SetMACConfig+0x2a>
 8002670:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	7c5b      	ldrb	r3, [r3, #17]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d102      	bne.n	8002680 <ETH_SetMACConfig+0x38>
 800267a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800267e:	e000      	b.n	8002682 <ETH_SetMACConfig+0x3a>
 8002680:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002682:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002688:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	7fdb      	ldrb	r3, [r3, #31]
 800268e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002690:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002696:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002698:	683a      	ldr	r2, [r7, #0]
 800269a:	7f92      	ldrb	r2, [r2, #30]
 800269c:	2a00      	cmp	r2, #0
 800269e:	d102      	bne.n	80026a6 <ETH_SetMACConfig+0x5e>
 80026a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026a4:	e000      	b.n	80026a8 <ETH_SetMACConfig+0x60>
 80026a6:	2200      	movs	r2, #0
                        macconf->Speed |
 80026a8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	7f1b      	ldrb	r3, [r3, #28]
 80026ae:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026b0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026b6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	791b      	ldrb	r3, [r3, #4]
 80026bc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026c0:	683a      	ldr	r2, [r7, #0]
 80026c2:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026c6:	2a00      	cmp	r2, #0
 80026c8:	d102      	bne.n	80026d0 <ETH_SetMACConfig+0x88>
 80026ca:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ce:	e000      	b.n	80026d2 <ETH_SetMACConfig+0x8a>
 80026d0:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	7bdb      	ldrb	r3, [r3, #15]
 80026d8:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026da:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026dc:	683b      	ldr	r3, [r7, #0]
 80026de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026e2:	683b      	ldr	r3, [r7, #0]
 80026e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80026e8:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80026ea:	4313      	orrs	r3, r2
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002702:	2001      	movs	r0, #1
 8002704:	f7ff fdee 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	699b      	ldr	r3, [r3, #24]
 8002716:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002718:	68fa      	ldr	r2, [r7, #12]
 800271a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800271e:	4013      	ands	r3, r2
 8002720:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002726:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800272e:	2a00      	cmp	r2, #0
 8002730:	d101      	bne.n	8002736 <ETH_SetMACConfig+0xee>
 8002732:	2280      	movs	r2, #128	; 0x80
 8002734:	e000      	b.n	8002738 <ETH_SetMACConfig+0xf0>
 8002736:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002738:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800273e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002740:	683a      	ldr	r2, [r7, #0]
 8002742:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002746:	2a01      	cmp	r2, #1
 8002748:	d101      	bne.n	800274e <ETH_SetMACConfig+0x106>
 800274a:	2208      	movs	r2, #8
 800274c:	e000      	b.n	8002750 <ETH_SetMACConfig+0x108>
 800274e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002750:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002752:	683a      	ldr	r2, [r7, #0]
 8002754:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002758:	2a01      	cmp	r2, #1
 800275a:	d101      	bne.n	8002760 <ETH_SetMACConfig+0x118>
 800275c:	2204      	movs	r2, #4
 800275e:	e000      	b.n	8002762 <ETH_SetMACConfig+0x11a>
 8002760:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002762:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800276a:	2a01      	cmp	r2, #1
 800276c:	d101      	bne.n	8002772 <ETH_SetMACConfig+0x12a>
 800276e:	2202      	movs	r2, #2
 8002770:	e000      	b.n	8002774 <ETH_SetMACConfig+0x12c>
 8002772:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002774:	4313      	orrs	r3, r2
 8002776:	68fa      	ldr	r2, [r7, #12]
 8002778:	4313      	orrs	r3, r2
 800277a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68fa      	ldr	r2, [r7, #12]
 8002782:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	699b      	ldr	r3, [r3, #24]
 800278a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800278c:	2001      	movs	r0, #1
 800278e:	f7ff fda9 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68fa      	ldr	r2, [r7, #12]
 8002798:	619a      	str	r2, [r3, #24]
}
 800279a:	bf00      	nop
 800279c:	3710      	adds	r7, #16
 800279e:	46bd      	mov	sp, r7
 80027a0:	bd80      	pop	{r7, pc}
 80027a2:	bf00      	nop
 80027a4:	ff20810f 	.word	0xff20810f

080027a8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027a8:	b580      	push	{r7, lr}
 80027aa:	b084      	sub	sp, #16
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027be:	68fa      	ldr	r2, [r7, #12]
 80027c0:	4b3d      	ldr	r3, [pc, #244]	; (80028b8 <ETH_SetDMAConfig+0x110>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	7b1b      	ldrb	r3, [r3, #12]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d102      	bne.n	80027d4 <ETH_SetDMAConfig+0x2c>
 80027ce:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027d2:	e000      	b.n	80027d6 <ETH_SetDMAConfig+0x2e>
 80027d4:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	7b5b      	ldrb	r3, [r3, #13]
 80027da:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027dc:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027de:	683a      	ldr	r2, [r7, #0]
 80027e0:	7f52      	ldrb	r2, [r2, #29]
 80027e2:	2a00      	cmp	r2, #0
 80027e4:	d102      	bne.n	80027ec <ETH_SetDMAConfig+0x44>
 80027e6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80027ea:	e000      	b.n	80027ee <ETH_SetDMAConfig+0x46>
 80027ec:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	7b9b      	ldrb	r3, [r3, #14]
 80027f4:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027f6:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80027fc:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	7f1b      	ldrb	r3, [r3, #28]
 8002802:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002804:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	7f9b      	ldrb	r3, [r3, #30]
 800280a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800280c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800280e:	683b      	ldr	r3, [r7, #0]
 8002810:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002812:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800281a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800281c:	4313      	orrs	r3, r2
 800281e:	68fa      	ldr	r2, [r7, #12]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800282c:	461a      	mov	r2, r3
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800283a:	699b      	ldr	r3, [r3, #24]
 800283c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800283e:	2001      	movs	r0, #1
 8002840:	f7ff fd50 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800284c:	461a      	mov	r2, r3
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	791b      	ldrb	r3, [r3, #4]
 8002856:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800285c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002862:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002868:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002870:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002872:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002878:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800287a:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800287c:	683b      	ldr	r3, [r7, #0]
 800287e:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002880:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002882:	687a      	ldr	r2, [r7, #4]
 8002884:	6812      	ldr	r2, [r2, #0]
 8002886:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800288a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800288e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800289c:	2001      	movs	r0, #1
 800289e:	f7ff fd21 	bl	80022e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028aa:	461a      	mov	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6013      	str	r3, [r2, #0]
}
 80028b0:	bf00      	nop
 80028b2:	3710      	adds	r7, #16
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	f8de3f23 	.word	0xf8de3f23

080028bc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b0a6      	sub	sp, #152	; 0x98
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028c4:	2301      	movs	r3, #1
 80028c6:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028ca:	2301      	movs	r3, #1
 80028cc:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028d0:	2300      	movs	r3, #0
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028d4:	2300      	movs	r3, #0
 80028d6:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028da:	2301      	movs	r3, #1
 80028dc:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028e0:	2300      	movs	r3, #0
 80028e2:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80028ec:	2300      	movs	r3, #0
 80028ee:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80028f2:	2300      	movs	r3, #0
 80028f4:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80028f8:	2300      	movs	r3, #0
 80028fa:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002902:	2300      	movs	r3, #0
 8002904:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002906:	2300      	movs	r3, #0
 8002908:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800290c:	2300      	movs	r3, #0
 800290e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002912:	2300      	movs	r3, #0
 8002914:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800291e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002924:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002928:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800292a:	2300      	movs	r3, #0
 800292c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002930:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002934:	4619      	mov	r1, r3
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7ff fe86 	bl	8002648 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800293c:	2301      	movs	r3, #1
 800293e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002940:	2301      	movs	r3, #1
 8002942:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002944:	2301      	movs	r3, #1
 8002946:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800294a:	2301      	movs	r3, #1
 800294c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002958:	2300      	movs	r3, #0
 800295a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800295e:	2300      	movs	r3, #0
 8002960:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002962:	2301      	movs	r3, #1
 8002964:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002968:	2301      	movs	r3, #1
 800296a:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800296c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002970:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002976:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002978:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800297c:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002984:	2300      	movs	r3, #0
 8002986:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002988:	2300      	movs	r3, #0
 800298a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800298c:	f107 0308 	add.w	r3, r7, #8
 8002990:	4619      	mov	r1, r3
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff ff08 	bl	80027a8 <ETH_SetDMAConfig>
}
 8002998:	bf00      	nop
 800299a:	3798      	adds	r7, #152	; 0x98
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	3305      	adds	r3, #5
 80029b0:	781b      	ldrb	r3, [r3, #0]
 80029b2:	021b      	lsls	r3, r3, #8
 80029b4:	687a      	ldr	r2, [r7, #4]
 80029b6:	3204      	adds	r2, #4
 80029b8:	7812      	ldrb	r2, [r2, #0]
 80029ba:	4313      	orrs	r3, r2
 80029bc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029be:	68ba      	ldr	r2, [r7, #8]
 80029c0:	4b11      	ldr	r3, [pc, #68]	; (8002a08 <ETH_MACAddressConfig+0x68>)
 80029c2:	4413      	add	r3, r2
 80029c4:	461a      	mov	r2, r3
 80029c6:	697b      	ldr	r3, [r7, #20]
 80029c8:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	3303      	adds	r3, #3
 80029ce:	781b      	ldrb	r3, [r3, #0]
 80029d0:	061a      	lsls	r2, r3, #24
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	3302      	adds	r3, #2
 80029d6:	781b      	ldrb	r3, [r3, #0]
 80029d8:	041b      	lsls	r3, r3, #16
 80029da:	431a      	orrs	r2, r3
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	3301      	adds	r3, #1
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	021b      	lsls	r3, r3, #8
 80029e4:	4313      	orrs	r3, r2
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	7812      	ldrb	r2, [r2, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80029ee:	68ba      	ldr	r2, [r7, #8]
 80029f0:	4b06      	ldr	r3, [pc, #24]	; (8002a0c <ETH_MACAddressConfig+0x6c>)
 80029f2:	4413      	add	r3, r2
 80029f4:	461a      	mov	r2, r3
 80029f6:	697b      	ldr	r3, [r7, #20]
 80029f8:	6013      	str	r3, [r2, #0]
}
 80029fa:	bf00      	nop
 80029fc:	371c      	adds	r7, #28
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	40028040 	.word	0x40028040
 8002a0c:	40028044 	.word	0x40028044

08002a10 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b085      	sub	sp, #20
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a18:	2300      	movs	r3, #0
 8002a1a:	60fb      	str	r3, [r7, #12]
 8002a1c:	e03e      	b.n	8002a9c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	68d9      	ldr	r1, [r3, #12]
 8002a22:	68fa      	ldr	r2, [r7, #12]
 8002a24:	4613      	mov	r3, r2
 8002a26:	009b      	lsls	r3, r3, #2
 8002a28:	4413      	add	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	440b      	add	r3, r1
 8002a2e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a30:	68bb      	ldr	r3, [r7, #8]
 8002a32:	2200      	movs	r2, #0
 8002a34:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2200      	movs	r2, #0
 8002a46:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a48:	68b9      	ldr	r1, [r7, #8]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	3206      	adds	r2, #6
 8002a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a5c:	68bb      	ldr	r3, [r7, #8]
 8002a5e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2b02      	cmp	r3, #2
 8002a64:	d80c      	bhi.n	8002a80 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68d9      	ldr	r1, [r3, #12]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	1c5a      	adds	r2, r3, #1
 8002a6e:	4613      	mov	r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	00db      	lsls	r3, r3, #3
 8002a76:	440b      	add	r3, r1
 8002a78:	461a      	mov	r2, r3
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
 8002a7e:	e004      	b.n	8002a8a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	68db      	ldr	r3, [r3, #12]
 8002a84:	461a      	mov	r2, r3
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002a92:	68bb      	ldr	r3, [r7, #8]
 8002a94:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	60fb      	str	r3, [r7, #12]
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	2b03      	cmp	r3, #3
 8002aa0:	d9bd      	bls.n	8002a1e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68da      	ldr	r2, [r3, #12]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ab4:	611a      	str	r2, [r3, #16]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr

08002ac2 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b085      	sub	sp, #20
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002aca:	2300      	movs	r3, #0
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	e046      	b.n	8002b5e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6919      	ldr	r1, [r3, #16]
 8002ad4:	68fa      	ldr	r2, [r7, #12]
 8002ad6:	4613      	mov	r3, r2
 8002ad8:	009b      	lsls	r3, r3, #2
 8002ada:	4413      	add	r3, r2
 8002adc:	00db      	lsls	r3, r3, #3
 8002ade:	440b      	add	r3, r1
 8002ae0:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	2200      	movs	r2, #0
 8002aec:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002aee:	68bb      	ldr	r3, [r7, #8]
 8002af0:	2200      	movs	r2, #0
 8002af2:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002af4:	68bb      	ldr	r3, [r7, #8]
 8002af6:	2200      	movs	r2, #0
 8002af8:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002afa:	68bb      	ldr	r3, [r7, #8]
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b00:	68bb      	ldr	r3, [r7, #8]
 8002b02:	2200      	movs	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b06:	68bb      	ldr	r3, [r7, #8]
 8002b08:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b0c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8002b14:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b22:	68b9      	ldr	r1, [r7, #8]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	68fa      	ldr	r2, [r7, #12]
 8002b28:	3212      	adds	r2, #18
 8002b2a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d80c      	bhi.n	8002b4e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	6919      	ldr	r1, [r3, #16]
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	1c5a      	adds	r2, r3, #1
 8002b3c:	4613      	mov	r3, r2
 8002b3e:	009b      	lsls	r3, r3, #2
 8002b40:	4413      	add	r3, r2
 8002b42:	00db      	lsls	r3, r3, #3
 8002b44:	440b      	add	r3, r1
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	60da      	str	r2, [r3, #12]
 8002b4c:	e004      	b.n	8002b58 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	461a      	mov	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	60fb      	str	r3, [r7, #12]
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	2b03      	cmp	r3, #3
 8002b62:	d9b5      	bls.n	8002ad0 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2200      	movs	r2, #0
 8002b68:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2200      	movs	r2, #0
 8002b74:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691a      	ldr	r2, [r3, #16]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b8e:	60da      	str	r2, [r3, #12]
}
 8002b90:	bf00      	nop
 8002b92:	3714      	adds	r7, #20
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b089      	sub	sp, #36	; 0x24
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002baa:	2300      	movs	r3, #0
 8002bac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	61fb      	str	r3, [r7, #28]
 8002bba:	e175      	b.n	8002ea8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bbc:	2201      	movs	r2, #1
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	4013      	ands	r3, r2
 8002bce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bd0:	693a      	ldr	r2, [r7, #16]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	429a      	cmp	r2, r3
 8002bd6:	f040 8164 	bne.w	8002ea2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bda:	683b      	ldr	r3, [r7, #0]
 8002bdc:	685b      	ldr	r3, [r3, #4]
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	2b01      	cmp	r3, #1
 8002be4:	d005      	beq.n	8002bf2 <HAL_GPIO_Init+0x56>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	685b      	ldr	r3, [r3, #4]
 8002bea:	f003 0303 	and.w	r3, r3, #3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d130      	bne.n	8002c54 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002bf8:	69fb      	ldr	r3, [r7, #28]
 8002bfa:	005b      	lsls	r3, r3, #1
 8002bfc:	2203      	movs	r2, #3
 8002bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002c02:	43db      	mvns	r3, r3
 8002c04:	69ba      	ldr	r2, [r7, #24]
 8002c06:	4013      	ands	r3, r2
 8002c08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c0a:	683b      	ldr	r3, [r7, #0]
 8002c0c:	68da      	ldr	r2, [r3, #12]
 8002c0e:	69fb      	ldr	r3, [r7, #28]
 8002c10:	005b      	lsls	r3, r3, #1
 8002c12:	fa02 f303 	lsl.w	r3, r2, r3
 8002c16:	69ba      	ldr	r2, [r7, #24]
 8002c18:	4313      	orrs	r3, r2
 8002c1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	69ba      	ldr	r2, [r7, #24]
 8002c20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	685b      	ldr	r3, [r3, #4]
 8002c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c28:	2201      	movs	r2, #1
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c30:	43db      	mvns	r3, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4013      	ands	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	091b      	lsrs	r3, r3, #4
 8002c3e:	f003 0201 	and.w	r2, r3, #1
 8002c42:	69fb      	ldr	r3, [r7, #28]
 8002c44:	fa02 f303 	lsl.w	r3, r2, r3
 8002c48:	69ba      	ldr	r2, [r7, #24]
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69ba      	ldr	r2, [r7, #24]
 8002c52:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	f003 0303 	and.w	r3, r3, #3
 8002c5c:	2b03      	cmp	r3, #3
 8002c5e:	d017      	beq.n	8002c90 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68db      	ldr	r3, [r3, #12]
 8002c64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c66:	69fb      	ldr	r3, [r7, #28]
 8002c68:	005b      	lsls	r3, r3, #1
 8002c6a:	2203      	movs	r2, #3
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	005b      	lsls	r3, r3, #1
 8002c80:	fa02 f303 	lsl.w	r3, r2, r3
 8002c84:	69ba      	ldr	r2, [r7, #24]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69ba      	ldr	r2, [r7, #24]
 8002c8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f003 0303 	and.w	r3, r3, #3
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d123      	bne.n	8002ce4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002c9c:	69fb      	ldr	r3, [r7, #28]
 8002c9e:	08da      	lsrs	r2, r3, #3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	3208      	adds	r2, #8
 8002ca4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ca8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	f003 0307 	and.w	r3, r3, #7
 8002cb0:	009b      	lsls	r3, r3, #2
 8002cb2:	220f      	movs	r2, #15
 8002cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb8:	43db      	mvns	r3, r3
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cc0:	683b      	ldr	r3, [r7, #0]
 8002cc2:	691a      	ldr	r2, [r3, #16]
 8002cc4:	69fb      	ldr	r3, [r7, #28]
 8002cc6:	f003 0307 	and.w	r3, r3, #7
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd0:	69ba      	ldr	r2, [r7, #24]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	08da      	lsrs	r2, r3, #3
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	3208      	adds	r2, #8
 8002cde:	69b9      	ldr	r1, [r7, #24]
 8002ce0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	005b      	lsls	r3, r3, #1
 8002cee:	2203      	movs	r2, #3
 8002cf0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf4:	43db      	mvns	r3, r3
 8002cf6:	69ba      	ldr	r2, [r7, #24]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0203 	and.w	r2, r3, #3
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	005b      	lsls	r3, r3, #1
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	69ba      	ldr	r2, [r7, #24]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	69ba      	ldr	r2, [r7, #24]
 8002d16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	f000 80be 	beq.w	8002ea2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d26:	4b66      	ldr	r3, [pc, #408]	; (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d2a:	4a65      	ldr	r2, [pc, #404]	; (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d30:	6453      	str	r3, [r2, #68]	; 0x44
 8002d32:	4b63      	ldr	r3, [pc, #396]	; (8002ec0 <HAL_GPIO_Init+0x324>)
 8002d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d3a:	60fb      	str	r3, [r7, #12]
 8002d3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d3e:	4a61      	ldr	r2, [pc, #388]	; (8002ec4 <HAL_GPIO_Init+0x328>)
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	089b      	lsrs	r3, r3, #2
 8002d44:	3302      	adds	r3, #2
 8002d46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	f003 0303 	and.w	r3, r3, #3
 8002d52:	009b      	lsls	r3, r3, #2
 8002d54:	220f      	movs	r2, #15
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	69ba      	ldr	r2, [r7, #24]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a58      	ldr	r2, [pc, #352]	; (8002ec8 <HAL_GPIO_Init+0x32c>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d037      	beq.n	8002dda <HAL_GPIO_Init+0x23e>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a57      	ldr	r2, [pc, #348]	; (8002ecc <HAL_GPIO_Init+0x330>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d031      	beq.n	8002dd6 <HAL_GPIO_Init+0x23a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a56      	ldr	r2, [pc, #344]	; (8002ed0 <HAL_GPIO_Init+0x334>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d02b      	beq.n	8002dd2 <HAL_GPIO_Init+0x236>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a55      	ldr	r2, [pc, #340]	; (8002ed4 <HAL_GPIO_Init+0x338>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d025      	beq.n	8002dce <HAL_GPIO_Init+0x232>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a54      	ldr	r2, [pc, #336]	; (8002ed8 <HAL_GPIO_Init+0x33c>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d01f      	beq.n	8002dca <HAL_GPIO_Init+0x22e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a53      	ldr	r2, [pc, #332]	; (8002edc <HAL_GPIO_Init+0x340>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d019      	beq.n	8002dc6 <HAL_GPIO_Init+0x22a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a52      	ldr	r2, [pc, #328]	; (8002ee0 <HAL_GPIO_Init+0x344>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d013      	beq.n	8002dc2 <HAL_GPIO_Init+0x226>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a51      	ldr	r2, [pc, #324]	; (8002ee4 <HAL_GPIO_Init+0x348>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d00d      	beq.n	8002dbe <HAL_GPIO_Init+0x222>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a50      	ldr	r2, [pc, #320]	; (8002ee8 <HAL_GPIO_Init+0x34c>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d007      	beq.n	8002dba <HAL_GPIO_Init+0x21e>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a4f      	ldr	r2, [pc, #316]	; (8002eec <HAL_GPIO_Init+0x350>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d101      	bne.n	8002db6 <HAL_GPIO_Init+0x21a>
 8002db2:	2309      	movs	r3, #9
 8002db4:	e012      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002db6:	230a      	movs	r3, #10
 8002db8:	e010      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dba:	2308      	movs	r3, #8
 8002dbc:	e00e      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dbe:	2307      	movs	r3, #7
 8002dc0:	e00c      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc2:	2306      	movs	r3, #6
 8002dc4:	e00a      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dc6:	2305      	movs	r3, #5
 8002dc8:	e008      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dca:	2304      	movs	r3, #4
 8002dcc:	e006      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dce:	2303      	movs	r3, #3
 8002dd0:	e004      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd2:	2302      	movs	r3, #2
 8002dd4:	e002      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e000      	b.n	8002ddc <HAL_GPIO_Init+0x240>
 8002dda:	2300      	movs	r3, #0
 8002ddc:	69fa      	ldr	r2, [r7, #28]
 8002dde:	f002 0203 	and.w	r2, r2, #3
 8002de2:	0092      	lsls	r2, r2, #2
 8002de4:	4093      	lsls	r3, r2
 8002de6:	69ba      	ldr	r2, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002dec:	4935      	ldr	r1, [pc, #212]	; (8002ec4 <HAL_GPIO_Init+0x328>)
 8002dee:	69fb      	ldr	r3, [r7, #28]
 8002df0:	089b      	lsrs	r3, r3, #2
 8002df2:	3302      	adds	r3, #2
 8002df4:	69ba      	ldr	r2, [r7, #24]
 8002df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002dfa:	4b3d      	ldr	r3, [pc, #244]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d003      	beq.n	8002e1e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e1e:	4a34      	ldr	r2, [pc, #208]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e20:	69bb      	ldr	r3, [r7, #24]
 8002e22:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e24:	4b32      	ldr	r3, [pc, #200]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d003      	beq.n	8002e48 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	693b      	ldr	r3, [r7, #16]
 8002e44:	4313      	orrs	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e48:	4a29      	ldr	r2, [pc, #164]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e4a:	69bb      	ldr	r3, [r7, #24]
 8002e4c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e4e:	4b28      	ldr	r3, [pc, #160]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	43db      	mvns	r3, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d003      	beq.n	8002e72 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e6a:	69ba      	ldr	r2, [r7, #24]
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4313      	orrs	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e72:	4a1f      	ldr	r2, [pc, #124]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	43db      	mvns	r3, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4013      	ands	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	685b      	ldr	r3, [r3, #4]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d003      	beq.n	8002e9c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002e94:	69ba      	ldr	r2, [r7, #24]
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002e9c:	4a14      	ldr	r2, [pc, #80]	; (8002ef0 <HAL_GPIO_Init+0x354>)
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ea2:	69fb      	ldr	r3, [r7, #28]
 8002ea4:	3301      	adds	r3, #1
 8002ea6:	61fb      	str	r3, [r7, #28]
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	2b0f      	cmp	r3, #15
 8002eac:	f67f ae86 	bls.w	8002bbc <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002eb0:	bf00      	nop
 8002eb2:	bf00      	nop
 8002eb4:	3724      	adds	r7, #36	; 0x24
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebc:	4770      	bx	lr
 8002ebe:	bf00      	nop
 8002ec0:	40023800 	.word	0x40023800
 8002ec4:	40013800 	.word	0x40013800
 8002ec8:	40020000 	.word	0x40020000
 8002ecc:	40020400 	.word	0x40020400
 8002ed0:	40020800 	.word	0x40020800
 8002ed4:	40020c00 	.word	0x40020c00
 8002ed8:	40021000 	.word	0x40021000
 8002edc:	40021400 	.word	0x40021400
 8002ee0:	40021800 	.word	0x40021800
 8002ee4:	40021c00 	.word	0x40021c00
 8002ee8:	40022000 	.word	0x40022000
 8002eec:	40022400 	.word	0x40022400
 8002ef0:	40013c00 	.word	0x40013c00

08002ef4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b085      	sub	sp, #20
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	460b      	mov	r3, r1
 8002efe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691a      	ldr	r2, [r3, #16]
 8002f04:	887b      	ldrh	r3, [r7, #2]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d002      	beq.n	8002f12 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	73fb      	strb	r3, [r7, #15]
 8002f10:	e001      	b.n	8002f16 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002f12:	2300      	movs	r3, #0
 8002f14:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002f16:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
 8002f2c:	460b      	mov	r3, r1
 8002f2e:	807b      	strh	r3, [r7, #2]
 8002f30:	4613      	mov	r3, r2
 8002f32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f34:	787b      	ldrb	r3, [r7, #1]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d003      	beq.n	8002f42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f40:	e003      	b.n	8002f4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f42:	887b      	ldrh	r3, [r7, #2]
 8002f44:	041a      	lsls	r2, r3, #16
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	619a      	str	r2, [r3, #24]
}
 8002f4a:	bf00      	nop
 8002f4c:	370c      	adds	r7, #12
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f54:	4770      	bx	lr

08002f56 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002f56:	b480      	push	{r7}
 8002f58:	b085      	sub	sp, #20
 8002f5a:	af00      	add	r7, sp, #0
 8002f5c:	6078      	str	r0, [r7, #4]
 8002f5e:	460b      	mov	r3, r1
 8002f60:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002f68:	887a      	ldrh	r2, [r7, #2]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	041a      	lsls	r2, r3, #16
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	43d9      	mvns	r1, r3
 8002f74:	887b      	ldrh	r3, [r7, #2]
 8002f76:	400b      	ands	r3, r1
 8002f78:	431a      	orrs	r2, r3
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	619a      	str	r2, [r3, #24]
}
 8002f7e:	bf00      	nop
 8002f80:	3714      	adds	r7, #20
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f96:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f98:	695a      	ldr	r2, [r3, #20]
 8002f9a:	88fb      	ldrh	r3, [r7, #6]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d006      	beq.n	8002fb0 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002fa2:	4a05      	ldr	r2, [pc, #20]	; (8002fb8 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002fa4:	88fb      	ldrh	r3, [r7, #6]
 8002fa6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002fa8:	88fb      	ldrh	r3, [r7, #6]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7fe f8ce 	bl	800114c <HAL_GPIO_EXTI_Callback>
  }
}
 8002fb0:	bf00      	nop
 8002fb2:	3708      	adds	r7, #8
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}
 8002fb8:	40013c00 	.word	0x40013c00

08002fbc <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002fbc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002fbe:	b08f      	sub	sp, #60	; 0x3c
 8002fc0:	af0a      	add	r7, sp, #40	; 0x28
 8002fc2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d101      	bne.n	8002fce <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002fca:	2301      	movs	r3, #1
 8002fcc:	e116      	b.n	80031fc <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d106      	bne.n	8002fee <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f7fe fcdf 	bl	80019ac <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2203      	movs	r2, #3
 8002ff2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002ff6:	68bb      	ldr	r3, [r7, #8]
 8002ff8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d102      	bne.n	8003008 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	2200      	movs	r2, #0
 8003006:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f003 fcbf 	bl	8006990 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	687e      	ldr	r6, [r7, #4]
 800301a:	466d      	mov	r5, sp
 800301c:	f106 0410 	add.w	r4, r6, #16
 8003020:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003022:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003024:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003026:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003028:	e894 0003 	ldmia.w	r4, {r0, r1}
 800302c:	e885 0003 	stmia.w	r5, {r0, r1}
 8003030:	1d33      	adds	r3, r6, #4
 8003032:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003034:	6838      	ldr	r0, [r7, #0]
 8003036:	f003 fc53 	bl	80068e0 <USB_CoreInit>
 800303a:	4603      	mov	r3, r0
 800303c:	2b00      	cmp	r3, #0
 800303e:	d005      	beq.n	800304c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2202      	movs	r2, #2
 8003044:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003048:	2301      	movs	r3, #1
 800304a:	e0d7      	b.n	80031fc <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	2100      	movs	r1, #0
 8003052:	4618      	mov	r0, r3
 8003054:	f003 fcad 	bl	80069b2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003058:	2300      	movs	r3, #0
 800305a:	73fb      	strb	r3, [r7, #15]
 800305c:	e04a      	b.n	80030f4 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800305e:	7bfa      	ldrb	r2, [r7, #15]
 8003060:	6879      	ldr	r1, [r7, #4]
 8003062:	4613      	mov	r3, r2
 8003064:	00db      	lsls	r3, r3, #3
 8003066:	4413      	add	r3, r2
 8003068:	009b      	lsls	r3, r3, #2
 800306a:	440b      	add	r3, r1
 800306c:	333d      	adds	r3, #61	; 0x3d
 800306e:	2201      	movs	r2, #1
 8003070:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003072:	7bfa      	ldrb	r2, [r7, #15]
 8003074:	6879      	ldr	r1, [r7, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	00db      	lsls	r3, r3, #3
 800307a:	4413      	add	r3, r2
 800307c:	009b      	lsls	r3, r3, #2
 800307e:	440b      	add	r3, r1
 8003080:	333c      	adds	r3, #60	; 0x3c
 8003082:	7bfa      	ldrb	r2, [r7, #15]
 8003084:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003086:	7bfa      	ldrb	r2, [r7, #15]
 8003088:	7bfb      	ldrb	r3, [r7, #15]
 800308a:	b298      	uxth	r0, r3
 800308c:	6879      	ldr	r1, [r7, #4]
 800308e:	4613      	mov	r3, r2
 8003090:	00db      	lsls	r3, r3, #3
 8003092:	4413      	add	r3, r2
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	440b      	add	r3, r1
 8003098:	3344      	adds	r3, #68	; 0x44
 800309a:	4602      	mov	r2, r0
 800309c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800309e:	7bfa      	ldrb	r2, [r7, #15]
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	00db      	lsls	r3, r3, #3
 80030a6:	4413      	add	r3, r2
 80030a8:	009b      	lsls	r3, r3, #2
 80030aa:	440b      	add	r3, r1
 80030ac:	3340      	adds	r3, #64	; 0x40
 80030ae:	2200      	movs	r2, #0
 80030b0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80030b2:	7bfa      	ldrb	r2, [r7, #15]
 80030b4:	6879      	ldr	r1, [r7, #4]
 80030b6:	4613      	mov	r3, r2
 80030b8:	00db      	lsls	r3, r3, #3
 80030ba:	4413      	add	r3, r2
 80030bc:	009b      	lsls	r3, r3, #2
 80030be:	440b      	add	r3, r1
 80030c0:	3348      	adds	r3, #72	; 0x48
 80030c2:	2200      	movs	r2, #0
 80030c4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80030c6:	7bfa      	ldrb	r2, [r7, #15]
 80030c8:	6879      	ldr	r1, [r7, #4]
 80030ca:	4613      	mov	r3, r2
 80030cc:	00db      	lsls	r3, r3, #3
 80030ce:	4413      	add	r3, r2
 80030d0:	009b      	lsls	r3, r3, #2
 80030d2:	440b      	add	r3, r1
 80030d4:	334c      	adds	r3, #76	; 0x4c
 80030d6:	2200      	movs	r2, #0
 80030d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80030da:	7bfa      	ldrb	r2, [r7, #15]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	00db      	lsls	r3, r3, #3
 80030e2:	4413      	add	r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	3354      	adds	r3, #84	; 0x54
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030ee:	7bfb      	ldrb	r3, [r7, #15]
 80030f0:	3301      	adds	r3, #1
 80030f2:	73fb      	strb	r3, [r7, #15]
 80030f4:	7bfa      	ldrb	r2, [r7, #15]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d3af      	bcc.n	800305e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030fe:	2300      	movs	r3, #0
 8003100:	73fb      	strb	r3, [r7, #15]
 8003102:	e044      	b.n	800318e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003104:	7bfa      	ldrb	r2, [r7, #15]
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	4613      	mov	r3, r2
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4413      	add	r3, r2
 800310e:	009b      	lsls	r3, r3, #2
 8003110:	440b      	add	r3, r1
 8003112:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003116:	2200      	movs	r2, #0
 8003118:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800311a:	7bfa      	ldrb	r2, [r7, #15]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4413      	add	r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800312c:	7bfa      	ldrb	r2, [r7, #15]
 800312e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003130:	7bfa      	ldrb	r2, [r7, #15]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003142:	2200      	movs	r2, #0
 8003144:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003146:	7bfa      	ldrb	r2, [r7, #15]
 8003148:	6879      	ldr	r1, [r7, #4]
 800314a:	4613      	mov	r3, r2
 800314c:	00db      	lsls	r3, r3, #3
 800314e:	4413      	add	r3, r2
 8003150:	009b      	lsls	r3, r3, #2
 8003152:	440b      	add	r3, r1
 8003154:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800315c:	7bfa      	ldrb	r2, [r7, #15]
 800315e:	6879      	ldr	r1, [r7, #4]
 8003160:	4613      	mov	r3, r2
 8003162:	00db      	lsls	r3, r3, #3
 8003164:	4413      	add	r3, r2
 8003166:	009b      	lsls	r3, r3, #2
 8003168:	440b      	add	r3, r1
 800316a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800316e:	2200      	movs	r2, #0
 8003170:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003172:	7bfa      	ldrb	r2, [r7, #15]
 8003174:	6879      	ldr	r1, [r7, #4]
 8003176:	4613      	mov	r3, r2
 8003178:	00db      	lsls	r3, r3, #3
 800317a:	4413      	add	r3, r2
 800317c:	009b      	lsls	r3, r3, #2
 800317e:	440b      	add	r3, r1
 8003180:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003188:	7bfb      	ldrb	r3, [r7, #15]
 800318a:	3301      	adds	r3, #1
 800318c:	73fb      	strb	r3, [r7, #15]
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	429a      	cmp	r2, r3
 8003196:	d3b5      	bcc.n	8003104 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	603b      	str	r3, [r7, #0]
 800319e:	687e      	ldr	r6, [r7, #4]
 80031a0:	466d      	mov	r5, sp
 80031a2:	f106 0410 	add.w	r4, r6, #16
 80031a6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031a8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031aa:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80031ac:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80031ae:	e894 0003 	ldmia.w	r4, {r0, r1}
 80031b2:	e885 0003 	stmia.w	r5, {r0, r1}
 80031b6:	1d33      	adds	r3, r6, #4
 80031b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	f003 fc46 	bl	8006a4c <USB_DevInit>
 80031c0:	4603      	mov	r3, r0
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d005      	beq.n	80031d2 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2202      	movs	r2, #2
 80031ca:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	e014      	b.n	80031fc <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	2b01      	cmp	r3, #1
 80031e8:	d102      	bne.n	80031f0 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f80a 	bl	8003204 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f003 fe04 	bl	8006e02 <USB_DevDisconnect>

  return HAL_OK;
 80031fa:	2300      	movs	r3, #0
}
 80031fc:	4618      	mov	r0, r3
 80031fe:	3714      	adds	r7, #20
 8003200:	46bd      	mov	sp, r7
 8003202:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003204 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003204:	b480      	push	{r7}
 8003206:	b085      	sub	sp, #20
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2201      	movs	r2, #1
 8003216:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003232:	4b05      	ldr	r3, [pc, #20]	; (8003248 <HAL_PCDEx_ActivateLPM+0x44>)
 8003234:	4313      	orrs	r3, r2
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800323a:	2300      	movs	r3, #0
}
 800323c:	4618      	mov	r0, r3
 800323e:	3714      	adds	r7, #20
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr
 8003248:	10000003 	.word	0x10000003

0800324c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800324c:	b480      	push	{r7}
 800324e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003250:	4b05      	ldr	r3, [pc, #20]	; (8003268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	4a04      	ldr	r2, [pc, #16]	; (8003268 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003256:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800325a:	6013      	str	r3, [r2, #0]
}
 800325c:	bf00      	nop
 800325e:	46bd      	mov	sp, r7
 8003260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003264:	4770      	bx	lr
 8003266:	bf00      	nop
 8003268:	40007000 	.word	0x40007000

0800326c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003272:	2300      	movs	r3, #0
 8003274:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 8003278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800327a:	4a22      	ldr	r2, [pc, #136]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 800327c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003280:	6413      	str	r3, [r2, #64]	; 0x40
 8003282:	4b20      	ldr	r3, [pc, #128]	; (8003304 <HAL_PWREx_EnableOverDrive+0x98>)
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800328a:	603b      	str	r3, [r7, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800328e:	4b1e      	ldr	r3, [pc, #120]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a1d      	ldr	r2, [pc, #116]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003294:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800329a:	f7ff f817 	bl	80022cc <HAL_GetTick>
 800329e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032a0:	e009      	b.n	80032b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032a2:	f7ff f813 	bl	80022cc <HAL_GetTick>
 80032a6:	4602      	mov	r2, r0
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	1ad3      	subs	r3, r2, r3
 80032ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032b0:	d901      	bls.n	80032b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e022      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80032b6:	4b14      	ldr	r3, [pc, #80]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032b8:	685b      	ldr	r3, [r3, #4]
 80032ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032c2:	d1ee      	bne.n	80032a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80032c4:	4b10      	ldr	r3, [pc, #64]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a0f      	ldr	r2, [pc, #60]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032d0:	f7fe fffc 	bl	80022cc <HAL_GetTick>
 80032d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032d6:	e009      	b.n	80032ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80032d8:	f7fe fff8 	bl	80022cc <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80032e6:	d901      	bls.n	80032ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80032e8:	2303      	movs	r3, #3
 80032ea:	e007      	b.n	80032fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80032ec:	4b06      	ldr	r3, [pc, #24]	; (8003308 <HAL_PWREx_EnableOverDrive+0x9c>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80032f8:	d1ee      	bne.n	80032d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80032fa:	2300      	movs	r3, #0
}
 80032fc:	4618      	mov	r0, r3
 80032fe:	3708      	adds	r7, #8
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	40023800 	.word	0x40023800
 8003308:	40007000 	.word	0x40007000

0800330c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b086      	sub	sp, #24
 8003310:	af00      	add	r7, sp, #0
 8003312:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e29b      	b.n	800385a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	f003 0301 	and.w	r3, r3, #1
 800332a:	2b00      	cmp	r3, #0
 800332c:	f000 8087 	beq.w	800343e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003330:	4b96      	ldr	r3, [pc, #600]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003332:	689b      	ldr	r3, [r3, #8]
 8003334:	f003 030c 	and.w	r3, r3, #12
 8003338:	2b04      	cmp	r3, #4
 800333a:	d00c      	beq.n	8003356 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800333c:	4b93      	ldr	r3, [pc, #588]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800333e:	689b      	ldr	r3, [r3, #8]
 8003340:	f003 030c 	and.w	r3, r3, #12
 8003344:	2b08      	cmp	r3, #8
 8003346:	d112      	bne.n	800336e <HAL_RCC_OscConfig+0x62>
 8003348:	4b90      	ldr	r3, [pc, #576]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003350:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003354:	d10b      	bne.n	800336e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003356:	4b8d      	ldr	r3, [pc, #564]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335e:	2b00      	cmp	r3, #0
 8003360:	d06c      	beq.n	800343c <HAL_RCC_OscConfig+0x130>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d168      	bne.n	800343c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e275      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003376:	d106      	bne.n	8003386 <HAL_RCC_OscConfig+0x7a>
 8003378:	4b84      	ldr	r3, [pc, #528]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a83      	ldr	r2, [pc, #524]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800337e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003382:	6013      	str	r3, [r2, #0]
 8003384:	e02e      	b.n	80033e4 <HAL_RCC_OscConfig+0xd8>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d10c      	bne.n	80033a8 <HAL_RCC_OscConfig+0x9c>
 800338e:	4b7f      	ldr	r3, [pc, #508]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a7e      	ldr	r2, [pc, #504]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003394:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003398:	6013      	str	r3, [r2, #0]
 800339a:	4b7c      	ldr	r3, [pc, #496]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	4a7b      	ldr	r2, [pc, #492]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033a4:	6013      	str	r3, [r2, #0]
 80033a6:	e01d      	b.n	80033e4 <HAL_RCC_OscConfig+0xd8>
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033b0:	d10c      	bne.n	80033cc <HAL_RCC_OscConfig+0xc0>
 80033b2:	4b76      	ldr	r3, [pc, #472]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	4a75      	ldr	r2, [pc, #468]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80033bc:	6013      	str	r3, [r2, #0]
 80033be:	4b73      	ldr	r3, [pc, #460]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a72      	ldr	r2, [pc, #456]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	e00b      	b.n	80033e4 <HAL_RCC_OscConfig+0xd8>
 80033cc:	4b6f      	ldr	r3, [pc, #444]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a6e      	ldr	r2, [pc, #440]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033d6:	6013      	str	r3, [r2, #0]
 80033d8:	4b6c      	ldr	r3, [pc, #432]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a6b      	ldr	r2, [pc, #428]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80033de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80033e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	685b      	ldr	r3, [r3, #4]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d013      	beq.n	8003414 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ec:	f7fe ff6e 	bl	80022cc <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033f4:	f7fe ff6a 	bl	80022cc <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b64      	cmp	r3, #100	; 0x64
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e229      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003406:	4b61      	ldr	r3, [pc, #388]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800340e:	2b00      	cmp	r3, #0
 8003410:	d0f0      	beq.n	80033f4 <HAL_RCC_OscConfig+0xe8>
 8003412:	e014      	b.n	800343e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003414:	f7fe ff5a 	bl	80022cc <HAL_GetTick>
 8003418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800341c:	f7fe ff56 	bl	80022cc <HAL_GetTick>
 8003420:	4602      	mov	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b64      	cmp	r3, #100	; 0x64
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e215      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800342e:	4b57      	ldr	r3, [pc, #348]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003436:	2b00      	cmp	r3, #0
 8003438:	d1f0      	bne.n	800341c <HAL_RCC_OscConfig+0x110>
 800343a:	e000      	b.n	800343e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800343c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f003 0302 	and.w	r3, r3, #2
 8003446:	2b00      	cmp	r3, #0
 8003448:	d069      	beq.n	800351e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800344a:	4b50      	ldr	r3, [pc, #320]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	f003 030c 	and.w	r3, r3, #12
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00b      	beq.n	800346e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003456:	4b4d      	ldr	r3, [pc, #308]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 030c 	and.w	r3, r3, #12
 800345e:	2b08      	cmp	r3, #8
 8003460:	d11c      	bne.n	800349c <HAL_RCC_OscConfig+0x190>
 8003462:	4b4a      	ldr	r3, [pc, #296]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d116      	bne.n	800349c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800346e:	4b47      	ldr	r3, [pc, #284]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d005      	beq.n	8003486 <HAL_RCC_OscConfig+0x17a>
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	68db      	ldr	r3, [r3, #12]
 800347e:	2b01      	cmp	r3, #1
 8003480:	d001      	beq.n	8003486 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e1e9      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003486:	4b41      	ldr	r3, [pc, #260]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	493d      	ldr	r1, [pc, #244]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003496:	4313      	orrs	r3, r2
 8003498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349a:	e040      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	68db      	ldr	r3, [r3, #12]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d023      	beq.n	80034ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034a4:	4b39      	ldr	r3, [pc, #228]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a38      	ldr	r2, [pc, #224]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034aa:	f043 0301 	orr.w	r3, r3, #1
 80034ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b0:	f7fe ff0c 	bl	80022cc <HAL_GetTick>
 80034b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b6:	e008      	b.n	80034ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b8:	f7fe ff08 	bl	80022cc <HAL_GetTick>
 80034bc:	4602      	mov	r2, r0
 80034be:	693b      	ldr	r3, [r7, #16]
 80034c0:	1ad3      	subs	r3, r2, r3
 80034c2:	2b02      	cmp	r3, #2
 80034c4:	d901      	bls.n	80034ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80034c6:	2303      	movs	r3, #3
 80034c8:	e1c7      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034ca:	4b30      	ldr	r3, [pc, #192]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f003 0302 	and.w	r3, r3, #2
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0f0      	beq.n	80034b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d6:	4b2d      	ldr	r3, [pc, #180]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	691b      	ldr	r3, [r3, #16]
 80034e2:	00db      	lsls	r3, r3, #3
 80034e4:	4929      	ldr	r1, [pc, #164]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034e6:	4313      	orrs	r3, r2
 80034e8:	600b      	str	r3, [r1, #0]
 80034ea:	e018      	b.n	800351e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ec:	4b27      	ldr	r3, [pc, #156]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	4a26      	ldr	r2, [pc, #152]	; (800358c <HAL_RCC_OscConfig+0x280>)
 80034f2:	f023 0301 	bic.w	r3, r3, #1
 80034f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034f8:	f7fe fee8 	bl	80022cc <HAL_GetTick>
 80034fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fe:	e008      	b.n	8003512 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003500:	f7fe fee4 	bl	80022cc <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	693b      	ldr	r3, [r7, #16]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	2b02      	cmp	r3, #2
 800350c:	d901      	bls.n	8003512 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800350e:	2303      	movs	r3, #3
 8003510:	e1a3      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	4b1e      	ldr	r3, [pc, #120]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0302 	and.w	r3, r3, #2
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1f0      	bne.n	8003500 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f003 0308 	and.w	r3, r3, #8
 8003526:	2b00      	cmp	r3, #0
 8003528:	d038      	beq.n	800359c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d019      	beq.n	8003566 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003532:	4b16      	ldr	r3, [pc, #88]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003534:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003536:	4a15      	ldr	r2, [pc, #84]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003538:	f043 0301 	orr.w	r3, r3, #1
 800353c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800353e:	f7fe fec5 	bl	80022cc <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003544:	e008      	b.n	8003558 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003546:	f7fe fec1 	bl	80022cc <HAL_GetTick>
 800354a:	4602      	mov	r2, r0
 800354c:	693b      	ldr	r3, [r7, #16]
 800354e:	1ad3      	subs	r3, r2, r3
 8003550:	2b02      	cmp	r3, #2
 8003552:	d901      	bls.n	8003558 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003554:	2303      	movs	r3, #3
 8003556:	e180      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003558:	4b0c      	ldr	r3, [pc, #48]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800355a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800355c:	f003 0302 	and.w	r3, r3, #2
 8003560:	2b00      	cmp	r3, #0
 8003562:	d0f0      	beq.n	8003546 <HAL_RCC_OscConfig+0x23a>
 8003564:	e01a      	b.n	800359c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003566:	4b09      	ldr	r3, [pc, #36]	; (800358c <HAL_RCC_OscConfig+0x280>)
 8003568:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800356a:	4a08      	ldr	r2, [pc, #32]	; (800358c <HAL_RCC_OscConfig+0x280>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003572:	f7fe feab 	bl	80022cc <HAL_GetTick>
 8003576:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003578:	e00a      	b.n	8003590 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800357a:	f7fe fea7 	bl	80022cc <HAL_GetTick>
 800357e:	4602      	mov	r2, r0
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	1ad3      	subs	r3, r2, r3
 8003584:	2b02      	cmp	r3, #2
 8003586:	d903      	bls.n	8003590 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e166      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
 800358c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b92      	ldr	r3, [pc, #584]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003592:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1ee      	bne.n	800357a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a4 	beq.w	80036f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035aa:	4b8c      	ldr	r3, [pc, #560]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d10d      	bne.n	80035d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80035b6:	4b89      	ldr	r3, [pc, #548]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035ba:	4a88      	ldr	r2, [pc, #544]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80035c0:	6413      	str	r3, [r2, #64]	; 0x40
 80035c2:	4b86      	ldr	r3, [pc, #536]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80035c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035ca:	60bb      	str	r3, [r7, #8]
 80035cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ce:	2301      	movs	r3, #1
 80035d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035d2:	4b83      	ldr	r3, [pc, #524]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d118      	bne.n	8003610 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80035de:	4b80      	ldr	r3, [pc, #512]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4a7f      	ldr	r2, [pc, #508]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 80035e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ea:	f7fe fe6f 	bl	80022cc <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f2:	f7fe fe6b 	bl	80022cc <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b64      	cmp	r3, #100	; 0x64
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e12a      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003604:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x4d4>)
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800360c:	2b00      	cmp	r3, #0
 800360e:	d0f0      	beq.n	80035f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	689b      	ldr	r3, [r3, #8]
 8003614:	2b01      	cmp	r3, #1
 8003616:	d106      	bne.n	8003626 <HAL_RCC_OscConfig+0x31a>
 8003618:	4b70      	ldr	r3, [pc, #448]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	4a6f      	ldr	r2, [pc, #444]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6713      	str	r3, [r2, #112]	; 0x70
 8003624:	e02d      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10c      	bne.n	8003648 <HAL_RCC_OscConfig+0x33c>
 800362e:	4b6b      	ldr	r3, [pc, #428]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003630:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003632:	4a6a      	ldr	r2, [pc, #424]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003634:	f023 0301 	bic.w	r3, r3, #1
 8003638:	6713      	str	r3, [r2, #112]	; 0x70
 800363a:	4b68      	ldr	r3, [pc, #416]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800363c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363e:	4a67      	ldr	r2, [pc, #412]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003640:	f023 0304 	bic.w	r3, r3, #4
 8003644:	6713      	str	r3, [r2, #112]	; 0x70
 8003646:	e01c      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	2b05      	cmp	r3, #5
 800364e:	d10c      	bne.n	800366a <HAL_RCC_OscConfig+0x35e>
 8003650:	4b62      	ldr	r3, [pc, #392]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003652:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003654:	4a61      	ldr	r2, [pc, #388]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003656:	f043 0304 	orr.w	r3, r3, #4
 800365a:	6713      	str	r3, [r2, #112]	; 0x70
 800365c:	4b5f      	ldr	r3, [pc, #380]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800365e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003660:	4a5e      	ldr	r2, [pc, #376]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003662:	f043 0301 	orr.w	r3, r3, #1
 8003666:	6713      	str	r3, [r2, #112]	; 0x70
 8003668:	e00b      	b.n	8003682 <HAL_RCC_OscConfig+0x376>
 800366a:	4b5c      	ldr	r3, [pc, #368]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800366c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800366e:	4a5b      	ldr	r2, [pc, #364]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003670:	f023 0301 	bic.w	r3, r3, #1
 8003674:	6713      	str	r3, [r2, #112]	; 0x70
 8003676:	4b59      	ldr	r3, [pc, #356]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	4a58      	ldr	r2, [pc, #352]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800367c:	f023 0304 	bic.w	r3, r3, #4
 8003680:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d015      	beq.n	80036b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800368a:	f7fe fe1f 	bl	80022cc <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003690:	e00a      	b.n	80036a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003692:	f7fe fe1b 	bl	80022cc <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	f241 3288 	movw	r2, #5000	; 0x1388
 80036a0:	4293      	cmp	r3, r2
 80036a2:	d901      	bls.n	80036a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80036a4:	2303      	movs	r3, #3
 80036a6:	e0d8      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a8:	4b4c      	ldr	r3, [pc, #304]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ac:	f003 0302 	and.w	r3, r3, #2
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d0ee      	beq.n	8003692 <HAL_RCC_OscConfig+0x386>
 80036b4:	e014      	b.n	80036e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036b6:	f7fe fe09 	bl	80022cc <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe fe05 	bl	80022cc <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0c2      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d4:	4b41      	ldr	r3, [pc, #260]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d1ee      	bne.n	80036be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80036e0:	7dfb      	ldrb	r3, [r7, #23]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d105      	bne.n	80036f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036e6:	4b3d      	ldr	r3, [pc, #244]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	4a3c      	ldr	r2, [pc, #240]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	699b      	ldr	r3, [r3, #24]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	f000 80ae 	beq.w	8003858 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036fc:	4b37      	ldr	r3, [pc, #220]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 030c 	and.w	r3, r3, #12
 8003704:	2b08      	cmp	r3, #8
 8003706:	d06d      	beq.n	80037e4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	699b      	ldr	r3, [r3, #24]
 800370c:	2b02      	cmp	r3, #2
 800370e:	d14b      	bne.n	80037a8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003710:	4b32      	ldr	r3, [pc, #200]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a31      	ldr	r2, [pc, #196]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003716:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800371a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800371c:	f7fe fdd6 	bl	80022cc <HAL_GetTick>
 8003720:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003722:	e008      	b.n	8003736 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fdd2 	bl	80022cc <HAL_GetTick>
 8003728:	4602      	mov	r2, r0
 800372a:	693b      	ldr	r3, [r7, #16]
 800372c:	1ad3      	subs	r3, r2, r3
 800372e:	2b02      	cmp	r3, #2
 8003730:	d901      	bls.n	8003736 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003732:	2303      	movs	r3, #3
 8003734:	e091      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003736:	4b29      	ldr	r3, [pc, #164]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d1f0      	bne.n	8003724 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a1b      	ldr	r3, [r3, #32]
 800374a:	431a      	orrs	r2, r3
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003750:	019b      	lsls	r3, r3, #6
 8003752:	431a      	orrs	r2, r3
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003758:	085b      	lsrs	r3, r3, #1
 800375a:	3b01      	subs	r3, #1
 800375c:	041b      	lsls	r3, r3, #16
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003764:	061b      	lsls	r3, r3, #24
 8003766:	431a      	orrs	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376c:	071b      	lsls	r3, r3, #28
 800376e:	491b      	ldr	r1, [pc, #108]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b19      	ldr	r3, [pc, #100]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	4a18      	ldr	r2, [pc, #96]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800377a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800377e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003780:	f7fe fda4 	bl	80022cc <HAL_GetTick>
 8003784:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003786:	e008      	b.n	800379a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003788:	f7fe fda0 	bl	80022cc <HAL_GetTick>
 800378c:	4602      	mov	r2, r0
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	1ad3      	subs	r3, r2, r3
 8003792:	2b02      	cmp	r3, #2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e05f      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800379a:	4b10      	ldr	r3, [pc, #64]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0f0      	beq.n	8003788 <HAL_RCC_OscConfig+0x47c>
 80037a6:	e057      	b.n	8003858 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a8:	4b0c      	ldr	r3, [pc, #48]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	4a0b      	ldr	r2, [pc, #44]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80037ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037b2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037b4:	f7fe fd8a 	bl	80022cc <HAL_GetTick>
 80037b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ba:	e008      	b.n	80037ce <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037bc:	f7fe fd86 	bl	80022cc <HAL_GetTick>
 80037c0:	4602      	mov	r2, r0
 80037c2:	693b      	ldr	r3, [r7, #16]
 80037c4:	1ad3      	subs	r3, r2, r3
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d901      	bls.n	80037ce <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 80037ca:	2303      	movs	r3, #3
 80037cc:	e045      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ce:	4b03      	ldr	r3, [pc, #12]	; (80037dc <HAL_RCC_OscConfig+0x4d0>)
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d1f0      	bne.n	80037bc <HAL_RCC_OscConfig+0x4b0>
 80037da:	e03d      	b.n	8003858 <HAL_RCC_OscConfig+0x54c>
 80037dc:	40023800 	.word	0x40023800
 80037e0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80037e4:	4b1f      	ldr	r3, [pc, #124]	; (8003864 <HAL_RCC_OscConfig+0x558>)
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	699b      	ldr	r3, [r3, #24]
 80037ee:	2b01      	cmp	r3, #1
 80037f0:	d030      	beq.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d129      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800380a:	429a      	cmp	r2, r3
 800380c:	d122      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003814:	4013      	ands	r3, r2
 8003816:	687a      	ldr	r2, [r7, #4]
 8003818:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800381a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800381c:	4293      	cmp	r3, r2
 800381e:	d119      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382a:	085b      	lsrs	r3, r3, #1
 800382c:	3b01      	subs	r3, #1
 800382e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003830:	429a      	cmp	r2, r3
 8003832:	d10f      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003840:	429a      	cmp	r2, r3
 8003842:	d107      	bne.n	8003854 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800384e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003850:	429a      	cmp	r2, r3
 8003852:	d001      	beq.n	8003858 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e000      	b.n	800385a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3718      	adds	r7, #24
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023800 	.word	0x40023800

08003868 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b084      	sub	sp, #16
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
 8003870:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2b00      	cmp	r3, #0
 800387a:	d101      	bne.n	8003880 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800387c:	2301      	movs	r3, #1
 800387e:	e0d0      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003880:	4b6a      	ldr	r3, [pc, #424]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f003 030f 	and.w	r3, r3, #15
 8003888:	683a      	ldr	r2, [r7, #0]
 800388a:	429a      	cmp	r2, r3
 800388c:	d910      	bls.n	80038b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800388e:	4b67      	ldr	r3, [pc, #412]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f023 020f 	bic.w	r2, r3, #15
 8003896:	4965      	ldr	r1, [pc, #404]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	4313      	orrs	r3, r2
 800389c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800389e:	4b63      	ldr	r3, [pc, #396]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	f003 030f 	and.w	r3, r3, #15
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	429a      	cmp	r2, r3
 80038aa:	d001      	beq.n	80038b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80038ac:	2301      	movs	r3, #1
 80038ae:	e0b8      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d020      	beq.n	80038fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d005      	beq.n	80038d4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	4a58      	ldr	r2, [pc, #352]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038ce:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80038d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d005      	beq.n	80038ec <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	4a52      	ldr	r2, [pc, #328]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038e6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80038ea:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ec:	4b50      	ldr	r3, [pc, #320]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	494d      	ldr	r1, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	2b00      	cmp	r3, #0
 8003908:	d040      	beq.n	800398c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	2b01      	cmp	r3, #1
 8003910:	d107      	bne.n	8003922 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003912:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d115      	bne.n	800394a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e07f      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	2b02      	cmp	r3, #2
 8003928:	d107      	bne.n	800393a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800392a:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d109      	bne.n	800394a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003936:	2301      	movs	r3, #1
 8003938:	e073      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800393a:	4b3d      	ldr	r3, [pc, #244]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 0302 	and.w	r3, r3, #2
 8003942:	2b00      	cmp	r3, #0
 8003944:	d101      	bne.n	800394a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e06b      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800394a:	4b39      	ldr	r3, [pc, #228]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	f023 0203 	bic.w	r2, r3, #3
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	4936      	ldr	r1, [pc, #216]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003958:	4313      	orrs	r3, r2
 800395a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800395c:	f7fe fcb6 	bl	80022cc <HAL_GetTick>
 8003960:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003962:	e00a      	b.n	800397a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003964:	f7fe fcb2 	bl	80022cc <HAL_GetTick>
 8003968:	4602      	mov	r2, r0
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	1ad3      	subs	r3, r2, r3
 800396e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003972:	4293      	cmp	r3, r2
 8003974:	d901      	bls.n	800397a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003976:	2303      	movs	r3, #3
 8003978:	e053      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800397a:	4b2d      	ldr	r3, [pc, #180]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 800397c:	689b      	ldr	r3, [r3, #8]
 800397e:	f003 020c 	and.w	r2, r3, #12
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	429a      	cmp	r2, r3
 800398a:	d1eb      	bne.n	8003964 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800398c:	4b27      	ldr	r3, [pc, #156]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 030f 	and.w	r3, r3, #15
 8003994:	683a      	ldr	r2, [r7, #0]
 8003996:	429a      	cmp	r2, r3
 8003998:	d210      	bcs.n	80039bc <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800399a:	4b24      	ldr	r3, [pc, #144]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f023 020f 	bic.w	r2, r3, #15
 80039a2:	4922      	ldr	r1, [pc, #136]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	4313      	orrs	r3, r2
 80039a8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039aa:	4b20      	ldr	r3, [pc, #128]	; (8003a2c <HAL_RCC_ClockConfig+0x1c4>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 030f 	and.w	r3, r3, #15
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d001      	beq.n	80039bc <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	e032      	b.n	8003a22 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	f003 0304 	and.w	r3, r3, #4
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d008      	beq.n	80039da <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039c8:	4b19      	ldr	r3, [pc, #100]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	68db      	ldr	r3, [r3, #12]
 80039d4:	4916      	ldr	r1, [pc, #88]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d009      	beq.n	80039fa <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039e6:	4b12      	ldr	r3, [pc, #72]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	00db      	lsls	r3, r3, #3
 80039f4:	490e      	ldr	r1, [pc, #56]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 80039f6:	4313      	orrs	r3, r2
 80039f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039fa:	f000 f821 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 80039fe:	4602      	mov	r2, r0
 8003a00:	4b0b      	ldr	r3, [pc, #44]	; (8003a30 <HAL_RCC_ClockConfig+0x1c8>)
 8003a02:	689b      	ldr	r3, [r3, #8]
 8003a04:	091b      	lsrs	r3, r3, #4
 8003a06:	f003 030f 	and.w	r3, r3, #15
 8003a0a:	490a      	ldr	r1, [pc, #40]	; (8003a34 <HAL_RCC_ClockConfig+0x1cc>)
 8003a0c:	5ccb      	ldrb	r3, [r1, r3]
 8003a0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_ClockConfig+0x1d0>)
 8003a14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003a16:	4b09      	ldr	r3, [pc, #36]	; (8003a3c <HAL_RCC_ClockConfig+0x1d4>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fc12 	bl	8002244 <HAL_InitTick>

  return HAL_OK;
 8003a20:	2300      	movs	r3, #0
}
 8003a22:	4618      	mov	r0, r3
 8003a24:	3710      	adds	r7, #16
 8003a26:	46bd      	mov	sp, r7
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	40023c00 	.word	0x40023c00
 8003a30:	40023800 	.word	0x40023800
 8003a34:	0800783c 	.word	0x0800783c
 8003a38:	20000014 	.word	0x20000014
 8003a3c:	2000001c 	.word	0x2000001c

08003a40 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	b094      	sub	sp, #80	; 0x50
 8003a46:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003a48:	2300      	movs	r3, #0
 8003a4a:	647b      	str	r3, [r7, #68]	; 0x44
 8003a4c:	2300      	movs	r3, #0
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a50:	2300      	movs	r3, #0
 8003a52:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003a54:	2300      	movs	r3, #0
 8003a56:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003a58:	4b79      	ldr	r3, [pc, #484]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 030c 	and.w	r3, r3, #12
 8003a60:	2b08      	cmp	r3, #8
 8003a62:	d00d      	beq.n	8003a80 <HAL_RCC_GetSysClockFreq+0x40>
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	f200 80e1 	bhi.w	8003c2c <HAL_RCC_GetSysClockFreq+0x1ec>
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d002      	beq.n	8003a74 <HAL_RCC_GetSysClockFreq+0x34>
 8003a6e:	2b04      	cmp	r3, #4
 8003a70:	d003      	beq.n	8003a7a <HAL_RCC_GetSysClockFreq+0x3a>
 8003a72:	e0db      	b.n	8003c2c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003a74:	4b73      	ldr	r3, [pc, #460]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003a76:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a78:	e0db      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003a7a:	4b73      	ldr	r3, [pc, #460]	; (8003c48 <HAL_RCC_GetSysClockFreq+0x208>)
 8003a7c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003a7e:	e0d8      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a80:	4b6f      	ldr	r3, [pc, #444]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003a88:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003a8a:	4b6d      	ldr	r3, [pc, #436]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a8c:	685b      	ldr	r3, [r3, #4]
 8003a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d063      	beq.n	8003b5e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a96:	4b6a      	ldr	r3, [pc, #424]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a98:	685b      	ldr	r3, [r3, #4]
 8003a9a:	099b      	lsrs	r3, r3, #6
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003aa0:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003aa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003aa8:	633b      	str	r3, [r7, #48]	; 0x30
 8003aaa:	2300      	movs	r3, #0
 8003aac:	637b      	str	r3, [r7, #52]	; 0x34
 8003aae:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003ab2:	4622      	mov	r2, r4
 8003ab4:	462b      	mov	r3, r5
 8003ab6:	f04f 0000 	mov.w	r0, #0
 8003aba:	f04f 0100 	mov.w	r1, #0
 8003abe:	0159      	lsls	r1, r3, #5
 8003ac0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ac4:	0150      	lsls	r0, r2, #5
 8003ac6:	4602      	mov	r2, r0
 8003ac8:	460b      	mov	r3, r1
 8003aca:	4621      	mov	r1, r4
 8003acc:	1a51      	subs	r1, r2, r1
 8003ace:	6139      	str	r1, [r7, #16]
 8003ad0:	4629      	mov	r1, r5
 8003ad2:	eb63 0301 	sbc.w	r3, r3, r1
 8003ad6:	617b      	str	r3, [r7, #20]
 8003ad8:	f04f 0200 	mov.w	r2, #0
 8003adc:	f04f 0300 	mov.w	r3, #0
 8003ae0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ae4:	4659      	mov	r1, fp
 8003ae6:	018b      	lsls	r3, r1, #6
 8003ae8:	4651      	mov	r1, sl
 8003aea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003aee:	4651      	mov	r1, sl
 8003af0:	018a      	lsls	r2, r1, #6
 8003af2:	4651      	mov	r1, sl
 8003af4:	ebb2 0801 	subs.w	r8, r2, r1
 8003af8:	4659      	mov	r1, fp
 8003afa:	eb63 0901 	sbc.w	r9, r3, r1
 8003afe:	f04f 0200 	mov.w	r2, #0
 8003b02:	f04f 0300 	mov.w	r3, #0
 8003b06:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b0a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b0e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b12:	4690      	mov	r8, r2
 8003b14:	4699      	mov	r9, r3
 8003b16:	4623      	mov	r3, r4
 8003b18:	eb18 0303 	adds.w	r3, r8, r3
 8003b1c:	60bb      	str	r3, [r7, #8]
 8003b1e:	462b      	mov	r3, r5
 8003b20:	eb49 0303 	adc.w	r3, r9, r3
 8003b24:	60fb      	str	r3, [r7, #12]
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	f04f 0300 	mov.w	r3, #0
 8003b2e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003b32:	4629      	mov	r1, r5
 8003b34:	024b      	lsls	r3, r1, #9
 8003b36:	4621      	mov	r1, r4
 8003b38:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003b3c:	4621      	mov	r1, r4
 8003b3e:	024a      	lsls	r2, r1, #9
 8003b40:	4610      	mov	r0, r2
 8003b42:	4619      	mov	r1, r3
 8003b44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003b46:	2200      	movs	r2, #0
 8003b48:	62bb      	str	r3, [r7, #40]	; 0x28
 8003b4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003b4c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003b50:	f7fc fbc6 	bl	80002e0 <__aeabi_uldivmod>
 8003b54:	4602      	mov	r2, r0
 8003b56:	460b      	mov	r3, r1
 8003b58:	4613      	mov	r3, r2
 8003b5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003b5c:	e058      	b.n	8003c10 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b5e:	4b38      	ldr	r3, [pc, #224]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	099b      	lsrs	r3, r3, #6
 8003b64:	2200      	movs	r2, #0
 8003b66:	4618      	mov	r0, r3
 8003b68:	4611      	mov	r1, r2
 8003b6a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003b6e:	623b      	str	r3, [r7, #32]
 8003b70:	2300      	movs	r3, #0
 8003b72:	627b      	str	r3, [r7, #36]	; 0x24
 8003b74:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003b78:	4642      	mov	r2, r8
 8003b7a:	464b      	mov	r3, r9
 8003b7c:	f04f 0000 	mov.w	r0, #0
 8003b80:	f04f 0100 	mov.w	r1, #0
 8003b84:	0159      	lsls	r1, r3, #5
 8003b86:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b8a:	0150      	lsls	r0, r2, #5
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4641      	mov	r1, r8
 8003b92:	ebb2 0a01 	subs.w	sl, r2, r1
 8003b96:	4649      	mov	r1, r9
 8003b98:	eb63 0b01 	sbc.w	fp, r3, r1
 8003b9c:	f04f 0200 	mov.w	r2, #0
 8003ba0:	f04f 0300 	mov.w	r3, #0
 8003ba4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003ba8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003bac:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003bb0:	ebb2 040a 	subs.w	r4, r2, sl
 8003bb4:	eb63 050b 	sbc.w	r5, r3, fp
 8003bb8:	f04f 0200 	mov.w	r2, #0
 8003bbc:	f04f 0300 	mov.w	r3, #0
 8003bc0:	00eb      	lsls	r3, r5, #3
 8003bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003bc6:	00e2      	lsls	r2, r4, #3
 8003bc8:	4614      	mov	r4, r2
 8003bca:	461d      	mov	r5, r3
 8003bcc:	4643      	mov	r3, r8
 8003bce:	18e3      	adds	r3, r4, r3
 8003bd0:	603b      	str	r3, [r7, #0]
 8003bd2:	464b      	mov	r3, r9
 8003bd4:	eb45 0303 	adc.w	r3, r5, r3
 8003bd8:	607b      	str	r3, [r7, #4]
 8003bda:	f04f 0200 	mov.w	r2, #0
 8003bde:	f04f 0300 	mov.w	r3, #0
 8003be2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003be6:	4629      	mov	r1, r5
 8003be8:	028b      	lsls	r3, r1, #10
 8003bea:	4621      	mov	r1, r4
 8003bec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003bf0:	4621      	mov	r1, r4
 8003bf2:	028a      	lsls	r2, r1, #10
 8003bf4:	4610      	mov	r0, r2
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	61bb      	str	r3, [r7, #24]
 8003bfe:	61fa      	str	r2, [r7, #28]
 8003c00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c04:	f7fc fb6c 	bl	80002e0 <__aeabi_uldivmod>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003c10:	4b0b      	ldr	r3, [pc, #44]	; (8003c40 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	0c1b      	lsrs	r3, r3, #16
 8003c16:	f003 0303 	and.w	r3, r3, #3
 8003c1a:	3301      	adds	r3, #1
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8003c20:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003c22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c24:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c28:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c2a:	e002      	b.n	8003c32 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003c2c:	4b05      	ldr	r3, [pc, #20]	; (8003c44 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c2e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003c30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c32:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3750      	adds	r7, #80	; 0x50
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c3e:	bf00      	nop
 8003c40:	40023800 	.word	0x40023800
 8003c44:	00f42400 	.word	0x00f42400
 8003c48:	007a1200 	.word	0x007a1200

08003c4c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c4c:	b480      	push	{r7}
 8003c4e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c50:	4b03      	ldr	r3, [pc, #12]	; (8003c60 <HAL_RCC_GetHCLKFreq+0x14>)
 8003c52:	681b      	ldr	r3, [r3, #0]
}
 8003c54:	4618      	mov	r0, r3
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	20000014 	.word	0x20000014

08003c64 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003c68:	f7ff fff0 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c6c:	4602      	mov	r2, r0
 8003c6e:	4b05      	ldr	r3, [pc, #20]	; (8003c84 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	0a9b      	lsrs	r3, r3, #10
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	4903      	ldr	r1, [pc, #12]	; (8003c88 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003c7a:	5ccb      	ldrb	r3, [r1, r3]
 8003c7c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40023800 	.word	0x40023800
 8003c88:	0800784c 	.word	0x0800784c

08003c8c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003c90:	f7ff ffdc 	bl	8003c4c <HAL_RCC_GetHCLKFreq>
 8003c94:	4602      	mov	r2, r0
 8003c96:	4b05      	ldr	r3, [pc, #20]	; (8003cac <HAL_RCC_GetPCLK2Freq+0x20>)
 8003c98:	689b      	ldr	r3, [r3, #8]
 8003c9a:	0b5b      	lsrs	r3, r3, #13
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	4903      	ldr	r1, [pc, #12]	; (8003cb0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ca2:	5ccb      	ldrb	r3, [r1, r3]
 8003ca4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ca8:	4618      	mov	r0, r3
 8003caa:	bd80      	pop	{r7, pc}
 8003cac:	40023800 	.word	0x40023800
 8003cb0:	0800784c 	.word	0x0800784c

08003cb4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b088      	sub	sp, #32
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d012      	beq.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003cdc:	4b69      	ldr	r3, [pc, #420]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cde:	689b      	ldr	r3, [r3, #8]
 8003ce0:	4a68      	ldr	r2, [pc, #416]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ce2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003ce6:	6093      	str	r3, [r2, #8]
 8003ce8:	4b66      	ldr	r3, [pc, #408]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cea:	689a      	ldr	r2, [r3, #8]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cf0:	4964      	ldr	r1, [pc, #400]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d101      	bne.n	8003d02 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d017      	beq.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003d0e:	4b5d      	ldr	r3, [pc, #372]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d14:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d1c:	4959      	ldr	r1, [pc, #356]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d28:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d2c:	d101      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d101      	bne.n	8003d3e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d017      	beq.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003d4a:	4b4e      	ldr	r3, [pc, #312]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d50:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d58:	494a      	ldr	r1, [pc, #296]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d64:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d68:	d101      	bne.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d101      	bne.n	8003d7a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003d76:	2301      	movs	r3, #1
 8003d78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d001      	beq.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003d86:	2301      	movs	r3, #1
 8003d88:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0320 	and.w	r3, r3, #32
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f000 808b 	beq.w	8003eae <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d98:	4b3a      	ldr	r3, [pc, #232]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9c:	4a39      	ldr	r2, [pc, #228]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da2:	6413      	str	r3, [r2, #64]	; 0x40
 8003da4:	4b37      	ldr	r3, [pc, #220]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dac:	60bb      	str	r3, [r7, #8]
 8003dae:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003db0:	4b35      	ldr	r3, [pc, #212]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a34      	ldr	r2, [pc, #208]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003db6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dba:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003dbc:	f7fe fa86 	bl	80022cc <HAL_GetTick>
 8003dc0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dc4:	f7fe fa82 	bl	80022cc <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	697b      	ldr	r3, [r7, #20]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e38f      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003dd6:	4b2c      	ldr	r3, [pc, #176]	; (8003e88 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d0f0      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003de2:	4b28      	ldr	r3, [pc, #160]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003de4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003de6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dea:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dec:	693b      	ldr	r3, [r7, #16]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d035      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dfa:	693a      	ldr	r2, [r7, #16]
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d02e      	beq.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003e00:	4b20      	ldr	r3, [pc, #128]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e02:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e08:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003e0a:	4b1e      	ldr	r3, [pc, #120]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e0e:	4a1d      	ldr	r2, [pc, #116]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003e14:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003e16:	4b1b      	ldr	r3, [pc, #108]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e1a:	4a1a      	ldr	r2, [pc, #104]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e1c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003e20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003e22:	4a18      	ldr	r2, [pc, #96]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e24:	693b      	ldr	r3, [r7, #16]
 8003e26:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003e28:	4b16      	ldr	r3, [pc, #88]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2c:	f003 0301 	and.w	r3, r3, #1
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d114      	bne.n	8003e5e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e34:	f7fe fa4a 	bl	80022cc <HAL_GetTick>
 8003e38:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e3a:	e00a      	b.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e3c:	f7fe fa46 	bl	80022cc <HAL_GetTick>
 8003e40:	4602      	mov	r2, r0
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	1ad3      	subs	r3, r2, r3
 8003e46:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e351      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e52:	4b0c      	ldr	r3, [pc, #48]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0ee      	beq.n	8003e3c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003e66:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003e6a:	d111      	bne.n	8003e90 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003e6c:	4b05      	ldr	r3, [pc, #20]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003e78:	4b04      	ldr	r3, [pc, #16]	; (8003e8c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003e7a:	400b      	ands	r3, r1
 8003e7c:	4901      	ldr	r1, [pc, #4]	; (8003e84 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	608b      	str	r3, [r1, #8]
 8003e82:	e00b      	b.n	8003e9c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003e84:	40023800 	.word	0x40023800
 8003e88:	40007000 	.word	0x40007000
 8003e8c:	0ffffcff 	.word	0x0ffffcff
 8003e90:	4bac      	ldr	r3, [pc, #688]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e92:	689b      	ldr	r3, [r3, #8]
 8003e94:	4aab      	ldr	r2, [pc, #684]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e96:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003e9a:	6093      	str	r3, [r2, #8]
 8003e9c:	4ba9      	ldr	r3, [pc, #676]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003e9e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ea8:	49a6      	ldr	r1, [pc, #664]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0310 	and.w	r3, r3, #16
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d010      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003eba:	4ba2      	ldr	r3, [pc, #648]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ebc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ec0:	4aa0      	ldr	r2, [pc, #640]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ec2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003ec6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8003eca:	4b9e      	ldr	r3, [pc, #632]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ecc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ed4:	499b      	ldr	r1, [pc, #620]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d00a      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003ee8:	4b96      	ldr	r3, [pc, #600]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003eea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003eee:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003ef6:	4993      	ldr	r1, [pc, #588]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ef8:	4313      	orrs	r3, r2
 8003efa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d00a      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003f0a:	4b8e      	ldr	r3, [pc, #568]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f10:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003f18:	498a      	ldr	r1, [pc, #552]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d00a      	beq.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003f2c:	4b85      	ldr	r3, [pc, #532]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f32:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003f3a:	4982      	ldr	r1, [pc, #520]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00a      	beq.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003f4e:	4b7d      	ldr	r3, [pc, #500]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f54:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f5c:	4979      	ldr	r1, [pc, #484]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d00a      	beq.n	8003f86 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003f70:	4b74      	ldr	r3, [pc, #464]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f76:	f023 0203 	bic.w	r2, r3, #3
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f7e:	4971      	ldr	r1, [pc, #452]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f80:	4313      	orrs	r3, r2
 8003f82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d00a      	beq.n	8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003f92:	4b6c      	ldr	r3, [pc, #432]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f98:	f023 020c 	bic.w	r2, r3, #12
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fa0:	4968      	ldr	r1, [pc, #416]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d00a      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fb4:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fba:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003fc2:	4960      	ldr	r1, [pc, #384]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fc4:	4313      	orrs	r3, r2
 8003fc6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00a      	beq.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003fd6:	4b5b      	ldr	r3, [pc, #364]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fdc:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fe4:	4957      	ldr	r1, [pc, #348]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d00a      	beq.n	800400e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003ff8:	4b52      	ldr	r3, [pc, #328]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004006:	494f      	ldr	r1, [pc, #316]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004008:	4313      	orrs	r3, r2
 800400a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004016:	2b00      	cmp	r3, #0
 8004018:	d00a      	beq.n	8004030 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800401c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004020:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004028:	4946      	ldr	r1, [pc, #280]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800402a:	4313      	orrs	r3, r2
 800402c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004038:	2b00      	cmp	r3, #0
 800403a:	d00a      	beq.n	8004052 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800403c:	4b41      	ldr	r3, [pc, #260]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800403e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004042:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800404a:	493e      	ldr	r1, [pc, #248]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800404c:	4313      	orrs	r3, r2
 800404e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d00a      	beq.n	8004074 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800405e:	4b39      	ldr	r3, [pc, #228]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004060:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004064:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800406c:	4935      	ldr	r1, [pc, #212]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800406e:	4313      	orrs	r3, r2
 8004070:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407c:	2b00      	cmp	r3, #0
 800407e:	d00a      	beq.n	8004096 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004080:	4b30      	ldr	r3, [pc, #192]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004082:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004086:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800408e:	492d      	ldr	r1, [pc, #180]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004090:	4313      	orrs	r3, r2
 8004092:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d011      	beq.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80040a2:	4b28      	ldr	r3, [pc, #160]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040a8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040b0:	4924      	ldr	r1, [pc, #144]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80040bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80040c0:	d101      	bne.n	80040c6 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80040c2:	2301      	movs	r3, #1
 80040c4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f003 0308 	and.w	r3, r3, #8
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d001      	beq.n	80040d6 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80040d2:	2301      	movs	r3, #1
 80040d4:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d00a      	beq.n	80040f8 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040e2:	4b18      	ldr	r3, [pc, #96]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e8:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80040f0:	4914      	ldr	r1, [pc, #80]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040f2:	4313      	orrs	r3, r2
 80040f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004100:	2b00      	cmp	r3, #0
 8004102:	d00b      	beq.n	800411c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8004104:	4b0f      	ldr	r3, [pc, #60]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004106:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800410a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004114:	490b      	ldr	r1, [pc, #44]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004116:	4313      	orrs	r3, r2
 8004118:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004124:	2b00      	cmp	r3, #0
 8004126:	d00f      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8004128:	4b06      	ldr	r3, [pc, #24]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800412a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800412e:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004138:	4902      	ldr	r1, [pc, #8]	; (8004144 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800413a:	4313      	orrs	r3, r2
 800413c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004140:	e002      	b.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8004142:	bf00      	nop
 8004144:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004154:	4b8a      	ldr	r3, [pc, #552]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004156:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800415a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004164:	4986      	ldr	r1, [pc, #536]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004166:	4313      	orrs	r3, r2
 8004168:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d00b      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004178:	4b81      	ldr	r3, [pc, #516]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800417a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800417e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004188:	497d      	ldr	r1, [pc, #500]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004190:	69fb      	ldr	r3, [r7, #28]
 8004192:	2b01      	cmp	r3, #1
 8004194:	d006      	beq.n	80041a4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 80d6 	beq.w	8004350 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80041a4:	4b76      	ldr	r3, [pc, #472]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4a75      	ldr	r2, [pc, #468]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041aa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80041ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80041b0:	f7fe f88c 	bl	80022cc <HAL_GetTick>
 80041b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041b6:	e008      	b.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80041b8:	f7fe f888 	bl	80022cc <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	2b64      	cmp	r3, #100	; 0x64
 80041c4:	d901      	bls.n	80041ca <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80041c6:	2303      	movs	r3, #3
 80041c8:	e195      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80041ca:	4b6d      	ldr	r3, [pc, #436]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d1f0      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f003 0301 	and.w	r3, r3, #1
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d021      	beq.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x572>
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11d      	bne.n	8004226 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80041ea:	4b65      	ldr	r3, [pc, #404]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041ec:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80041f8:	4b61      	ldr	r3, [pc, #388]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80041fe:	0e1b      	lsrs	r3, r3, #24
 8004200:	f003 030f 	and.w	r3, r3, #15
 8004204:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	685b      	ldr	r3, [r3, #4]
 800420a:	019a      	lsls	r2, r3, #6
 800420c:	693b      	ldr	r3, [r7, #16]
 800420e:	041b      	lsls	r3, r3, #16
 8004210:	431a      	orrs	r2, r3
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	061b      	lsls	r3, r3, #24
 8004216:	431a      	orrs	r2, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	071b      	lsls	r3, r3, #28
 800421e:	4958      	ldr	r1, [pc, #352]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004220:	4313      	orrs	r3, r2
 8004222:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d004      	beq.n	800423c <HAL_RCCEx_PeriphCLKConfig+0x588>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800423a:	d00a      	beq.n	8004252 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8004244:	2b00      	cmp	r3, #0
 8004246:	d02e      	beq.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004250:	d129      	bne.n	80042a6 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8004252:	4b4b      	ldr	r3, [pc, #300]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004254:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004258:	0c1b      	lsrs	r3, r3, #16
 800425a:	f003 0303 	and.w	r3, r3, #3
 800425e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004260:	4b47      	ldr	r3, [pc, #284]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004262:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004266:	0f1b      	lsrs	r3, r3, #28
 8004268:	f003 0307 	and.w	r3, r3, #7
 800426c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	685b      	ldr	r3, [r3, #4]
 8004272:	019a      	lsls	r2, r3, #6
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	041b      	lsls	r3, r3, #16
 8004278:	431a      	orrs	r2, r3
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	061b      	lsls	r3, r3, #24
 8004280:	431a      	orrs	r2, r3
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	071b      	lsls	r3, r3, #28
 8004286:	493e      	ldr	r1, [pc, #248]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004288:	4313      	orrs	r3, r2
 800428a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800428e:	4b3c      	ldr	r3, [pc, #240]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004294:	f023 021f 	bic.w	r2, r3, #31
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800429c:	3b01      	subs	r3, #1
 800429e:	4938      	ldr	r1, [pc, #224]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d01d      	beq.n	80042ee <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80042b2:	4b33      	ldr	r3, [pc, #204]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042b8:	0e1b      	lsrs	r3, r3, #24
 80042ba:	f003 030f 	and.w	r3, r3, #15
 80042be:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80042c0:	4b2f      	ldr	r3, [pc, #188]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80042c6:	0f1b      	lsrs	r3, r3, #28
 80042c8:	f003 0307 	and.w	r3, r3, #7
 80042cc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	685b      	ldr	r3, [r3, #4]
 80042d2:	019a      	lsls	r2, r3, #6
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	691b      	ldr	r3, [r3, #16]
 80042d8:	041b      	lsls	r3, r3, #16
 80042da:	431a      	orrs	r2, r3
 80042dc:	693b      	ldr	r3, [r7, #16]
 80042de:	061b      	lsls	r3, r3, #24
 80042e0:	431a      	orrs	r2, r3
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	071b      	lsls	r3, r3, #28
 80042e6:	4926      	ldr	r1, [pc, #152]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042e8:	4313      	orrs	r3, r2
 80042ea:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d011      	beq.n	800431e <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	019a      	lsls	r2, r3, #6
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	691b      	ldr	r3, [r3, #16]
 8004304:	041b      	lsls	r3, r3, #16
 8004306:	431a      	orrs	r2, r3
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	68db      	ldr	r3, [r3, #12]
 800430c:	061b      	lsls	r3, r3, #24
 800430e:	431a      	orrs	r2, r3
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	071b      	lsls	r3, r3, #28
 8004316:	491a      	ldr	r1, [pc, #104]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004318:	4313      	orrs	r3, r2
 800431a:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800431e:	4b18      	ldr	r3, [pc, #96]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a17      	ldr	r2, [pc, #92]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004324:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004328:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800432a:	f7fd ffcf 	bl	80022cc <HAL_GetTick>
 800432e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004330:	e008      	b.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004332:	f7fd ffcb 	bl	80022cc <HAL_GetTick>
 8004336:	4602      	mov	r2, r0
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	1ad3      	subs	r3, r2, r3
 800433c:	2b64      	cmp	r3, #100	; 0x64
 800433e:	d901      	bls.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004340:	2303      	movs	r3, #3
 8004342:	e0d8      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8004344:	4b0e      	ldr	r3, [pc, #56]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d0f0      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8004350:	69bb      	ldr	r3, [r7, #24]
 8004352:	2b01      	cmp	r3, #1
 8004354:	f040 80ce 	bne.w	80044f4 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8004358:	4b09      	ldr	r3, [pc, #36]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a08      	ldr	r2, [pc, #32]	; (8004380 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800435e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004362:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004364:	f7fd ffb2 	bl	80022cc <HAL_GetTick>
 8004368:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800436a:	e00b      	b.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800436c:	f7fd ffae 	bl	80022cc <HAL_GetTick>
 8004370:	4602      	mov	r2, r0
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	1ad3      	subs	r3, r2, r3
 8004376:	2b64      	cmp	r3, #100	; 0x64
 8004378:	d904      	bls.n	8004384 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800437a:	2303      	movs	r3, #3
 800437c:	e0bb      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800437e:	bf00      	nop
 8004380:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004384:	4b5e      	ldr	r3, [pc, #376]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800438c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004390:	d0ec      	beq.n	800436c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800439a:	2b00      	cmp	r3, #0
 800439c:	d003      	beq.n	80043a6 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d009      	beq.n	80043ba <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d02e      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d12a      	bne.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80043ba:	4b51      	ldr	r3, [pc, #324]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043c0:	0c1b      	lsrs	r3, r3, #16
 80043c2:	f003 0303 	and.w	r3, r3, #3
 80043c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80043c8:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80043ce:	0f1b      	lsrs	r3, r3, #28
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	019a      	lsls	r2, r3, #6
 80043dc:	693b      	ldr	r3, [r7, #16]
 80043de:	041b      	lsls	r3, r3, #16
 80043e0:	431a      	orrs	r2, r3
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	061b      	lsls	r3, r3, #24
 80043e8:	431a      	orrs	r2, r3
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	071b      	lsls	r3, r3, #28
 80043ee:	4944      	ldr	r1, [pc, #272]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f0:	4313      	orrs	r3, r2
 80043f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80043f6:	4b42      	ldr	r3, [pc, #264]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80043f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80043fc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004404:	3b01      	subs	r3, #1
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	493d      	ldr	r1, [pc, #244]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800440a:	4313      	orrs	r3, r2
 800440c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004418:	2b00      	cmp	r3, #0
 800441a:	d022      	beq.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004420:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004424:	d11d      	bne.n	8004462 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8004426:	4b36      	ldr	r3, [pc, #216]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004428:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800442c:	0e1b      	lsrs	r3, r3, #24
 800442e:	f003 030f 	and.w	r3, r3, #15
 8004432:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004434:	4b32      	ldr	r3, [pc, #200]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800443a:	0f1b      	lsrs	r3, r3, #28
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	695b      	ldr	r3, [r3, #20]
 8004446:	019a      	lsls	r2, r3, #6
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6a1b      	ldr	r3, [r3, #32]
 800444c:	041b      	lsls	r3, r3, #16
 800444e:	431a      	orrs	r2, r3
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	061b      	lsls	r3, r3, #24
 8004454:	431a      	orrs	r2, r3
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	071b      	lsls	r3, r3, #28
 800445a:	4929      	ldr	r1, [pc, #164]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445c:	4313      	orrs	r3, r2
 800445e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 0308 	and.w	r3, r3, #8
 800446a:	2b00      	cmp	r3, #0
 800446c:	d028      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800446e:	4b24      	ldr	r3, [pc, #144]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004474:	0e1b      	lsrs	r3, r3, #24
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800447c:	4b20      	ldr	r3, [pc, #128]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800447e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004482:	0c1b      	lsrs	r3, r3, #16
 8004484:	f003 0303 	and.w	r3, r3, #3
 8004488:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	019a      	lsls	r2, r3, #6
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	041b      	lsls	r3, r3, #16
 8004494:	431a      	orrs	r2, r3
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	061b      	lsls	r3, r3, #24
 800449a:	431a      	orrs	r2, r3
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	69db      	ldr	r3, [r3, #28]
 80044a0:	071b      	lsls	r3, r3, #28
 80044a2:	4917      	ldr	r1, [pc, #92]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044a4:	4313      	orrs	r3, r2
 80044a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80044aa:	4b15      	ldr	r3, [pc, #84]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80044b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4911      	ldr	r1, [pc, #68]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80044c0:	4b0f      	ldr	r3, [pc, #60]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a0e      	ldr	r2, [pc, #56]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044cc:	f7fd fefe 	bl	80022cc <HAL_GetTick>
 80044d0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044d2:	e008      	b.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80044d4:	f7fd fefa 	bl	80022cc <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	697b      	ldr	r3, [r7, #20]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	2b64      	cmp	r3, #100	; 0x64
 80044e0:	d901      	bls.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044e2:	2303      	movs	r3, #3
 80044e4:	e007      	b.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80044e6:	4b06      	ldr	r3, [pc, #24]	; (8004500 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80044ee:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80044f2:	d1ef      	bne.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3720      	adds	r7, #32
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e09d      	b.n	8004652 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800451a:	2b00      	cmp	r3, #0
 800451c:	d108      	bne.n	8004530 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004526:	d009      	beq.n	800453c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2200      	movs	r2, #0
 800452c:	61da      	str	r2, [r3, #28]
 800452e:	e005      	b.n	800453c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2200      	movs	r2, #0
 8004534:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	2200      	movs	r2, #0
 800453a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2200      	movs	r2, #0
 8004540:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004548:	b2db      	uxtb	r3, r3
 800454a:	2b00      	cmp	r3, #0
 800454c:	d106      	bne.n	800455c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	2200      	movs	r2, #0
 8004552:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004556:	6878      	ldr	r0, [r7, #4]
 8004558:	f7fc fe98 	bl	800128c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004572:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800457c:	d902      	bls.n	8004584 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800457e:	2300      	movs	r3, #0
 8004580:	60fb      	str	r3, [r7, #12]
 8004582:	e002      	b.n	800458a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004584:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004588:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	68db      	ldr	r3, [r3, #12]
 800458e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004592:	d007      	beq.n	80045a4 <HAL_SPI_Init+0xa0>
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800459c:	d002      	beq.n	80045a4 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	2200      	movs	r2, #0
 80045a2:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80045b4:	431a      	orrs	r2, r3
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	691b      	ldr	r3, [r3, #16]
 80045ba:	f003 0302 	and.w	r3, r3, #2
 80045be:	431a      	orrs	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	695b      	ldr	r3, [r3, #20]
 80045c4:	f003 0301 	and.w	r3, r3, #1
 80045c8:	431a      	orrs	r2, r3
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	699b      	ldr	r3, [r3, #24]
 80045ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80045d2:	431a      	orrs	r2, r3
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	69db      	ldr	r3, [r3, #28]
 80045d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80045dc:	431a      	orrs	r2, r3
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045e6:	ea42 0103 	orr.w	r1, r2, r3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ee:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	430a      	orrs	r2, r1
 80045f8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	0c1b      	lsrs	r3, r3, #16
 8004600:	f003 0204 	and.w	r2, r3, #4
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004608:	f003 0310 	and.w	r3, r3, #16
 800460c:	431a      	orrs	r2, r3
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004612:	f003 0308 	and.w	r3, r3, #8
 8004616:	431a      	orrs	r2, r3
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004620:	ea42 0103 	orr.w	r1, r2, r3
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	430a      	orrs	r2, r1
 8004630:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	69da      	ldr	r2, [r3, #28]
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004640:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2200      	movs	r2, #0
 8004646:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2201      	movs	r2, #1
 800464c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004650:	2300      	movs	r3, #0
}
 8004652:	4618      	mov	r0, r3
 8004654:	3710      	adds	r7, #16
 8004656:	46bd      	mov	sp, r7
 8004658:	bd80      	pop	{r7, pc}

0800465a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800465a:	b580      	push	{r7, lr}
 800465c:	b088      	sub	sp, #32
 800465e:	af00      	add	r7, sp, #0
 8004660:	60f8      	str	r0, [r7, #12]
 8004662:	60b9      	str	r1, [r7, #8]
 8004664:	603b      	str	r3, [r7, #0]
 8004666:	4613      	mov	r3, r2
 8004668:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800466a:	2300      	movs	r3, #0
 800466c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_SPI_Transmit+0x22>
 8004678:	2302      	movs	r3, #2
 800467a:	e158      	b.n	800492e <HAL_SPI_Transmit+0x2d4>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004684:	f7fd fe22 	bl	80022cc <HAL_GetTick>
 8004688:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800468a:	88fb      	ldrh	r3, [r7, #6]
 800468c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004694:	b2db      	uxtb	r3, r3
 8004696:	2b01      	cmp	r3, #1
 8004698:	d002      	beq.n	80046a0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800469a:	2302      	movs	r3, #2
 800469c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800469e:	e13d      	b.n	800491c <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d002      	beq.n	80046ac <HAL_SPI_Transmit+0x52>
 80046a6:	88fb      	ldrh	r3, [r7, #6]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80046ac:	2301      	movs	r3, #1
 80046ae:	77fb      	strb	r3, [r7, #31]
    goto error;
 80046b0:	e134      	b.n	800491c <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	2203      	movs	r2, #3
 80046b6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	2200      	movs	r2, #0
 80046be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	68ba      	ldr	r2, [r7, #8]
 80046c4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	88fa      	ldrh	r2, [r7, #6]
 80046ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	88fa      	ldrh	r2, [r7, #6]
 80046d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2200      	movs	r2, #0
 80046dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	2200      	movs	r2, #0
 80046ec:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	2200      	movs	r2, #0
 80046f2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80046fc:	d10f      	bne.n	800471e <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	681a      	ldr	r2, [r3, #0]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800470c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681a      	ldr	r2, [r3, #0]
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004728:	2b40      	cmp	r3, #64	; 0x40
 800472a:	d007      	beq.n	800473c <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	681a      	ldr	r2, [r3, #0]
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004744:	d94b      	bls.n	80047de <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	685b      	ldr	r3, [r3, #4]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d002      	beq.n	8004754 <HAL_SPI_Transmit+0xfa>
 800474e:	8afb      	ldrh	r3, [r7, #22]
 8004750:	2b01      	cmp	r3, #1
 8004752:	d13e      	bne.n	80047d2 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004758:	881a      	ldrh	r2, [r3, #0]
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004764:	1c9a      	adds	r2, r3, #2
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800476e:	b29b      	uxth	r3, r3
 8004770:	3b01      	subs	r3, #1
 8004772:	b29a      	uxth	r2, r3
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004778:	e02b      	b.n	80047d2 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	689b      	ldr	r3, [r3, #8]
 8004780:	f003 0302 	and.w	r3, r3, #2
 8004784:	2b02      	cmp	r3, #2
 8004786:	d112      	bne.n	80047ae <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	881a      	ldrh	r2, [r3, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004798:	1c9a      	adds	r2, r3, #2
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047a2:	b29b      	uxth	r3, r3
 80047a4:	3b01      	subs	r3, #1
 80047a6:	b29a      	uxth	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	87da      	strh	r2, [r3, #62]	; 0x3e
 80047ac:	e011      	b.n	80047d2 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80047ae:	f7fd fd8d 	bl	80022cc <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d803      	bhi.n	80047c6 <HAL_SPI_Transmit+0x16c>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047c4:	d102      	bne.n	80047cc <HAL_SPI_Transmit+0x172>
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d102      	bne.n	80047d2 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	77fb      	strb	r3, [r7, #31]
          goto error;
 80047d0:	e0a4      	b.n	800491c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047d6:	b29b      	uxth	r3, r3
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d1ce      	bne.n	800477a <HAL_SPI_Transmit+0x120>
 80047dc:	e07c      	b.n	80048d8 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <HAL_SPI_Transmit+0x192>
 80047e6:	8afb      	ldrh	r3, [r7, #22]
 80047e8:	2b01      	cmp	r3, #1
 80047ea:	d170      	bne.n	80048ce <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d912      	bls.n	800481c <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047fa:	881a      	ldrh	r2, [r3, #0]
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004806:	1c9a      	adds	r2, r3, #2
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004810:	b29b      	uxth	r3, r3
 8004812:	3b02      	subs	r3, #2
 8004814:	b29a      	uxth	r2, r3
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	87da      	strh	r2, [r3, #62]	; 0x3e
 800481a:	e058      	b.n	80048ce <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	7812      	ldrb	r2, [r2, #0]
 8004828:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482e:	1c5a      	adds	r2, r3, #1
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004838:	b29b      	uxth	r3, r3
 800483a:	3b01      	subs	r3, #1
 800483c:	b29a      	uxth	r2, r3
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004842:	e044      	b.n	80048ce <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f003 0302 	and.w	r3, r3, #2
 800484e:	2b02      	cmp	r3, #2
 8004850:	d12b      	bne.n	80048aa <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004856:	b29b      	uxth	r3, r3
 8004858:	2b01      	cmp	r3, #1
 800485a:	d912      	bls.n	8004882 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	881a      	ldrh	r2, [r3, #0]
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	1c9a      	adds	r2, r3, #2
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004876:	b29b      	uxth	r3, r3
 8004878:	3b02      	subs	r3, #2
 800487a:	b29a      	uxth	r2, r3
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004880:	e025      	b.n	80048ce <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	330c      	adds	r3, #12
 800488c:	7812      	ldrb	r2, [r2, #0]
 800488e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004894:	1c5a      	adds	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800489e:	b29b      	uxth	r3, r3
 80048a0:	3b01      	subs	r3, #1
 80048a2:	b29a      	uxth	r2, r3
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80048a8:	e011      	b.n	80048ce <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80048aa:	f7fd fd0f 	bl	80022cc <HAL_GetTick>
 80048ae:	4602      	mov	r2, r0
 80048b0:	69bb      	ldr	r3, [r7, #24]
 80048b2:	1ad3      	subs	r3, r2, r3
 80048b4:	683a      	ldr	r2, [r7, #0]
 80048b6:	429a      	cmp	r2, r3
 80048b8:	d803      	bhi.n	80048c2 <HAL_SPI_Transmit+0x268>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048c0:	d102      	bne.n	80048c8 <HAL_SPI_Transmit+0x26e>
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d102      	bne.n	80048ce <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	77fb      	strb	r3, [r7, #31]
          goto error;
 80048cc:	e026      	b.n	800491c <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d1b5      	bne.n	8004844 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80048d8:	69ba      	ldr	r2, [r7, #24]
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	68f8      	ldr	r0, [r7, #12]
 80048de:	f000 f949 	bl	8004b74 <SPI_EndRxTxTransaction>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d002      	beq.n	80048ee <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	2220      	movs	r2, #32
 80048ec:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80048ee:	68fb      	ldr	r3, [r7, #12]
 80048f0:	689b      	ldr	r3, [r3, #8]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10a      	bne.n	800490c <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80048f6:	2300      	movs	r3, #0
 80048f8:	613b      	str	r3, [r7, #16]
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68db      	ldr	r3, [r3, #12]
 8004900:	613b      	str	r3, [r7, #16]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	613b      	str	r3, [r7, #16]
 800490a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004910:	2b00      	cmp	r3, #0
 8004912:	d002      	beq.n	800491a <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004914:	2301      	movs	r3, #1
 8004916:	77fb      	strb	r3, [r7, #31]
 8004918:	e000      	b.n	800491c <HAL_SPI_Transmit+0x2c2>
  }

error:
 800491a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	2201      	movs	r2, #1
 8004920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	2200      	movs	r2, #0
 8004928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800492c:	7ffb      	ldrb	r3, [r7, #31]
}
 800492e:	4618      	mov	r0, r3
 8004930:	3720      	adds	r7, #32
 8004932:	46bd      	mov	sp, r7
 8004934:	bd80      	pop	{r7, pc}
	...

08004938 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004938:	b580      	push	{r7, lr}
 800493a:	b088      	sub	sp, #32
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	603b      	str	r3, [r7, #0]
 8004944:	4613      	mov	r3, r2
 8004946:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004948:	f7fd fcc0 	bl	80022cc <HAL_GetTick>
 800494c:	4602      	mov	r2, r0
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	1a9b      	subs	r3, r3, r2
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	4413      	add	r3, r2
 8004956:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004958:	f7fd fcb8 	bl	80022cc <HAL_GetTick>
 800495c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800495e:	4b39      	ldr	r3, [pc, #228]	; (8004a44 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	015b      	lsls	r3, r3, #5
 8004964:	0d1b      	lsrs	r3, r3, #20
 8004966:	69fa      	ldr	r2, [r7, #28]
 8004968:	fb02 f303 	mul.w	r3, r2, r3
 800496c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800496e:	e054      	b.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004976:	d050      	beq.n	8004a1a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004978:	f7fd fca8 	bl	80022cc <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	69fa      	ldr	r2, [r7, #28]
 8004984:	429a      	cmp	r2, r3
 8004986:	d902      	bls.n	800498e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d13d      	bne.n	8004a0a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	685a      	ldr	r2, [r3, #4]
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800499c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	685b      	ldr	r3, [r3, #4]
 80049a2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80049a6:	d111      	bne.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x94>
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	689b      	ldr	r3, [r3, #8]
 80049ac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b0:	d004      	beq.n	80049bc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ba:	d107      	bne.n	80049cc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049ca:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049d4:	d10f      	bne.n	80049f6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	681a      	ldr	r2, [r3, #0]
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80049e4:	601a      	str	r2, [r3, #0]
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	681a      	ldr	r2, [r3, #0]
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80049f4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	2201      	movs	r2, #1
 80049fa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e017      	b.n	8004a3a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d101      	bne.n	8004a14 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	3b01      	subs	r3, #1
 8004a18:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	689a      	ldr	r2, [r3, #8]
 8004a20:	68bb      	ldr	r3, [r7, #8]
 8004a22:	4013      	ands	r3, r2
 8004a24:	68ba      	ldr	r2, [r7, #8]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	bf0c      	ite	eq
 8004a2a:	2301      	moveq	r3, #1
 8004a2c:	2300      	movne	r3, #0
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	461a      	mov	r2, r3
 8004a32:	79fb      	ldrb	r3, [r7, #7]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d19b      	bne.n	8004970 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004a38:	2300      	movs	r3, #0
}
 8004a3a:	4618      	mov	r0, r3
 8004a3c:	3720      	adds	r7, #32
 8004a3e:	46bd      	mov	sp, r7
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	bf00      	nop
 8004a44:	20000014 	.word	0x20000014

08004a48 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	60f8      	str	r0, [r7, #12]
 8004a50:	60b9      	str	r1, [r7, #8]
 8004a52:	607a      	str	r2, [r7, #4]
 8004a54:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8004a56:	2300      	movs	r3, #0
 8004a58:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8004a5a:	f7fd fc37 	bl	80022cc <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	1a9b      	subs	r3, r3, r2
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	4413      	add	r3, r2
 8004a68:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8004a6a:	f7fd fc2f 	bl	80022cc <HAL_GetTick>
 8004a6e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	330c      	adds	r3, #12
 8004a76:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8004a78:	4b3d      	ldr	r3, [pc, #244]	; (8004b70 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8004a7a:	681a      	ldr	r2, [r3, #0]
 8004a7c:	4613      	mov	r3, r2
 8004a7e:	009b      	lsls	r3, r3, #2
 8004a80:	4413      	add	r3, r2
 8004a82:	00da      	lsls	r2, r3, #3
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	0d1b      	lsrs	r3, r3, #20
 8004a88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a8a:	fb02 f303 	mul.w	r3, r2, r3
 8004a8e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8004a90:	e060      	b.n	8004b54 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8004a98:	d107      	bne.n	8004aaa <SPI_WaitFifoStateUntilTimeout+0x62>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d104      	bne.n	8004aaa <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8004aa0:	69fb      	ldr	r3, [r7, #28]
 8004aa2:	781b      	ldrb	r3, [r3, #0]
 8004aa4:	b2db      	uxtb	r3, r3
 8004aa6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8004aa8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ab0:	d050      	beq.n	8004b54 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004ab2:	f7fd fc0b 	bl	80022cc <HAL_GetTick>
 8004ab6:	4602      	mov	r2, r0
 8004ab8:	6a3b      	ldr	r3, [r7, #32]
 8004aba:	1ad3      	subs	r3, r2, r3
 8004abc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004abe:	429a      	cmp	r2, r3
 8004ac0:	d902      	bls.n	8004ac8 <SPI_WaitFifoStateUntilTimeout+0x80>
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	d13d      	bne.n	8004b44 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	685a      	ldr	r2, [r3, #4]
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ad6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ae0:	d111      	bne.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aea:	d004      	beq.n	8004af6 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004af4:	d107      	bne.n	8004b06 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b04:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0e:	d10f      	bne.n	8004b30 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	681a      	ldr	r2, [r3, #0]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b1e:	601a      	str	r2, [r3, #0]
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	681a      	ldr	r2, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b2e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8004b40:	2303      	movs	r3, #3
 8004b42:	e010      	b.n	8004b66 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004b44:	69bb      	ldr	r3, [r7, #24]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d101      	bne.n	8004b4e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8004b4e:	69bb      	ldr	r3, [r7, #24]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	689a      	ldr	r2, [r3, #8]
 8004b5a:	68bb      	ldr	r3, [r7, #8]
 8004b5c:	4013      	ands	r3, r2
 8004b5e:	687a      	ldr	r2, [r7, #4]
 8004b60:	429a      	cmp	r2, r3
 8004b62:	d196      	bne.n	8004a92 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8004b64:	2300      	movs	r3, #0
}
 8004b66:	4618      	mov	r0, r3
 8004b68:	3728      	adds	r7, #40	; 0x28
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop
 8004b70:	20000014 	.word	0x20000014

08004b74 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b088      	sub	sp, #32
 8004b78:	af02      	add	r7, sp, #8
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	9300      	str	r3, [sp, #0]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2200      	movs	r2, #0
 8004b88:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8004b8c:	68f8      	ldr	r0, [r7, #12]
 8004b8e:	f7ff ff5b 	bl	8004a48 <SPI_WaitFifoStateUntilTimeout>
 8004b92:	4603      	mov	r3, r0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d007      	beq.n	8004ba8 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b9c:	f043 0220 	orr.w	r2, r3, #32
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004ba4:	2303      	movs	r3, #3
 8004ba6:	e046      	b.n	8004c36 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ba8:	4b25      	ldr	r3, [pc, #148]	; (8004c40 <SPI_EndRxTxTransaction+0xcc>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a25      	ldr	r2, [pc, #148]	; (8004c44 <SPI_EndRxTxTransaction+0xd0>)
 8004bae:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb2:	0d5b      	lsrs	r3, r3, #21
 8004bb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004bb8:	fb02 f303 	mul.w	r3, r2, r3
 8004bbc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bc6:	d112      	bne.n	8004bee <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	68bb      	ldr	r3, [r7, #8]
 8004bce:	2200      	movs	r2, #0
 8004bd0:	2180      	movs	r1, #128	; 0x80
 8004bd2:	68f8      	ldr	r0, [r7, #12]
 8004bd4:	f7ff feb0 	bl	8004938 <SPI_WaitFlagStateUntilTimeout>
 8004bd8:	4603      	mov	r3, r0
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d016      	beq.n	8004c0c <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004be2:	f043 0220 	orr.w	r2, r3, #32
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e023      	b.n	8004c36 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d00a      	beq.n	8004c0a <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 8004bf4:	697b      	ldr	r3, [r7, #20]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	689b      	ldr	r3, [r3, #8]
 8004c00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c04:	2b80      	cmp	r3, #128	; 0x80
 8004c06:	d0f2      	beq.n	8004bee <SPI_EndRxTxTransaction+0x7a>
 8004c08:	e000      	b.n	8004c0c <SPI_EndRxTxTransaction+0x98>
        break;
 8004c0a:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	9300      	str	r3, [sp, #0]
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	2200      	movs	r2, #0
 8004c14:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f7ff ff15 	bl	8004a48 <SPI_WaitFifoStateUntilTimeout>
 8004c1e:	4603      	mov	r3, r0
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d007      	beq.n	8004c34 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004c28:	f043 0220 	orr.w	r2, r3, #32
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8004c30:	2303      	movs	r3, #3
 8004c32:	e000      	b.n	8004c36 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 8004c34:	2300      	movs	r3, #0
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3718      	adds	r7, #24
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
 8004c3e:	bf00      	nop
 8004c40:	20000014 	.word	0x20000014
 8004c44:	165e9f81 	.word	0x165e9f81

08004c48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b082      	sub	sp, #8
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d101      	bne.n	8004c5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	e049      	b.n	8004cee <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c60:	b2db      	uxtb	r3, r3
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d106      	bne.n	8004c74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2200      	movs	r2, #0
 8004c6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f7fc fd5a 	bl	8001728 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	3304      	adds	r3, #4
 8004c84:	4619      	mov	r1, r3
 8004c86:	4610      	mov	r0, r2
 8004c88:	f000 fd58 	bl	800573c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	2201      	movs	r2, #1
 8004cc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	2201      	movs	r2, #1
 8004ce8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004cec:	2300      	movs	r3, #0
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3708      	adds	r7, #8
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004cf8:	b480      	push	{r7}
 8004cfa:	b085      	sub	sp, #20
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d06:	b2db      	uxtb	r3, r3
 8004d08:	2b01      	cmp	r3, #1
 8004d0a:	d001      	beq.n	8004d10 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e04c      	b.n	8004daa <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2202      	movs	r2, #2
 8004d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4a26      	ldr	r2, [pc, #152]	; (8004db8 <HAL_TIM_Base_Start+0xc0>)
 8004d1e:	4293      	cmp	r3, r2
 8004d20:	d022      	beq.n	8004d68 <HAL_TIM_Base_Start+0x70>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d2a:	d01d      	beq.n	8004d68 <HAL_TIM_Base_Start+0x70>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	4a22      	ldr	r2, [pc, #136]	; (8004dbc <HAL_TIM_Base_Start+0xc4>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d018      	beq.n	8004d68 <HAL_TIM_Base_Start+0x70>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a21      	ldr	r2, [pc, #132]	; (8004dc0 <HAL_TIM_Base_Start+0xc8>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d013      	beq.n	8004d68 <HAL_TIM_Base_Start+0x70>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	4a1f      	ldr	r2, [pc, #124]	; (8004dc4 <HAL_TIM_Base_Start+0xcc>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d00e      	beq.n	8004d68 <HAL_TIM_Base_Start+0x70>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	4a1e      	ldr	r2, [pc, #120]	; (8004dc8 <HAL_TIM_Base_Start+0xd0>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d009      	beq.n	8004d68 <HAL_TIM_Base_Start+0x70>
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	4a1c      	ldr	r2, [pc, #112]	; (8004dcc <HAL_TIM_Base_Start+0xd4>)
 8004d5a:	4293      	cmp	r3, r2
 8004d5c:	d004      	beq.n	8004d68 <HAL_TIM_Base_Start+0x70>
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <HAL_TIM_Base_Start+0xd8>)
 8004d64:	4293      	cmp	r3, r2
 8004d66:	d115      	bne.n	8004d94 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689a      	ldr	r2, [r3, #8]
 8004d6e:	4b19      	ldr	r3, [pc, #100]	; (8004dd4 <HAL_TIM_Base_Start+0xdc>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d015      	beq.n	8004da6 <HAL_TIM_Base_Start+0xae>
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d80:	d011      	beq.n	8004da6 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	681a      	ldr	r2, [r3, #0]
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	f042 0201 	orr.w	r2, r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d92:	e008      	b.n	8004da6 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	681a      	ldr	r2, [r3, #0]
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f042 0201 	orr.w	r2, r2, #1
 8004da2:	601a      	str	r2, [r3, #0]
 8004da4:	e000      	b.n	8004da8 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004da6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004da8:	2300      	movs	r3, #0
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3714      	adds	r7, #20
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
 8004db6:	bf00      	nop
 8004db8:	40010000 	.word	0x40010000
 8004dbc:	40000400 	.word	0x40000400
 8004dc0:	40000800 	.word	0x40000800
 8004dc4:	40000c00 	.word	0x40000c00
 8004dc8:	40010400 	.word	0x40010400
 8004dcc:	40014000 	.word	0x40014000
 8004dd0:	40001800 	.word	0x40001800
 8004dd4:	00010007 	.word	0x00010007

08004dd8 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8004dd8:	b480      	push	{r7}
 8004dda:	b083      	sub	sp, #12
 8004ddc:	af00      	add	r7, sp, #0
 8004dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6a1a      	ldr	r2, [r3, #32]
 8004de6:	f241 1311 	movw	r3, #4369	; 0x1111
 8004dea:	4013      	ands	r3, r2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d10f      	bne.n	8004e10 <HAL_TIM_Base_Stop+0x38>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	6a1a      	ldr	r2, [r3, #32]
 8004df6:	f240 4344 	movw	r3, #1092	; 0x444
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b00      	cmp	r3, #0
 8004dfe:	d107      	bne.n	8004e10 <HAL_TIM_Base_Stop+0x38>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	f022 0201 	bic.w	r2, r2, #1
 8004e0e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	370c      	adds	r7, #12
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e24:	4770      	bx	lr

08004e26 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e26:	b580      	push	{r7, lr}
 8004e28:	b082      	sub	sp, #8
 8004e2a:	af00      	add	r7, sp, #0
 8004e2c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d101      	bne.n	8004e38 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e34:	2301      	movs	r3, #1
 8004e36:	e049      	b.n	8004ecc <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e3e:	b2db      	uxtb	r3, r3
 8004e40:	2b00      	cmp	r3, #0
 8004e42:	d106      	bne.n	8004e52 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2200      	movs	r2, #0
 8004e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f000 f841 	bl	8004ed4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	3304      	adds	r3, #4
 8004e62:	4619      	mov	r1, r3
 8004e64:	4610      	mov	r0, r2
 8004e66:	f000 fc69 	bl	800573c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	2201      	movs	r2, #1
 8004e7e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2201      	movs	r2, #1
 8004e8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2201      	movs	r2, #1
 8004e96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	2201      	movs	r2, #1
 8004e9e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2201      	movs	r2, #1
 8004eae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2201      	movs	r2, #1
 8004eb6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	2201      	movs	r2, #1
 8004ec6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004eca:	2300      	movs	r3, #0
}
 8004ecc:	4618      	mov	r0, r3
 8004ece:	3708      	adds	r7, #8
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004ed4:	b480      	push	{r7}
 8004ed6:	b083      	sub	sp, #12
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004edc:	bf00      	nop
 8004ede:	370c      	adds	r7, #12
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b084      	sub	sp, #16
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
 8004ef0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d109      	bne.n	8004f0c <HAL_TIM_PWM_Start+0x24>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004efe:	b2db      	uxtb	r3, r3
 8004f00:	2b01      	cmp	r3, #1
 8004f02:	bf14      	ite	ne
 8004f04:	2301      	movne	r3, #1
 8004f06:	2300      	moveq	r3, #0
 8004f08:	b2db      	uxtb	r3, r3
 8004f0a:	e03c      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	2b04      	cmp	r3, #4
 8004f10:	d109      	bne.n	8004f26 <HAL_TIM_PWM_Start+0x3e>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004f18:	b2db      	uxtb	r3, r3
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	bf14      	ite	ne
 8004f1e:	2301      	movne	r3, #1
 8004f20:	2300      	moveq	r3, #0
 8004f22:	b2db      	uxtb	r3, r3
 8004f24:	e02f      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	2b08      	cmp	r3, #8
 8004f2a:	d109      	bne.n	8004f40 <HAL_TIM_PWM_Start+0x58>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004f32:	b2db      	uxtb	r3, r3
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	bf14      	ite	ne
 8004f38:	2301      	movne	r3, #1
 8004f3a:	2300      	moveq	r3, #0
 8004f3c:	b2db      	uxtb	r3, r3
 8004f3e:	e022      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	2b0c      	cmp	r3, #12
 8004f44:	d109      	bne.n	8004f5a <HAL_TIM_PWM_Start+0x72>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	bf14      	ite	ne
 8004f52:	2301      	movne	r3, #1
 8004f54:	2300      	moveq	r3, #0
 8004f56:	b2db      	uxtb	r3, r3
 8004f58:	e015      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b10      	cmp	r3, #16
 8004f5e:	d109      	bne.n	8004f74 <HAL_TIM_PWM_Start+0x8c>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004f66:	b2db      	uxtb	r3, r3
 8004f68:	2b01      	cmp	r3, #1
 8004f6a:	bf14      	ite	ne
 8004f6c:	2301      	movne	r3, #1
 8004f6e:	2300      	moveq	r3, #0
 8004f70:	b2db      	uxtb	r3, r3
 8004f72:	e008      	b.n	8004f86 <HAL_TIM_PWM_Start+0x9e>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	2b01      	cmp	r3, #1
 8004f7e:	bf14      	ite	ne
 8004f80:	2301      	movne	r3, #1
 8004f82:	2300      	moveq	r3, #0
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d001      	beq.n	8004f8e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	e092      	b.n	80050b4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d104      	bne.n	8004f9e <HAL_TIM_PWM_Start+0xb6>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	e023      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	2b04      	cmp	r3, #4
 8004fa2:	d104      	bne.n	8004fae <HAL_TIM_PWM_Start+0xc6>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2202      	movs	r2, #2
 8004fa8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fac:	e01b      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2b08      	cmp	r3, #8
 8004fb2:	d104      	bne.n	8004fbe <HAL_TIM_PWM_Start+0xd6>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2202      	movs	r2, #2
 8004fb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fbc:	e013      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	2b0c      	cmp	r3, #12
 8004fc2:	d104      	bne.n	8004fce <HAL_TIM_PWM_Start+0xe6>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004fcc:	e00b      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	2b10      	cmp	r3, #16
 8004fd2:	d104      	bne.n	8004fde <HAL_TIM_PWM_Start+0xf6>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2202      	movs	r2, #2
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fdc:	e003      	b.n	8004fe6 <HAL_TIM_PWM_Start+0xfe>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2202      	movs	r2, #2
 8004fe2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2201      	movs	r2, #1
 8004fec:	6839      	ldr	r1, [r7, #0]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 ff3c 	bl	8005e6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a30      	ldr	r2, [pc, #192]	; (80050bc <HAL_TIM_PWM_Start+0x1d4>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d004      	beq.n	8005008 <HAL_TIM_PWM_Start+0x120>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	4a2f      	ldr	r2, [pc, #188]	; (80050c0 <HAL_TIM_PWM_Start+0x1d8>)
 8005004:	4293      	cmp	r3, r2
 8005006:	d101      	bne.n	800500c <HAL_TIM_PWM_Start+0x124>
 8005008:	2301      	movs	r3, #1
 800500a:	e000      	b.n	800500e <HAL_TIM_PWM_Start+0x126>
 800500c:	2300      	movs	r3, #0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d007      	beq.n	8005022 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005020:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a25      	ldr	r2, [pc, #148]	; (80050bc <HAL_TIM_PWM_Start+0x1d4>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d022      	beq.n	8005072 <HAL_TIM_PWM_Start+0x18a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005034:	d01d      	beq.n	8005072 <HAL_TIM_PWM_Start+0x18a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a22      	ldr	r2, [pc, #136]	; (80050c4 <HAL_TIM_PWM_Start+0x1dc>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d018      	beq.n	8005072 <HAL_TIM_PWM_Start+0x18a>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a20      	ldr	r2, [pc, #128]	; (80050c8 <HAL_TIM_PWM_Start+0x1e0>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d013      	beq.n	8005072 <HAL_TIM_PWM_Start+0x18a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1f      	ldr	r2, [pc, #124]	; (80050cc <HAL_TIM_PWM_Start+0x1e4>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d00e      	beq.n	8005072 <HAL_TIM_PWM_Start+0x18a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a19      	ldr	r2, [pc, #100]	; (80050c0 <HAL_TIM_PWM_Start+0x1d8>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d009      	beq.n	8005072 <HAL_TIM_PWM_Start+0x18a>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_TIM_PWM_Start+0x1e8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d004      	beq.n	8005072 <HAL_TIM_PWM_Start+0x18a>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <HAL_TIM_PWM_Start+0x1ec>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d115      	bne.n	800509e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	4b17      	ldr	r3, [pc, #92]	; (80050d8 <HAL_TIM_PWM_Start+0x1f0>)
 800507a:	4013      	ands	r3, r2
 800507c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	2b06      	cmp	r3, #6
 8005082:	d015      	beq.n	80050b0 <HAL_TIM_PWM_Start+0x1c8>
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800508a:	d011      	beq.n	80050b0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f042 0201 	orr.w	r2, r2, #1
 800509a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509c:	e008      	b.n	80050b0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	f042 0201 	orr.w	r2, r2, #1
 80050ac:	601a      	str	r2, [r3, #0]
 80050ae:	e000      	b.n	80050b2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80050b2:	2300      	movs	r3, #0
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}
 80050bc:	40010000 	.word	0x40010000
 80050c0:	40010400 	.word	0x40010400
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40014000 	.word	0x40014000
 80050d4:	40001800 	.word	0x40001800
 80050d8:	00010007 	.word	0x00010007

080050dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b02      	cmp	r3, #2
 80050f0:	d122      	bne.n	8005138 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	68db      	ldr	r3, [r3, #12]
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b02      	cmp	r3, #2
 80050fe:	d11b      	bne.n	8005138 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f06f 0202 	mvn.w	r2, #2
 8005108:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2201      	movs	r2, #1
 800510e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	699b      	ldr	r3, [r3, #24]
 8005116:	f003 0303 	and.w	r3, r3, #3
 800511a:	2b00      	cmp	r3, #0
 800511c:	d003      	beq.n	8005126 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 faee 	bl	8005700 <HAL_TIM_IC_CaptureCallback>
 8005124:	e005      	b.n	8005132 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005126:	6878      	ldr	r0, [r7, #4]
 8005128:	f000 fae0 	bl	80056ec <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800512c:	6878      	ldr	r0, [r7, #4]
 800512e:	f000 faf1 	bl	8005714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	2200      	movs	r2, #0
 8005136:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	691b      	ldr	r3, [r3, #16]
 800513e:	f003 0304 	and.w	r3, r3, #4
 8005142:	2b04      	cmp	r3, #4
 8005144:	d122      	bne.n	800518c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	68db      	ldr	r3, [r3, #12]
 800514c:	f003 0304 	and.w	r3, r3, #4
 8005150:	2b04      	cmp	r3, #4
 8005152:	d11b      	bne.n	800518c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	f06f 0204 	mvn.w	r2, #4
 800515c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2202      	movs	r2, #2
 8005162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	699b      	ldr	r3, [r3, #24]
 800516a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 fac4 	bl	8005700 <HAL_TIM_IC_CaptureCallback>
 8005178:	e005      	b.n	8005186 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f000 fab6 	bl	80056ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005180:	6878      	ldr	r0, [r7, #4]
 8005182:	f000 fac7 	bl	8005714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	2200      	movs	r2, #0
 800518a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	f003 0308 	and.w	r3, r3, #8
 8005196:	2b08      	cmp	r3, #8
 8005198:	d122      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	f003 0308 	and.w	r3, r3, #8
 80051a4:	2b08      	cmp	r3, #8
 80051a6:	d11b      	bne.n	80051e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f06f 0208 	mvn.w	r2, #8
 80051b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2204      	movs	r2, #4
 80051b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	69db      	ldr	r3, [r3, #28]
 80051be:	f003 0303 	and.w	r3, r3, #3
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d003      	beq.n	80051ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051c6:	6878      	ldr	r0, [r7, #4]
 80051c8:	f000 fa9a 	bl	8005700 <HAL_TIM_IC_CaptureCallback>
 80051cc:	e005      	b.n	80051da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f000 fa8c 	bl	80056ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f000 fa9d 	bl	8005714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	2200      	movs	r2, #0
 80051de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	f003 0310 	and.w	r3, r3, #16
 80051ea:	2b10      	cmp	r3, #16
 80051ec:	d122      	bne.n	8005234 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	68db      	ldr	r3, [r3, #12]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	2b10      	cmp	r3, #16
 80051fa:	d11b      	bne.n	8005234 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f06f 0210 	mvn.w	r2, #16
 8005204:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	2208      	movs	r2, #8
 800520a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	69db      	ldr	r3, [r3, #28]
 8005212:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800521a:	6878      	ldr	r0, [r7, #4]
 800521c:	f000 fa70 	bl	8005700 <HAL_TIM_IC_CaptureCallback>
 8005220:	e005      	b.n	800522e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fa62 	bl	80056ec <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005228:	6878      	ldr	r0, [r7, #4]
 800522a:	f000 fa73 	bl	8005714 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2200      	movs	r2, #0
 8005232:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	691b      	ldr	r3, [r3, #16]
 800523a:	f003 0301 	and.w	r3, r3, #1
 800523e:	2b01      	cmp	r3, #1
 8005240:	d10e      	bne.n	8005260 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	68db      	ldr	r3, [r3, #12]
 8005248:	f003 0301 	and.w	r3, r3, #1
 800524c:	2b01      	cmp	r3, #1
 800524e:	d107      	bne.n	8005260 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f06f 0201 	mvn.w	r2, #1
 8005258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f000 fa3c 	bl	80056d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	691b      	ldr	r3, [r3, #16]
 8005266:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800526a:	2b80      	cmp	r3, #128	; 0x80
 800526c:	d10e      	bne.n	800528c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	68db      	ldr	r3, [r3, #12]
 8005274:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005278:	2b80      	cmp	r3, #128	; 0x80
 800527a:	d107      	bne.n	800528c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f000 feae 	bl	8005fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	691b      	ldr	r3, [r3, #16]
 8005292:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800529a:	d10e      	bne.n	80052ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68db      	ldr	r3, [r3, #12]
 80052a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052a6:	2b80      	cmp	r3, #128	; 0x80
 80052a8:	d107      	bne.n	80052ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80052b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80052b4:	6878      	ldr	r0, [r7, #4]
 80052b6:	f000 fea1 	bl	8005ffc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	691b      	ldr	r3, [r3, #16]
 80052c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052c4:	2b40      	cmp	r3, #64	; 0x40
 80052c6:	d10e      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	68db      	ldr	r3, [r3, #12]
 80052ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d2:	2b40      	cmp	r3, #64	; 0x40
 80052d4:	d107      	bne.n	80052e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f000 fa21 	bl	8005728 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	691b      	ldr	r3, [r3, #16]
 80052ec:	f003 0320 	and.w	r3, r3, #32
 80052f0:	2b20      	cmp	r3, #32
 80052f2:	d10e      	bne.n	8005312 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	f003 0320 	and.w	r3, r3, #32
 80052fe:	2b20      	cmp	r3, #32
 8005300:	d107      	bne.n	8005312 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f06f 0220 	mvn.w	r2, #32
 800530a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fe61 	bl	8005fd4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
	...

0800531c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b086      	sub	sp, #24
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005328:	2300      	movs	r3, #0
 800532a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005332:	2b01      	cmp	r3, #1
 8005334:	d101      	bne.n	800533a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005336:	2302      	movs	r3, #2
 8005338:	e0ff      	b.n	800553a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2201      	movs	r2, #1
 800533e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2b14      	cmp	r3, #20
 8005346:	f200 80f0 	bhi.w	800552a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800534a:	a201      	add	r2, pc, #4	; (adr r2, 8005350 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800534c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005350:	080053a5 	.word	0x080053a5
 8005354:	0800552b 	.word	0x0800552b
 8005358:	0800552b 	.word	0x0800552b
 800535c:	0800552b 	.word	0x0800552b
 8005360:	080053e5 	.word	0x080053e5
 8005364:	0800552b 	.word	0x0800552b
 8005368:	0800552b 	.word	0x0800552b
 800536c:	0800552b 	.word	0x0800552b
 8005370:	08005427 	.word	0x08005427
 8005374:	0800552b 	.word	0x0800552b
 8005378:	0800552b 	.word	0x0800552b
 800537c:	0800552b 	.word	0x0800552b
 8005380:	08005467 	.word	0x08005467
 8005384:	0800552b 	.word	0x0800552b
 8005388:	0800552b 	.word	0x0800552b
 800538c:	0800552b 	.word	0x0800552b
 8005390:	080054a9 	.word	0x080054a9
 8005394:	0800552b 	.word	0x0800552b
 8005398:	0800552b 	.word	0x0800552b
 800539c:	0800552b 	.word	0x0800552b
 80053a0:	080054e9 	.word	0x080054e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68b9      	ldr	r1, [r7, #8]
 80053aa:	4618      	mov	r0, r3
 80053ac:	f000 fa66 	bl	800587c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	699a      	ldr	r2, [r3, #24]
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f042 0208 	orr.w	r2, r2, #8
 80053be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	699a      	ldr	r2, [r3, #24]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	f022 0204 	bic.w	r2, r2, #4
 80053ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	6999      	ldr	r1, [r3, #24]
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	691a      	ldr	r2, [r3, #16]
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	430a      	orrs	r2, r1
 80053e0:	619a      	str	r2, [r3, #24]
      break;
 80053e2:	e0a5      	b.n	8005530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	68b9      	ldr	r1, [r7, #8]
 80053ea:	4618      	mov	r0, r3
 80053ec:	f000 fab8 	bl	8005960 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	699a      	ldr	r2, [r3, #24]
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	699a      	ldr	r2, [r3, #24]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	6999      	ldr	r1, [r3, #24]
 8005416:	68bb      	ldr	r3, [r7, #8]
 8005418:	691b      	ldr	r3, [r3, #16]
 800541a:	021a      	lsls	r2, r3, #8
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	430a      	orrs	r2, r1
 8005422:	619a      	str	r2, [r3, #24]
      break;
 8005424:	e084      	b.n	8005530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68b9      	ldr	r1, [r7, #8]
 800542c:	4618      	mov	r0, r3
 800542e:	f000 fb0f 	bl	8005a50 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0208 	orr.w	r2, r2, #8
 8005440:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	69da      	ldr	r2, [r3, #28]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f022 0204 	bic.w	r2, r2, #4
 8005450:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	69d9      	ldr	r1, [r3, #28]
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	691a      	ldr	r2, [r3, #16]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	430a      	orrs	r2, r1
 8005462:	61da      	str	r2, [r3, #28]
      break;
 8005464:	e064      	b.n	8005530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68b9      	ldr	r1, [r7, #8]
 800546c:	4618      	mov	r0, r3
 800546e:	f000 fb65 	bl	8005b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	69da      	ldr	r2, [r3, #28]
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005480:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	69da      	ldr	r2, [r3, #28]
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005490:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	69d9      	ldr	r1, [r3, #28]
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	691b      	ldr	r3, [r3, #16]
 800549c:	021a      	lsls	r2, r3, #8
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	430a      	orrs	r2, r1
 80054a4:	61da      	str	r2, [r3, #28]
      break;
 80054a6:	e043      	b.n	8005530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68b9      	ldr	r1, [r7, #8]
 80054ae:	4618      	mov	r0, r3
 80054b0:	f000 fb9c 	bl	8005bec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f042 0208 	orr.w	r2, r2, #8
 80054c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	f022 0204 	bic.w	r2, r2, #4
 80054d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	691a      	ldr	r2, [r3, #16]
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	430a      	orrs	r2, r1
 80054e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80054e6:	e023      	b.n	8005530 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	4618      	mov	r0, r3
 80054f0:	f000 fbce 	bl	8005c90 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005502:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005504:	68fb      	ldr	r3, [r7, #12]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005512:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	691b      	ldr	r3, [r3, #16]
 800551e:	021a      	lsls	r2, r3, #8
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	430a      	orrs	r2, r1
 8005526:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8005528:	e002      	b.n	8005530 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800552a:	2301      	movs	r3, #1
 800552c:	75fb      	strb	r3, [r7, #23]
      break;
 800552e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	2200      	movs	r2, #0
 8005534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005538:	7dfb      	ldrb	r3, [r7, #23]
}
 800553a:	4618      	mov	r0, r3
 800553c:	3718      	adds	r7, #24
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop

08005544 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b084      	sub	sp, #16
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
 800554c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800554e:	2300      	movs	r3, #0
 8005550:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005558:	2b01      	cmp	r3, #1
 800555a:	d101      	bne.n	8005560 <HAL_TIM_ConfigClockSource+0x1c>
 800555c:	2302      	movs	r3, #2
 800555e:	e0b4      	b.n	80056ca <HAL_TIM_ConfigClockSource+0x186>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2201      	movs	r2, #1
 8005564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2202      	movs	r2, #2
 800556c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005578:	68ba      	ldr	r2, [r7, #8]
 800557a:	4b56      	ldr	r3, [pc, #344]	; (80056d4 <HAL_TIM_ConfigClockSource+0x190>)
 800557c:	4013      	ands	r3, r2
 800557e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005586:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68ba      	ldr	r2, [r7, #8]
 800558e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005590:	683b      	ldr	r3, [r7, #0]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005598:	d03e      	beq.n	8005618 <HAL_TIM_ConfigClockSource+0xd4>
 800559a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800559e:	f200 8087 	bhi.w	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055a6:	f000 8086 	beq.w	80056b6 <HAL_TIM_ConfigClockSource+0x172>
 80055aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ae:	d87f      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b0:	2b70      	cmp	r3, #112	; 0x70
 80055b2:	d01a      	beq.n	80055ea <HAL_TIM_ConfigClockSource+0xa6>
 80055b4:	2b70      	cmp	r3, #112	; 0x70
 80055b6:	d87b      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055b8:	2b60      	cmp	r3, #96	; 0x60
 80055ba:	d050      	beq.n	800565e <HAL_TIM_ConfigClockSource+0x11a>
 80055bc:	2b60      	cmp	r3, #96	; 0x60
 80055be:	d877      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c0:	2b50      	cmp	r3, #80	; 0x50
 80055c2:	d03c      	beq.n	800563e <HAL_TIM_ConfigClockSource+0xfa>
 80055c4:	2b50      	cmp	r3, #80	; 0x50
 80055c6:	d873      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055c8:	2b40      	cmp	r3, #64	; 0x40
 80055ca:	d058      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x13a>
 80055cc:	2b40      	cmp	r3, #64	; 0x40
 80055ce:	d86f      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d0:	2b30      	cmp	r3, #48	; 0x30
 80055d2:	d064      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055d4:	2b30      	cmp	r3, #48	; 0x30
 80055d6:	d86b      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055d8:	2b20      	cmp	r3, #32
 80055da:	d060      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055dc:	2b20      	cmp	r3, #32
 80055de:	d867      	bhi.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d05c      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055e4:	2b10      	cmp	r3, #16
 80055e6:	d05a      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x15a>
 80055e8:	e062      	b.n	80056b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	6818      	ldr	r0, [r3, #0]
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	6899      	ldr	r1, [r3, #8]
 80055f2:	683b      	ldr	r3, [r7, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	f000 fc17 	bl	8005e2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800560c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	68ba      	ldr	r2, [r7, #8]
 8005614:	609a      	str	r2, [r3, #8]
      break;
 8005616:	e04f      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6818      	ldr	r0, [r3, #0]
 800561c:	683b      	ldr	r3, [r7, #0]
 800561e:	6899      	ldr	r1, [r3, #8]
 8005620:	683b      	ldr	r3, [r7, #0]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	f000 fc00 	bl	8005e2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	689a      	ldr	r2, [r3, #8]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800563a:	609a      	str	r2, [r3, #8]
      break;
 800563c:	e03c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	6859      	ldr	r1, [r3, #4]
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	68db      	ldr	r3, [r3, #12]
 800564a:	461a      	mov	r2, r3
 800564c:	f000 fb74 	bl	8005d38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	2150      	movs	r1, #80	; 0x50
 8005656:	4618      	mov	r0, r3
 8005658:	f000 fbcd 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 800565c:	e02c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6818      	ldr	r0, [r3, #0]
 8005662:	683b      	ldr	r3, [r7, #0]
 8005664:	6859      	ldr	r1, [r3, #4]
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	461a      	mov	r2, r3
 800566c:	f000 fb93 	bl	8005d96 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	2160      	movs	r1, #96	; 0x60
 8005676:	4618      	mov	r0, r3
 8005678:	f000 fbbd 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 800567c:	e01c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
 800568a:	461a      	mov	r2, r3
 800568c:	f000 fb54 	bl	8005d38 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2140      	movs	r1, #64	; 0x40
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fbad 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 800569c:	e00c      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	4619      	mov	r1, r3
 80056a8:	4610      	mov	r0, r2
 80056aa:	f000 fba4 	bl	8005df6 <TIM_ITRx_SetConfig>
      break;
 80056ae:	e003      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	73fb      	strb	r3, [r7, #15]
      break;
 80056b4:	e000      	b.n	80056b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	2200      	movs	r2, #0
 80056c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}
 80056d2:	bf00      	nop
 80056d4:	fffeff88 	.word	0xfffeff88

080056d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 80056de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80056e0:	bf00      	nop
 80056e2:	370c      	adds	r7, #12
 80056e4:	46bd      	mov	sp, r7
 80056e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ea:	4770      	bx	lr

080056ec <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80056ec:	b480      	push	{r7}
 80056ee:	b083      	sub	sp, #12
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80056f4:	bf00      	nop
 80056f6:	370c      	adds	r7, #12
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005700:	b480      	push	{r7}
 8005702:	b083      	sub	sp, #12
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005708:	bf00      	nop
 800570a:	370c      	adds	r7, #12
 800570c:	46bd      	mov	sp, r7
 800570e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005712:	4770      	bx	lr

08005714 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005714:	b480      	push	{r7}
 8005716:	b083      	sub	sp, #12
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800571c:	bf00      	nop
 800571e:	370c      	adds	r7, #12
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005728:	b480      	push	{r7}
 800572a:	b083      	sub	sp, #12
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005730:	bf00      	nop
 8005732:	370c      	adds	r7, #12
 8005734:	46bd      	mov	sp, r7
 8005736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573a:	4770      	bx	lr

0800573c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800573c:	b480      	push	{r7}
 800573e:	b085      	sub	sp, #20
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
 8005744:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	4a40      	ldr	r2, [pc, #256]	; (8005850 <TIM_Base_SetConfig+0x114>)
 8005750:	4293      	cmp	r3, r2
 8005752:	d013      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800575a:	d00f      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	4a3d      	ldr	r2, [pc, #244]	; (8005854 <TIM_Base_SetConfig+0x118>)
 8005760:	4293      	cmp	r3, r2
 8005762:	d00b      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	4a3c      	ldr	r2, [pc, #240]	; (8005858 <TIM_Base_SetConfig+0x11c>)
 8005768:	4293      	cmp	r3, r2
 800576a:	d007      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a3b      	ldr	r2, [pc, #236]	; (800585c <TIM_Base_SetConfig+0x120>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d003      	beq.n	800577c <TIM_Base_SetConfig+0x40>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	4a3a      	ldr	r2, [pc, #232]	; (8005860 <TIM_Base_SetConfig+0x124>)
 8005778:	4293      	cmp	r3, r2
 800577a:	d108      	bne.n	800578e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005782:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	685b      	ldr	r3, [r3, #4]
 8005788:	68fa      	ldr	r2, [r7, #12]
 800578a:	4313      	orrs	r3, r2
 800578c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	4a2f      	ldr	r2, [pc, #188]	; (8005850 <TIM_Base_SetConfig+0x114>)
 8005792:	4293      	cmp	r3, r2
 8005794:	d02b      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800579c:	d027      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	4a2c      	ldr	r2, [pc, #176]	; (8005854 <TIM_Base_SetConfig+0x118>)
 80057a2:	4293      	cmp	r3, r2
 80057a4:	d023      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	4a2b      	ldr	r2, [pc, #172]	; (8005858 <TIM_Base_SetConfig+0x11c>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01f      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a2a      	ldr	r2, [pc, #168]	; (800585c <TIM_Base_SetConfig+0x120>)
 80057b2:	4293      	cmp	r3, r2
 80057b4:	d01b      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4a29      	ldr	r2, [pc, #164]	; (8005860 <TIM_Base_SetConfig+0x124>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d017      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a28      	ldr	r2, [pc, #160]	; (8005864 <TIM_Base_SetConfig+0x128>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d013      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	4a27      	ldr	r2, [pc, #156]	; (8005868 <TIM_Base_SetConfig+0x12c>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00f      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a26      	ldr	r2, [pc, #152]	; (800586c <TIM_Base_SetConfig+0x130>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d00b      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a25      	ldr	r2, [pc, #148]	; (8005870 <TIM_Base_SetConfig+0x134>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d007      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a24      	ldr	r2, [pc, #144]	; (8005874 <TIM_Base_SetConfig+0x138>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d003      	beq.n	80057ee <TIM_Base_SetConfig+0xb2>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a23      	ldr	r2, [pc, #140]	; (8005878 <TIM_Base_SetConfig+0x13c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d108      	bne.n	8005800 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80057f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	68fa      	ldr	r2, [r7, #12]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	4313      	orrs	r3, r2
 800580c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	68fa      	ldr	r2, [r7, #12]
 8005812:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	689a      	ldr	r2, [r3, #8]
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <TIM_Base_SetConfig+0x114>)
 8005828:	4293      	cmp	r3, r2
 800582a:	d003      	beq.n	8005834 <TIM_Base_SetConfig+0xf8>
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	4a0c      	ldr	r2, [pc, #48]	; (8005860 <TIM_Base_SetConfig+0x124>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d103      	bne.n	800583c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	691a      	ldr	r2, [r3, #16]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2201      	movs	r2, #1
 8005840:	615a      	str	r2, [r3, #20]
}
 8005842:	bf00      	nop
 8005844:	3714      	adds	r7, #20
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop
 8005850:	40010000 	.word	0x40010000
 8005854:	40000400 	.word	0x40000400
 8005858:	40000800 	.word	0x40000800
 800585c:	40000c00 	.word	0x40000c00
 8005860:	40010400 	.word	0x40010400
 8005864:	40014000 	.word	0x40014000
 8005868:	40014400 	.word	0x40014400
 800586c:	40014800 	.word	0x40014800
 8005870:	40001800 	.word	0x40001800
 8005874:	40001c00 	.word	0x40001c00
 8005878:	40002000 	.word	0x40002000

0800587c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800587c:	b480      	push	{r7}
 800587e:	b087      	sub	sp, #28
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	6a1b      	ldr	r3, [r3, #32]
 800588a:	f023 0201 	bic.w	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	6a1b      	ldr	r3, [r3, #32]
 8005896:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	4b2b      	ldr	r3, [pc, #172]	; (8005954 <TIM_OC1_SetConfig+0xd8>)
 80058a8:	4013      	ands	r3, r2
 80058aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f023 0303 	bic.w	r3, r3, #3
 80058b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058b4:	683b      	ldr	r3, [r7, #0]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	68fa      	ldr	r2, [r7, #12]
 80058ba:	4313      	orrs	r3, r2
 80058bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058be:	697b      	ldr	r3, [r7, #20]
 80058c0:	f023 0302 	bic.w	r3, r3, #2
 80058c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	689b      	ldr	r3, [r3, #8]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	4a21      	ldr	r2, [pc, #132]	; (8005958 <TIM_OC1_SetConfig+0xdc>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d003      	beq.n	80058e0 <TIM_OC1_SetConfig+0x64>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	4a20      	ldr	r2, [pc, #128]	; (800595c <TIM_OC1_SetConfig+0xe0>)
 80058dc:	4293      	cmp	r3, r2
 80058de:	d10c      	bne.n	80058fa <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80058e0:	697b      	ldr	r3, [r7, #20]
 80058e2:	f023 0308 	bic.w	r3, r3, #8
 80058e6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	68db      	ldr	r3, [r3, #12]
 80058ec:	697a      	ldr	r2, [r7, #20]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 0304 	bic.w	r3, r3, #4
 80058f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a16      	ldr	r2, [pc, #88]	; (8005958 <TIM_OC1_SetConfig+0xdc>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d003      	beq.n	800590a <TIM_OC1_SetConfig+0x8e>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a15      	ldr	r2, [pc, #84]	; (800595c <TIM_OC1_SetConfig+0xe0>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d111      	bne.n	800592e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005910:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005918:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800591a:	683b      	ldr	r3, [r7, #0]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	693a      	ldr	r2, [r7, #16]
 8005920:	4313      	orrs	r3, r2
 8005922:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	699b      	ldr	r3, [r3, #24]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	4313      	orrs	r3, r2
 800592c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	68fa      	ldr	r2, [r7, #12]
 8005938:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	685a      	ldr	r2, [r3, #4]
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	697a      	ldr	r2, [r7, #20]
 8005946:	621a      	str	r2, [r3, #32]
}
 8005948:	bf00      	nop
 800594a:	371c      	adds	r7, #28
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	fffeff8f 	.word	0xfffeff8f
 8005958:	40010000 	.word	0x40010000
 800595c:	40010400 	.word	0x40010400

08005960 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005960:	b480      	push	{r7}
 8005962:	b087      	sub	sp, #28
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6a1b      	ldr	r3, [r3, #32]
 800596e:	f023 0210 	bic.w	r2, r3, #16
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	685b      	ldr	r3, [r3, #4]
 8005980:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005988:	68fa      	ldr	r2, [r7, #12]
 800598a:	4b2e      	ldr	r3, [pc, #184]	; (8005a44 <TIM_OC2_SetConfig+0xe4>)
 800598c:	4013      	ands	r3, r2
 800598e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005996:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005998:	683b      	ldr	r3, [r7, #0]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	021b      	lsls	r3, r3, #8
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	4313      	orrs	r3, r2
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059a4:	697b      	ldr	r3, [r7, #20]
 80059a6:	f023 0320 	bic.w	r3, r3, #32
 80059aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	011b      	lsls	r3, r3, #4
 80059b2:	697a      	ldr	r2, [r7, #20]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	4a23      	ldr	r2, [pc, #140]	; (8005a48 <TIM_OC2_SetConfig+0xe8>)
 80059bc:	4293      	cmp	r3, r2
 80059be:	d003      	beq.n	80059c8 <TIM_OC2_SetConfig+0x68>
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	4a22      	ldr	r2, [pc, #136]	; (8005a4c <TIM_OC2_SetConfig+0xec>)
 80059c4:	4293      	cmp	r3, r2
 80059c6:	d10d      	bne.n	80059e4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80059c8:	697b      	ldr	r3, [r7, #20]
 80059ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80059ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	68db      	ldr	r3, [r3, #12]
 80059d4:	011b      	lsls	r3, r3, #4
 80059d6:	697a      	ldr	r2, [r7, #20]
 80059d8:	4313      	orrs	r3, r2
 80059da:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80059e2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	4a18      	ldr	r2, [pc, #96]	; (8005a48 <TIM_OC2_SetConfig+0xe8>)
 80059e8:	4293      	cmp	r3, r2
 80059ea:	d003      	beq.n	80059f4 <TIM_OC2_SetConfig+0x94>
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	4a17      	ldr	r2, [pc, #92]	; (8005a4c <TIM_OC2_SetConfig+0xec>)
 80059f0:	4293      	cmp	r3, r2
 80059f2:	d113      	bne.n	8005a1c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80059f4:	693b      	ldr	r3, [r7, #16]
 80059f6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059fa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80059fc:	693b      	ldr	r3, [r7, #16]
 80059fe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005a02:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	009b      	lsls	r3, r3, #2
 8005a0a:	693a      	ldr	r2, [r7, #16]
 8005a0c:	4313      	orrs	r3, r2
 8005a0e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	699b      	ldr	r3, [r3, #24]
 8005a14:	009b      	lsls	r3, r3, #2
 8005a16:	693a      	ldr	r2, [r7, #16]
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	68fa      	ldr	r2, [r7, #12]
 8005a26:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	685a      	ldr	r2, [r3, #4]
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	697a      	ldr	r2, [r7, #20]
 8005a34:	621a      	str	r2, [r3, #32]
}
 8005a36:	bf00      	nop
 8005a38:	371c      	adds	r7, #28
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a40:	4770      	bx	lr
 8005a42:	bf00      	nop
 8005a44:	feff8fff 	.word	0xfeff8fff
 8005a48:	40010000 	.word	0x40010000
 8005a4c:	40010400 	.word	0x40010400

08005a50 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b087      	sub	sp, #28
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6a1b      	ldr	r3, [r3, #32]
 8005a5e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	6a1b      	ldr	r3, [r3, #32]
 8005a6a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005a78:	68fa      	ldr	r2, [r7, #12]
 8005a7a:	4b2d      	ldr	r3, [pc, #180]	; (8005b30 <TIM_OC3_SetConfig+0xe0>)
 8005a7c:	4013      	ands	r3, r2
 8005a7e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 0303 	bic.w	r3, r3, #3
 8005a86:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	4313      	orrs	r3, r2
 8005a90:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a98:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	689b      	ldr	r3, [r3, #8]
 8005a9e:	021b      	lsls	r3, r3, #8
 8005aa0:	697a      	ldr	r2, [r7, #20]
 8005aa2:	4313      	orrs	r3, r2
 8005aa4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	4a22      	ldr	r2, [pc, #136]	; (8005b34 <TIM_OC3_SetConfig+0xe4>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d003      	beq.n	8005ab6 <TIM_OC3_SetConfig+0x66>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a21      	ldr	r2, [pc, #132]	; (8005b38 <TIM_OC3_SetConfig+0xe8>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d10d      	bne.n	8005ad2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005ab6:	697b      	ldr	r3, [r7, #20]
 8005ab8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005abc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005abe:	683b      	ldr	r3, [r7, #0]
 8005ac0:	68db      	ldr	r3, [r3, #12]
 8005ac2:	021b      	lsls	r3, r3, #8
 8005ac4:	697a      	ldr	r2, [r7, #20]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	4a17      	ldr	r2, [pc, #92]	; (8005b34 <TIM_OC3_SetConfig+0xe4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d003      	beq.n	8005ae2 <TIM_OC3_SetConfig+0x92>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a16      	ldr	r2, [pc, #88]	; (8005b38 <TIM_OC3_SetConfig+0xe8>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d113      	bne.n	8005b0a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005ae2:	693b      	ldr	r3, [r7, #16]
 8005ae4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ae8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005af0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	695b      	ldr	r3, [r3, #20]
 8005af6:	011b      	lsls	r3, r3, #4
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	699b      	ldr	r3, [r3, #24]
 8005b02:	011b      	lsls	r3, r3, #4
 8005b04:	693a      	ldr	r2, [r7, #16]
 8005b06:	4313      	orrs	r3, r2
 8005b08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	693a      	ldr	r2, [r7, #16]
 8005b0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b16:	683b      	ldr	r3, [r7, #0]
 8005b18:	685a      	ldr	r2, [r3, #4]
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	697a      	ldr	r2, [r7, #20]
 8005b22:	621a      	str	r2, [r3, #32]
}
 8005b24:	bf00      	nop
 8005b26:	371c      	adds	r7, #28
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr
 8005b30:	fffeff8f 	.word	0xfffeff8f
 8005b34:	40010000 	.word	0x40010000
 8005b38:	40010400 	.word	0x40010400

08005b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b087      	sub	sp, #28
 8005b40:	af00      	add	r7, sp, #0
 8005b42:	6078      	str	r0, [r7, #4]
 8005b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	69db      	ldr	r3, [r3, #28]
 8005b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b64:	68fa      	ldr	r2, [r7, #12]
 8005b66:	4b1e      	ldr	r3, [pc, #120]	; (8005be0 <TIM_OC4_SetConfig+0xa4>)
 8005b68:	4013      	ands	r3, r2
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	021b      	lsls	r3, r3, #8
 8005b7a:	68fa      	ldr	r2, [r7, #12]
 8005b7c:	4313      	orrs	r3, r2
 8005b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005b80:	693b      	ldr	r3, [r7, #16]
 8005b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	689b      	ldr	r3, [r3, #8]
 8005b8c:	031b      	lsls	r3, r3, #12
 8005b8e:	693a      	ldr	r2, [r7, #16]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	4a13      	ldr	r2, [pc, #76]	; (8005be4 <TIM_OC4_SetConfig+0xa8>)
 8005b98:	4293      	cmp	r3, r2
 8005b9a:	d003      	beq.n	8005ba4 <TIM_OC4_SetConfig+0x68>
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	4a12      	ldr	r2, [pc, #72]	; (8005be8 <TIM_OC4_SetConfig+0xac>)
 8005ba0:	4293      	cmp	r3, r2
 8005ba2:	d109      	bne.n	8005bb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	695b      	ldr	r3, [r3, #20]
 8005bb0:	019b      	lsls	r3, r3, #6
 8005bb2:	697a      	ldr	r2, [r7, #20]
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	697a      	ldr	r2, [r7, #20]
 8005bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	68fa      	ldr	r2, [r7, #12]
 8005bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685a      	ldr	r2, [r3, #4]
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	693a      	ldr	r2, [r7, #16]
 8005bd0:	621a      	str	r2, [r3, #32]
}
 8005bd2:	bf00      	nop
 8005bd4:	371c      	adds	r7, #28
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	feff8fff 	.word	0xfeff8fff
 8005be4:	40010000 	.word	0x40010000
 8005be8:	40010400 	.word	0x40010400

08005bec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b087      	sub	sp, #28
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
 8005bf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	6a1b      	ldr	r3, [r3, #32]
 8005bfa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6a1b      	ldr	r3, [r3, #32]
 8005c06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	685b      	ldr	r3, [r3, #4]
 8005c0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005c12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005c14:	68fa      	ldr	r2, [r7, #12]
 8005c16:	4b1b      	ldr	r3, [pc, #108]	; (8005c84 <TIM_OC5_SetConfig+0x98>)
 8005c18:	4013      	ands	r3, r2
 8005c1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c1c:	683b      	ldr	r3, [r7, #0]
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	68fa      	ldr	r2, [r7, #12]
 8005c22:	4313      	orrs	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005c2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	041b      	lsls	r3, r3, #16
 8005c34:	693a      	ldr	r2, [r7, #16]
 8005c36:	4313      	orrs	r3, r2
 8005c38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	4a12      	ldr	r2, [pc, #72]	; (8005c88 <TIM_OC5_SetConfig+0x9c>)
 8005c3e:	4293      	cmp	r3, r2
 8005c40:	d003      	beq.n	8005c4a <TIM_OC5_SetConfig+0x5e>
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	4a11      	ldr	r2, [pc, #68]	; (8005c8c <TIM_OC5_SetConfig+0xa0>)
 8005c46:	4293      	cmp	r3, r2
 8005c48:	d109      	bne.n	8005c5e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c50:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	695b      	ldr	r3, [r3, #20]
 8005c56:	021b      	lsls	r3, r3, #8
 8005c58:	697a      	ldr	r2, [r7, #20]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	697a      	ldr	r2, [r7, #20]
 8005c62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	68fa      	ldr	r2, [r7, #12]
 8005c68:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	693a      	ldr	r2, [r7, #16]
 8005c76:	621a      	str	r2, [r3, #32]
}
 8005c78:	bf00      	nop
 8005c7a:	371c      	adds	r7, #28
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	fffeff8f 	.word	0xfffeff8f
 8005c88:	40010000 	.word	0x40010000
 8005c8c:	40010400 	.word	0x40010400

08005c90 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b087      	sub	sp, #28
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6a1b      	ldr	r3, [r3, #32]
 8005c9e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a1b      	ldr	r3, [r3, #32]
 8005caa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	685b      	ldr	r3, [r3, #4]
 8005cb0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005cb8:	68fa      	ldr	r2, [r7, #12]
 8005cba:	4b1c      	ldr	r3, [pc, #112]	; (8005d2c <TIM_OC6_SetConfig+0x9c>)
 8005cbc:	4013      	ands	r3, r2
 8005cbe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	021b      	lsls	r3, r3, #8
 8005cc6:	68fa      	ldr	r2, [r7, #12]
 8005cc8:	4313      	orrs	r3, r2
 8005cca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cd2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	689b      	ldr	r3, [r3, #8]
 8005cd8:	051b      	lsls	r3, r3, #20
 8005cda:	693a      	ldr	r2, [r7, #16]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	4a13      	ldr	r2, [pc, #76]	; (8005d30 <TIM_OC6_SetConfig+0xa0>)
 8005ce4:	4293      	cmp	r3, r2
 8005ce6:	d003      	beq.n	8005cf0 <TIM_OC6_SetConfig+0x60>
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	4a12      	ldr	r2, [pc, #72]	; (8005d34 <TIM_OC6_SetConfig+0xa4>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d109      	bne.n	8005d04 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005cf0:	697b      	ldr	r3, [r7, #20]
 8005cf2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005cf6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	695b      	ldr	r3, [r3, #20]
 8005cfc:	029b      	lsls	r3, r3, #10
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	4313      	orrs	r3, r2
 8005d02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	697a      	ldr	r2, [r7, #20]
 8005d08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	68fa      	ldr	r2, [r7, #12]
 8005d0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005d10:	683b      	ldr	r3, [r7, #0]
 8005d12:	685a      	ldr	r2, [r3, #4]
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	693a      	ldr	r2, [r7, #16]
 8005d1c:	621a      	str	r2, [r3, #32]
}
 8005d1e:	bf00      	nop
 8005d20:	371c      	adds	r7, #28
 8005d22:	46bd      	mov	sp, r7
 8005d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d28:	4770      	bx	lr
 8005d2a:	bf00      	nop
 8005d2c:	feff8fff 	.word	0xfeff8fff
 8005d30:	40010000 	.word	0x40010000
 8005d34:	40010400 	.word	0x40010400

08005d38 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d38:	b480      	push	{r7}
 8005d3a:	b087      	sub	sp, #28
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	60f8      	str	r0, [r7, #12]
 8005d40:	60b9      	str	r1, [r7, #8]
 8005d42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d44:	68fb      	ldr	r3, [r7, #12]
 8005d46:	6a1b      	ldr	r3, [r3, #32]
 8005d48:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	6a1b      	ldr	r3, [r3, #32]
 8005d4e:	f023 0201 	bic.w	r2, r3, #1
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	699b      	ldr	r3, [r3, #24]
 8005d5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d5c:	693b      	ldr	r3, [r7, #16]
 8005d5e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d62:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	011b      	lsls	r3, r3, #4
 8005d68:	693a      	ldr	r2, [r7, #16]
 8005d6a:	4313      	orrs	r3, r2
 8005d6c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d6e:	697b      	ldr	r3, [r7, #20]
 8005d70:	f023 030a 	bic.w	r3, r3, #10
 8005d74:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d76:	697a      	ldr	r2, [r7, #20]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	4313      	orrs	r3, r2
 8005d7c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	693a      	ldr	r2, [r7, #16]
 8005d82:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	697a      	ldr	r2, [r7, #20]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr

08005d96 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d96:	b480      	push	{r7}
 8005d98:	b087      	sub	sp, #28
 8005d9a:	af00      	add	r7, sp, #0
 8005d9c:	60f8      	str	r0, [r7, #12]
 8005d9e:	60b9      	str	r1, [r7, #8]
 8005da0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	6a1b      	ldr	r3, [r3, #32]
 8005da6:	f023 0210 	bic.w	r2, r3, #16
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	699b      	ldr	r3, [r3, #24]
 8005db2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	6a1b      	ldr	r3, [r3, #32]
 8005db8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005dba:	697b      	ldr	r3, [r7, #20]
 8005dbc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005dc0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	031b      	lsls	r3, r3, #12
 8005dc6:	697a      	ldr	r2, [r7, #20]
 8005dc8:	4313      	orrs	r3, r2
 8005dca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005dcc:	693b      	ldr	r3, [r7, #16]
 8005dce:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005dd2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	011b      	lsls	r3, r3, #4
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	697a      	ldr	r2, [r7, #20]
 8005de2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	621a      	str	r2, [r3, #32]
}
 8005dea:	bf00      	nop
 8005dec:	371c      	adds	r7, #28
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005df6:	b480      	push	{r7}
 8005df8:	b085      	sub	sp, #20
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
 8005dfe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005e0e:	683a      	ldr	r2, [r7, #0]
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	4313      	orrs	r3, r2
 8005e14:	f043 0307 	orr.w	r3, r3, #7
 8005e18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	68fa      	ldr	r2, [r7, #12]
 8005e1e:	609a      	str	r2, [r3, #8]
}
 8005e20:	bf00      	nop
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b087      	sub	sp, #28
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	60f8      	str	r0, [r7, #12]
 8005e34:	60b9      	str	r1, [r7, #8]
 8005e36:	607a      	str	r2, [r7, #4]
 8005e38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e40:	697b      	ldr	r3, [r7, #20]
 8005e42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	021a      	lsls	r2, r3, #8
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	431a      	orrs	r2, r3
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	4313      	orrs	r3, r2
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	697a      	ldr	r2, [r7, #20]
 8005e5e:	609a      	str	r2, [r3, #8]
}
 8005e60:	bf00      	nop
 8005e62:	371c      	adds	r7, #28
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr

08005e6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e6c:	b480      	push	{r7}
 8005e6e:	b087      	sub	sp, #28
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e78:	68bb      	ldr	r3, [r7, #8]
 8005e7a:	f003 031f 	and.w	r3, r3, #31
 8005e7e:	2201      	movs	r2, #1
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	6a1a      	ldr	r2, [r3, #32]
 8005e8a:	697b      	ldr	r3, [r7, #20]
 8005e8c:	43db      	mvns	r3, r3
 8005e8e:	401a      	ands	r2, r3
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	6a1a      	ldr	r2, [r3, #32]
 8005e98:	68bb      	ldr	r3, [r7, #8]
 8005e9a:	f003 031f 	and.w	r3, r3, #31
 8005e9e:	6879      	ldr	r1, [r7, #4]
 8005ea0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea4:	431a      	orrs	r2, r3
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	621a      	str	r2, [r3, #32]
}
 8005eaa:	bf00      	nop
 8005eac:	371c      	adds	r7, #28
 8005eae:	46bd      	mov	sp, r7
 8005eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb4:	4770      	bx	lr
	...

08005eb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b085      	sub	sp, #20
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d101      	bne.n	8005ed0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ecc:	2302      	movs	r3, #2
 8005ece:	e06d      	b.n	8005fac <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2202      	movs	r2, #2
 8005edc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	685b      	ldr	r3, [r3, #4]
 8005ee6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	689b      	ldr	r3, [r3, #8]
 8005eee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	4a30      	ldr	r2, [pc, #192]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005ef6:	4293      	cmp	r3, r2
 8005ef8:	d004      	beq.n	8005f04 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	4a2f      	ldr	r2, [pc, #188]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f00:	4293      	cmp	r3, r2
 8005f02:	d108      	bne.n	8005f16 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8005f0a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005f0c:	683b      	ldr	r3, [r7, #0]
 8005f0e:	685b      	ldr	r3, [r3, #4]
 8005f10:	68fa      	ldr	r2, [r7, #12]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f1c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	68fa      	ldr	r2, [r7, #12]
 8005f24:	4313      	orrs	r3, r2
 8005f26:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	68fa      	ldr	r2, [r7, #12]
 8005f2e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	4a20      	ldr	r2, [pc, #128]	; (8005fb8 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005f36:	4293      	cmp	r3, r2
 8005f38:	d022      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f42:	d01d      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	4a1d      	ldr	r2, [pc, #116]	; (8005fc0 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8005f4a:	4293      	cmp	r3, r2
 8005f4c:	d018      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	4a1c      	ldr	r2, [pc, #112]	; (8005fc4 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8005f54:	4293      	cmp	r3, r2
 8005f56:	d013      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	4a1a      	ldr	r2, [pc, #104]	; (8005fc8 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d00e      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	4a15      	ldr	r2, [pc, #84]	; (8005fbc <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005f68:	4293      	cmp	r3, r2
 8005f6a:	d009      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	4a16      	ldr	r2, [pc, #88]	; (8005fcc <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8005f72:	4293      	cmp	r3, r2
 8005f74:	d004      	beq.n	8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	4a15      	ldr	r2, [pc, #84]	; (8005fd0 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d10c      	bne.n	8005f9a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f86:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f88:	683b      	ldr	r3, [r7, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	68ba      	ldr	r2, [r7, #8]
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005faa:	2300      	movs	r3, #0
}
 8005fac:	4618      	mov	r0, r3
 8005fae:	3714      	adds	r7, #20
 8005fb0:	46bd      	mov	sp, r7
 8005fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb6:	4770      	bx	lr
 8005fb8:	40010000 	.word	0x40010000
 8005fbc:	40010400 	.word	0x40010400
 8005fc0:	40000400 	.word	0x40000400
 8005fc4:	40000800 	.word	0x40000800
 8005fc8:	40000c00 	.word	0x40000c00
 8005fcc:	40014000 	.word	0x40014000
 8005fd0:	40001800 	.word	0x40001800

08005fd4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b083      	sub	sp, #12
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005fdc:	bf00      	nop
 8005fde:	370c      	adds	r7, #12
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe6:	4770      	bx	lr

08005fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005fe8:	b480      	push	{r7}
 8005fea:	b083      	sub	sp, #12
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005ff0:	bf00      	nop
 8005ff2:	370c      	adds	r7, #12
 8005ff4:	46bd      	mov	sp, r7
 8005ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffa:	4770      	bx	lr

08005ffc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005ffc:	b480      	push	{r7}
 8005ffe:	b083      	sub	sp, #12
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006004:	bf00      	nop
 8006006:	370c      	adds	r7, #12
 8006008:	46bd      	mov	sp, r7
 800600a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800600e:	4770      	bx	lr

08006010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b082      	sub	sp, #8
 8006014:	af00      	add	r7, sp, #0
 8006016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d101      	bne.n	8006022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800601e:	2301      	movs	r3, #1
 8006020:	e040      	b.n	80060a4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006026:	2b00      	cmp	r3, #0
 8006028:	d106      	bne.n	8006038 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	2200      	movs	r2, #0
 800602e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f7fb fc2c 	bl	8001890 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2224      	movs	r2, #36	; 0x24
 800603c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681a      	ldr	r2, [r3, #0]
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f022 0201 	bic.w	r2, r2, #1
 800604c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 f82c 	bl	80060ac <UART_SetConfig>
 8006054:	4603      	mov	r3, r0
 8006056:	2b01      	cmp	r3, #1
 8006058:	d101      	bne.n	800605e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e022      	b.n	80060a4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006062:	2b00      	cmp	r3, #0
 8006064:	d002      	beq.n	800606c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006066:	6878      	ldr	r0, [r7, #4]
 8006068:	f000 fa84 	bl	8006574 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	685a      	ldr	r2, [r3, #4]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800607a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	689a      	ldr	r2, [r3, #8]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800608a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	681a      	ldr	r2, [r3, #0]
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f042 0201 	orr.w	r2, r2, #1
 800609a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800609c:	6878      	ldr	r0, [r7, #4]
 800609e:	f000 fb0b 	bl	80066b8 <UART_CheckIdleState>
 80060a2:	4603      	mov	r3, r0
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3708      	adds	r7, #8
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bd80      	pop	{r7, pc}

080060ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b088      	sub	sp, #32
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80060b4:	2300      	movs	r3, #0
 80060b6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	689a      	ldr	r2, [r3, #8]
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	431a      	orrs	r2, r3
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	695b      	ldr	r3, [r3, #20]
 80060c6:	431a      	orrs	r2, r3
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	4ba6      	ldr	r3, [pc, #664]	; (8006370 <UART_SetConfig+0x2c4>)
 80060d8:	4013      	ands	r3, r2
 80060da:	687a      	ldr	r2, [r7, #4]
 80060dc:	6812      	ldr	r2, [r2, #0]
 80060de:	6979      	ldr	r1, [r7, #20]
 80060e0:	430b      	orrs	r3, r1
 80060e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	685b      	ldr	r3, [r3, #4]
 80060ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	430a      	orrs	r2, r1
 80060f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	699b      	ldr	r3, [r3, #24]
 80060fe:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	6a1b      	ldr	r3, [r3, #32]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	4313      	orrs	r3, r2
 8006108:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	697a      	ldr	r2, [r7, #20]
 800611a:	430a      	orrs	r2, r1
 800611c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a94      	ldr	r2, [pc, #592]	; (8006374 <UART_SetConfig+0x2c8>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d120      	bne.n	800616a <UART_SetConfig+0xbe>
 8006128:	4b93      	ldr	r3, [pc, #588]	; (8006378 <UART_SetConfig+0x2cc>)
 800612a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800612e:	f003 0303 	and.w	r3, r3, #3
 8006132:	2b03      	cmp	r3, #3
 8006134:	d816      	bhi.n	8006164 <UART_SetConfig+0xb8>
 8006136:	a201      	add	r2, pc, #4	; (adr r2, 800613c <UART_SetConfig+0x90>)
 8006138:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800613c:	0800614d 	.word	0x0800614d
 8006140:	08006159 	.word	0x08006159
 8006144:	08006153 	.word	0x08006153
 8006148:	0800615f 	.word	0x0800615f
 800614c:	2301      	movs	r3, #1
 800614e:	77fb      	strb	r3, [r7, #31]
 8006150:	e150      	b.n	80063f4 <UART_SetConfig+0x348>
 8006152:	2302      	movs	r3, #2
 8006154:	77fb      	strb	r3, [r7, #31]
 8006156:	e14d      	b.n	80063f4 <UART_SetConfig+0x348>
 8006158:	2304      	movs	r3, #4
 800615a:	77fb      	strb	r3, [r7, #31]
 800615c:	e14a      	b.n	80063f4 <UART_SetConfig+0x348>
 800615e:	2308      	movs	r3, #8
 8006160:	77fb      	strb	r3, [r7, #31]
 8006162:	e147      	b.n	80063f4 <UART_SetConfig+0x348>
 8006164:	2310      	movs	r3, #16
 8006166:	77fb      	strb	r3, [r7, #31]
 8006168:	e144      	b.n	80063f4 <UART_SetConfig+0x348>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	4a83      	ldr	r2, [pc, #524]	; (800637c <UART_SetConfig+0x2d0>)
 8006170:	4293      	cmp	r3, r2
 8006172:	d132      	bne.n	80061da <UART_SetConfig+0x12e>
 8006174:	4b80      	ldr	r3, [pc, #512]	; (8006378 <UART_SetConfig+0x2cc>)
 8006176:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800617a:	f003 030c 	and.w	r3, r3, #12
 800617e:	2b0c      	cmp	r3, #12
 8006180:	d828      	bhi.n	80061d4 <UART_SetConfig+0x128>
 8006182:	a201      	add	r2, pc, #4	; (adr r2, 8006188 <UART_SetConfig+0xdc>)
 8006184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006188:	080061bd 	.word	0x080061bd
 800618c:	080061d5 	.word	0x080061d5
 8006190:	080061d5 	.word	0x080061d5
 8006194:	080061d5 	.word	0x080061d5
 8006198:	080061c9 	.word	0x080061c9
 800619c:	080061d5 	.word	0x080061d5
 80061a0:	080061d5 	.word	0x080061d5
 80061a4:	080061d5 	.word	0x080061d5
 80061a8:	080061c3 	.word	0x080061c3
 80061ac:	080061d5 	.word	0x080061d5
 80061b0:	080061d5 	.word	0x080061d5
 80061b4:	080061d5 	.word	0x080061d5
 80061b8:	080061cf 	.word	0x080061cf
 80061bc:	2300      	movs	r3, #0
 80061be:	77fb      	strb	r3, [r7, #31]
 80061c0:	e118      	b.n	80063f4 <UART_SetConfig+0x348>
 80061c2:	2302      	movs	r3, #2
 80061c4:	77fb      	strb	r3, [r7, #31]
 80061c6:	e115      	b.n	80063f4 <UART_SetConfig+0x348>
 80061c8:	2304      	movs	r3, #4
 80061ca:	77fb      	strb	r3, [r7, #31]
 80061cc:	e112      	b.n	80063f4 <UART_SetConfig+0x348>
 80061ce:	2308      	movs	r3, #8
 80061d0:	77fb      	strb	r3, [r7, #31]
 80061d2:	e10f      	b.n	80063f4 <UART_SetConfig+0x348>
 80061d4:	2310      	movs	r3, #16
 80061d6:	77fb      	strb	r3, [r7, #31]
 80061d8:	e10c      	b.n	80063f4 <UART_SetConfig+0x348>
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	4a68      	ldr	r2, [pc, #416]	; (8006380 <UART_SetConfig+0x2d4>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d120      	bne.n	8006226 <UART_SetConfig+0x17a>
 80061e4:	4b64      	ldr	r3, [pc, #400]	; (8006378 <UART_SetConfig+0x2cc>)
 80061e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80061ea:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80061ee:	2b30      	cmp	r3, #48	; 0x30
 80061f0:	d013      	beq.n	800621a <UART_SetConfig+0x16e>
 80061f2:	2b30      	cmp	r3, #48	; 0x30
 80061f4:	d814      	bhi.n	8006220 <UART_SetConfig+0x174>
 80061f6:	2b20      	cmp	r3, #32
 80061f8:	d009      	beq.n	800620e <UART_SetConfig+0x162>
 80061fa:	2b20      	cmp	r3, #32
 80061fc:	d810      	bhi.n	8006220 <UART_SetConfig+0x174>
 80061fe:	2b00      	cmp	r3, #0
 8006200:	d002      	beq.n	8006208 <UART_SetConfig+0x15c>
 8006202:	2b10      	cmp	r3, #16
 8006204:	d006      	beq.n	8006214 <UART_SetConfig+0x168>
 8006206:	e00b      	b.n	8006220 <UART_SetConfig+0x174>
 8006208:	2300      	movs	r3, #0
 800620a:	77fb      	strb	r3, [r7, #31]
 800620c:	e0f2      	b.n	80063f4 <UART_SetConfig+0x348>
 800620e:	2302      	movs	r3, #2
 8006210:	77fb      	strb	r3, [r7, #31]
 8006212:	e0ef      	b.n	80063f4 <UART_SetConfig+0x348>
 8006214:	2304      	movs	r3, #4
 8006216:	77fb      	strb	r3, [r7, #31]
 8006218:	e0ec      	b.n	80063f4 <UART_SetConfig+0x348>
 800621a:	2308      	movs	r3, #8
 800621c:	77fb      	strb	r3, [r7, #31]
 800621e:	e0e9      	b.n	80063f4 <UART_SetConfig+0x348>
 8006220:	2310      	movs	r3, #16
 8006222:	77fb      	strb	r3, [r7, #31]
 8006224:	e0e6      	b.n	80063f4 <UART_SetConfig+0x348>
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	4a56      	ldr	r2, [pc, #344]	; (8006384 <UART_SetConfig+0x2d8>)
 800622c:	4293      	cmp	r3, r2
 800622e:	d120      	bne.n	8006272 <UART_SetConfig+0x1c6>
 8006230:	4b51      	ldr	r3, [pc, #324]	; (8006378 <UART_SetConfig+0x2cc>)
 8006232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006236:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800623a:	2bc0      	cmp	r3, #192	; 0xc0
 800623c:	d013      	beq.n	8006266 <UART_SetConfig+0x1ba>
 800623e:	2bc0      	cmp	r3, #192	; 0xc0
 8006240:	d814      	bhi.n	800626c <UART_SetConfig+0x1c0>
 8006242:	2b80      	cmp	r3, #128	; 0x80
 8006244:	d009      	beq.n	800625a <UART_SetConfig+0x1ae>
 8006246:	2b80      	cmp	r3, #128	; 0x80
 8006248:	d810      	bhi.n	800626c <UART_SetConfig+0x1c0>
 800624a:	2b00      	cmp	r3, #0
 800624c:	d002      	beq.n	8006254 <UART_SetConfig+0x1a8>
 800624e:	2b40      	cmp	r3, #64	; 0x40
 8006250:	d006      	beq.n	8006260 <UART_SetConfig+0x1b4>
 8006252:	e00b      	b.n	800626c <UART_SetConfig+0x1c0>
 8006254:	2300      	movs	r3, #0
 8006256:	77fb      	strb	r3, [r7, #31]
 8006258:	e0cc      	b.n	80063f4 <UART_SetConfig+0x348>
 800625a:	2302      	movs	r3, #2
 800625c:	77fb      	strb	r3, [r7, #31]
 800625e:	e0c9      	b.n	80063f4 <UART_SetConfig+0x348>
 8006260:	2304      	movs	r3, #4
 8006262:	77fb      	strb	r3, [r7, #31]
 8006264:	e0c6      	b.n	80063f4 <UART_SetConfig+0x348>
 8006266:	2308      	movs	r3, #8
 8006268:	77fb      	strb	r3, [r7, #31]
 800626a:	e0c3      	b.n	80063f4 <UART_SetConfig+0x348>
 800626c:	2310      	movs	r3, #16
 800626e:	77fb      	strb	r3, [r7, #31]
 8006270:	e0c0      	b.n	80063f4 <UART_SetConfig+0x348>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	4a44      	ldr	r2, [pc, #272]	; (8006388 <UART_SetConfig+0x2dc>)
 8006278:	4293      	cmp	r3, r2
 800627a:	d125      	bne.n	80062c8 <UART_SetConfig+0x21c>
 800627c:	4b3e      	ldr	r3, [pc, #248]	; (8006378 <UART_SetConfig+0x2cc>)
 800627e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006282:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006286:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800628a:	d017      	beq.n	80062bc <UART_SetConfig+0x210>
 800628c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006290:	d817      	bhi.n	80062c2 <UART_SetConfig+0x216>
 8006292:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006296:	d00b      	beq.n	80062b0 <UART_SetConfig+0x204>
 8006298:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800629c:	d811      	bhi.n	80062c2 <UART_SetConfig+0x216>
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d003      	beq.n	80062aa <UART_SetConfig+0x1fe>
 80062a2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80062a6:	d006      	beq.n	80062b6 <UART_SetConfig+0x20a>
 80062a8:	e00b      	b.n	80062c2 <UART_SetConfig+0x216>
 80062aa:	2300      	movs	r3, #0
 80062ac:	77fb      	strb	r3, [r7, #31]
 80062ae:	e0a1      	b.n	80063f4 <UART_SetConfig+0x348>
 80062b0:	2302      	movs	r3, #2
 80062b2:	77fb      	strb	r3, [r7, #31]
 80062b4:	e09e      	b.n	80063f4 <UART_SetConfig+0x348>
 80062b6:	2304      	movs	r3, #4
 80062b8:	77fb      	strb	r3, [r7, #31]
 80062ba:	e09b      	b.n	80063f4 <UART_SetConfig+0x348>
 80062bc:	2308      	movs	r3, #8
 80062be:	77fb      	strb	r3, [r7, #31]
 80062c0:	e098      	b.n	80063f4 <UART_SetConfig+0x348>
 80062c2:	2310      	movs	r3, #16
 80062c4:	77fb      	strb	r3, [r7, #31]
 80062c6:	e095      	b.n	80063f4 <UART_SetConfig+0x348>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a2f      	ldr	r2, [pc, #188]	; (800638c <UART_SetConfig+0x2e0>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d125      	bne.n	800631e <UART_SetConfig+0x272>
 80062d2:	4b29      	ldr	r3, [pc, #164]	; (8006378 <UART_SetConfig+0x2cc>)
 80062d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80062d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80062dc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e0:	d017      	beq.n	8006312 <UART_SetConfig+0x266>
 80062e2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80062e6:	d817      	bhi.n	8006318 <UART_SetConfig+0x26c>
 80062e8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ec:	d00b      	beq.n	8006306 <UART_SetConfig+0x25a>
 80062ee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062f2:	d811      	bhi.n	8006318 <UART_SetConfig+0x26c>
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <UART_SetConfig+0x254>
 80062f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80062fc:	d006      	beq.n	800630c <UART_SetConfig+0x260>
 80062fe:	e00b      	b.n	8006318 <UART_SetConfig+0x26c>
 8006300:	2301      	movs	r3, #1
 8006302:	77fb      	strb	r3, [r7, #31]
 8006304:	e076      	b.n	80063f4 <UART_SetConfig+0x348>
 8006306:	2302      	movs	r3, #2
 8006308:	77fb      	strb	r3, [r7, #31]
 800630a:	e073      	b.n	80063f4 <UART_SetConfig+0x348>
 800630c:	2304      	movs	r3, #4
 800630e:	77fb      	strb	r3, [r7, #31]
 8006310:	e070      	b.n	80063f4 <UART_SetConfig+0x348>
 8006312:	2308      	movs	r3, #8
 8006314:	77fb      	strb	r3, [r7, #31]
 8006316:	e06d      	b.n	80063f4 <UART_SetConfig+0x348>
 8006318:	2310      	movs	r3, #16
 800631a:	77fb      	strb	r3, [r7, #31]
 800631c:	e06a      	b.n	80063f4 <UART_SetConfig+0x348>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1b      	ldr	r2, [pc, #108]	; (8006390 <UART_SetConfig+0x2e4>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d138      	bne.n	800639a <UART_SetConfig+0x2ee>
 8006328:	4b13      	ldr	r3, [pc, #76]	; (8006378 <UART_SetConfig+0x2cc>)
 800632a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800632e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8006332:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8006336:	d017      	beq.n	8006368 <UART_SetConfig+0x2bc>
 8006338:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800633c:	d82a      	bhi.n	8006394 <UART_SetConfig+0x2e8>
 800633e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006342:	d00b      	beq.n	800635c <UART_SetConfig+0x2b0>
 8006344:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006348:	d824      	bhi.n	8006394 <UART_SetConfig+0x2e8>
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <UART_SetConfig+0x2aa>
 800634e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006352:	d006      	beq.n	8006362 <UART_SetConfig+0x2b6>
 8006354:	e01e      	b.n	8006394 <UART_SetConfig+0x2e8>
 8006356:	2300      	movs	r3, #0
 8006358:	77fb      	strb	r3, [r7, #31]
 800635a:	e04b      	b.n	80063f4 <UART_SetConfig+0x348>
 800635c:	2302      	movs	r3, #2
 800635e:	77fb      	strb	r3, [r7, #31]
 8006360:	e048      	b.n	80063f4 <UART_SetConfig+0x348>
 8006362:	2304      	movs	r3, #4
 8006364:	77fb      	strb	r3, [r7, #31]
 8006366:	e045      	b.n	80063f4 <UART_SetConfig+0x348>
 8006368:	2308      	movs	r3, #8
 800636a:	77fb      	strb	r3, [r7, #31]
 800636c:	e042      	b.n	80063f4 <UART_SetConfig+0x348>
 800636e:	bf00      	nop
 8006370:	efff69f3 	.word	0xefff69f3
 8006374:	40011000 	.word	0x40011000
 8006378:	40023800 	.word	0x40023800
 800637c:	40004400 	.word	0x40004400
 8006380:	40004800 	.word	0x40004800
 8006384:	40004c00 	.word	0x40004c00
 8006388:	40005000 	.word	0x40005000
 800638c:	40011400 	.word	0x40011400
 8006390:	40007800 	.word	0x40007800
 8006394:	2310      	movs	r3, #16
 8006396:	77fb      	strb	r3, [r7, #31]
 8006398:	e02c      	b.n	80063f4 <UART_SetConfig+0x348>
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a72      	ldr	r2, [pc, #456]	; (8006568 <UART_SetConfig+0x4bc>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d125      	bne.n	80063f0 <UART_SetConfig+0x344>
 80063a4:	4b71      	ldr	r3, [pc, #452]	; (800656c <UART_SetConfig+0x4c0>)
 80063a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80063aa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80063ae:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063b2:	d017      	beq.n	80063e4 <UART_SetConfig+0x338>
 80063b4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80063b8:	d817      	bhi.n	80063ea <UART_SetConfig+0x33e>
 80063ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063be:	d00b      	beq.n	80063d8 <UART_SetConfig+0x32c>
 80063c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063c4:	d811      	bhi.n	80063ea <UART_SetConfig+0x33e>
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d003      	beq.n	80063d2 <UART_SetConfig+0x326>
 80063ca:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80063ce:	d006      	beq.n	80063de <UART_SetConfig+0x332>
 80063d0:	e00b      	b.n	80063ea <UART_SetConfig+0x33e>
 80063d2:	2300      	movs	r3, #0
 80063d4:	77fb      	strb	r3, [r7, #31]
 80063d6:	e00d      	b.n	80063f4 <UART_SetConfig+0x348>
 80063d8:	2302      	movs	r3, #2
 80063da:	77fb      	strb	r3, [r7, #31]
 80063dc:	e00a      	b.n	80063f4 <UART_SetConfig+0x348>
 80063de:	2304      	movs	r3, #4
 80063e0:	77fb      	strb	r3, [r7, #31]
 80063e2:	e007      	b.n	80063f4 <UART_SetConfig+0x348>
 80063e4:	2308      	movs	r3, #8
 80063e6:	77fb      	strb	r3, [r7, #31]
 80063e8:	e004      	b.n	80063f4 <UART_SetConfig+0x348>
 80063ea:	2310      	movs	r3, #16
 80063ec:	77fb      	strb	r3, [r7, #31]
 80063ee:	e001      	b.n	80063f4 <UART_SetConfig+0x348>
 80063f0:	2310      	movs	r3, #16
 80063f2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	69db      	ldr	r3, [r3, #28]
 80063f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063fc:	d15b      	bne.n	80064b6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80063fe:	7ffb      	ldrb	r3, [r7, #31]
 8006400:	2b08      	cmp	r3, #8
 8006402:	d828      	bhi.n	8006456 <UART_SetConfig+0x3aa>
 8006404:	a201      	add	r2, pc, #4	; (adr r2, 800640c <UART_SetConfig+0x360>)
 8006406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800640a:	bf00      	nop
 800640c:	08006431 	.word	0x08006431
 8006410:	08006439 	.word	0x08006439
 8006414:	08006441 	.word	0x08006441
 8006418:	08006457 	.word	0x08006457
 800641c:	08006447 	.word	0x08006447
 8006420:	08006457 	.word	0x08006457
 8006424:	08006457 	.word	0x08006457
 8006428:	08006457 	.word	0x08006457
 800642c:	0800644f 	.word	0x0800644f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006430:	f7fd fc18 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 8006434:	61b8      	str	r0, [r7, #24]
        break;
 8006436:	e013      	b.n	8006460 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006438:	f7fd fc28 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 800643c:	61b8      	str	r0, [r7, #24]
        break;
 800643e:	e00f      	b.n	8006460 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006440:	4b4b      	ldr	r3, [pc, #300]	; (8006570 <UART_SetConfig+0x4c4>)
 8006442:	61bb      	str	r3, [r7, #24]
        break;
 8006444:	e00c      	b.n	8006460 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006446:	f7fd fafb 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 800644a:	61b8      	str	r0, [r7, #24]
        break;
 800644c:	e008      	b.n	8006460 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800644e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006452:	61bb      	str	r3, [r7, #24]
        break;
 8006454:	e004      	b.n	8006460 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800645a:	2301      	movs	r3, #1
 800645c:	77bb      	strb	r3, [r7, #30]
        break;
 800645e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006460:	69bb      	ldr	r3, [r7, #24]
 8006462:	2b00      	cmp	r3, #0
 8006464:	d074      	beq.n	8006550 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006466:	69bb      	ldr	r3, [r7, #24]
 8006468:	005a      	lsls	r2, r3, #1
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	685b      	ldr	r3, [r3, #4]
 800646e:	085b      	lsrs	r3, r3, #1
 8006470:	441a      	add	r2, r3
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	685b      	ldr	r3, [r3, #4]
 8006476:	fbb2 f3f3 	udiv	r3, r2, r3
 800647a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	2b0f      	cmp	r3, #15
 8006480:	d916      	bls.n	80064b0 <UART_SetConfig+0x404>
 8006482:	693b      	ldr	r3, [r7, #16]
 8006484:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006488:	d212      	bcs.n	80064b0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	b29b      	uxth	r3, r3
 800648e:	f023 030f 	bic.w	r3, r3, #15
 8006492:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006494:	693b      	ldr	r3, [r7, #16]
 8006496:	085b      	lsrs	r3, r3, #1
 8006498:	b29b      	uxth	r3, r3
 800649a:	f003 0307 	and.w	r3, r3, #7
 800649e:	b29a      	uxth	r2, r3
 80064a0:	89fb      	ldrh	r3, [r7, #14]
 80064a2:	4313      	orrs	r3, r2
 80064a4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	89fa      	ldrh	r2, [r7, #14]
 80064ac:	60da      	str	r2, [r3, #12]
 80064ae:	e04f      	b.n	8006550 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80064b0:	2301      	movs	r3, #1
 80064b2:	77bb      	strb	r3, [r7, #30]
 80064b4:	e04c      	b.n	8006550 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80064b6:	7ffb      	ldrb	r3, [r7, #31]
 80064b8:	2b08      	cmp	r3, #8
 80064ba:	d828      	bhi.n	800650e <UART_SetConfig+0x462>
 80064bc:	a201      	add	r2, pc, #4	; (adr r2, 80064c4 <UART_SetConfig+0x418>)
 80064be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c2:	bf00      	nop
 80064c4:	080064e9 	.word	0x080064e9
 80064c8:	080064f1 	.word	0x080064f1
 80064cc:	080064f9 	.word	0x080064f9
 80064d0:	0800650f 	.word	0x0800650f
 80064d4:	080064ff 	.word	0x080064ff
 80064d8:	0800650f 	.word	0x0800650f
 80064dc:	0800650f 	.word	0x0800650f
 80064e0:	0800650f 	.word	0x0800650f
 80064e4:	08006507 	.word	0x08006507
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80064e8:	f7fd fbbc 	bl	8003c64 <HAL_RCC_GetPCLK1Freq>
 80064ec:	61b8      	str	r0, [r7, #24]
        break;
 80064ee:	e013      	b.n	8006518 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80064f0:	f7fd fbcc 	bl	8003c8c <HAL_RCC_GetPCLK2Freq>
 80064f4:	61b8      	str	r0, [r7, #24]
        break;
 80064f6:	e00f      	b.n	8006518 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80064f8:	4b1d      	ldr	r3, [pc, #116]	; (8006570 <UART_SetConfig+0x4c4>)
 80064fa:	61bb      	str	r3, [r7, #24]
        break;
 80064fc:	e00c      	b.n	8006518 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80064fe:	f7fd fa9f 	bl	8003a40 <HAL_RCC_GetSysClockFreq>
 8006502:	61b8      	str	r0, [r7, #24]
        break;
 8006504:	e008      	b.n	8006518 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006506:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800650a:	61bb      	str	r3, [r7, #24]
        break;
 800650c:	e004      	b.n	8006518 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800650e:	2300      	movs	r3, #0
 8006510:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8006512:	2301      	movs	r3, #1
 8006514:	77bb      	strb	r3, [r7, #30]
        break;
 8006516:	bf00      	nop
    }

    if (pclk != 0U)
 8006518:	69bb      	ldr	r3, [r7, #24]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d018      	beq.n	8006550 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	085a      	lsrs	r2, r3, #1
 8006524:	69bb      	ldr	r3, [r7, #24]
 8006526:	441a      	add	r2, r3
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	fbb2 f3f3 	udiv	r3, r2, r3
 8006530:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	2b0f      	cmp	r3, #15
 8006536:	d909      	bls.n	800654c <UART_SetConfig+0x4a0>
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800653e:	d205      	bcs.n	800654c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	b29a      	uxth	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	60da      	str	r2, [r3, #12]
 800654a:	e001      	b.n	8006550 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	2200      	movs	r2, #0
 800655a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800655c:	7fbb      	ldrb	r3, [r7, #30]
}
 800655e:	4618      	mov	r0, r3
 8006560:	3720      	adds	r7, #32
 8006562:	46bd      	mov	sp, r7
 8006564:	bd80      	pop	{r7, pc}
 8006566:	bf00      	nop
 8006568:	40007c00 	.word	0x40007c00
 800656c:	40023800 	.word	0x40023800
 8006570:	00f42400 	.word	0x00f42400

08006574 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006574:	b480      	push	{r7}
 8006576:	b083      	sub	sp, #12
 8006578:	af00      	add	r7, sp, #0
 800657a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006580:	f003 0301 	and.w	r3, r3, #1
 8006584:	2b00      	cmp	r3, #0
 8006586:	d00a      	beq.n	800659e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	430a      	orrs	r2, r1
 800659c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065a2:	f003 0302 	and.w	r3, r3, #2
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d00a      	beq.n	80065c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d00a      	beq.n	80065e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	685b      	ldr	r3, [r3, #4]
 80065d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	430a      	orrs	r2, r1
 80065e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065e6:	f003 0308 	and.w	r3, r3, #8
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d00a      	beq.n	8006604 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	685b      	ldr	r3, [r3, #4]
 80065f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	430a      	orrs	r2, r1
 8006602:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006608:	f003 0310 	and.w	r3, r3, #16
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00a      	beq.n	8006626 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	681b      	ldr	r3, [r3, #0]
 8006614:	689b      	ldr	r3, [r3, #8]
 8006616:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	430a      	orrs	r2, r1
 8006624:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800662a:	f003 0320 	and.w	r3, r3, #32
 800662e:	2b00      	cmp	r3, #0
 8006630:	d00a      	beq.n	8006648 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	689b      	ldr	r3, [r3, #8]
 8006638:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	430a      	orrs	r2, r1
 8006646:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800664c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006650:	2b00      	cmp	r3, #0
 8006652:	d01a      	beq.n	800668a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	685b      	ldr	r3, [r3, #4]
 800665a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	430a      	orrs	r2, r1
 8006668:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800666e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006672:	d10a      	bne.n	800668a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	430a      	orrs	r2, r1
 8006688:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006692:	2b00      	cmp	r3, #0
 8006694:	d00a      	beq.n	80066ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	430a      	orrs	r2, r1
 80066aa:	605a      	str	r2, [r3, #4]
  }
}
 80066ac:	bf00      	nop
 80066ae:	370c      	adds	r7, #12
 80066b0:	46bd      	mov	sp, r7
 80066b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b6:	4770      	bx	lr

080066b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80066b8:	b580      	push	{r7, lr}
 80066ba:	b086      	sub	sp, #24
 80066bc:	af02      	add	r7, sp, #8
 80066be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80066c8:	f7fb fe00 	bl	80022cc <HAL_GetTick>
 80066cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	f003 0308 	and.w	r3, r3, #8
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d10e      	bne.n	80066fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80066dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80066e0:	9300      	str	r3, [sp, #0]
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	f000 f831 	bl	8006752 <UART_WaitOnFlagUntilTimeout>
 80066f0:	4603      	mov	r3, r0
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d001      	beq.n	80066fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80066f6:	2303      	movs	r3, #3
 80066f8:	e027      	b.n	800674a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f003 0304 	and.w	r3, r3, #4
 8006704:	2b04      	cmp	r3, #4
 8006706:	d10e      	bne.n	8006726 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006708:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800670c:	9300      	str	r3, [sp, #0]
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	2200      	movs	r2, #0
 8006712:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006716:	6878      	ldr	r0, [r7, #4]
 8006718:	f000 f81b 	bl	8006752 <UART_WaitOnFlagUntilTimeout>
 800671c:	4603      	mov	r3, r0
 800671e:	2b00      	cmp	r3, #0
 8006720:	d001      	beq.n	8006726 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006722:	2303      	movs	r3, #3
 8006724:	e011      	b.n	800674a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2220      	movs	r2, #32
 800672a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	2220      	movs	r2, #32
 8006730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	2200      	movs	r2, #0
 8006738:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2200      	movs	r2, #0
 800673e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	2200      	movs	r2, #0
 8006744:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b09c      	sub	sp, #112	; 0x70
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	603b      	str	r3, [r7, #0]
 800675e:	4613      	mov	r3, r2
 8006760:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006762:	e0a7      	b.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006764:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006766:	f1b3 3fff 	cmp.w	r3, #4294967295
 800676a:	f000 80a3 	beq.w	80068b4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800676e:	f7fb fdad 	bl	80022cc <HAL_GetTick>
 8006772:	4602      	mov	r2, r0
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	1ad3      	subs	r3, r2, r3
 8006778:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800677a:	429a      	cmp	r2, r3
 800677c:	d302      	bcc.n	8006784 <UART_WaitOnFlagUntilTimeout+0x32>
 800677e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006780:	2b00      	cmp	r3, #0
 8006782:	d13f      	bne.n	8006804 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800678a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800678c:	e853 3f00 	ldrex	r3, [r3]
 8006790:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006798:	667b      	str	r3, [r7, #100]	; 0x64
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	461a      	mov	r2, r3
 80067a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80067a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80067a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80067a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80067aa:	e841 2300 	strex	r3, r2, [r1]
 80067ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80067b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d1e6      	bne.n	8006784 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	3308      	adds	r3, #8
 80067bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80067be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80067c0:	e853 3f00 	ldrex	r3, [r3]
 80067c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80067c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80067c8:	f023 0301 	bic.w	r3, r3, #1
 80067cc:	663b      	str	r3, [r7, #96]	; 0x60
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3308      	adds	r3, #8
 80067d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80067d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80067d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80067da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80067dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067de:	e841 2300 	strex	r3, r2, [r1]
 80067e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80067e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d1e5      	bne.n	80067b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	2220      	movs	r2, #32
 80067ee:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2220      	movs	r2, #32
 80067f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	2200      	movs	r2, #0
 80067fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8006800:	2303      	movs	r3, #3
 8006802:	e068      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	681b      	ldr	r3, [r3, #0]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f003 0304 	and.w	r3, r3, #4
 800680e:	2b00      	cmp	r3, #0
 8006810:	d050      	beq.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	69db      	ldr	r3, [r3, #28]
 8006818:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800681c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006820:	d148      	bne.n	80068b4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800682a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006832:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006834:	e853 3f00 	ldrex	r3, [r3]
 8006838:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800683a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006840:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	461a      	mov	r2, r3
 8006848:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800684a:	637b      	str	r3, [r7, #52]	; 0x34
 800684c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800684e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006852:	e841 2300 	strex	r3, r2, [r1]
 8006856:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800685a:	2b00      	cmp	r3, #0
 800685c:	d1e6      	bne.n	800682c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	3308      	adds	r3, #8
 8006864:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	e853 3f00 	ldrex	r3, [r3]
 800686c:	613b      	str	r3, [r7, #16]
   return(result);
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f023 0301 	bic.w	r3, r3, #1
 8006874:	66bb      	str	r3, [r7, #104]	; 0x68
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	3308      	adds	r3, #8
 800687c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800687e:	623a      	str	r2, [r7, #32]
 8006880:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006882:	69f9      	ldr	r1, [r7, #28]
 8006884:	6a3a      	ldr	r2, [r7, #32]
 8006886:	e841 2300 	strex	r3, r2, [r1]
 800688a:	61bb      	str	r3, [r7, #24]
   return(result);
 800688c:	69bb      	ldr	r3, [r7, #24]
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1e5      	bne.n	800685e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	2220      	movs	r2, #32
 8006896:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	2220      	movs	r2, #32
 800689c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	2220      	movs	r2, #32
 80068a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	2200      	movs	r2, #0
 80068ac:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80068b0:	2303      	movs	r3, #3
 80068b2:	e010      	b.n	80068d6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	69da      	ldr	r2, [r3, #28]
 80068ba:	68bb      	ldr	r3, [r7, #8]
 80068bc:	4013      	ands	r3, r2
 80068be:	68ba      	ldr	r2, [r7, #8]
 80068c0:	429a      	cmp	r2, r3
 80068c2:	bf0c      	ite	eq
 80068c4:	2301      	moveq	r3, #1
 80068c6:	2300      	movne	r3, #0
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	461a      	mov	r2, r3
 80068cc:	79fb      	ldrb	r3, [r7, #7]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	f43f af48 	beq.w	8006764 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80068d4:	2300      	movs	r3, #0
}
 80068d6:	4618      	mov	r0, r3
 80068d8:	3770      	adds	r7, #112	; 0x70
 80068da:	46bd      	mov	sp, r7
 80068dc:	bd80      	pop	{r7, pc}
	...

080068e0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80068e0:	b084      	sub	sp, #16
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b084      	sub	sp, #16
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	6078      	str	r0, [r7, #4]
 80068ea:	f107 001c 	add.w	r0, r7, #28
 80068ee:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80068f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068f4:	2b01      	cmp	r3, #1
 80068f6:	d120      	bne.n	800693a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	68da      	ldr	r2, [r3, #12]
 8006908:	4b20      	ldr	r3, [pc, #128]	; (800698c <USB_CoreInit+0xac>)
 800690a:	4013      	ands	r3, r2
 800690c:	687a      	ldr	r2, [r7, #4]
 800690e:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	68db      	ldr	r3, [r3, #12]
 8006914:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800691c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800691e:	2b01      	cmp	r3, #1
 8006920:	d105      	bne.n	800692e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68db      	ldr	r3, [r3, #12]
 8006926:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800692e:	6878      	ldr	r0, [r7, #4]
 8006930:	f000 fa96 	bl	8006e60 <USB_CoreReset>
 8006934:	4603      	mov	r3, r0
 8006936:	73fb      	strb	r3, [r7, #15]
 8006938:	e010      	b.n	800695c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	68db      	ldr	r3, [r3, #12]
 800693e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006946:	6878      	ldr	r0, [r7, #4]
 8006948:	f000 fa8a 	bl	8006e60 <USB_CoreReset>
 800694c:	4603      	mov	r3, r0
 800694e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006954:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	2b01      	cmp	r3, #1
 8006960:	d10b      	bne.n	800697a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	689b      	ldr	r3, [r3, #8]
 8006966:	f043 0206 	orr.w	r2, r3, #6
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	689b      	ldr	r3, [r3, #8]
 8006972:	f043 0220 	orr.w	r2, r3, #32
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800697a:	7bfb      	ldrb	r3, [r7, #15]
}
 800697c:	4618      	mov	r0, r3
 800697e:	3710      	adds	r7, #16
 8006980:	46bd      	mov	sp, r7
 8006982:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006986:	b004      	add	sp, #16
 8006988:	4770      	bx	lr
 800698a:	bf00      	nop
 800698c:	ffbdffbf 	.word	0xffbdffbf

08006990 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006990:	b480      	push	{r7}
 8006992:	b083      	sub	sp, #12
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	689b      	ldr	r3, [r3, #8]
 800699c:	f023 0201 	bic.w	r2, r3, #1
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80069a4:	2300      	movs	r3, #0
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	370c      	adds	r7, #12
 80069aa:	46bd      	mov	sp, r7
 80069ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069b0:	4770      	bx	lr

080069b2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80069b2:	b580      	push	{r7, lr}
 80069b4:	b084      	sub	sp, #16
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	6078      	str	r0, [r7, #4]
 80069ba:	460b      	mov	r3, r1
 80069bc:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80069be:	2300      	movs	r3, #0
 80069c0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	68db      	ldr	r3, [r3, #12]
 80069c6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80069ce:	78fb      	ldrb	r3, [r7, #3]
 80069d0:	2b01      	cmp	r3, #1
 80069d2:	d115      	bne.n	8006a00 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	68db      	ldr	r3, [r3, #12]
 80069d8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80069e0:	2001      	movs	r0, #1
 80069e2:	f7fb fc7f 	bl	80022e4 <HAL_Delay>
      ms++;
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	3301      	adds	r3, #1
 80069ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f000 fa29 	bl	8006e44 <USB_GetMode>
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b01      	cmp	r3, #1
 80069f6:	d01e      	beq.n	8006a36 <USB_SetCurrentMode+0x84>
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b31      	cmp	r3, #49	; 0x31
 80069fc:	d9f0      	bls.n	80069e0 <USB_SetCurrentMode+0x2e>
 80069fe:	e01a      	b.n	8006a36 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006a00:	78fb      	ldrb	r3, [r7, #3]
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d115      	bne.n	8006a32 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006a12:	2001      	movs	r0, #1
 8006a14:	f7fb fc66 	bl	80022e4 <HAL_Delay>
      ms++;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	3301      	adds	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa10 	bl	8006e44 <USB_GetMode>
 8006a24:	4603      	mov	r3, r0
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d005      	beq.n	8006a36 <USB_SetCurrentMode+0x84>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	2b31      	cmp	r3, #49	; 0x31
 8006a2e:	d9f0      	bls.n	8006a12 <USB_SetCurrentMode+0x60>
 8006a30:	e001      	b.n	8006a36 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006a32:	2301      	movs	r3, #1
 8006a34:	e005      	b.n	8006a42 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	2b32      	cmp	r3, #50	; 0x32
 8006a3a:	d101      	bne.n	8006a40 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006a3c:	2301      	movs	r3, #1
 8006a3e:	e000      	b.n	8006a42 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006a40:	2300      	movs	r3, #0
}
 8006a42:	4618      	mov	r0, r3
 8006a44:	3710      	adds	r7, #16
 8006a46:	46bd      	mov	sp, r7
 8006a48:	bd80      	pop	{r7, pc}
	...

08006a4c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006a4c:	b084      	sub	sp, #16
 8006a4e:	b580      	push	{r7, lr}
 8006a50:	b086      	sub	sp, #24
 8006a52:	af00      	add	r7, sp, #0
 8006a54:	6078      	str	r0, [r7, #4]
 8006a56:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006a5a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8006a66:	2300      	movs	r3, #0
 8006a68:	613b      	str	r3, [r7, #16]
 8006a6a:	e009      	b.n	8006a80 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	3340      	adds	r3, #64	; 0x40
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	2200      	movs	r2, #0
 8006a78:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8006a7a:	693b      	ldr	r3, [r7, #16]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	613b      	str	r3, [r7, #16]
 8006a80:	693b      	ldr	r3, [r7, #16]
 8006a82:	2b0e      	cmp	r3, #14
 8006a84:	d9f2      	bls.n	8006a6c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8006a86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d11c      	bne.n	8006ac6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	68fa      	ldr	r2, [r7, #12]
 8006a96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006a9a:	f043 0302 	orr.w	r3, r3, #2
 8006a9e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aa4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	601a      	str	r2, [r3, #0]
 8006ac4:	e005      	b.n	8006ad2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006aca:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006ad2:	68fb      	ldr	r3, [r7, #12]
 8006ad4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006ad8:	461a      	mov	r2, r3
 8006ada:	2300      	movs	r3, #0
 8006adc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006aec:	461a      	mov	r2, r3
 8006aee:	680b      	ldr	r3, [r1, #0]
 8006af0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	2b01      	cmp	r3, #1
 8006af6:	d10c      	bne.n	8006b12 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d104      	bne.n	8006b08 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8006afe:	2100      	movs	r1, #0
 8006b00:	6878      	ldr	r0, [r7, #4]
 8006b02:	f000 f965 	bl	8006dd0 <USB_SetDevSpeed>
 8006b06:	e008      	b.n	8006b1a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006b08:	2101      	movs	r1, #1
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	f000 f960 	bl	8006dd0 <USB_SetDevSpeed>
 8006b10:	e003      	b.n	8006b1a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006b12:	2103      	movs	r1, #3
 8006b14:	6878      	ldr	r0, [r7, #4]
 8006b16:	f000 f95b 	bl	8006dd0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006b1a:	2110      	movs	r1, #16
 8006b1c:	6878      	ldr	r0, [r7, #4]
 8006b1e:	f000 f8f3 	bl	8006d08 <USB_FlushTxFifo>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 f91f 	bl	8006d70 <USB_FlushRxFifo>
 8006b32:	4603      	mov	r3, r0
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d001      	beq.n	8006b3c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8006b38:	2301      	movs	r3, #1
 8006b3a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b42:	461a      	mov	r2, r3
 8006b44:	2300      	movs	r3, #0
 8006b46:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b4e:	461a      	mov	r2, r3
 8006b50:	2300      	movs	r3, #0
 8006b52:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006b5a:	461a      	mov	r2, r3
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006b60:	2300      	movs	r3, #0
 8006b62:	613b      	str	r3, [r7, #16]
 8006b64:	e043      	b.n	8006bee <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8006b66:	693b      	ldr	r3, [r7, #16]
 8006b68:	015a      	lsls	r2, r3, #5
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	4413      	add	r3, r2
 8006b6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006b78:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006b7c:	d118      	bne.n	8006bb0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d10a      	bne.n	8006b9a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	015a      	lsls	r2, r3, #5
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	4413      	add	r3, r2
 8006b8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b90:	461a      	mov	r2, r3
 8006b92:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006b96:	6013      	str	r3, [r2, #0]
 8006b98:	e013      	b.n	8006bc2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	015a      	lsls	r2, r3, #5
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	4413      	add	r3, r2
 8006ba2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ba6:	461a      	mov	r2, r3
 8006ba8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006bac:	6013      	str	r3, [r2, #0]
 8006bae:	e008      	b.n	8006bc2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8006bb0:	693b      	ldr	r3, [r7, #16]
 8006bb2:	015a      	lsls	r2, r3, #5
 8006bb4:	68fb      	ldr	r3, [r7, #12]
 8006bb6:	4413      	add	r3, r2
 8006bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006bce:	461a      	mov	r2, r3
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	015a      	lsls	r2, r3, #5
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	4413      	add	r3, r2
 8006bdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006be0:	461a      	mov	r2, r3
 8006be2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006be6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006be8:	693b      	ldr	r3, [r7, #16]
 8006bea:	3301      	adds	r3, #1
 8006bec:	613b      	str	r3, [r7, #16]
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	693a      	ldr	r2, [r7, #16]
 8006bf2:	429a      	cmp	r2, r3
 8006bf4:	d3b7      	bcc.n	8006b66 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	613b      	str	r3, [r7, #16]
 8006bfa:	e043      	b.n	8006c84 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006bfc:	693b      	ldr	r3, [r7, #16]
 8006bfe:	015a      	lsls	r2, r3, #5
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	4413      	add	r3, r2
 8006c04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006c0e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006c12:	d118      	bne.n	8006c46 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8006c14:	693b      	ldr	r3, [r7, #16]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d10a      	bne.n	8006c30 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8006c1a:	693b      	ldr	r3, [r7, #16]
 8006c1c:	015a      	lsls	r2, r3, #5
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	4413      	add	r3, r2
 8006c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c26:	461a      	mov	r2, r3
 8006c28:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8006c2c:	6013      	str	r3, [r2, #0]
 8006c2e:	e013      	b.n	8006c58 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006c30:	693b      	ldr	r3, [r7, #16]
 8006c32:	015a      	lsls	r2, r3, #5
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	4413      	add	r3, r2
 8006c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c3c:	461a      	mov	r2, r3
 8006c3e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	e008      	b.n	8006c58 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	015a      	lsls	r2, r3, #5
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	4413      	add	r3, r2
 8006c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c52:	461a      	mov	r2, r3
 8006c54:	2300      	movs	r3, #0
 8006c56:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	015a      	lsls	r2, r3, #5
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	4413      	add	r3, r2
 8006c60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c64:	461a      	mov	r2, r3
 8006c66:	2300      	movs	r3, #0
 8006c68:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	015a      	lsls	r2, r3, #5
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4413      	add	r3, r2
 8006c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c76:	461a      	mov	r2, r3
 8006c78:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006c7c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006c7e:	693b      	ldr	r3, [r7, #16]
 8006c80:	3301      	adds	r3, #1
 8006c82:	613b      	str	r3, [r7, #16]
 8006c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	429a      	cmp	r2, r3
 8006c8a:	d3b7      	bcc.n	8006bfc <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006c92:	691b      	ldr	r3, [r3, #16]
 8006c94:	68fa      	ldr	r2, [r7, #12]
 8006c96:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006c9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006c9e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8006cac:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d105      	bne.n	8006cc0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	699b      	ldr	r3, [r3, #24]
 8006cb8:	f043 0210 	orr.w	r2, r3, #16
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	699a      	ldr	r2, [r3, #24]
 8006cc4:	4b0e      	ldr	r3, [pc, #56]	; (8006d00 <USB_DevInit+0x2b4>)
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	687a      	ldr	r2, [r7, #4]
 8006cca:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d005      	beq.n	8006cde <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	699b      	ldr	r3, [r3, #24]
 8006cd6:	f043 0208 	orr.w	r2, r3, #8
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006cde:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d105      	bne.n	8006cf0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	699a      	ldr	r2, [r3, #24]
 8006ce8:	4b06      	ldr	r3, [pc, #24]	; (8006d04 <USB_DevInit+0x2b8>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	687a      	ldr	r2, [r7, #4]
 8006cee:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8006cf0:	7dfb      	ldrb	r3, [r7, #23]
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006cfc:	b004      	add	sp, #16
 8006cfe:	4770      	bx	lr
 8006d00:	803c3800 	.word	0x803c3800
 8006d04:	40000004 	.word	0x40000004

08006d08 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006d08:	b480      	push	{r7}
 8006d0a:	b085      	sub	sp, #20
 8006d0c:	af00      	add	r7, sp, #0
 8006d0e:	6078      	str	r0, [r7, #4]
 8006d10:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006d12:	2300      	movs	r3, #0
 8006d14:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	4a13      	ldr	r2, [pc, #76]	; (8006d6c <USB_FlushTxFifo+0x64>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d901      	bls.n	8006d28 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e01b      	b.n	8006d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	691b      	ldr	r3, [r3, #16]
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	daf2      	bge.n	8006d16 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d30:	2300      	movs	r3, #0
 8006d32:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	019b      	lsls	r3, r3, #6
 8006d38:	f043 0220 	orr.w	r2, r3, #32
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	3301      	adds	r3, #1
 8006d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	4a08      	ldr	r2, [pc, #32]	; (8006d6c <USB_FlushTxFifo+0x64>)
 8006d4a:	4293      	cmp	r3, r2
 8006d4c:	d901      	bls.n	8006d52 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d4e:	2303      	movs	r3, #3
 8006d50:	e006      	b.n	8006d60 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691b      	ldr	r3, [r3, #16]
 8006d56:	f003 0320 	and.w	r3, r3, #32
 8006d5a:	2b20      	cmp	r3, #32
 8006d5c:	d0f0      	beq.n	8006d40 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
}
 8006d60:	4618      	mov	r0, r3
 8006d62:	3714      	adds	r7, #20
 8006d64:	46bd      	mov	sp, r7
 8006d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d6a:	4770      	bx	lr
 8006d6c:	00030d40 	.word	0x00030d40

08006d70 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d70:	b480      	push	{r7}
 8006d72:	b085      	sub	sp, #20
 8006d74:	af00      	add	r7, sp, #0
 8006d76:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d78:	2300      	movs	r3, #0
 8006d7a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	4a11      	ldr	r2, [pc, #68]	; (8006dcc <USB_FlushRxFifo+0x5c>)
 8006d86:	4293      	cmp	r3, r2
 8006d88:	d901      	bls.n	8006d8e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e018      	b.n	8006dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	daf2      	bge.n	8006d7c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d96:	2300      	movs	r3, #0
 8006d98:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2210      	movs	r2, #16
 8006d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	3301      	adds	r3, #1
 8006da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	4a08      	ldr	r2, [pc, #32]	; (8006dcc <USB_FlushRxFifo+0x5c>)
 8006daa:	4293      	cmp	r3, r2
 8006dac:	d901      	bls.n	8006db2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006dae:	2303      	movs	r3, #3
 8006db0:	e006      	b.n	8006dc0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0310 	and.w	r3, r3, #16
 8006dba:	2b10      	cmp	r3, #16
 8006dbc:	d0f0      	beq.n	8006da0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr
 8006dcc:	00030d40 	.word	0x00030d40

08006dd0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006dd0:	b480      	push	{r7}
 8006dd2:	b085      	sub	sp, #20
 8006dd4:	af00      	add	r7, sp, #0
 8006dd6:	6078      	str	r0, [r7, #4]
 8006dd8:	460b      	mov	r3, r1
 8006dda:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	78fb      	ldrb	r3, [r7, #3]
 8006dea:	68f9      	ldr	r1, [r7, #12]
 8006dec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006df0:	4313      	orrs	r3, r2
 8006df2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006df4:	2300      	movs	r3, #0
}
 8006df6:	4618      	mov	r0, r3
 8006df8:	3714      	adds	r7, #20
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b085      	sub	sp, #20
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	68fa      	ldr	r2, [r7, #12]
 8006e18:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006e1c:	f023 0303 	bic.w	r3, r3, #3
 8006e20:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e28:	685b      	ldr	r3, [r3, #4]
 8006e2a:	68fa      	ldr	r2, [r7, #12]
 8006e2c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006e30:	f043 0302 	orr.w	r3, r3, #2
 8006e34:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006e36:	2300      	movs	r3, #0
}
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3714      	adds	r7, #20
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e42:	4770      	bx	lr

08006e44 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	695b      	ldr	r3, [r3, #20]
 8006e50:	f003 0301 	and.w	r3, r3, #1
}
 8006e54:	4618      	mov	r0, r3
 8006e56:	370c      	adds	r7, #12
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b085      	sub	sp, #20
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	4a13      	ldr	r2, [pc, #76]	; (8006ec4 <USB_CoreReset+0x64>)
 8006e76:	4293      	cmp	r3, r2
 8006e78:	d901      	bls.n	8006e7e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006e7a:	2303      	movs	r3, #3
 8006e7c:	e01b      	b.n	8006eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	691b      	ldr	r3, [r3, #16]
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	daf2      	bge.n	8006e6c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006e86:	2300      	movs	r3, #0
 8006e88:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	f043 0201 	orr.w	r2, r3, #1
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	3301      	adds	r3, #1
 8006e9a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	4a09      	ldr	r2, [pc, #36]	; (8006ec4 <USB_CoreReset+0x64>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d901      	bls.n	8006ea8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006ea4:	2303      	movs	r3, #3
 8006ea6:	e006      	b.n	8006eb6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	f003 0301 	and.w	r3, r3, #1
 8006eb0:	2b01      	cmp	r3, #1
 8006eb2:	d0f0      	beq.n	8006e96 <USB_CoreReset+0x36>

  return HAL_OK;
 8006eb4:	2300      	movs	r3, #0
}
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	3714      	adds	r7, #20
 8006eba:	46bd      	mov	sp, r7
 8006ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ec0:	4770      	bx	lr
 8006ec2:	bf00      	nop
 8006ec4:	00030d40 	.word	0x00030d40

08006ec8 <__errno>:
 8006ec8:	4b01      	ldr	r3, [pc, #4]	; (8006ed0 <__errno+0x8>)
 8006eca:	6818      	ldr	r0, [r3, #0]
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000024 	.word	0x20000024

08006ed4 <__libc_init_array>:
 8006ed4:	b570      	push	{r4, r5, r6, lr}
 8006ed6:	4d0d      	ldr	r5, [pc, #52]	; (8006f0c <__libc_init_array+0x38>)
 8006ed8:	4c0d      	ldr	r4, [pc, #52]	; (8006f10 <__libc_init_array+0x3c>)
 8006eda:	1b64      	subs	r4, r4, r5
 8006edc:	10a4      	asrs	r4, r4, #2
 8006ede:	2600      	movs	r6, #0
 8006ee0:	42a6      	cmp	r6, r4
 8006ee2:	d109      	bne.n	8006ef8 <__libc_init_array+0x24>
 8006ee4:	4d0b      	ldr	r5, [pc, #44]	; (8006f14 <__libc_init_array+0x40>)
 8006ee6:	4c0c      	ldr	r4, [pc, #48]	; (8006f18 <__libc_init_array+0x44>)
 8006ee8:	f000 fc8e 	bl	8007808 <_init>
 8006eec:	1b64      	subs	r4, r4, r5
 8006eee:	10a4      	asrs	r4, r4, #2
 8006ef0:	2600      	movs	r6, #0
 8006ef2:	42a6      	cmp	r6, r4
 8006ef4:	d105      	bne.n	8006f02 <__libc_init_array+0x2e>
 8006ef6:	bd70      	pop	{r4, r5, r6, pc}
 8006ef8:	f855 3b04 	ldr.w	r3, [r5], #4
 8006efc:	4798      	blx	r3
 8006efe:	3601      	adds	r6, #1
 8006f00:	e7ee      	b.n	8006ee0 <__libc_init_array+0xc>
 8006f02:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f06:	4798      	blx	r3
 8006f08:	3601      	adds	r6, #1
 8006f0a:	e7f2      	b.n	8006ef2 <__libc_init_array+0x1e>
 8006f0c:	08007ad0 	.word	0x08007ad0
 8006f10:	08007ad0 	.word	0x08007ad0
 8006f14:	08007ad0 	.word	0x08007ad0
 8006f18:	08007ad4 	.word	0x08007ad4

08006f1c <memset>:
 8006f1c:	4402      	add	r2, r0
 8006f1e:	4603      	mov	r3, r0
 8006f20:	4293      	cmp	r3, r2
 8006f22:	d100      	bne.n	8006f26 <memset+0xa>
 8006f24:	4770      	bx	lr
 8006f26:	f803 1b01 	strb.w	r1, [r3], #1
 8006f2a:	e7f9      	b.n	8006f20 <memset+0x4>

08006f2c <siprintf>:
 8006f2c:	b40e      	push	{r1, r2, r3}
 8006f2e:	b500      	push	{lr}
 8006f30:	b09c      	sub	sp, #112	; 0x70
 8006f32:	ab1d      	add	r3, sp, #116	; 0x74
 8006f34:	9002      	str	r0, [sp, #8]
 8006f36:	9006      	str	r0, [sp, #24]
 8006f38:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006f3c:	4809      	ldr	r0, [pc, #36]	; (8006f64 <siprintf+0x38>)
 8006f3e:	9107      	str	r1, [sp, #28]
 8006f40:	9104      	str	r1, [sp, #16]
 8006f42:	4909      	ldr	r1, [pc, #36]	; (8006f68 <siprintf+0x3c>)
 8006f44:	f853 2b04 	ldr.w	r2, [r3], #4
 8006f48:	9105      	str	r1, [sp, #20]
 8006f4a:	6800      	ldr	r0, [r0, #0]
 8006f4c:	9301      	str	r3, [sp, #4]
 8006f4e:	a902      	add	r1, sp, #8
 8006f50:	f000 f868 	bl	8007024 <_svfiprintf_r>
 8006f54:	9b02      	ldr	r3, [sp, #8]
 8006f56:	2200      	movs	r2, #0
 8006f58:	701a      	strb	r2, [r3, #0]
 8006f5a:	b01c      	add	sp, #112	; 0x70
 8006f5c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006f60:	b003      	add	sp, #12
 8006f62:	4770      	bx	lr
 8006f64:	20000024 	.word	0x20000024
 8006f68:	ffff0208 	.word	0xffff0208

08006f6c <__ssputs_r>:
 8006f6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f70:	688e      	ldr	r6, [r1, #8]
 8006f72:	429e      	cmp	r6, r3
 8006f74:	4682      	mov	sl, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	4690      	mov	r8, r2
 8006f7a:	461f      	mov	r7, r3
 8006f7c:	d838      	bhi.n	8006ff0 <__ssputs_r+0x84>
 8006f7e:	898a      	ldrh	r2, [r1, #12]
 8006f80:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006f84:	d032      	beq.n	8006fec <__ssputs_r+0x80>
 8006f86:	6825      	ldr	r5, [r4, #0]
 8006f88:	6909      	ldr	r1, [r1, #16]
 8006f8a:	eba5 0901 	sub.w	r9, r5, r1
 8006f8e:	6965      	ldr	r5, [r4, #20]
 8006f90:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006f94:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006f98:	3301      	adds	r3, #1
 8006f9a:	444b      	add	r3, r9
 8006f9c:	106d      	asrs	r5, r5, #1
 8006f9e:	429d      	cmp	r5, r3
 8006fa0:	bf38      	it	cc
 8006fa2:	461d      	movcc	r5, r3
 8006fa4:	0553      	lsls	r3, r2, #21
 8006fa6:	d531      	bpl.n	800700c <__ssputs_r+0xa0>
 8006fa8:	4629      	mov	r1, r5
 8006faa:	f000 fb63 	bl	8007674 <_malloc_r>
 8006fae:	4606      	mov	r6, r0
 8006fb0:	b950      	cbnz	r0, 8006fc8 <__ssputs_r+0x5c>
 8006fb2:	230c      	movs	r3, #12
 8006fb4:	f8ca 3000 	str.w	r3, [sl]
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006fbe:	81a3      	strh	r3, [r4, #12]
 8006fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8006fc4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fc8:	6921      	ldr	r1, [r4, #16]
 8006fca:	464a      	mov	r2, r9
 8006fcc:	f000 fabe 	bl	800754c <memcpy>
 8006fd0:	89a3      	ldrh	r3, [r4, #12]
 8006fd2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006fd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006fda:	81a3      	strh	r3, [r4, #12]
 8006fdc:	6126      	str	r6, [r4, #16]
 8006fde:	6165      	str	r5, [r4, #20]
 8006fe0:	444e      	add	r6, r9
 8006fe2:	eba5 0509 	sub.w	r5, r5, r9
 8006fe6:	6026      	str	r6, [r4, #0]
 8006fe8:	60a5      	str	r5, [r4, #8]
 8006fea:	463e      	mov	r6, r7
 8006fec:	42be      	cmp	r6, r7
 8006fee:	d900      	bls.n	8006ff2 <__ssputs_r+0x86>
 8006ff0:	463e      	mov	r6, r7
 8006ff2:	6820      	ldr	r0, [r4, #0]
 8006ff4:	4632      	mov	r2, r6
 8006ff6:	4641      	mov	r1, r8
 8006ff8:	f000 fab6 	bl	8007568 <memmove>
 8006ffc:	68a3      	ldr	r3, [r4, #8]
 8006ffe:	1b9b      	subs	r3, r3, r6
 8007000:	60a3      	str	r3, [r4, #8]
 8007002:	6823      	ldr	r3, [r4, #0]
 8007004:	4433      	add	r3, r6
 8007006:	6023      	str	r3, [r4, #0]
 8007008:	2000      	movs	r0, #0
 800700a:	e7db      	b.n	8006fc4 <__ssputs_r+0x58>
 800700c:	462a      	mov	r2, r5
 800700e:	f000 fba5 	bl	800775c <_realloc_r>
 8007012:	4606      	mov	r6, r0
 8007014:	2800      	cmp	r0, #0
 8007016:	d1e1      	bne.n	8006fdc <__ssputs_r+0x70>
 8007018:	6921      	ldr	r1, [r4, #16]
 800701a:	4650      	mov	r0, sl
 800701c:	f000 fabe 	bl	800759c <_free_r>
 8007020:	e7c7      	b.n	8006fb2 <__ssputs_r+0x46>
	...

08007024 <_svfiprintf_r>:
 8007024:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007028:	4698      	mov	r8, r3
 800702a:	898b      	ldrh	r3, [r1, #12]
 800702c:	061b      	lsls	r3, r3, #24
 800702e:	b09d      	sub	sp, #116	; 0x74
 8007030:	4607      	mov	r7, r0
 8007032:	460d      	mov	r5, r1
 8007034:	4614      	mov	r4, r2
 8007036:	d50e      	bpl.n	8007056 <_svfiprintf_r+0x32>
 8007038:	690b      	ldr	r3, [r1, #16]
 800703a:	b963      	cbnz	r3, 8007056 <_svfiprintf_r+0x32>
 800703c:	2140      	movs	r1, #64	; 0x40
 800703e:	f000 fb19 	bl	8007674 <_malloc_r>
 8007042:	6028      	str	r0, [r5, #0]
 8007044:	6128      	str	r0, [r5, #16]
 8007046:	b920      	cbnz	r0, 8007052 <_svfiprintf_r+0x2e>
 8007048:	230c      	movs	r3, #12
 800704a:	603b      	str	r3, [r7, #0]
 800704c:	f04f 30ff 	mov.w	r0, #4294967295
 8007050:	e0d1      	b.n	80071f6 <_svfiprintf_r+0x1d2>
 8007052:	2340      	movs	r3, #64	; 0x40
 8007054:	616b      	str	r3, [r5, #20]
 8007056:	2300      	movs	r3, #0
 8007058:	9309      	str	r3, [sp, #36]	; 0x24
 800705a:	2320      	movs	r3, #32
 800705c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007060:	f8cd 800c 	str.w	r8, [sp, #12]
 8007064:	2330      	movs	r3, #48	; 0x30
 8007066:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007210 <_svfiprintf_r+0x1ec>
 800706a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800706e:	f04f 0901 	mov.w	r9, #1
 8007072:	4623      	mov	r3, r4
 8007074:	469a      	mov	sl, r3
 8007076:	f813 2b01 	ldrb.w	r2, [r3], #1
 800707a:	b10a      	cbz	r2, 8007080 <_svfiprintf_r+0x5c>
 800707c:	2a25      	cmp	r2, #37	; 0x25
 800707e:	d1f9      	bne.n	8007074 <_svfiprintf_r+0x50>
 8007080:	ebba 0b04 	subs.w	fp, sl, r4
 8007084:	d00b      	beq.n	800709e <_svfiprintf_r+0x7a>
 8007086:	465b      	mov	r3, fp
 8007088:	4622      	mov	r2, r4
 800708a:	4629      	mov	r1, r5
 800708c:	4638      	mov	r0, r7
 800708e:	f7ff ff6d 	bl	8006f6c <__ssputs_r>
 8007092:	3001      	adds	r0, #1
 8007094:	f000 80aa 	beq.w	80071ec <_svfiprintf_r+0x1c8>
 8007098:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800709a:	445a      	add	r2, fp
 800709c:	9209      	str	r2, [sp, #36]	; 0x24
 800709e:	f89a 3000 	ldrb.w	r3, [sl]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	f000 80a2 	beq.w	80071ec <_svfiprintf_r+0x1c8>
 80070a8:	2300      	movs	r3, #0
 80070aa:	f04f 32ff 	mov.w	r2, #4294967295
 80070ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80070b2:	f10a 0a01 	add.w	sl, sl, #1
 80070b6:	9304      	str	r3, [sp, #16]
 80070b8:	9307      	str	r3, [sp, #28]
 80070ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80070be:	931a      	str	r3, [sp, #104]	; 0x68
 80070c0:	4654      	mov	r4, sl
 80070c2:	2205      	movs	r2, #5
 80070c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070c8:	4851      	ldr	r0, [pc, #324]	; (8007210 <_svfiprintf_r+0x1ec>)
 80070ca:	f7f9 f8b9 	bl	8000240 <memchr>
 80070ce:	9a04      	ldr	r2, [sp, #16]
 80070d0:	b9d8      	cbnz	r0, 800710a <_svfiprintf_r+0xe6>
 80070d2:	06d0      	lsls	r0, r2, #27
 80070d4:	bf44      	itt	mi
 80070d6:	2320      	movmi	r3, #32
 80070d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070dc:	0711      	lsls	r1, r2, #28
 80070de:	bf44      	itt	mi
 80070e0:	232b      	movmi	r3, #43	; 0x2b
 80070e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80070e6:	f89a 3000 	ldrb.w	r3, [sl]
 80070ea:	2b2a      	cmp	r3, #42	; 0x2a
 80070ec:	d015      	beq.n	800711a <_svfiprintf_r+0xf6>
 80070ee:	9a07      	ldr	r2, [sp, #28]
 80070f0:	4654      	mov	r4, sl
 80070f2:	2000      	movs	r0, #0
 80070f4:	f04f 0c0a 	mov.w	ip, #10
 80070f8:	4621      	mov	r1, r4
 80070fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80070fe:	3b30      	subs	r3, #48	; 0x30
 8007100:	2b09      	cmp	r3, #9
 8007102:	d94e      	bls.n	80071a2 <_svfiprintf_r+0x17e>
 8007104:	b1b0      	cbz	r0, 8007134 <_svfiprintf_r+0x110>
 8007106:	9207      	str	r2, [sp, #28]
 8007108:	e014      	b.n	8007134 <_svfiprintf_r+0x110>
 800710a:	eba0 0308 	sub.w	r3, r0, r8
 800710e:	fa09 f303 	lsl.w	r3, r9, r3
 8007112:	4313      	orrs	r3, r2
 8007114:	9304      	str	r3, [sp, #16]
 8007116:	46a2      	mov	sl, r4
 8007118:	e7d2      	b.n	80070c0 <_svfiprintf_r+0x9c>
 800711a:	9b03      	ldr	r3, [sp, #12]
 800711c:	1d19      	adds	r1, r3, #4
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	9103      	str	r1, [sp, #12]
 8007122:	2b00      	cmp	r3, #0
 8007124:	bfbb      	ittet	lt
 8007126:	425b      	neglt	r3, r3
 8007128:	f042 0202 	orrlt.w	r2, r2, #2
 800712c:	9307      	strge	r3, [sp, #28]
 800712e:	9307      	strlt	r3, [sp, #28]
 8007130:	bfb8      	it	lt
 8007132:	9204      	strlt	r2, [sp, #16]
 8007134:	7823      	ldrb	r3, [r4, #0]
 8007136:	2b2e      	cmp	r3, #46	; 0x2e
 8007138:	d10c      	bne.n	8007154 <_svfiprintf_r+0x130>
 800713a:	7863      	ldrb	r3, [r4, #1]
 800713c:	2b2a      	cmp	r3, #42	; 0x2a
 800713e:	d135      	bne.n	80071ac <_svfiprintf_r+0x188>
 8007140:	9b03      	ldr	r3, [sp, #12]
 8007142:	1d1a      	adds	r2, r3, #4
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	9203      	str	r2, [sp, #12]
 8007148:	2b00      	cmp	r3, #0
 800714a:	bfb8      	it	lt
 800714c:	f04f 33ff 	movlt.w	r3, #4294967295
 8007150:	3402      	adds	r4, #2
 8007152:	9305      	str	r3, [sp, #20]
 8007154:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007220 <_svfiprintf_r+0x1fc>
 8007158:	7821      	ldrb	r1, [r4, #0]
 800715a:	2203      	movs	r2, #3
 800715c:	4650      	mov	r0, sl
 800715e:	f7f9 f86f 	bl	8000240 <memchr>
 8007162:	b140      	cbz	r0, 8007176 <_svfiprintf_r+0x152>
 8007164:	2340      	movs	r3, #64	; 0x40
 8007166:	eba0 000a 	sub.w	r0, r0, sl
 800716a:	fa03 f000 	lsl.w	r0, r3, r0
 800716e:	9b04      	ldr	r3, [sp, #16]
 8007170:	4303      	orrs	r3, r0
 8007172:	3401      	adds	r4, #1
 8007174:	9304      	str	r3, [sp, #16]
 8007176:	f814 1b01 	ldrb.w	r1, [r4], #1
 800717a:	4826      	ldr	r0, [pc, #152]	; (8007214 <_svfiprintf_r+0x1f0>)
 800717c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007180:	2206      	movs	r2, #6
 8007182:	f7f9 f85d 	bl	8000240 <memchr>
 8007186:	2800      	cmp	r0, #0
 8007188:	d038      	beq.n	80071fc <_svfiprintf_r+0x1d8>
 800718a:	4b23      	ldr	r3, [pc, #140]	; (8007218 <_svfiprintf_r+0x1f4>)
 800718c:	bb1b      	cbnz	r3, 80071d6 <_svfiprintf_r+0x1b2>
 800718e:	9b03      	ldr	r3, [sp, #12]
 8007190:	3307      	adds	r3, #7
 8007192:	f023 0307 	bic.w	r3, r3, #7
 8007196:	3308      	adds	r3, #8
 8007198:	9303      	str	r3, [sp, #12]
 800719a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800719c:	4433      	add	r3, r6
 800719e:	9309      	str	r3, [sp, #36]	; 0x24
 80071a0:	e767      	b.n	8007072 <_svfiprintf_r+0x4e>
 80071a2:	fb0c 3202 	mla	r2, ip, r2, r3
 80071a6:	460c      	mov	r4, r1
 80071a8:	2001      	movs	r0, #1
 80071aa:	e7a5      	b.n	80070f8 <_svfiprintf_r+0xd4>
 80071ac:	2300      	movs	r3, #0
 80071ae:	3401      	adds	r4, #1
 80071b0:	9305      	str	r3, [sp, #20]
 80071b2:	4619      	mov	r1, r3
 80071b4:	f04f 0c0a 	mov.w	ip, #10
 80071b8:	4620      	mov	r0, r4
 80071ba:	f810 2b01 	ldrb.w	r2, [r0], #1
 80071be:	3a30      	subs	r2, #48	; 0x30
 80071c0:	2a09      	cmp	r2, #9
 80071c2:	d903      	bls.n	80071cc <_svfiprintf_r+0x1a8>
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d0c5      	beq.n	8007154 <_svfiprintf_r+0x130>
 80071c8:	9105      	str	r1, [sp, #20]
 80071ca:	e7c3      	b.n	8007154 <_svfiprintf_r+0x130>
 80071cc:	fb0c 2101 	mla	r1, ip, r1, r2
 80071d0:	4604      	mov	r4, r0
 80071d2:	2301      	movs	r3, #1
 80071d4:	e7f0      	b.n	80071b8 <_svfiprintf_r+0x194>
 80071d6:	ab03      	add	r3, sp, #12
 80071d8:	9300      	str	r3, [sp, #0]
 80071da:	462a      	mov	r2, r5
 80071dc:	4b0f      	ldr	r3, [pc, #60]	; (800721c <_svfiprintf_r+0x1f8>)
 80071de:	a904      	add	r1, sp, #16
 80071e0:	4638      	mov	r0, r7
 80071e2:	f3af 8000 	nop.w
 80071e6:	1c42      	adds	r2, r0, #1
 80071e8:	4606      	mov	r6, r0
 80071ea:	d1d6      	bne.n	800719a <_svfiprintf_r+0x176>
 80071ec:	89ab      	ldrh	r3, [r5, #12]
 80071ee:	065b      	lsls	r3, r3, #25
 80071f0:	f53f af2c 	bmi.w	800704c <_svfiprintf_r+0x28>
 80071f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80071f6:	b01d      	add	sp, #116	; 0x74
 80071f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071fc:	ab03      	add	r3, sp, #12
 80071fe:	9300      	str	r3, [sp, #0]
 8007200:	462a      	mov	r2, r5
 8007202:	4b06      	ldr	r3, [pc, #24]	; (800721c <_svfiprintf_r+0x1f8>)
 8007204:	a904      	add	r1, sp, #16
 8007206:	4638      	mov	r0, r7
 8007208:	f000 f87a 	bl	8007300 <_printf_i>
 800720c:	e7eb      	b.n	80071e6 <_svfiprintf_r+0x1c2>
 800720e:	bf00      	nop
 8007210:	08007a94 	.word	0x08007a94
 8007214:	08007a9e 	.word	0x08007a9e
 8007218:	00000000 	.word	0x00000000
 800721c:	08006f6d 	.word	0x08006f6d
 8007220:	08007a9a 	.word	0x08007a9a

08007224 <_printf_common>:
 8007224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007228:	4616      	mov	r6, r2
 800722a:	4699      	mov	r9, r3
 800722c:	688a      	ldr	r2, [r1, #8]
 800722e:	690b      	ldr	r3, [r1, #16]
 8007230:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007234:	4293      	cmp	r3, r2
 8007236:	bfb8      	it	lt
 8007238:	4613      	movlt	r3, r2
 800723a:	6033      	str	r3, [r6, #0]
 800723c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007240:	4607      	mov	r7, r0
 8007242:	460c      	mov	r4, r1
 8007244:	b10a      	cbz	r2, 800724a <_printf_common+0x26>
 8007246:	3301      	adds	r3, #1
 8007248:	6033      	str	r3, [r6, #0]
 800724a:	6823      	ldr	r3, [r4, #0]
 800724c:	0699      	lsls	r1, r3, #26
 800724e:	bf42      	ittt	mi
 8007250:	6833      	ldrmi	r3, [r6, #0]
 8007252:	3302      	addmi	r3, #2
 8007254:	6033      	strmi	r3, [r6, #0]
 8007256:	6825      	ldr	r5, [r4, #0]
 8007258:	f015 0506 	ands.w	r5, r5, #6
 800725c:	d106      	bne.n	800726c <_printf_common+0x48>
 800725e:	f104 0a19 	add.w	sl, r4, #25
 8007262:	68e3      	ldr	r3, [r4, #12]
 8007264:	6832      	ldr	r2, [r6, #0]
 8007266:	1a9b      	subs	r3, r3, r2
 8007268:	42ab      	cmp	r3, r5
 800726a:	dc26      	bgt.n	80072ba <_printf_common+0x96>
 800726c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007270:	1e13      	subs	r3, r2, #0
 8007272:	6822      	ldr	r2, [r4, #0]
 8007274:	bf18      	it	ne
 8007276:	2301      	movne	r3, #1
 8007278:	0692      	lsls	r2, r2, #26
 800727a:	d42b      	bmi.n	80072d4 <_printf_common+0xb0>
 800727c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007280:	4649      	mov	r1, r9
 8007282:	4638      	mov	r0, r7
 8007284:	47c0      	blx	r8
 8007286:	3001      	adds	r0, #1
 8007288:	d01e      	beq.n	80072c8 <_printf_common+0xa4>
 800728a:	6823      	ldr	r3, [r4, #0]
 800728c:	68e5      	ldr	r5, [r4, #12]
 800728e:	6832      	ldr	r2, [r6, #0]
 8007290:	f003 0306 	and.w	r3, r3, #6
 8007294:	2b04      	cmp	r3, #4
 8007296:	bf08      	it	eq
 8007298:	1aad      	subeq	r5, r5, r2
 800729a:	68a3      	ldr	r3, [r4, #8]
 800729c:	6922      	ldr	r2, [r4, #16]
 800729e:	bf0c      	ite	eq
 80072a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80072a4:	2500      	movne	r5, #0
 80072a6:	4293      	cmp	r3, r2
 80072a8:	bfc4      	itt	gt
 80072aa:	1a9b      	subgt	r3, r3, r2
 80072ac:	18ed      	addgt	r5, r5, r3
 80072ae:	2600      	movs	r6, #0
 80072b0:	341a      	adds	r4, #26
 80072b2:	42b5      	cmp	r5, r6
 80072b4:	d11a      	bne.n	80072ec <_printf_common+0xc8>
 80072b6:	2000      	movs	r0, #0
 80072b8:	e008      	b.n	80072cc <_printf_common+0xa8>
 80072ba:	2301      	movs	r3, #1
 80072bc:	4652      	mov	r2, sl
 80072be:	4649      	mov	r1, r9
 80072c0:	4638      	mov	r0, r7
 80072c2:	47c0      	blx	r8
 80072c4:	3001      	adds	r0, #1
 80072c6:	d103      	bne.n	80072d0 <_printf_common+0xac>
 80072c8:	f04f 30ff 	mov.w	r0, #4294967295
 80072cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072d0:	3501      	adds	r5, #1
 80072d2:	e7c6      	b.n	8007262 <_printf_common+0x3e>
 80072d4:	18e1      	adds	r1, r4, r3
 80072d6:	1c5a      	adds	r2, r3, #1
 80072d8:	2030      	movs	r0, #48	; 0x30
 80072da:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80072de:	4422      	add	r2, r4
 80072e0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80072e4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80072e8:	3302      	adds	r3, #2
 80072ea:	e7c7      	b.n	800727c <_printf_common+0x58>
 80072ec:	2301      	movs	r3, #1
 80072ee:	4622      	mov	r2, r4
 80072f0:	4649      	mov	r1, r9
 80072f2:	4638      	mov	r0, r7
 80072f4:	47c0      	blx	r8
 80072f6:	3001      	adds	r0, #1
 80072f8:	d0e6      	beq.n	80072c8 <_printf_common+0xa4>
 80072fa:	3601      	adds	r6, #1
 80072fc:	e7d9      	b.n	80072b2 <_printf_common+0x8e>
	...

08007300 <_printf_i>:
 8007300:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007304:	7e0f      	ldrb	r7, [r1, #24]
 8007306:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007308:	2f78      	cmp	r7, #120	; 0x78
 800730a:	4691      	mov	r9, r2
 800730c:	4680      	mov	r8, r0
 800730e:	460c      	mov	r4, r1
 8007310:	469a      	mov	sl, r3
 8007312:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007316:	d807      	bhi.n	8007328 <_printf_i+0x28>
 8007318:	2f62      	cmp	r7, #98	; 0x62
 800731a:	d80a      	bhi.n	8007332 <_printf_i+0x32>
 800731c:	2f00      	cmp	r7, #0
 800731e:	f000 80d8 	beq.w	80074d2 <_printf_i+0x1d2>
 8007322:	2f58      	cmp	r7, #88	; 0x58
 8007324:	f000 80a3 	beq.w	800746e <_printf_i+0x16e>
 8007328:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800732c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007330:	e03a      	b.n	80073a8 <_printf_i+0xa8>
 8007332:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007336:	2b15      	cmp	r3, #21
 8007338:	d8f6      	bhi.n	8007328 <_printf_i+0x28>
 800733a:	a101      	add	r1, pc, #4	; (adr r1, 8007340 <_printf_i+0x40>)
 800733c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007340:	08007399 	.word	0x08007399
 8007344:	080073ad 	.word	0x080073ad
 8007348:	08007329 	.word	0x08007329
 800734c:	08007329 	.word	0x08007329
 8007350:	08007329 	.word	0x08007329
 8007354:	08007329 	.word	0x08007329
 8007358:	080073ad 	.word	0x080073ad
 800735c:	08007329 	.word	0x08007329
 8007360:	08007329 	.word	0x08007329
 8007364:	08007329 	.word	0x08007329
 8007368:	08007329 	.word	0x08007329
 800736c:	080074b9 	.word	0x080074b9
 8007370:	080073dd 	.word	0x080073dd
 8007374:	0800749b 	.word	0x0800749b
 8007378:	08007329 	.word	0x08007329
 800737c:	08007329 	.word	0x08007329
 8007380:	080074db 	.word	0x080074db
 8007384:	08007329 	.word	0x08007329
 8007388:	080073dd 	.word	0x080073dd
 800738c:	08007329 	.word	0x08007329
 8007390:	08007329 	.word	0x08007329
 8007394:	080074a3 	.word	0x080074a3
 8007398:	682b      	ldr	r3, [r5, #0]
 800739a:	1d1a      	adds	r2, r3, #4
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	602a      	str	r2, [r5, #0]
 80073a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073a4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80073a8:	2301      	movs	r3, #1
 80073aa:	e0a3      	b.n	80074f4 <_printf_i+0x1f4>
 80073ac:	6820      	ldr	r0, [r4, #0]
 80073ae:	6829      	ldr	r1, [r5, #0]
 80073b0:	0606      	lsls	r6, r0, #24
 80073b2:	f101 0304 	add.w	r3, r1, #4
 80073b6:	d50a      	bpl.n	80073ce <_printf_i+0xce>
 80073b8:	680e      	ldr	r6, [r1, #0]
 80073ba:	602b      	str	r3, [r5, #0]
 80073bc:	2e00      	cmp	r6, #0
 80073be:	da03      	bge.n	80073c8 <_printf_i+0xc8>
 80073c0:	232d      	movs	r3, #45	; 0x2d
 80073c2:	4276      	negs	r6, r6
 80073c4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80073c8:	485e      	ldr	r0, [pc, #376]	; (8007544 <_printf_i+0x244>)
 80073ca:	230a      	movs	r3, #10
 80073cc:	e019      	b.n	8007402 <_printf_i+0x102>
 80073ce:	680e      	ldr	r6, [r1, #0]
 80073d0:	602b      	str	r3, [r5, #0]
 80073d2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80073d6:	bf18      	it	ne
 80073d8:	b236      	sxthne	r6, r6
 80073da:	e7ef      	b.n	80073bc <_printf_i+0xbc>
 80073dc:	682b      	ldr	r3, [r5, #0]
 80073de:	6820      	ldr	r0, [r4, #0]
 80073e0:	1d19      	adds	r1, r3, #4
 80073e2:	6029      	str	r1, [r5, #0]
 80073e4:	0601      	lsls	r1, r0, #24
 80073e6:	d501      	bpl.n	80073ec <_printf_i+0xec>
 80073e8:	681e      	ldr	r6, [r3, #0]
 80073ea:	e002      	b.n	80073f2 <_printf_i+0xf2>
 80073ec:	0646      	lsls	r6, r0, #25
 80073ee:	d5fb      	bpl.n	80073e8 <_printf_i+0xe8>
 80073f0:	881e      	ldrh	r6, [r3, #0]
 80073f2:	4854      	ldr	r0, [pc, #336]	; (8007544 <_printf_i+0x244>)
 80073f4:	2f6f      	cmp	r7, #111	; 0x6f
 80073f6:	bf0c      	ite	eq
 80073f8:	2308      	moveq	r3, #8
 80073fa:	230a      	movne	r3, #10
 80073fc:	2100      	movs	r1, #0
 80073fe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007402:	6865      	ldr	r5, [r4, #4]
 8007404:	60a5      	str	r5, [r4, #8]
 8007406:	2d00      	cmp	r5, #0
 8007408:	bfa2      	ittt	ge
 800740a:	6821      	ldrge	r1, [r4, #0]
 800740c:	f021 0104 	bicge.w	r1, r1, #4
 8007410:	6021      	strge	r1, [r4, #0]
 8007412:	b90e      	cbnz	r6, 8007418 <_printf_i+0x118>
 8007414:	2d00      	cmp	r5, #0
 8007416:	d04d      	beq.n	80074b4 <_printf_i+0x1b4>
 8007418:	4615      	mov	r5, r2
 800741a:	fbb6 f1f3 	udiv	r1, r6, r3
 800741e:	fb03 6711 	mls	r7, r3, r1, r6
 8007422:	5dc7      	ldrb	r7, [r0, r7]
 8007424:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007428:	4637      	mov	r7, r6
 800742a:	42bb      	cmp	r3, r7
 800742c:	460e      	mov	r6, r1
 800742e:	d9f4      	bls.n	800741a <_printf_i+0x11a>
 8007430:	2b08      	cmp	r3, #8
 8007432:	d10b      	bne.n	800744c <_printf_i+0x14c>
 8007434:	6823      	ldr	r3, [r4, #0]
 8007436:	07de      	lsls	r6, r3, #31
 8007438:	d508      	bpl.n	800744c <_printf_i+0x14c>
 800743a:	6923      	ldr	r3, [r4, #16]
 800743c:	6861      	ldr	r1, [r4, #4]
 800743e:	4299      	cmp	r1, r3
 8007440:	bfde      	ittt	le
 8007442:	2330      	movle	r3, #48	; 0x30
 8007444:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007448:	f105 35ff 	addle.w	r5, r5, #4294967295
 800744c:	1b52      	subs	r2, r2, r5
 800744e:	6122      	str	r2, [r4, #16]
 8007450:	f8cd a000 	str.w	sl, [sp]
 8007454:	464b      	mov	r3, r9
 8007456:	aa03      	add	r2, sp, #12
 8007458:	4621      	mov	r1, r4
 800745a:	4640      	mov	r0, r8
 800745c:	f7ff fee2 	bl	8007224 <_printf_common>
 8007460:	3001      	adds	r0, #1
 8007462:	d14c      	bne.n	80074fe <_printf_i+0x1fe>
 8007464:	f04f 30ff 	mov.w	r0, #4294967295
 8007468:	b004      	add	sp, #16
 800746a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800746e:	4835      	ldr	r0, [pc, #212]	; (8007544 <_printf_i+0x244>)
 8007470:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007474:	6829      	ldr	r1, [r5, #0]
 8007476:	6823      	ldr	r3, [r4, #0]
 8007478:	f851 6b04 	ldr.w	r6, [r1], #4
 800747c:	6029      	str	r1, [r5, #0]
 800747e:	061d      	lsls	r5, r3, #24
 8007480:	d514      	bpl.n	80074ac <_printf_i+0x1ac>
 8007482:	07df      	lsls	r7, r3, #31
 8007484:	bf44      	itt	mi
 8007486:	f043 0320 	orrmi.w	r3, r3, #32
 800748a:	6023      	strmi	r3, [r4, #0]
 800748c:	b91e      	cbnz	r6, 8007496 <_printf_i+0x196>
 800748e:	6823      	ldr	r3, [r4, #0]
 8007490:	f023 0320 	bic.w	r3, r3, #32
 8007494:	6023      	str	r3, [r4, #0]
 8007496:	2310      	movs	r3, #16
 8007498:	e7b0      	b.n	80073fc <_printf_i+0xfc>
 800749a:	6823      	ldr	r3, [r4, #0]
 800749c:	f043 0320 	orr.w	r3, r3, #32
 80074a0:	6023      	str	r3, [r4, #0]
 80074a2:	2378      	movs	r3, #120	; 0x78
 80074a4:	4828      	ldr	r0, [pc, #160]	; (8007548 <_printf_i+0x248>)
 80074a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80074aa:	e7e3      	b.n	8007474 <_printf_i+0x174>
 80074ac:	0659      	lsls	r1, r3, #25
 80074ae:	bf48      	it	mi
 80074b0:	b2b6      	uxthmi	r6, r6
 80074b2:	e7e6      	b.n	8007482 <_printf_i+0x182>
 80074b4:	4615      	mov	r5, r2
 80074b6:	e7bb      	b.n	8007430 <_printf_i+0x130>
 80074b8:	682b      	ldr	r3, [r5, #0]
 80074ba:	6826      	ldr	r6, [r4, #0]
 80074bc:	6961      	ldr	r1, [r4, #20]
 80074be:	1d18      	adds	r0, r3, #4
 80074c0:	6028      	str	r0, [r5, #0]
 80074c2:	0635      	lsls	r5, r6, #24
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	d501      	bpl.n	80074cc <_printf_i+0x1cc>
 80074c8:	6019      	str	r1, [r3, #0]
 80074ca:	e002      	b.n	80074d2 <_printf_i+0x1d2>
 80074cc:	0670      	lsls	r0, r6, #25
 80074ce:	d5fb      	bpl.n	80074c8 <_printf_i+0x1c8>
 80074d0:	8019      	strh	r1, [r3, #0]
 80074d2:	2300      	movs	r3, #0
 80074d4:	6123      	str	r3, [r4, #16]
 80074d6:	4615      	mov	r5, r2
 80074d8:	e7ba      	b.n	8007450 <_printf_i+0x150>
 80074da:	682b      	ldr	r3, [r5, #0]
 80074dc:	1d1a      	adds	r2, r3, #4
 80074de:	602a      	str	r2, [r5, #0]
 80074e0:	681d      	ldr	r5, [r3, #0]
 80074e2:	6862      	ldr	r2, [r4, #4]
 80074e4:	2100      	movs	r1, #0
 80074e6:	4628      	mov	r0, r5
 80074e8:	f7f8 feaa 	bl	8000240 <memchr>
 80074ec:	b108      	cbz	r0, 80074f2 <_printf_i+0x1f2>
 80074ee:	1b40      	subs	r0, r0, r5
 80074f0:	6060      	str	r0, [r4, #4]
 80074f2:	6863      	ldr	r3, [r4, #4]
 80074f4:	6123      	str	r3, [r4, #16]
 80074f6:	2300      	movs	r3, #0
 80074f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074fc:	e7a8      	b.n	8007450 <_printf_i+0x150>
 80074fe:	6923      	ldr	r3, [r4, #16]
 8007500:	462a      	mov	r2, r5
 8007502:	4649      	mov	r1, r9
 8007504:	4640      	mov	r0, r8
 8007506:	47d0      	blx	sl
 8007508:	3001      	adds	r0, #1
 800750a:	d0ab      	beq.n	8007464 <_printf_i+0x164>
 800750c:	6823      	ldr	r3, [r4, #0]
 800750e:	079b      	lsls	r3, r3, #30
 8007510:	d413      	bmi.n	800753a <_printf_i+0x23a>
 8007512:	68e0      	ldr	r0, [r4, #12]
 8007514:	9b03      	ldr	r3, [sp, #12]
 8007516:	4298      	cmp	r0, r3
 8007518:	bfb8      	it	lt
 800751a:	4618      	movlt	r0, r3
 800751c:	e7a4      	b.n	8007468 <_printf_i+0x168>
 800751e:	2301      	movs	r3, #1
 8007520:	4632      	mov	r2, r6
 8007522:	4649      	mov	r1, r9
 8007524:	4640      	mov	r0, r8
 8007526:	47d0      	blx	sl
 8007528:	3001      	adds	r0, #1
 800752a:	d09b      	beq.n	8007464 <_printf_i+0x164>
 800752c:	3501      	adds	r5, #1
 800752e:	68e3      	ldr	r3, [r4, #12]
 8007530:	9903      	ldr	r1, [sp, #12]
 8007532:	1a5b      	subs	r3, r3, r1
 8007534:	42ab      	cmp	r3, r5
 8007536:	dcf2      	bgt.n	800751e <_printf_i+0x21e>
 8007538:	e7eb      	b.n	8007512 <_printf_i+0x212>
 800753a:	2500      	movs	r5, #0
 800753c:	f104 0619 	add.w	r6, r4, #25
 8007540:	e7f5      	b.n	800752e <_printf_i+0x22e>
 8007542:	bf00      	nop
 8007544:	08007aa5 	.word	0x08007aa5
 8007548:	08007ab6 	.word	0x08007ab6

0800754c <memcpy>:
 800754c:	440a      	add	r2, r1
 800754e:	4291      	cmp	r1, r2
 8007550:	f100 33ff 	add.w	r3, r0, #4294967295
 8007554:	d100      	bne.n	8007558 <memcpy+0xc>
 8007556:	4770      	bx	lr
 8007558:	b510      	push	{r4, lr}
 800755a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800755e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007562:	4291      	cmp	r1, r2
 8007564:	d1f9      	bne.n	800755a <memcpy+0xe>
 8007566:	bd10      	pop	{r4, pc}

08007568 <memmove>:
 8007568:	4288      	cmp	r0, r1
 800756a:	b510      	push	{r4, lr}
 800756c:	eb01 0402 	add.w	r4, r1, r2
 8007570:	d902      	bls.n	8007578 <memmove+0x10>
 8007572:	4284      	cmp	r4, r0
 8007574:	4623      	mov	r3, r4
 8007576:	d807      	bhi.n	8007588 <memmove+0x20>
 8007578:	1e43      	subs	r3, r0, #1
 800757a:	42a1      	cmp	r1, r4
 800757c:	d008      	beq.n	8007590 <memmove+0x28>
 800757e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007582:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007586:	e7f8      	b.n	800757a <memmove+0x12>
 8007588:	4402      	add	r2, r0
 800758a:	4601      	mov	r1, r0
 800758c:	428a      	cmp	r2, r1
 800758e:	d100      	bne.n	8007592 <memmove+0x2a>
 8007590:	bd10      	pop	{r4, pc}
 8007592:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007596:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800759a:	e7f7      	b.n	800758c <memmove+0x24>

0800759c <_free_r>:
 800759c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800759e:	2900      	cmp	r1, #0
 80075a0:	d044      	beq.n	800762c <_free_r+0x90>
 80075a2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80075a6:	9001      	str	r0, [sp, #4]
 80075a8:	2b00      	cmp	r3, #0
 80075aa:	f1a1 0404 	sub.w	r4, r1, #4
 80075ae:	bfb8      	it	lt
 80075b0:	18e4      	addlt	r4, r4, r3
 80075b2:	f000 f913 	bl	80077dc <__malloc_lock>
 80075b6:	4a1e      	ldr	r2, [pc, #120]	; (8007630 <_free_r+0x94>)
 80075b8:	9801      	ldr	r0, [sp, #4]
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	b933      	cbnz	r3, 80075cc <_free_r+0x30>
 80075be:	6063      	str	r3, [r4, #4]
 80075c0:	6014      	str	r4, [r2, #0]
 80075c2:	b003      	add	sp, #12
 80075c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80075c8:	f000 b90e 	b.w	80077e8 <__malloc_unlock>
 80075cc:	42a3      	cmp	r3, r4
 80075ce:	d908      	bls.n	80075e2 <_free_r+0x46>
 80075d0:	6825      	ldr	r5, [r4, #0]
 80075d2:	1961      	adds	r1, r4, r5
 80075d4:	428b      	cmp	r3, r1
 80075d6:	bf01      	itttt	eq
 80075d8:	6819      	ldreq	r1, [r3, #0]
 80075da:	685b      	ldreq	r3, [r3, #4]
 80075dc:	1949      	addeq	r1, r1, r5
 80075de:	6021      	streq	r1, [r4, #0]
 80075e0:	e7ed      	b.n	80075be <_free_r+0x22>
 80075e2:	461a      	mov	r2, r3
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	b10b      	cbz	r3, 80075ec <_free_r+0x50>
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	d9fa      	bls.n	80075e2 <_free_r+0x46>
 80075ec:	6811      	ldr	r1, [r2, #0]
 80075ee:	1855      	adds	r5, r2, r1
 80075f0:	42a5      	cmp	r5, r4
 80075f2:	d10b      	bne.n	800760c <_free_r+0x70>
 80075f4:	6824      	ldr	r4, [r4, #0]
 80075f6:	4421      	add	r1, r4
 80075f8:	1854      	adds	r4, r2, r1
 80075fa:	42a3      	cmp	r3, r4
 80075fc:	6011      	str	r1, [r2, #0]
 80075fe:	d1e0      	bne.n	80075c2 <_free_r+0x26>
 8007600:	681c      	ldr	r4, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	6053      	str	r3, [r2, #4]
 8007606:	4421      	add	r1, r4
 8007608:	6011      	str	r1, [r2, #0]
 800760a:	e7da      	b.n	80075c2 <_free_r+0x26>
 800760c:	d902      	bls.n	8007614 <_free_r+0x78>
 800760e:	230c      	movs	r3, #12
 8007610:	6003      	str	r3, [r0, #0]
 8007612:	e7d6      	b.n	80075c2 <_free_r+0x26>
 8007614:	6825      	ldr	r5, [r4, #0]
 8007616:	1961      	adds	r1, r4, r5
 8007618:	428b      	cmp	r3, r1
 800761a:	bf04      	itt	eq
 800761c:	6819      	ldreq	r1, [r3, #0]
 800761e:	685b      	ldreq	r3, [r3, #4]
 8007620:	6063      	str	r3, [r4, #4]
 8007622:	bf04      	itt	eq
 8007624:	1949      	addeq	r1, r1, r5
 8007626:	6021      	streq	r1, [r4, #0]
 8007628:	6054      	str	r4, [r2, #4]
 800762a:	e7ca      	b.n	80075c2 <_free_r+0x26>
 800762c:	b003      	add	sp, #12
 800762e:	bd30      	pop	{r4, r5, pc}
 8007630:	200009fc 	.word	0x200009fc

08007634 <sbrk_aligned>:
 8007634:	b570      	push	{r4, r5, r6, lr}
 8007636:	4e0e      	ldr	r6, [pc, #56]	; (8007670 <sbrk_aligned+0x3c>)
 8007638:	460c      	mov	r4, r1
 800763a:	6831      	ldr	r1, [r6, #0]
 800763c:	4605      	mov	r5, r0
 800763e:	b911      	cbnz	r1, 8007646 <sbrk_aligned+0x12>
 8007640:	f000 f8bc 	bl	80077bc <_sbrk_r>
 8007644:	6030      	str	r0, [r6, #0]
 8007646:	4621      	mov	r1, r4
 8007648:	4628      	mov	r0, r5
 800764a:	f000 f8b7 	bl	80077bc <_sbrk_r>
 800764e:	1c43      	adds	r3, r0, #1
 8007650:	d00a      	beq.n	8007668 <sbrk_aligned+0x34>
 8007652:	1cc4      	adds	r4, r0, #3
 8007654:	f024 0403 	bic.w	r4, r4, #3
 8007658:	42a0      	cmp	r0, r4
 800765a:	d007      	beq.n	800766c <sbrk_aligned+0x38>
 800765c:	1a21      	subs	r1, r4, r0
 800765e:	4628      	mov	r0, r5
 8007660:	f000 f8ac 	bl	80077bc <_sbrk_r>
 8007664:	3001      	adds	r0, #1
 8007666:	d101      	bne.n	800766c <sbrk_aligned+0x38>
 8007668:	f04f 34ff 	mov.w	r4, #4294967295
 800766c:	4620      	mov	r0, r4
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	20000a00 	.word	0x20000a00

08007674 <_malloc_r>:
 8007674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007678:	1ccd      	adds	r5, r1, #3
 800767a:	f025 0503 	bic.w	r5, r5, #3
 800767e:	3508      	adds	r5, #8
 8007680:	2d0c      	cmp	r5, #12
 8007682:	bf38      	it	cc
 8007684:	250c      	movcc	r5, #12
 8007686:	2d00      	cmp	r5, #0
 8007688:	4607      	mov	r7, r0
 800768a:	db01      	blt.n	8007690 <_malloc_r+0x1c>
 800768c:	42a9      	cmp	r1, r5
 800768e:	d905      	bls.n	800769c <_malloc_r+0x28>
 8007690:	230c      	movs	r3, #12
 8007692:	603b      	str	r3, [r7, #0]
 8007694:	2600      	movs	r6, #0
 8007696:	4630      	mov	r0, r6
 8007698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800769c:	4e2e      	ldr	r6, [pc, #184]	; (8007758 <_malloc_r+0xe4>)
 800769e:	f000 f89d 	bl	80077dc <__malloc_lock>
 80076a2:	6833      	ldr	r3, [r6, #0]
 80076a4:	461c      	mov	r4, r3
 80076a6:	bb34      	cbnz	r4, 80076f6 <_malloc_r+0x82>
 80076a8:	4629      	mov	r1, r5
 80076aa:	4638      	mov	r0, r7
 80076ac:	f7ff ffc2 	bl	8007634 <sbrk_aligned>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	4604      	mov	r4, r0
 80076b4:	d14d      	bne.n	8007752 <_malloc_r+0xde>
 80076b6:	6834      	ldr	r4, [r6, #0]
 80076b8:	4626      	mov	r6, r4
 80076ba:	2e00      	cmp	r6, #0
 80076bc:	d140      	bne.n	8007740 <_malloc_r+0xcc>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	4631      	mov	r1, r6
 80076c2:	4638      	mov	r0, r7
 80076c4:	eb04 0803 	add.w	r8, r4, r3
 80076c8:	f000 f878 	bl	80077bc <_sbrk_r>
 80076cc:	4580      	cmp	r8, r0
 80076ce:	d13a      	bne.n	8007746 <_malloc_r+0xd2>
 80076d0:	6821      	ldr	r1, [r4, #0]
 80076d2:	3503      	adds	r5, #3
 80076d4:	1a6d      	subs	r5, r5, r1
 80076d6:	f025 0503 	bic.w	r5, r5, #3
 80076da:	3508      	adds	r5, #8
 80076dc:	2d0c      	cmp	r5, #12
 80076de:	bf38      	it	cc
 80076e0:	250c      	movcc	r5, #12
 80076e2:	4629      	mov	r1, r5
 80076e4:	4638      	mov	r0, r7
 80076e6:	f7ff ffa5 	bl	8007634 <sbrk_aligned>
 80076ea:	3001      	adds	r0, #1
 80076ec:	d02b      	beq.n	8007746 <_malloc_r+0xd2>
 80076ee:	6823      	ldr	r3, [r4, #0]
 80076f0:	442b      	add	r3, r5
 80076f2:	6023      	str	r3, [r4, #0]
 80076f4:	e00e      	b.n	8007714 <_malloc_r+0xa0>
 80076f6:	6822      	ldr	r2, [r4, #0]
 80076f8:	1b52      	subs	r2, r2, r5
 80076fa:	d41e      	bmi.n	800773a <_malloc_r+0xc6>
 80076fc:	2a0b      	cmp	r2, #11
 80076fe:	d916      	bls.n	800772e <_malloc_r+0xba>
 8007700:	1961      	adds	r1, r4, r5
 8007702:	42a3      	cmp	r3, r4
 8007704:	6025      	str	r5, [r4, #0]
 8007706:	bf18      	it	ne
 8007708:	6059      	strne	r1, [r3, #4]
 800770a:	6863      	ldr	r3, [r4, #4]
 800770c:	bf08      	it	eq
 800770e:	6031      	streq	r1, [r6, #0]
 8007710:	5162      	str	r2, [r4, r5]
 8007712:	604b      	str	r3, [r1, #4]
 8007714:	4638      	mov	r0, r7
 8007716:	f104 060b 	add.w	r6, r4, #11
 800771a:	f000 f865 	bl	80077e8 <__malloc_unlock>
 800771e:	f026 0607 	bic.w	r6, r6, #7
 8007722:	1d23      	adds	r3, r4, #4
 8007724:	1af2      	subs	r2, r6, r3
 8007726:	d0b6      	beq.n	8007696 <_malloc_r+0x22>
 8007728:	1b9b      	subs	r3, r3, r6
 800772a:	50a3      	str	r3, [r4, r2]
 800772c:	e7b3      	b.n	8007696 <_malloc_r+0x22>
 800772e:	6862      	ldr	r2, [r4, #4]
 8007730:	42a3      	cmp	r3, r4
 8007732:	bf0c      	ite	eq
 8007734:	6032      	streq	r2, [r6, #0]
 8007736:	605a      	strne	r2, [r3, #4]
 8007738:	e7ec      	b.n	8007714 <_malloc_r+0xa0>
 800773a:	4623      	mov	r3, r4
 800773c:	6864      	ldr	r4, [r4, #4]
 800773e:	e7b2      	b.n	80076a6 <_malloc_r+0x32>
 8007740:	4634      	mov	r4, r6
 8007742:	6876      	ldr	r6, [r6, #4]
 8007744:	e7b9      	b.n	80076ba <_malloc_r+0x46>
 8007746:	230c      	movs	r3, #12
 8007748:	603b      	str	r3, [r7, #0]
 800774a:	4638      	mov	r0, r7
 800774c:	f000 f84c 	bl	80077e8 <__malloc_unlock>
 8007750:	e7a1      	b.n	8007696 <_malloc_r+0x22>
 8007752:	6025      	str	r5, [r4, #0]
 8007754:	e7de      	b.n	8007714 <_malloc_r+0xa0>
 8007756:	bf00      	nop
 8007758:	200009fc 	.word	0x200009fc

0800775c <_realloc_r>:
 800775c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007760:	4680      	mov	r8, r0
 8007762:	4614      	mov	r4, r2
 8007764:	460e      	mov	r6, r1
 8007766:	b921      	cbnz	r1, 8007772 <_realloc_r+0x16>
 8007768:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800776c:	4611      	mov	r1, r2
 800776e:	f7ff bf81 	b.w	8007674 <_malloc_r>
 8007772:	b92a      	cbnz	r2, 8007780 <_realloc_r+0x24>
 8007774:	f7ff ff12 	bl	800759c <_free_r>
 8007778:	4625      	mov	r5, r4
 800777a:	4628      	mov	r0, r5
 800777c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007780:	f000 f838 	bl	80077f4 <_malloc_usable_size_r>
 8007784:	4284      	cmp	r4, r0
 8007786:	4607      	mov	r7, r0
 8007788:	d802      	bhi.n	8007790 <_realloc_r+0x34>
 800778a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800778e:	d812      	bhi.n	80077b6 <_realloc_r+0x5a>
 8007790:	4621      	mov	r1, r4
 8007792:	4640      	mov	r0, r8
 8007794:	f7ff ff6e 	bl	8007674 <_malloc_r>
 8007798:	4605      	mov	r5, r0
 800779a:	2800      	cmp	r0, #0
 800779c:	d0ed      	beq.n	800777a <_realloc_r+0x1e>
 800779e:	42bc      	cmp	r4, r7
 80077a0:	4622      	mov	r2, r4
 80077a2:	4631      	mov	r1, r6
 80077a4:	bf28      	it	cs
 80077a6:	463a      	movcs	r2, r7
 80077a8:	f7ff fed0 	bl	800754c <memcpy>
 80077ac:	4631      	mov	r1, r6
 80077ae:	4640      	mov	r0, r8
 80077b0:	f7ff fef4 	bl	800759c <_free_r>
 80077b4:	e7e1      	b.n	800777a <_realloc_r+0x1e>
 80077b6:	4635      	mov	r5, r6
 80077b8:	e7df      	b.n	800777a <_realloc_r+0x1e>
	...

080077bc <_sbrk_r>:
 80077bc:	b538      	push	{r3, r4, r5, lr}
 80077be:	4d06      	ldr	r5, [pc, #24]	; (80077d8 <_sbrk_r+0x1c>)
 80077c0:	2300      	movs	r3, #0
 80077c2:	4604      	mov	r4, r0
 80077c4:	4608      	mov	r0, r1
 80077c6:	602b      	str	r3, [r5, #0]
 80077c8:	f7f9 fe3a 	bl	8001440 <_sbrk>
 80077cc:	1c43      	adds	r3, r0, #1
 80077ce:	d102      	bne.n	80077d6 <_sbrk_r+0x1a>
 80077d0:	682b      	ldr	r3, [r5, #0]
 80077d2:	b103      	cbz	r3, 80077d6 <_sbrk_r+0x1a>
 80077d4:	6023      	str	r3, [r4, #0]
 80077d6:	bd38      	pop	{r3, r4, r5, pc}
 80077d8:	20000a04 	.word	0x20000a04

080077dc <__malloc_lock>:
 80077dc:	4801      	ldr	r0, [pc, #4]	; (80077e4 <__malloc_lock+0x8>)
 80077de:	f000 b811 	b.w	8007804 <__retarget_lock_acquire_recursive>
 80077e2:	bf00      	nop
 80077e4:	20000a08 	.word	0x20000a08

080077e8 <__malloc_unlock>:
 80077e8:	4801      	ldr	r0, [pc, #4]	; (80077f0 <__malloc_unlock+0x8>)
 80077ea:	f000 b80c 	b.w	8007806 <__retarget_lock_release_recursive>
 80077ee:	bf00      	nop
 80077f0:	20000a08 	.word	0x20000a08

080077f4 <_malloc_usable_size_r>:
 80077f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80077f8:	1f18      	subs	r0, r3, #4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	bfbc      	itt	lt
 80077fe:	580b      	ldrlt	r3, [r1, r0]
 8007800:	18c0      	addlt	r0, r0, r3
 8007802:	4770      	bx	lr

08007804 <__retarget_lock_acquire_recursive>:
 8007804:	4770      	bx	lr

08007806 <__retarget_lock_release_recursive>:
 8007806:	4770      	bx	lr

08007808 <_init>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr

08007814 <_fini>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr
