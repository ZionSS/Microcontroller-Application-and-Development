
Lab07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005430  080001f8  080001f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08005628  08005628  00015628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005654  08005654  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  08005654  08005654  00015654  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800565c  0800565c  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800565c  0800565c  0001565c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005660  08005660  00015660  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005664  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  2000000c  08005670  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  200000ac  08005710  000200ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000006f0  2000014c  080057b0  0002014c  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2000083c  080057b0  0002083c  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000173b2  00000000  00000000  0002017a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027b6  00000000  00000000  0003752c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001290  00000000  00000000  00039ce8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00001198  00000000  00000000  0003af78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029521  00000000  00000000  0003c110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000156db  00000000  00000000  00065631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001036ce  00000000  00000000  0007ad0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  0017e3da  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004fb8  00000000  00000000  0017e42c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000014c 	.word	0x2000014c
 8000214:	00000000 	.word	0x00000000
 8000218:	08005610 	.word	0x08005610

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000150 	.word	0x20000150
 8000234:	08005610 	.word	0x08005610

08000238 <strlen>:
 8000238:	4603      	mov	r3, r0
 800023a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023e:	2a00      	cmp	r2, #0
 8000240:	d1fb      	bne.n	800023a <strlen+0x2>
 8000242:	1a18      	subs	r0, r3, r0
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr

08000248 <__aeabi_uldivmod>:
 8000248:	b953      	cbnz	r3, 8000260 <__aeabi_uldivmod+0x18>
 800024a:	b94a      	cbnz	r2, 8000260 <__aeabi_uldivmod+0x18>
 800024c:	2900      	cmp	r1, #0
 800024e:	bf08      	it	eq
 8000250:	2800      	cmpeq	r0, #0
 8000252:	bf1c      	itt	ne
 8000254:	f04f 31ff 	movne.w	r1, #4294967295
 8000258:	f04f 30ff 	movne.w	r0, #4294967295
 800025c:	f000 b974 	b.w	8000548 <__aeabi_idiv0>
 8000260:	f1ad 0c08 	sub.w	ip, sp, #8
 8000264:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000268:	f000 f806 	bl	8000278 <__udivmoddi4>
 800026c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000270:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000274:	b004      	add	sp, #16
 8000276:	4770      	bx	lr

08000278 <__udivmoddi4>:
 8000278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800027c:	9d08      	ldr	r5, [sp, #32]
 800027e:	4604      	mov	r4, r0
 8000280:	468e      	mov	lr, r1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d14d      	bne.n	8000322 <__udivmoddi4+0xaa>
 8000286:	428a      	cmp	r2, r1
 8000288:	4694      	mov	ip, r2
 800028a:	d969      	bls.n	8000360 <__udivmoddi4+0xe8>
 800028c:	fab2 f282 	clz	r2, r2
 8000290:	b152      	cbz	r2, 80002a8 <__udivmoddi4+0x30>
 8000292:	fa01 f302 	lsl.w	r3, r1, r2
 8000296:	f1c2 0120 	rsb	r1, r2, #32
 800029a:	fa20 f101 	lsr.w	r1, r0, r1
 800029e:	fa0c fc02 	lsl.w	ip, ip, r2
 80002a2:	ea41 0e03 	orr.w	lr, r1, r3
 80002a6:	4094      	lsls	r4, r2
 80002a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002ac:	0c21      	lsrs	r1, r4, #16
 80002ae:	fbbe f6f8 	udiv	r6, lr, r8
 80002b2:	fa1f f78c 	uxth.w	r7, ip
 80002b6:	fb08 e316 	mls	r3, r8, r6, lr
 80002ba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002be:	fb06 f107 	mul.w	r1, r6, r7
 80002c2:	4299      	cmp	r1, r3
 80002c4:	d90a      	bls.n	80002dc <__udivmoddi4+0x64>
 80002c6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ca:	f106 30ff 	add.w	r0, r6, #4294967295
 80002ce:	f080 811f 	bcs.w	8000510 <__udivmoddi4+0x298>
 80002d2:	4299      	cmp	r1, r3
 80002d4:	f240 811c 	bls.w	8000510 <__udivmoddi4+0x298>
 80002d8:	3e02      	subs	r6, #2
 80002da:	4463      	add	r3, ip
 80002dc:	1a5b      	subs	r3, r3, r1
 80002de:	b2a4      	uxth	r4, r4
 80002e0:	fbb3 f0f8 	udiv	r0, r3, r8
 80002e4:	fb08 3310 	mls	r3, r8, r0, r3
 80002e8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002ec:	fb00 f707 	mul.w	r7, r0, r7
 80002f0:	42a7      	cmp	r7, r4
 80002f2:	d90a      	bls.n	800030a <__udivmoddi4+0x92>
 80002f4:	eb1c 0404 	adds.w	r4, ip, r4
 80002f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fc:	f080 810a 	bcs.w	8000514 <__udivmoddi4+0x29c>
 8000300:	42a7      	cmp	r7, r4
 8000302:	f240 8107 	bls.w	8000514 <__udivmoddi4+0x29c>
 8000306:	4464      	add	r4, ip
 8000308:	3802      	subs	r0, #2
 800030a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800030e:	1be4      	subs	r4, r4, r7
 8000310:	2600      	movs	r6, #0
 8000312:	b11d      	cbz	r5, 800031c <__udivmoddi4+0xa4>
 8000314:	40d4      	lsrs	r4, r2
 8000316:	2300      	movs	r3, #0
 8000318:	e9c5 4300 	strd	r4, r3, [r5]
 800031c:	4631      	mov	r1, r6
 800031e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000322:	428b      	cmp	r3, r1
 8000324:	d909      	bls.n	800033a <__udivmoddi4+0xc2>
 8000326:	2d00      	cmp	r5, #0
 8000328:	f000 80ef 	beq.w	800050a <__udivmoddi4+0x292>
 800032c:	2600      	movs	r6, #0
 800032e:	e9c5 0100 	strd	r0, r1, [r5]
 8000332:	4630      	mov	r0, r6
 8000334:	4631      	mov	r1, r6
 8000336:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800033a:	fab3 f683 	clz	r6, r3
 800033e:	2e00      	cmp	r6, #0
 8000340:	d14a      	bne.n	80003d8 <__udivmoddi4+0x160>
 8000342:	428b      	cmp	r3, r1
 8000344:	d302      	bcc.n	800034c <__udivmoddi4+0xd4>
 8000346:	4282      	cmp	r2, r0
 8000348:	f200 80f9 	bhi.w	800053e <__udivmoddi4+0x2c6>
 800034c:	1a84      	subs	r4, r0, r2
 800034e:	eb61 0303 	sbc.w	r3, r1, r3
 8000352:	2001      	movs	r0, #1
 8000354:	469e      	mov	lr, r3
 8000356:	2d00      	cmp	r5, #0
 8000358:	d0e0      	beq.n	800031c <__udivmoddi4+0xa4>
 800035a:	e9c5 4e00 	strd	r4, lr, [r5]
 800035e:	e7dd      	b.n	800031c <__udivmoddi4+0xa4>
 8000360:	b902      	cbnz	r2, 8000364 <__udivmoddi4+0xec>
 8000362:	deff      	udf	#255	; 0xff
 8000364:	fab2 f282 	clz	r2, r2
 8000368:	2a00      	cmp	r2, #0
 800036a:	f040 8092 	bne.w	8000492 <__udivmoddi4+0x21a>
 800036e:	eba1 010c 	sub.w	r1, r1, ip
 8000372:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000376:	fa1f fe8c 	uxth.w	lr, ip
 800037a:	2601      	movs	r6, #1
 800037c:	0c20      	lsrs	r0, r4, #16
 800037e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000382:	fb07 1113 	mls	r1, r7, r3, r1
 8000386:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038a:	fb0e f003 	mul.w	r0, lr, r3
 800038e:	4288      	cmp	r0, r1
 8000390:	d908      	bls.n	80003a4 <__udivmoddi4+0x12c>
 8000392:	eb1c 0101 	adds.w	r1, ip, r1
 8000396:	f103 38ff 	add.w	r8, r3, #4294967295
 800039a:	d202      	bcs.n	80003a2 <__udivmoddi4+0x12a>
 800039c:	4288      	cmp	r0, r1
 800039e:	f200 80cb 	bhi.w	8000538 <__udivmoddi4+0x2c0>
 80003a2:	4643      	mov	r3, r8
 80003a4:	1a09      	subs	r1, r1, r0
 80003a6:	b2a4      	uxth	r4, r4
 80003a8:	fbb1 f0f7 	udiv	r0, r1, r7
 80003ac:	fb07 1110 	mls	r1, r7, r0, r1
 80003b0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003b4:	fb0e fe00 	mul.w	lr, lr, r0
 80003b8:	45a6      	cmp	lr, r4
 80003ba:	d908      	bls.n	80003ce <__udivmoddi4+0x156>
 80003bc:	eb1c 0404 	adds.w	r4, ip, r4
 80003c0:	f100 31ff 	add.w	r1, r0, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x154>
 80003c6:	45a6      	cmp	lr, r4
 80003c8:	f200 80bb 	bhi.w	8000542 <__udivmoddi4+0x2ca>
 80003cc:	4608      	mov	r0, r1
 80003ce:	eba4 040e 	sub.w	r4, r4, lr
 80003d2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003d6:	e79c      	b.n	8000312 <__udivmoddi4+0x9a>
 80003d8:	f1c6 0720 	rsb	r7, r6, #32
 80003dc:	40b3      	lsls	r3, r6
 80003de:	fa22 fc07 	lsr.w	ip, r2, r7
 80003e2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003e6:	fa20 f407 	lsr.w	r4, r0, r7
 80003ea:	fa01 f306 	lsl.w	r3, r1, r6
 80003ee:	431c      	orrs	r4, r3
 80003f0:	40f9      	lsrs	r1, r7
 80003f2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003f6:	fa00 f306 	lsl.w	r3, r0, r6
 80003fa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003fe:	0c20      	lsrs	r0, r4, #16
 8000400:	fa1f fe8c 	uxth.w	lr, ip
 8000404:	fb09 1118 	mls	r1, r9, r8, r1
 8000408:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800040c:	fb08 f00e 	mul.w	r0, r8, lr
 8000410:	4288      	cmp	r0, r1
 8000412:	fa02 f206 	lsl.w	r2, r2, r6
 8000416:	d90b      	bls.n	8000430 <__udivmoddi4+0x1b8>
 8000418:	eb1c 0101 	adds.w	r1, ip, r1
 800041c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000420:	f080 8088 	bcs.w	8000534 <__udivmoddi4+0x2bc>
 8000424:	4288      	cmp	r0, r1
 8000426:	f240 8085 	bls.w	8000534 <__udivmoddi4+0x2bc>
 800042a:	f1a8 0802 	sub.w	r8, r8, #2
 800042e:	4461      	add	r1, ip
 8000430:	1a09      	subs	r1, r1, r0
 8000432:	b2a4      	uxth	r4, r4
 8000434:	fbb1 f0f9 	udiv	r0, r1, r9
 8000438:	fb09 1110 	mls	r1, r9, r0, r1
 800043c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000440:	fb00 fe0e 	mul.w	lr, r0, lr
 8000444:	458e      	cmp	lr, r1
 8000446:	d908      	bls.n	800045a <__udivmoddi4+0x1e2>
 8000448:	eb1c 0101 	adds.w	r1, ip, r1
 800044c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000450:	d26c      	bcs.n	800052c <__udivmoddi4+0x2b4>
 8000452:	458e      	cmp	lr, r1
 8000454:	d96a      	bls.n	800052c <__udivmoddi4+0x2b4>
 8000456:	3802      	subs	r0, #2
 8000458:	4461      	add	r1, ip
 800045a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800045e:	fba0 9402 	umull	r9, r4, r0, r2
 8000462:	eba1 010e 	sub.w	r1, r1, lr
 8000466:	42a1      	cmp	r1, r4
 8000468:	46c8      	mov	r8, r9
 800046a:	46a6      	mov	lr, r4
 800046c:	d356      	bcc.n	800051c <__udivmoddi4+0x2a4>
 800046e:	d053      	beq.n	8000518 <__udivmoddi4+0x2a0>
 8000470:	b15d      	cbz	r5, 800048a <__udivmoddi4+0x212>
 8000472:	ebb3 0208 	subs.w	r2, r3, r8
 8000476:	eb61 010e 	sbc.w	r1, r1, lr
 800047a:	fa01 f707 	lsl.w	r7, r1, r7
 800047e:	fa22 f306 	lsr.w	r3, r2, r6
 8000482:	40f1      	lsrs	r1, r6
 8000484:	431f      	orrs	r7, r3
 8000486:	e9c5 7100 	strd	r7, r1, [r5]
 800048a:	2600      	movs	r6, #0
 800048c:	4631      	mov	r1, r6
 800048e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000492:	f1c2 0320 	rsb	r3, r2, #32
 8000496:	40d8      	lsrs	r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa21 f303 	lsr.w	r3, r1, r3
 80004a0:	4091      	lsls	r1, r2
 80004a2:	4301      	orrs	r1, r0
 80004a4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fbb3 f0f7 	udiv	r0, r3, r7
 80004b0:	fb07 3610 	mls	r6, r7, r0, r3
 80004b4:	0c0b      	lsrs	r3, r1, #16
 80004b6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004ba:	fb00 f60e 	mul.w	r6, r0, lr
 80004be:	429e      	cmp	r6, r3
 80004c0:	fa04 f402 	lsl.w	r4, r4, r2
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x260>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 38ff 	add.w	r8, r0, #4294967295
 80004ce:	d22f      	bcs.n	8000530 <__udivmoddi4+0x2b8>
 80004d0:	429e      	cmp	r6, r3
 80004d2:	d92d      	bls.n	8000530 <__udivmoddi4+0x2b8>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1b9b      	subs	r3, r3, r6
 80004da:	b289      	uxth	r1, r1
 80004dc:	fbb3 f6f7 	udiv	r6, r3, r7
 80004e0:	fb07 3316 	mls	r3, r7, r6, r3
 80004e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004e8:	fb06 f30e 	mul.w	r3, r6, lr
 80004ec:	428b      	cmp	r3, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x28a>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 80004f8:	d216      	bcs.n	8000528 <__udivmoddi4+0x2b0>
 80004fa:	428b      	cmp	r3, r1
 80004fc:	d914      	bls.n	8000528 <__udivmoddi4+0x2b0>
 80004fe:	3e02      	subs	r6, #2
 8000500:	4461      	add	r1, ip
 8000502:	1ac9      	subs	r1, r1, r3
 8000504:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000508:	e738      	b.n	800037c <__udivmoddi4+0x104>
 800050a:	462e      	mov	r6, r5
 800050c:	4628      	mov	r0, r5
 800050e:	e705      	b.n	800031c <__udivmoddi4+0xa4>
 8000510:	4606      	mov	r6, r0
 8000512:	e6e3      	b.n	80002dc <__udivmoddi4+0x64>
 8000514:	4618      	mov	r0, r3
 8000516:	e6f8      	b.n	800030a <__udivmoddi4+0x92>
 8000518:	454b      	cmp	r3, r9
 800051a:	d2a9      	bcs.n	8000470 <__udivmoddi4+0x1f8>
 800051c:	ebb9 0802 	subs.w	r8, r9, r2
 8000520:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000524:	3801      	subs	r0, #1
 8000526:	e7a3      	b.n	8000470 <__udivmoddi4+0x1f8>
 8000528:	4646      	mov	r6, r8
 800052a:	e7ea      	b.n	8000502 <__udivmoddi4+0x28a>
 800052c:	4620      	mov	r0, r4
 800052e:	e794      	b.n	800045a <__udivmoddi4+0x1e2>
 8000530:	4640      	mov	r0, r8
 8000532:	e7d1      	b.n	80004d8 <__udivmoddi4+0x260>
 8000534:	46d0      	mov	r8, sl
 8000536:	e77b      	b.n	8000430 <__udivmoddi4+0x1b8>
 8000538:	3b02      	subs	r3, #2
 800053a:	4461      	add	r1, ip
 800053c:	e732      	b.n	80003a4 <__udivmoddi4+0x12c>
 800053e:	4630      	mov	r0, r6
 8000540:	e709      	b.n	8000356 <__udivmoddi4+0xde>
 8000542:	4464      	add	r4, ip
 8000544:	3802      	subs	r0, #2
 8000546:	e742      	b.n	80003ce <__udivmoddi4+0x156>

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop
 800054c:	0000      	movs	r0, r0
	...

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b089      	sub	sp, #36	; 0x24
 8000554:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000556:	f000 fe38 	bl	80011ca <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800055a:	f000 f957 	bl	800080c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055e:	f000 faff 	bl	8000b60 <MX_GPIO_Init>
  MX_ETH_Init();
 8000562:	f000 f9c3 	bl	80008ec <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000566:	f000 fa9d 	bl	8000aa4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800056a:	f000 facb 	bl	8000b04 <MX_USB_OTG_FS_PCD_Init>
  MX_TIM2_Init();
 800056e:	f000 fa0b 	bl	8000988 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  // float dutyCycle = 0.75; // code 2
  float dutyCycle_r = 0;
 8000572:	f04f 0300 	mov.w	r3, #0
 8000576:	61fb      	str	r3, [r7, #28]
  float dutyCycle_g = 0;
 8000578:	f04f 0300 	mov.w	r3, #0
 800057c:	61bb      	str	r3, [r7, #24]
  float dutyCycle_b = 0;
 800057e:	f04f 0300 	mov.w	r3, #0
 8000582:	617b      	str	r3, [r7, #20]

  char str[] = "Input RGB => ";
 8000584:	4b96      	ldr	r3, [pc, #600]	; (80007e0 <main+0x290>)
 8000586:	1d3c      	adds	r4, r7, #4
 8000588:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800058a:	c407      	stmia	r4!, {r0, r1, r2}
 800058c:	8023      	strh	r3, [r4, #0]

  htim2.Instance -> CCR3 = (10000-1) * dutyCycle_b;
 800058e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000592:	ed9f 7a94 	vldr	s14, [pc, #592]	; 80007e4 <main+0x294>
 8000596:	ee67 7a87 	vmul.f32	s15, s15, s14
 800059a:	4b93      	ldr	r3, [pc, #588]	; (80007e8 <main+0x298>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005a2:	ee17 2a90 	vmov	r2, s15
 80005a6:	63da      	str	r2, [r3, #60]	; 0x3c
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80005a8:	2108      	movs	r1, #8
 80005aa:	488f      	ldr	r0, [pc, #572]	; (80007e8 <main+0x298>)
 80005ac:	f002 ffbc 	bl	8003528 <HAL_TIM_PWM_Start>
  htim2.Instance -> CCR4 = (10000-1) * dutyCycle_g;
 80005b0:	edd7 7a06 	vldr	s15, [r7, #24]
 80005b4:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80007e4 <main+0x294>
 80005b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005bc:	4b8a      	ldr	r3, [pc, #552]	; (80007e8 <main+0x298>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005c4:	ee17 2a90 	vmov	r2, s15
 80005c8:	641a      	str	r2, [r3, #64]	; 0x40
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 80005ca:	210c      	movs	r1, #12
 80005cc:	4886      	ldr	r0, [pc, #536]	; (80007e8 <main+0x298>)
 80005ce:	f002 ffab 	bl	8003528 <HAL_TIM_PWM_Start>
  htim2.Instance -> CCR1 = (10000-1) * dutyCycle_r;
 80005d2:	edd7 7a07 	vldr	s15, [r7, #28]
 80005d6:	ed9f 7a83 	vldr	s14, [pc, #524]	; 80007e4 <main+0x294>
 80005da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80005de:	4b82      	ldr	r3, [pc, #520]	; (80007e8 <main+0x298>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80005e6:	ee17 2a90 	vmov	r2, s15
 80005ea:	635a      	str	r2, [r3, #52]	; 0x34
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005ec:	2100      	movs	r1, #0
 80005ee:	487e      	ldr	r0, [pc, #504]	; (80007e8 <main+0x298>)
 80005f0:	f002 ff9a 	bl	8003528 <HAL_TIM_PWM_Start>
	  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
	  HAL_Delay(100);
	  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
	  pwm = (GPIOB->IDR & GPIO_PIN_10) >>10; */ //code 2

	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80005f4:	bf00      	nop
 80005f6:	4b7d      	ldr	r3, [pc, #500]	; (80007ec <main+0x29c>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	69db      	ldr	r3, [r3, #28]
 80005fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000600:	2b40      	cmp	r3, #64	; 0x40
 8000602:	d1f8      	bne.n	80005f6 <main+0xa6>
	  HAL_UART_Transmit(&huart3, (uint8_t*) str, strlen(str),1000);
 8000604:	1d3b      	adds	r3, r7, #4
 8000606:	4618      	mov	r0, r3
 8000608:	f7ff fe16 	bl	8000238 <strlen>
 800060c:	4603      	mov	r3, r0
 800060e:	b29a      	uxth	r2, r3
 8000610:	1d39      	adds	r1, r7, #4
 8000612:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000616:	4875      	ldr	r0, [pc, #468]	; (80007ec <main+0x29c>)
 8000618:	f003 ff78 	bl	800450c <HAL_UART_Transmit>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){
 800061c:	e020      	b.n	8000660 <main+0x110>
		  pwm_b = ((GPIOB->IDR & GPIO_PIN_10) >>10)+0 ;
 800061e:	4b74      	ldr	r3, [pc, #464]	; (80007f0 <main+0x2a0>)
 8000620:	691b      	ldr	r3, [r3, #16]
 8000622:	0a9b      	lsrs	r3, r3, #10
 8000624:	b2db      	uxtb	r3, r3
 8000626:	f003 0301 	and.w	r3, r3, #1
 800062a:	b2da      	uxtb	r2, r3
 800062c:	4b71      	ldr	r3, [pc, #452]	; (80007f4 <main+0x2a4>)
 800062e:	701a      	strb	r2, [r3, #0]
		  pwm_g = ((GPIOA->IDR & GPIO_PIN_3) >>3)+2 ;
 8000630:	4b71      	ldr	r3, [pc, #452]	; (80007f8 <main+0x2a8>)
 8000632:	691b      	ldr	r3, [r3, #16]
 8000634:	08db      	lsrs	r3, r3, #3
 8000636:	b2db      	uxtb	r3, r3
 8000638:	f003 0301 	and.w	r3, r3, #1
 800063c:	b2db      	uxtb	r3, r3
 800063e:	3302      	adds	r3, #2
 8000640:	b2da      	uxtb	r2, r3
 8000642:	4b6e      	ldr	r3, [pc, #440]	; (80007fc <main+0x2ac>)
 8000644:	701a      	strb	r2, [r3, #0]
		  pwm_r = ((GPIOA->IDR & GPIO_PIN_0) >>0)+4 ;
 8000646:	4b6c      	ldr	r3, [pc, #432]	; (80007f8 <main+0x2a8>)
 8000648:	691b      	ldr	r3, [r3, #16]
 800064a:	b2db      	uxtb	r3, r3
 800064c:	f003 0301 	and.w	r3, r3, #1
 8000650:	b2db      	uxtb	r3, r3
 8000652:	3304      	adds	r3, #4
 8000654:	b2da      	uxtb	r2, r3
 8000656:	4b6a      	ldr	r3, [pc, #424]	; (8000800 <main+0x2b0>)
 8000658:	701a      	strb	r2, [r3, #0]
		  HAL_Delay(100);
 800065a:	2064      	movs	r0, #100	; 0x64
 800065c:	f000 fe12 	bl	8001284 <HAL_Delay>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_RXNE)== RESET){
 8000660:	4b62      	ldr	r3, [pc, #392]	; (80007ec <main+0x29c>)
 8000662:	681b      	ldr	r3, [r3, #0]
 8000664:	69db      	ldr	r3, [r3, #28]
 8000666:	f003 0320 	and.w	r3, r3, #32
 800066a:	2b20      	cmp	r3, #32
 800066c:	d1d7      	bne.n	800061e <main+0xce>
	  }
	  HAL_UART_Receive(&huart3, (uint8_t*) &ch1, 1, 1000);
 800066e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000672:	2201      	movs	r2, #1
 8000674:	4963      	ldr	r1, [pc, #396]	; (8000804 <main+0x2b4>)
 8000676:	485d      	ldr	r0, [pc, #372]	; (80007ec <main+0x29c>)
 8000678:	f003 ffcb 	bl	8004612 <HAL_UART_Receive>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 800067c:	bf00      	nop
 800067e:	4b5b      	ldr	r3, [pc, #364]	; (80007ec <main+0x29c>)
 8000680:	681b      	ldr	r3, [r3, #0]
 8000682:	69db      	ldr	r3, [r3, #28]
 8000684:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000688:	2b40      	cmp	r3, #64	; 0x40
 800068a:	d1f8      	bne.n	800067e <main+0x12e>
	  HAL_UART_Transmit(&huart3, (uint8_t*) &ch1, 1,1000);
 800068c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000690:	2201      	movs	r2, #1
 8000692:	495c      	ldr	r1, [pc, #368]	; (8000804 <main+0x2b4>)
 8000694:	4855      	ldr	r0, [pc, #340]	; (80007ec <main+0x29c>)
 8000696:	f003 ff39 	bl	800450c <HAL_UART_Transmit>
	  HAL_UART_Transmit(&huart3, (uint8_t*) "\n\r", 2,1000);
 800069a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800069e:	2202      	movs	r2, #2
 80006a0:	4959      	ldr	r1, [pc, #356]	; (8000808 <main+0x2b8>)
 80006a2:	4852      	ldr	r0, [pc, #328]	; (80007ec <main+0x29c>)
 80006a4:	f003 ff32 	bl	800450c <HAL_UART_Transmit>

	  if (ch1 == 'r')
 80006a8:	4b56      	ldr	r3, [pc, #344]	; (8000804 <main+0x2b4>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b72      	cmp	r3, #114	; 0x72
 80006ae:	d12c      	bne.n	800070a <main+0x1ba>
	  {
		  dutyCycle_r += 0.2;
 80006b0:	edd7 7a07 	vldr	s15, [r7, #28]
 80006b4:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80006b8:	ed9f 6b47 	vldr	d6, [pc, #284]	; 80007d8 <main+0x288>
 80006bc:	ee37 7b06 	vadd.f64	d7, d7, d6
 80006c0:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 80006c4:	edc7 7a07 	vstr	s15, [r7, #28]
		  if(dutyCycle_r > 1)
 80006c8:	edd7 7a07 	vldr	s15, [r7, #28]
 80006cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80006d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80006d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80006d8:	dd02      	ble.n	80006e0 <main+0x190>
			  {
			  dutyCycle_r = 0;
 80006da:	f04f 0300 	mov.w	r3, #0
 80006de:	61fb      	str	r3, [r7, #28]
			  }
		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 80006e0:	2100      	movs	r1, #0
 80006e2:	4841      	ldr	r0, [pc, #260]	; (80007e8 <main+0x298>)
 80006e4:	f003 f81a 	bl	800371c <HAL_TIM_PWM_Stop>
		  htim2.Instance -> CCR1 = (10000-1) * dutyCycle_r;
 80006e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80006ec:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80007e4 <main+0x294>
 80006f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80006f4:	4b3c      	ldr	r3, [pc, #240]	; (80007e8 <main+0x298>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80006fc:	ee17 2a90 	vmov	r2, s15
 8000700:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000702:	2100      	movs	r1, #0
 8000704:	4838      	ldr	r0, [pc, #224]	; (80007e8 <main+0x298>)
 8000706:	f002 ff0f 	bl	8003528 <HAL_TIM_PWM_Start>
	  }
	  if (ch1 == 'g')
 800070a:	4b3e      	ldr	r3, [pc, #248]	; (8000804 <main+0x2b4>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	2b67      	cmp	r3, #103	; 0x67
 8000710:	d12c      	bne.n	800076c <main+0x21c>
	  	  {
	  		  dutyCycle_g += 0.2;
 8000712:	edd7 7a06 	vldr	s15, [r7, #24]
 8000716:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800071a:	ed9f 6b2f 	vldr	d6, [pc, #188]	; 80007d8 <main+0x288>
 800071e:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000722:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 8000726:	edc7 7a06 	vstr	s15, [r7, #24]
	  		  if(dutyCycle_g > 1)
 800072a:	edd7 7a06 	vldr	s15, [r7, #24]
 800072e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000732:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800073a:	dd02      	ble.n	8000742 <main+0x1f2>
	  			  {
	  			  dutyCycle_g = 0;
 800073c:	f04f 0300 	mov.w	r3, #0
 8000740:	61bb      	str	r3, [r7, #24]
	  			  }
	  		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_4);
 8000742:	210c      	movs	r1, #12
 8000744:	4828      	ldr	r0, [pc, #160]	; (80007e8 <main+0x298>)
 8000746:	f002 ffe9 	bl	800371c <HAL_TIM_PWM_Stop>
	  		  htim2.Instance -> CCR4 = (10000-1) * dutyCycle_g;
 800074a:	edd7 7a06 	vldr	s15, [r7, #24]
 800074e:	ed9f 7a25 	vldr	s14, [pc, #148]	; 80007e4 <main+0x294>
 8000752:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000756:	4b24      	ldr	r3, [pc, #144]	; (80007e8 <main+0x298>)
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800075e:	ee17 2a90 	vmov	r2, s15
 8000762:	641a      	str	r2, [r3, #64]	; 0x40
	  		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000764:	210c      	movs	r1, #12
 8000766:	4820      	ldr	r0, [pc, #128]	; (80007e8 <main+0x298>)
 8000768:	f002 fede 	bl	8003528 <HAL_TIM_PWM_Start>
	  }
	  if (ch1 == 'b')
 800076c:	4b25      	ldr	r3, [pc, #148]	; (8000804 <main+0x2b4>)
 800076e:	781b      	ldrb	r3, [r3, #0]
 8000770:	2b62      	cmp	r3, #98	; 0x62
 8000772:	f47f af3f 	bne.w	80005f4 <main+0xa4>
	  	  {
		  dutyCycle_b += 0.2;
 8000776:	edd7 7a05 	vldr	s15, [r7, #20]
 800077a:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 800077e:	ed9f 6b16 	vldr	d6, [pc, #88]	; 80007d8 <main+0x288>
 8000782:	ee37 7b06 	vadd.f64	d7, d7, d6
 8000786:	eef7 7bc7 	vcvt.f32.f64	s15, d7
 800078a:	edc7 7a05 	vstr	s15, [r7, #20]
	  		  if(dutyCycle_b > 1)
 800078e:	edd7 7a05 	vldr	s15, [r7, #20]
 8000792:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8000796:	eef4 7ac7 	vcmpe.f32	s15, s14
 800079a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800079e:	dd02      	ble.n	80007a6 <main+0x256>
	  			  {
	  			  dutyCycle_b = 0;
 80007a0:	f04f 0300 	mov.w	r3, #0
 80007a4:	617b      	str	r3, [r7, #20]
	  			  }
	  		  HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_3);
 80007a6:	2108      	movs	r1, #8
 80007a8:	480f      	ldr	r0, [pc, #60]	; (80007e8 <main+0x298>)
 80007aa:	f002 ffb7 	bl	800371c <HAL_TIM_PWM_Stop>
	  		  htim2.Instance -> CCR3 = (10000-1) * dutyCycle_b;
 80007ae:	edd7 7a05 	vldr	s15, [r7, #20]
 80007b2:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80007e4 <main+0x294>
 80007b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80007ba:	4b0b      	ldr	r3, [pc, #44]	; (80007e8 <main+0x298>)
 80007bc:	681b      	ldr	r3, [r3, #0]
 80007be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80007c2:	ee17 2a90 	vmov	r2, s15
 80007c6:	63da      	str	r2, [r3, #60]	; 0x3c
	  		  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80007c8:	2108      	movs	r1, #8
 80007ca:	4807      	ldr	r0, [pc, #28]	; (80007e8 <main+0x298>)
 80007cc:	f002 feac 	bl	8003528 <HAL_TIM_PWM_Start>
	  while(__HAL_UART_GET_FLAG(&huart3,UART_FLAG_TC)==RESET){}
 80007d0:	e710      	b.n	80005f4 <main+0xa4>
 80007d2:	bf00      	nop
 80007d4:	f3af 8000 	nop.w
 80007d8:	9999999a 	.word	0x9999999a
 80007dc:	3fc99999 	.word	0x3fc99999
 80007e0:	0800562c 	.word	0x0800562c
 80007e4:	461c3c00 	.word	0x461c3c00
 80007e8:	20000250 	.word	0x20000250
 80007ec:	2000029c 	.word	0x2000029c
 80007f0:	40020400 	.word	0x40020400
 80007f4:	2000082e 	.word	0x2000082e
 80007f8:	40020000 	.word	0x40020000
 80007fc:	2000082d 	.word	0x2000082d
 8000800:	2000082c 	.word	0x2000082c
 8000804:	2000082f 	.word	0x2000082f
 8000808:	08005628 	.word	0x08005628

0800080c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b094      	sub	sp, #80	; 0x50
 8000810:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000812:	f107 031c 	add.w	r3, r7, #28
 8000816:	2234      	movs	r2, #52	; 0x34
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f004 fef0 	bl	8005600 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000820:	f107 0308 	add.w	r3, r7, #8
 8000824:	2200      	movs	r2, #0
 8000826:	601a      	str	r2, [r3, #0]
 8000828:	605a      	str	r2, [r3, #4]
 800082a:	609a      	str	r2, [r3, #8]
 800082c:	60da      	str	r2, [r3, #12]
 800082e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000830:	f001 fc66 	bl	8002100 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000834:	4b2b      	ldr	r3, [pc, #172]	; (80008e4 <SystemClock_Config+0xd8>)
 8000836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000838:	4a2a      	ldr	r2, [pc, #168]	; (80008e4 <SystemClock_Config+0xd8>)
 800083a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800083e:	6413      	str	r3, [r2, #64]	; 0x40
 8000840:	4b28      	ldr	r3, [pc, #160]	; (80008e4 <SystemClock_Config+0xd8>)
 8000842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000844:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800084c:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <SystemClock_Config+0xdc>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	4a25      	ldr	r2, [pc, #148]	; (80008e8 <SystemClock_Config+0xdc>)
 8000852:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000856:	6013      	str	r3, [r2, #0]
 8000858:	4b23      	ldr	r3, [pc, #140]	; (80008e8 <SystemClock_Config+0xdc>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000860:	603b      	str	r3, [r7, #0]
 8000862:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000864:	2301      	movs	r3, #1
 8000866:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000868:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800086c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800086e:	2302      	movs	r3, #2
 8000870:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000872:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000876:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000878:	2304      	movs	r3, #4
 800087a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 216;
 800087c:	23d8      	movs	r3, #216	; 0xd8
 800087e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000880:	2302      	movs	r3, #2
 8000882:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 9;
 8000884:	2309      	movs	r3, #9
 8000886:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000888:	2302      	movs	r3, #2
 800088a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4618      	mov	r0, r3
 8000892:	f001 fc95 	bl	80021c0 <HAL_RCC_OscConfig>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800089c:	f000 fa02 	bl	8000ca4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80008a0:	f001 fc3e 	bl	8002120 <HAL_PWREx_EnableOverDrive>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80008aa:	f000 f9fb 	bl	8000ca4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008ae:	230f      	movs	r3, #15
 80008b0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008b2:	2302      	movs	r3, #2
 80008b4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008b6:	2300      	movs	r3, #0
 80008b8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80008ba:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80008be:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80008c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008c4:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80008c6:	f107 0308 	add.w	r3, r7, #8
 80008ca:	2107      	movs	r1, #7
 80008cc:	4618      	mov	r0, r3
 80008ce:	f001 ff25 	bl	800271c <HAL_RCC_ClockConfig>
 80008d2:	4603      	mov	r3, r0
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d001      	beq.n	80008dc <SystemClock_Config+0xd0>
  {
    Error_Handler();
 80008d8:	f000 f9e4 	bl	8000ca4 <Error_Handler>
  }
}
 80008dc:	bf00      	nop
 80008de:	3750      	adds	r7, #80	; 0x50
 80008e0:	46bd      	mov	sp, r7
 80008e2:	bd80      	pop	{r7, pc}
 80008e4:	40023800 	.word	0x40023800
 80008e8:	40007000 	.word	0x40007000

080008ec <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008f0:	4b1f      	ldr	r3, [pc, #124]	; (8000970 <MX_ETH_Init+0x84>)
 80008f2:	4a20      	ldr	r2, [pc, #128]	; (8000974 <MX_ETH_Init+0x88>)
 80008f4:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008f6:	4b20      	ldr	r3, [pc, #128]	; (8000978 <MX_ETH_Init+0x8c>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	; (8000978 <MX_ETH_Init+0x8c>)
 80008fe:	2280      	movs	r2, #128	; 0x80
 8000900:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000902:	4b1d      	ldr	r3, [pc, #116]	; (8000978 <MX_ETH_Init+0x8c>)
 8000904:	22e1      	movs	r2, #225	; 0xe1
 8000906:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000908:	4b1b      	ldr	r3, [pc, #108]	; (8000978 <MX_ETH_Init+0x8c>)
 800090a:	2200      	movs	r2, #0
 800090c:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800090e:	4b1a      	ldr	r3, [pc, #104]	; (8000978 <MX_ETH_Init+0x8c>)
 8000910:	2200      	movs	r2, #0
 8000912:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000914:	4b18      	ldr	r3, [pc, #96]	; (8000978 <MX_ETH_Init+0x8c>)
 8000916:	2200      	movs	r2, #0
 8000918:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <MX_ETH_Init+0x84>)
 800091c:	4a16      	ldr	r2, [pc, #88]	; (8000978 <MX_ETH_Init+0x8c>)
 800091e:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000920:	4b13      	ldr	r3, [pc, #76]	; (8000970 <MX_ETH_Init+0x84>)
 8000922:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000926:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000928:	4b11      	ldr	r3, [pc, #68]	; (8000970 <MX_ETH_Init+0x84>)
 800092a:	4a14      	ldr	r2, [pc, #80]	; (800097c <MX_ETH_Init+0x90>)
 800092c:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800092e:	4b10      	ldr	r3, [pc, #64]	; (8000970 <MX_ETH_Init+0x84>)
 8000930:	4a13      	ldr	r2, [pc, #76]	; (8000980 <MX_ETH_Init+0x94>)
 8000932:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000934:	4b0e      	ldr	r3, [pc, #56]	; (8000970 <MX_ETH_Init+0x84>)
 8000936:	f240 52f4 	movw	r2, #1524	; 0x5f4
 800093a:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800093c:	480c      	ldr	r0, [pc, #48]	; (8000970 <MX_ETH_Init+0x84>)
 800093e:	f000 fdab 	bl	8001498 <HAL_ETH_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000948:	f000 f9ac 	bl	8000ca4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800094c:	2238      	movs	r2, #56	; 0x38
 800094e:	2100      	movs	r1, #0
 8000950:	480c      	ldr	r0, [pc, #48]	; (8000984 <MX_ETH_Init+0x98>)
 8000952:	f004 fe55 	bl	8005600 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000956:	4b0b      	ldr	r3, [pc, #44]	; (8000984 <MX_ETH_Init+0x98>)
 8000958:	2221      	movs	r2, #33	; 0x21
 800095a:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800095c:	4b09      	ldr	r3, [pc, #36]	; (8000984 <MX_ETH_Init+0x98>)
 800095e:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000962:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000964:	4b07      	ldr	r3, [pc, #28]	; (8000984 <MX_ETH_Init+0x98>)
 8000966:	2200      	movs	r2, #0
 8000968:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800096a:	bf00      	nop
 800096c:	bd80      	pop	{r7, pc}
 800096e:	bf00      	nop
 8000970:	200001a0 	.word	0x200001a0
 8000974:	40028000 	.word	0x40028000
 8000978:	20000830 	.word	0x20000830
 800097c:	200000ac 	.word	0x200000ac
 8000980:	2000000c 	.word	0x2000000c
 8000984:	20000168 	.word	0x20000168

08000988 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b08e      	sub	sp, #56	; 0x38
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800098e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800099c:	f107 031c 	add.w	r3, r7, #28
 80009a0:	2200      	movs	r2, #0
 80009a2:	601a      	str	r2, [r3, #0]
 80009a4:	605a      	str	r2, [r3, #4]
 80009a6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80009a8:	463b      	mov	r3, r7
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
 80009ae:	605a      	str	r2, [r3, #4]
 80009b0:	609a      	str	r2, [r3, #8]
 80009b2:	60da      	str	r2, [r3, #12]
 80009b4:	611a      	str	r2, [r3, #16]
 80009b6:	615a      	str	r2, [r3, #20]
 80009b8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80009ba:	4b39      	ldr	r3, [pc, #228]	; (8000aa0 <MX_TIM2_Init+0x118>)
 80009bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80009c0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 108-1;
 80009c2:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <MX_TIM2_Init+0x118>)
 80009c4:	226b      	movs	r2, #107	; 0x6b
 80009c6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009c8:	4b35      	ldr	r3, [pc, #212]	; (8000aa0 <MX_TIM2_Init+0x118>)
 80009ca:	2200      	movs	r2, #0
 80009cc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000-1;
 80009ce:	4b34      	ldr	r3, [pc, #208]	; (8000aa0 <MX_TIM2_Init+0x118>)
 80009d0:	f242 720f 	movw	r2, #9999	; 0x270f
 80009d4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009d6:	4b32      	ldr	r3, [pc, #200]	; (8000aa0 <MX_TIM2_Init+0x118>)
 80009d8:	2200      	movs	r2, #0
 80009da:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009dc:	4b30      	ldr	r3, [pc, #192]	; (8000aa0 <MX_TIM2_Init+0x118>)
 80009de:	2200      	movs	r2, #0
 80009e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80009e2:	482f      	ldr	r0, [pc, #188]	; (8000aa0 <MX_TIM2_Init+0x118>)
 80009e4:	f002 fce8 	bl	80033b8 <HAL_TIM_Base_Init>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d001      	beq.n	80009f2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80009ee:	f000 f959 	bl	8000ca4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80009f6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80009f8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80009fc:	4619      	mov	r1, r3
 80009fe:	4828      	ldr	r0, [pc, #160]	; (8000aa0 <MX_TIM2_Init+0x118>)
 8000a00:	f003 f820 	bl	8003a44 <HAL_TIM_ConfigClockSource>
 8000a04:	4603      	mov	r3, r0
 8000a06:	2b00      	cmp	r3, #0
 8000a08:	d001      	beq.n	8000a0e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000a0a:	f000 f94b 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000a0e:	4824      	ldr	r0, [pc, #144]	; (8000aa0 <MX_TIM2_Init+0x118>)
 8000a10:	f002 fd29 	bl	8003466 <HAL_TIM_PWM_Init>
 8000a14:	4603      	mov	r3, r0
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d001      	beq.n	8000a1e <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000a1a:	f000 f943 	bl	8000ca4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a22:	2300      	movs	r3, #0
 8000a24:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000a26:	f107 031c 	add.w	r3, r7, #28
 8000a2a:	4619      	mov	r1, r3
 8000a2c:	481c      	ldr	r0, [pc, #112]	; (8000aa0 <MX_TIM2_Init+0x118>)
 8000a2e:	f003 fc91 	bl	8004354 <HAL_TIMEx_MasterConfigSynchronization>
 8000a32:	4603      	mov	r3, r0
 8000a34:	2b00      	cmp	r3, #0
 8000a36:	d001      	beq.n	8000a3c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000a38:	f000 f934 	bl	8000ca4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a3c:	2360      	movs	r3, #96	; 0x60
 8000a3e:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10000/4-1;
 8000a40:	f640 13c3 	movw	r3, #2499	; 0x9c3
 8000a44:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a46:	2300      	movs	r3, #0
 8000a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a4e:	463b      	mov	r3, r7
 8000a50:	2200      	movs	r2, #0
 8000a52:	4619      	mov	r1, r3
 8000a54:	4812      	ldr	r0, [pc, #72]	; (8000aa0 <MX_TIM2_Init+0x118>)
 8000a56:	f002 fee1 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8000a60:	f000 f920 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000a64:	463b      	mov	r3, r7
 8000a66:	2208      	movs	r2, #8
 8000a68:	4619      	mov	r1, r3
 8000a6a:	480d      	ldr	r0, [pc, #52]	; (8000aa0 <MX_TIM2_Init+0x118>)
 8000a6c:	f002 fed6 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d001      	beq.n	8000a7a <MX_TIM2_Init+0xf2>
  {
    Error_Handler();
 8000a76:	f000 f915 	bl	8000ca4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000a7a:	463b      	mov	r3, r7
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	4619      	mov	r1, r3
 8000a80:	4807      	ldr	r0, [pc, #28]	; (8000aa0 <MX_TIM2_Init+0x118>)
 8000a82:	f002 fecb 	bl	800381c <HAL_TIM_PWM_ConfigChannel>
 8000a86:	4603      	mov	r3, r0
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d001      	beq.n	8000a90 <MX_TIM2_Init+0x108>
  {
    Error_Handler();
 8000a8c:	f000 f90a 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000a90:	4803      	ldr	r0, [pc, #12]	; (8000aa0 <MX_TIM2_Init+0x118>)
 8000a92:	f000 fa07 	bl	8000ea4 <HAL_TIM_MspPostInit>

}
 8000a96:	bf00      	nop
 8000a98:	3738      	adds	r7, #56	; 0x38
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000250 	.word	0x20000250

08000aa4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000aa8:	4b14      	ldr	r3, [pc, #80]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000aaa:	4a15      	ldr	r2, [pc, #84]	; (8000b00 <MX_USART3_UART_Init+0x5c>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000aae:	4b13      	ldr	r3, [pc, #76]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b11      	ldr	r3, [pc, #68]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b09      	ldr	r3, [pc, #36]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000adc:	2200      	movs	r2, #0
 8000ade:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ae6:	4805      	ldr	r0, [pc, #20]	; (8000afc <MX_USART3_UART_Init+0x58>)
 8000ae8:	f003 fcc2 	bl	8004470 <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000af2:	f000 f8d7 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	2000029c 	.word	0x2000029c
 8000b00:	40004800 	.word	0x40004800

08000b04 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b0a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000b0e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000b10:	4b12      	ldr	r3, [pc, #72]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b12:	2206      	movs	r2, #6
 8000b14:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000b16:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b18:	2202      	movs	r2, #2
 8000b1a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000b1c:	4b0f      	ldr	r3, [pc, #60]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000b22:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b24:	2202      	movs	r2, #2
 8000b26:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000b28:	4b0c      	ldr	r3, [pc, #48]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b2a:	2201      	movs	r2, #1
 8000b2c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000b2e:	4b0b      	ldr	r3, [pc, #44]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000b34:	4b09      	ldr	r3, [pc, #36]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b36:	2200      	movs	r2, #0
 8000b38:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000b3a:	4b08      	ldr	r3, [pc, #32]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b3c:	2201      	movs	r2, #1
 8000b3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000b46:	4805      	ldr	r0, [pc, #20]	; (8000b5c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000b48:	f001 f991 	bl	8001e6e <HAL_PCD_Init>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000b52:	f000 f8a7 	bl	8000ca4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	bd80      	pop	{r7, pc}
 8000b5a:	bf00      	nop
 8000b5c:	20000324 	.word	0x20000324

08000b60 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b66:	f107 031c 	add.w	r3, r7, #28
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	601a      	str	r2, [r3, #0]
 8000b6e:	605a      	str	r2, [r3, #4]
 8000b70:	609a      	str	r2, [r3, #8]
 8000b72:	60da      	str	r2, [r3, #12]
 8000b74:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b76:	4b47      	ldr	r3, [pc, #284]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7a:	4a46      	ldr	r2, [pc, #280]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000b7c:	f043 0304 	orr.w	r3, r3, #4
 8000b80:	6313      	str	r3, [r2, #48]	; 0x30
 8000b82:	4b44      	ldr	r3, [pc, #272]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b86:	f003 0304 	and.w	r3, r3, #4
 8000b8a:	61bb      	str	r3, [r7, #24]
 8000b8c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000b8e:	4b41      	ldr	r3, [pc, #260]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b92:	4a40      	ldr	r2, [pc, #256]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000b94:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b98:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9a:	4b3e      	ldr	r3, [pc, #248]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ba2:	617b      	str	r3, [r7, #20]
 8000ba4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b3b      	ldr	r3, [pc, #236]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000baa:	4a3a      	ldr	r2, [pc, #232]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bac:	f043 0301 	orr.w	r3, r3, #1
 8000bb0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb2:	4b38      	ldr	r3, [pc, #224]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	613b      	str	r3, [r7, #16]
 8000bbc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bbe:	4b35      	ldr	r3, [pc, #212]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc2:	4a34      	ldr	r2, [pc, #208]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bc4:	f043 0302 	orr.w	r3, r3, #2
 8000bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bca:	4b32      	ldr	r3, [pc, #200]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bce:	f003 0302 	and.w	r3, r3, #2
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bd6:	4b2f      	ldr	r3, [pc, #188]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bda:	4a2e      	ldr	r2, [pc, #184]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bdc:	f043 0308 	orr.w	r3, r3, #8
 8000be0:	6313      	str	r3, [r2, #48]	; 0x30
 8000be2:	4b2c      	ldr	r3, [pc, #176]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000be6:	f003 0308 	and.w	r3, r3, #8
 8000bea:	60bb      	str	r3, [r7, #8]
 8000bec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bee:	4b29      	ldr	r3, [pc, #164]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a28      	ldr	r2, [pc, #160]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b26      	ldr	r3, [pc, #152]	; (8000c94 <MX_GPIO_Init+0x134>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c06:	2200      	movs	r2, #0
 8000c08:	f244 0181 	movw	r1, #16513	; 0x4081
 8000c0c:	4822      	ldr	r0, [pc, #136]	; (8000c98 <MX_GPIO_Init+0x138>)
 8000c0e:	f001 f915 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000c12:	2200      	movs	r2, #0
 8000c14:	2140      	movs	r1, #64	; 0x40
 8000c16:	4821      	ldr	r0, [pc, #132]	; (8000c9c <MX_GPIO_Init+0x13c>)
 8000c18:	f001 f910 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000c1c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000c22:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000c26:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000c2c:	f107 031c 	add.w	r3, r7, #28
 8000c30:	4619      	mov	r1, r3
 8000c32:	481b      	ldr	r0, [pc, #108]	; (8000ca0 <MX_GPIO_Init+0x140>)
 8000c34:	f000 ff56 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000c38:	f244 0381 	movw	r3, #16513	; 0x4081
 8000c3c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c3e:	2301      	movs	r3, #1
 8000c40:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c4a:	f107 031c 	add.w	r3, r7, #28
 8000c4e:	4619      	mov	r1, r3
 8000c50:	4811      	ldr	r0, [pc, #68]	; (8000c98 <MX_GPIO_Init+0x138>)
 8000c52:	f000 ff47 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000c56:	2340      	movs	r3, #64	; 0x40
 8000c58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000c66:	f107 031c 	add.w	r3, r7, #28
 8000c6a:	4619      	mov	r1, r3
 8000c6c:	480b      	ldr	r0, [pc, #44]	; (8000c9c <MX_GPIO_Init+0x13c>)
 8000c6e:	f000 ff39 	bl	8001ae4 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c76:	2300      	movs	r3, #0
 8000c78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c7e:	f107 031c 	add.w	r3, r7, #28
 8000c82:	4619      	mov	r1, r3
 8000c84:	4805      	ldr	r0, [pc, #20]	; (8000c9c <MX_GPIO_Init+0x13c>)
 8000c86:	f000 ff2d 	bl	8001ae4 <HAL_GPIO_Init>

}
 8000c8a:	bf00      	nop
 8000c8c:	3730      	adds	r7, #48	; 0x30
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40023800 	.word	0x40023800
 8000c98:	40020400 	.word	0x40020400
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	40020800 	.word	0x40020800

08000ca4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ca8:	b672      	cpsid	i
}
 8000caa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cac:	e7fe      	b.n	8000cac <Error_Handler+0x8>
	...

08000cb0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb0:	b480      	push	{r7}
 8000cb2:	b083      	sub	sp, #12
 8000cb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000cb6:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cbc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cc0:	6413      	str	r3, [r2, #64]	; 0x40
 8000cc2:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cca:	607b      	str	r3, [r7, #4]
 8000ccc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cce:	4b09      	ldr	r3, [pc, #36]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cd2:	4a08      	ldr	r2, [pc, #32]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HAL_MspInit+0x44>)
 8000cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ce2:	603b      	str	r3, [r7, #0]
 8000ce4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ce6:	bf00      	nop
 8000ce8:	370c      	adds	r7, #12
 8000cea:	46bd      	mov	sp, r7
 8000cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf0:	4770      	bx	lr
 8000cf2:	bf00      	nop
 8000cf4:	40023800 	.word	0x40023800

08000cf8 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08e      	sub	sp, #56	; 0x38
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a4e      	ldr	r2, [pc, #312]	; (8000e50 <HAL_ETH_MspInit+0x158>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	f040 8096 	bne.w	8000e48 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8000d1c:	4b4d      	ldr	r3, [pc, #308]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d20:	4a4c      	ldr	r2, [pc, #304]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d22:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000d26:	6313      	str	r3, [r2, #48]	; 0x30
 8000d28:	4b4a      	ldr	r3, [pc, #296]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d30:	623b      	str	r3, [r7, #32]
 8000d32:	6a3b      	ldr	r3, [r7, #32]
 8000d34:	4b47      	ldr	r3, [pc, #284]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d38:	4a46      	ldr	r2, [pc, #280]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d3a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000d3e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d40:	4b44      	ldr	r3, [pc, #272]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d44:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000d48:	61fb      	str	r3, [r7, #28]
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	4b41      	ldr	r3, [pc, #260]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d50:	4a40      	ldr	r2, [pc, #256]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000d56:	6313      	str	r3, [r2, #48]	; 0x30
 8000d58:	4b3e      	ldr	r3, [pc, #248]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000d60:	61bb      	str	r3, [r7, #24]
 8000d62:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d64:	4b3b      	ldr	r3, [pc, #236]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d68:	4a3a      	ldr	r2, [pc, #232]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d6a:	f043 0304 	orr.w	r3, r3, #4
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
 8000d70:	4b38      	ldr	r3, [pc, #224]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d74:	f003 0304 	and.w	r3, r3, #4
 8000d78:	617b      	str	r3, [r7, #20]
 8000d7a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d7c:	4b35      	ldr	r3, [pc, #212]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d80:	4a34      	ldr	r2, [pc, #208]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d82:	f043 0301 	orr.w	r3, r3, #1
 8000d86:	6313      	str	r3, [r2, #48]	; 0x30
 8000d88:	4b32      	ldr	r3, [pc, #200]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8c:	f003 0301 	and.w	r3, r3, #1
 8000d90:	613b      	str	r3, [r7, #16]
 8000d92:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d94:	4b2f      	ldr	r3, [pc, #188]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d98:	4a2e      	ldr	r2, [pc, #184]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000d9a:	f043 0302 	orr.w	r3, r3, #2
 8000d9e:	6313      	str	r3, [r2, #48]	; 0x30
 8000da0:	4b2c      	ldr	r3, [pc, #176]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000da2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da4:	f003 0302 	and.w	r3, r3, #2
 8000da8:	60fb      	str	r3, [r7, #12]
 8000daa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dac:	4b29      	ldr	r3, [pc, #164]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db0:	4a28      	ldr	r2, [pc, #160]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000db2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000db6:	6313      	str	r3, [r2, #48]	; 0x30
 8000db8:	4b26      	ldr	r3, [pc, #152]	; (8000e54 <HAL_ETH_MspInit+0x15c>)
 8000dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000dc4:	2332      	movs	r3, #50	; 0x32
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc8:	2302      	movs	r3, #2
 8000dca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dd0:	2303      	movs	r3, #3
 8000dd2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000dd4:	230b      	movs	r3, #11
 8000dd6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000dd8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	481e      	ldr	r0, [pc, #120]	; (8000e58 <HAL_ETH_MspInit+0x160>)
 8000de0:	f000 fe80 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000de4:	2386      	movs	r3, #134	; 0x86
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000de8:	2302      	movs	r3, #2
 8000dea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000df4:	230b      	movs	r3, #11
 8000df6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000df8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4817      	ldr	r0, [pc, #92]	; (8000e5c <HAL_ETH_MspInit+0x164>)
 8000e00:	f000 fe70 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000e04:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e12:	2303      	movs	r3, #3
 8000e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e16:	230b      	movs	r3, #11
 8000e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e1e:	4619      	mov	r1, r3
 8000e20:	480f      	ldr	r0, [pc, #60]	; (8000e60 <HAL_ETH_MspInit+0x168>)
 8000e22:	f000 fe5f 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000e26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000e2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e30:	2300      	movs	r3, #0
 8000e32:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e34:	2303      	movs	r3, #3
 8000e36:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000e38:	230b      	movs	r3, #11
 8000e3a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e3c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e40:	4619      	mov	r1, r3
 8000e42:	4808      	ldr	r0, [pc, #32]	; (8000e64 <HAL_ETH_MspInit+0x16c>)
 8000e44:	f000 fe4e 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000e48:	bf00      	nop
 8000e4a:	3738      	adds	r7, #56	; 0x38
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40028000 	.word	0x40028000
 8000e54:	40023800 	.word	0x40023800
 8000e58:	40020800 	.word	0x40020800
 8000e5c:	40020000 	.word	0x40020000
 8000e60:	40020400 	.word	0x40020400
 8000e64:	40021800 	.word	0x40021800

08000e68 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e78:	d10b      	bne.n	8000e92 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e7a:	4b09      	ldr	r3, [pc, #36]	; (8000ea0 <HAL_TIM_Base_MspInit+0x38>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_TIM_Base_MspInit+0x38>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_TIM_Base_MspInit+0x38>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	60fb      	str	r3, [r7, #12]
 8000e90:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000e92:	bf00      	nop
 8000e94:	3714      	adds	r7, #20
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	40023800 	.word	0x40023800

08000ea4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b08a      	sub	sp, #40	; 0x28
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eac:	f107 0314 	add.w	r3, r7, #20
 8000eb0:	2200      	movs	r2, #0
 8000eb2:	601a      	str	r2, [r3, #0]
 8000eb4:	605a      	str	r2, [r3, #4]
 8000eb6:	609a      	str	r2, [r3, #8]
 8000eb8:	60da      	str	r2, [r3, #12]
 8000eba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000ec4:	d138      	bne.n	8000f38 <HAL_TIM_MspPostInit+0x94>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ec6:	4b1e      	ldr	r3, [pc, #120]	; (8000f40 <HAL_TIM_MspPostInit+0x9c>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eca:	4a1d      	ldr	r2, [pc, #116]	; (8000f40 <HAL_TIM_MspPostInit+0x9c>)
 8000ecc:	f043 0301 	orr.w	r3, r3, #1
 8000ed0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ed2:	4b1b      	ldr	r3, [pc, #108]	; (8000f40 <HAL_TIM_MspPostInit+0x9c>)
 8000ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed6:	f003 0301 	and.w	r3, r3, #1
 8000eda:	613b      	str	r3, [r7, #16]
 8000edc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ede:	4b18      	ldr	r3, [pc, #96]	; (8000f40 <HAL_TIM_MspPostInit+0x9c>)
 8000ee0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee2:	4a17      	ldr	r2, [pc, #92]	; (8000f40 <HAL_TIM_MspPostInit+0x9c>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eea:	4b15      	ldr	r3, [pc, #84]	; (8000f40 <HAL_TIM_MspPostInit+0x9c>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60fb      	str	r3, [r7, #12]
 8000ef4:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    PA3     ------> TIM2_CH4
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000ef6:	2309      	movs	r3, #9
 8000ef8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000efa:	2302      	movs	r3, #2
 8000efc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f02:	2300      	movs	r3, #0
 8000f04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f06:	2301      	movs	r3, #1
 8000f08:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f0a:	f107 0314 	add.w	r3, r7, #20
 8000f0e:	4619      	mov	r1, r3
 8000f10:	480c      	ldr	r0, [pc, #48]	; (8000f44 <HAL_TIM_MspPostInit+0xa0>)
 8000f12:	f000 fde7 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f20:	2300      	movs	r3, #0
 8000f22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f24:	2303      	movs	r3, #3
 8000f26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000f28:	2301      	movs	r3, #1
 8000f2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f2c:	f107 0314 	add.w	r3, r7, #20
 8000f30:	4619      	mov	r1, r3
 8000f32:	4805      	ldr	r0, [pc, #20]	; (8000f48 <HAL_TIM_MspPostInit+0xa4>)
 8000f34:	f000 fdd6 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000f38:	bf00      	nop
 8000f3a:	3728      	adds	r7, #40	; 0x28
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	40023800 	.word	0x40023800
 8000f44:	40020000 	.word	0x40020000
 8000f48:	40020400 	.word	0x40020400

08000f4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b0ae      	sub	sp, #184	; 0xb8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f54:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000f58:	2200      	movs	r2, #0
 8000f5a:	601a      	str	r2, [r3, #0]
 8000f5c:	605a      	str	r2, [r3, #4]
 8000f5e:	609a      	str	r2, [r3, #8]
 8000f60:	60da      	str	r2, [r3, #12]
 8000f62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f64:	f107 0314 	add.w	r3, r7, #20
 8000f68:	2290      	movs	r2, #144	; 0x90
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f004 fb47 	bl	8005600 <memset>
  if(huart->Instance==USART3)
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	4a22      	ldr	r2, [pc, #136]	; (8001000 <HAL_UART_MspInit+0xb4>)
 8000f78:	4293      	cmp	r3, r2
 8000f7a:	d13c      	bne.n	8000ff6 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f7c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000f80:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000f82:	2300      	movs	r3, #0
 8000f84:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f86:	f107 0314 	add.w	r3, r7, #20
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f001 fdec 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f96:	f7ff fe85 	bl	8000ca4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <HAL_UART_MspInit+0xb8>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a19      	ldr	r2, [pc, #100]	; (8001004 <HAL_UART_MspInit+0xb8>)
 8000fa0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <HAL_UART_MspInit+0xb8>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fae:	613b      	str	r3, [r7, #16]
 8000fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000fb2:	4b14      	ldr	r3, [pc, #80]	; (8001004 <HAL_UART_MspInit+0xb8>)
 8000fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb6:	4a13      	ldr	r2, [pc, #76]	; (8001004 <HAL_UART_MspInit+0xb8>)
 8000fb8:	f043 0308 	orr.w	r3, r3, #8
 8000fbc:	6313      	str	r3, [r2, #48]	; 0x30
 8000fbe:	4b11      	ldr	r3, [pc, #68]	; (8001004 <HAL_UART_MspInit+0xb8>)
 8000fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc2:	f003 0308 	and.w	r3, r3, #8
 8000fc6:	60fb      	str	r3, [r7, #12]
 8000fc8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000fca:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fde:	2303      	movs	r3, #3
 8000fe0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fe4:	2307      	movs	r3, #7
 8000fe6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fea:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fee:	4619      	mov	r1, r3
 8000ff0:	4805      	ldr	r0, [pc, #20]	; (8001008 <HAL_UART_MspInit+0xbc>)
 8000ff2:	f000 fd77 	bl	8001ae4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000ff6:	bf00      	nop
 8000ff8:	37b8      	adds	r7, #184	; 0xb8
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004800 	.word	0x40004800
 8001004:	40023800 	.word	0x40023800
 8001008:	40020c00 	.word	0x40020c00

0800100c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b0ae      	sub	sp, #184	; 0xb8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	2290      	movs	r2, #144	; 0x90
 800102a:	2100      	movs	r1, #0
 800102c:	4618      	mov	r0, r3
 800102e:	f004 fae7 	bl	8005600 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800103a:	d159      	bne.n	80010f0 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 800103c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001040:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001042:	2300      	movs	r3, #0
 8001044:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001048:	f107 0314 	add.w	r3, r7, #20
 800104c:	4618      	mov	r0, r3
 800104e:	f001 fd8b 	bl	8002b68 <HAL_RCCEx_PeriphCLKConfig>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8001058:	f7ff fe24 	bl	8000ca4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800105c:	4b26      	ldr	r3, [pc, #152]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	4a25      	ldr	r2, [pc, #148]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 8001062:	f043 0301 	orr.w	r3, r3, #1
 8001066:	6313      	str	r3, [r2, #48]	; 0x30
 8001068:	4b23      	ldr	r3, [pc, #140]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 800106a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106c:	f003 0301 	and.w	r3, r3, #1
 8001070:	613b      	str	r3, [r7, #16]
 8001072:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001074:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8001078:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800107c:	2302      	movs	r3, #2
 800107e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001082:	2300      	movs	r3, #0
 8001084:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001088:	2303      	movs	r3, #3
 800108a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800108e:	230a      	movs	r3, #10
 8001090:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001098:	4619      	mov	r1, r3
 800109a:	4818      	ldr	r0, [pc, #96]	; (80010fc <HAL_PCD_MspInit+0xf0>)
 800109c:	f000 fd22 	bl	8001ae4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80010a0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010a8:	2300      	movs	r3, #0
 80010aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ae:	2300      	movs	r3, #0
 80010b0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80010b4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010b8:	4619      	mov	r1, r3
 80010ba:	4810      	ldr	r0, [pc, #64]	; (80010fc <HAL_PCD_MspInit+0xf0>)
 80010bc:	f000 fd12 	bl	8001ae4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80010c0:	4b0d      	ldr	r3, [pc, #52]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 80010c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010c4:	4a0c      	ldr	r2, [pc, #48]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 80010c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80010ca:	6353      	str	r3, [r2, #52]	; 0x34
 80010cc:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 80010ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010d4:	60fb      	str	r3, [r7, #12]
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 80010da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010dc:	4a06      	ldr	r2, [pc, #24]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	6453      	str	r3, [r2, #68]	; 0x44
 80010e4:	4b04      	ldr	r3, [pc, #16]	; (80010f8 <HAL_PCD_MspInit+0xec>)
 80010e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80010f0:	bf00      	nop
 80010f2:	37b8      	adds	r7, #184	; 0xb8
 80010f4:	46bd      	mov	sp, r7
 80010f6:	bd80      	pop	{r7, pc}
 80010f8:	40023800 	.word	0x40023800
 80010fc:	40020000 	.word	0x40020000

08001100 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001104:	e7fe      	b.n	8001104 <NMI_Handler+0x4>

08001106 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001106:	b480      	push	{r7}
 8001108:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800110a:	e7fe      	b.n	800110a <HardFault_Handler+0x4>

0800110c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001110:	e7fe      	b.n	8001110 <MemManage_Handler+0x4>

08001112 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001116:	e7fe      	b.n	8001116 <BusFault_Handler+0x4>

08001118 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001118:	b480      	push	{r7}
 800111a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800111c:	e7fe      	b.n	800111c <UsageFault_Handler+0x4>

0800111e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800111e:	b480      	push	{r7}
 8001120:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001122:	bf00      	nop
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001130:	bf00      	nop
 8001132:	46bd      	mov	sp, r7
 8001134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001138:	4770      	bx	lr

0800113a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800113a:	b480      	push	{r7}
 800113c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800113e:	bf00      	nop
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800114c:	f000 f87a 	bl	8001244 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001150:	bf00      	nop
 8001152:	bd80      	pop	{r7, pc}

08001154 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001158:	4b06      	ldr	r3, [pc, #24]	; (8001174 <SystemInit+0x20>)
 800115a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800115e:	4a05      	ldr	r2, [pc, #20]	; (8001174 <SystemInit+0x20>)
 8001160:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001164:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001168:	bf00      	nop
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	e000ed00 	.word	0xe000ed00

08001178 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001178:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800117c:	480d      	ldr	r0, [pc, #52]	; (80011b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800117e:	490e      	ldr	r1, [pc, #56]	; (80011b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001180:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001182:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001184:	e002      	b.n	800118c <LoopCopyDataInit>

08001186 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001186:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001188:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800118a:	3304      	adds	r3, #4

0800118c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800118c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800118e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001190:	d3f9      	bcc.n	8001186 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001192:	4a0b      	ldr	r2, [pc, #44]	; (80011c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001194:	4c0b      	ldr	r4, [pc, #44]	; (80011c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001196:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001198:	e001      	b.n	800119e <LoopFillZerobss>

0800119a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800119a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800119c:	3204      	adds	r2, #4

0800119e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800119e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011a0:	d3fb      	bcc.n	800119a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011a2:	f7ff ffd7 	bl	8001154 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011a6:	f004 fa07 	bl	80055b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011aa:	f7ff f9d1 	bl	8000550 <main>
  bx  lr    
 80011ae:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011b0:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 80011b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011b8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80011bc:	08005664 	.word	0x08005664
  ldr r2, =_sbss
 80011c0:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80011c4:	2000083c 	.word	0x2000083c

080011c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011c8:	e7fe      	b.n	80011c8 <ADC_IRQHandler>

080011ca <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011ce:	2003      	movs	r0, #3
 80011d0:	f000 f92e 	bl	8001430 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f000 f805 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80011da:	f7ff fd69 	bl	8000cb0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80011de:	2300      	movs	r3, #0
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	bd80      	pop	{r7, pc}

080011e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80011ec:	4b12      	ldr	r3, [pc, #72]	; (8001238 <HAL_InitTick+0x54>)
 80011ee:	681a      	ldr	r2, [r3, #0]
 80011f0:	4b12      	ldr	r3, [pc, #72]	; (800123c <HAL_InitTick+0x58>)
 80011f2:	781b      	ldrb	r3, [r3, #0]
 80011f4:	4619      	mov	r1, r3
 80011f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80011fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80011fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f93b 	bl	800147e <HAL_SYSTICK_Config>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e00e      	b.n	8001230 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	2b0f      	cmp	r3, #15
 8001216:	d80a      	bhi.n	800122e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001218:	2200      	movs	r2, #0
 800121a:	6879      	ldr	r1, [r7, #4]
 800121c:	f04f 30ff 	mov.w	r0, #4294967295
 8001220:	f000 f911 	bl	8001446 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001224:	4a06      	ldr	r2, [pc, #24]	; (8001240 <HAL_InitTick+0x5c>)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
 800122c:	e000      	b.n	8001230 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800122e:	2301      	movs	r3, #1
}
 8001230:	4618      	mov	r0, r3
 8001232:	3708      	adds	r7, #8
 8001234:	46bd      	mov	sp, r7
 8001236:	bd80      	pop	{r7, pc}
 8001238:	20000000 	.word	0x20000000
 800123c:	20000008 	.word	0x20000008
 8001240:	20000004 	.word	0x20000004

08001244 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <HAL_IncTick+0x20>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	461a      	mov	r2, r3
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_IncTick+0x24>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4413      	add	r3, r2
 8001254:	4a04      	ldr	r2, [pc, #16]	; (8001268 <HAL_IncTick+0x24>)
 8001256:	6013      	str	r3, [r2, #0]
}
 8001258:	bf00      	nop
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	20000008 	.word	0x20000008
 8001268:	20000838 	.word	0x20000838

0800126c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  return uwTick;
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <HAL_GetTick+0x14>)
 8001272:	681b      	ldr	r3, [r3, #0]
}
 8001274:	4618      	mov	r0, r3
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	20000838 	.word	0x20000838

08001284 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800128c:	f7ff ffee 	bl	800126c <HAL_GetTick>
 8001290:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001296:	68fb      	ldr	r3, [r7, #12]
 8001298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800129c:	d005      	beq.n	80012aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800129e:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <HAL_Delay+0x44>)
 80012a0:	781b      	ldrb	r3, [r3, #0]
 80012a2:	461a      	mov	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	4413      	add	r3, r2
 80012a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012aa:	bf00      	nop
 80012ac:	f7ff ffde 	bl	800126c <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	68bb      	ldr	r3, [r7, #8]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	68fa      	ldr	r2, [r7, #12]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d8f7      	bhi.n	80012ac <HAL_Delay+0x28>
  {
  }
}
 80012bc:	bf00      	nop
 80012be:	bf00      	nop
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000008 	.word	0x20000008

080012cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	f003 0307 	and.w	r3, r3, #7
 80012da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80012dc:	4b0b      	ldr	r3, [pc, #44]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012de:	68db      	ldr	r3, [r3, #12]
 80012e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80012e2:	68ba      	ldr	r2, [r7, #8]
 80012e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80012e8:	4013      	ands	r3, r2
 80012ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80012f4:	4b06      	ldr	r3, [pc, #24]	; (8001310 <__NVIC_SetPriorityGrouping+0x44>)
 80012f6:	4313      	orrs	r3, r2
 80012f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80012fa:	4a04      	ldr	r2, [pc, #16]	; (800130c <__NVIC_SetPriorityGrouping+0x40>)
 80012fc:	68bb      	ldr	r3, [r7, #8]
 80012fe:	60d3      	str	r3, [r2, #12]
}
 8001300:	bf00      	nop
 8001302:	3714      	adds	r7, #20
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr
 800130c:	e000ed00 	.word	0xe000ed00
 8001310:	05fa0000 	.word	0x05fa0000

08001314 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001314:	b480      	push	{r7}
 8001316:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001318:	4b04      	ldr	r3, [pc, #16]	; (800132c <__NVIC_GetPriorityGrouping+0x18>)
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	0a1b      	lsrs	r3, r3, #8
 800131e:	f003 0307 	and.w	r3, r3, #7
}
 8001322:	4618      	mov	r0, r3
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	6039      	str	r1, [r7, #0]
 800133a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800133c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001340:	2b00      	cmp	r3, #0
 8001342:	db0a      	blt.n	800135a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001344:	683b      	ldr	r3, [r7, #0]
 8001346:	b2da      	uxtb	r2, r3
 8001348:	490c      	ldr	r1, [pc, #48]	; (800137c <__NVIC_SetPriority+0x4c>)
 800134a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800134e:	0112      	lsls	r2, r2, #4
 8001350:	b2d2      	uxtb	r2, r2
 8001352:	440b      	add	r3, r1
 8001354:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001358:	e00a      	b.n	8001370 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	b2da      	uxtb	r2, r3
 800135e:	4908      	ldr	r1, [pc, #32]	; (8001380 <__NVIC_SetPriority+0x50>)
 8001360:	79fb      	ldrb	r3, [r7, #7]
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	3b04      	subs	r3, #4
 8001368:	0112      	lsls	r2, r2, #4
 800136a:	b2d2      	uxtb	r2, r2
 800136c:	440b      	add	r3, r1
 800136e:	761a      	strb	r2, [r3, #24]
}
 8001370:	bf00      	nop
 8001372:	370c      	adds	r7, #12
 8001374:	46bd      	mov	sp, r7
 8001376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800137a:	4770      	bx	lr
 800137c:	e000e100 	.word	0xe000e100
 8001380:	e000ed00 	.word	0xe000ed00

08001384 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001384:	b480      	push	{r7}
 8001386:	b089      	sub	sp, #36	; 0x24
 8001388:	af00      	add	r7, sp, #0
 800138a:	60f8      	str	r0, [r7, #12]
 800138c:	60b9      	str	r1, [r7, #8]
 800138e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	f003 0307 	and.w	r3, r3, #7
 8001396:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001398:	69fb      	ldr	r3, [r7, #28]
 800139a:	f1c3 0307 	rsb	r3, r3, #7
 800139e:	2b04      	cmp	r3, #4
 80013a0:	bf28      	it	cs
 80013a2:	2304      	movcs	r3, #4
 80013a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	3304      	adds	r3, #4
 80013aa:	2b06      	cmp	r3, #6
 80013ac:	d902      	bls.n	80013b4 <NVIC_EncodePriority+0x30>
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	3b03      	subs	r3, #3
 80013b2:	e000      	b.n	80013b6 <NVIC_EncodePriority+0x32>
 80013b4:	2300      	movs	r3, #0
 80013b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013b8:	f04f 32ff 	mov.w	r2, #4294967295
 80013bc:	69bb      	ldr	r3, [r7, #24]
 80013be:	fa02 f303 	lsl.w	r3, r2, r3
 80013c2:	43da      	mvns	r2, r3
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	401a      	ands	r2, r3
 80013c8:	697b      	ldr	r3, [r7, #20]
 80013ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80013cc:	f04f 31ff 	mov.w	r1, #4294967295
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	fa01 f303 	lsl.w	r3, r1, r3
 80013d6:	43d9      	mvns	r1, r3
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80013dc:	4313      	orrs	r3, r2
         );
}
 80013de:	4618      	mov	r0, r3
 80013e0:	3724      	adds	r7, #36	; 0x24
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
	...

080013ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b082      	sub	sp, #8
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	3b01      	subs	r3, #1
 80013f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80013fc:	d301      	bcc.n	8001402 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80013fe:	2301      	movs	r3, #1
 8001400:	e00f      	b.n	8001422 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <SysTick_Config+0x40>)
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	3b01      	subs	r3, #1
 8001408:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800140a:	210f      	movs	r1, #15
 800140c:	f04f 30ff 	mov.w	r0, #4294967295
 8001410:	f7ff ff8e 	bl	8001330 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001414:	4b05      	ldr	r3, [pc, #20]	; (800142c <SysTick_Config+0x40>)
 8001416:	2200      	movs	r2, #0
 8001418:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800141a:	4b04      	ldr	r3, [pc, #16]	; (800142c <SysTick_Config+0x40>)
 800141c:	2207      	movs	r2, #7
 800141e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	e000e010 	.word	0xe000e010

08001430 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001438:	6878      	ldr	r0, [r7, #4]
 800143a:	f7ff ff47 	bl	80012cc <__NVIC_SetPriorityGrouping>
}
 800143e:	bf00      	nop
 8001440:	3708      	adds	r7, #8
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001446:	b580      	push	{r7, lr}
 8001448:	b086      	sub	sp, #24
 800144a:	af00      	add	r7, sp, #0
 800144c:	4603      	mov	r3, r0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001454:	2300      	movs	r3, #0
 8001456:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001458:	f7ff ff5c 	bl	8001314 <__NVIC_GetPriorityGrouping>
 800145c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800145e:	687a      	ldr	r2, [r7, #4]
 8001460:	68b9      	ldr	r1, [r7, #8]
 8001462:	6978      	ldr	r0, [r7, #20]
 8001464:	f7ff ff8e 	bl	8001384 <NVIC_EncodePriority>
 8001468:	4602      	mov	r2, r0
 800146a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800146e:	4611      	mov	r1, r2
 8001470:	4618      	mov	r0, r3
 8001472:	f7ff ff5d 	bl	8001330 <__NVIC_SetPriority>
}
 8001476:	bf00      	nop
 8001478:	3718      	adds	r7, #24
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}

0800147e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800147e:	b580      	push	{r7, lr}
 8001480:	b082      	sub	sp, #8
 8001482:	af00      	add	r7, sp, #0
 8001484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ffb0 	bl	80013ec <SysTick_Config>
 800148c:	4603      	mov	r3, r0
}
 800148e:	4618      	mov	r0, r3
 8001490:	3708      	adds	r7, #8
 8001492:	46bd      	mov	sp, r7
 8001494:	bd80      	pop	{r7, pc}
	...

08001498 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d101      	bne.n	80014aa <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e06a      	b.n	8001580 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d106      	bne.n	80014c2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2223      	movs	r2, #35	; 0x23
 80014b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff fc1b 	bl	8000cf8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c2:	4b31      	ldr	r3, [pc, #196]	; (8001588 <HAL_ETH_Init+0xf0>)
 80014c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014c6:	4a30      	ldr	r2, [pc, #192]	; (8001588 <HAL_ETH_Init+0xf0>)
 80014c8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014cc:	6453      	str	r3, [r2, #68]	; 0x44
 80014ce:	4b2e      	ldr	r3, [pc, #184]	; (8001588 <HAL_ETH_Init+0xf0>)
 80014d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014d6:	60bb      	str	r3, [r7, #8]
 80014d8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80014da:	4b2c      	ldr	r3, [pc, #176]	; (800158c <HAL_ETH_Init+0xf4>)
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4a2b      	ldr	r2, [pc, #172]	; (800158c <HAL_ETH_Init+0xf4>)
 80014e0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80014e4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <HAL_ETH_Init+0xf4>)
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	4927      	ldr	r1, [pc, #156]	; (800158c <HAL_ETH_Init+0xf4>)
 80014f0:	4313      	orrs	r3, r2
 80014f2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80014f4:	4b25      	ldr	r3, [pc, #148]	; (800158c <HAL_ETH_Init+0xf4>)
 80014f6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	687a      	ldr	r2, [r7, #4]
 8001504:	6812      	ldr	r2, [r2, #0]
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800150e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001510:	f7ff feac 	bl	800126c <HAL_GetTick>
 8001514:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001516:	e011      	b.n	800153c <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001518:	f7ff fea8 	bl	800126c <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001526:	d909      	bls.n	800153c <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	2204      	movs	r2, #4
 800152c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	22e0      	movs	r2, #224	; 0xe0
 8001534:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e021      	b.n	8001580 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	f003 0301 	and.w	r3, r3, #1
 800154a:	2b00      	cmp	r3, #0
 800154c:	d1e4      	bne.n	8001518 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f000 f958 	bl	8001804 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f000 f9ff 	bl	8001958 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800155a:	6878      	ldr	r0, [r7, #4]
 800155c:	f000 fa55 	bl	8001a0a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	461a      	mov	r2, r3
 8001566:	2100      	movs	r1, #0
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f000 f9bd 	bl	80018e8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2200      	movs	r2, #0
 8001572:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	2210      	movs	r2, #16
 800157a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3710      	adds	r7, #16
 8001584:	46bd      	mov	sp, r7
 8001586:	bd80      	pop	{r7, pc}
 8001588:	40023800 	.word	0x40023800
 800158c:	40013800 	.word	0x40013800

08001590 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	6078      	str	r0, [r7, #4]
 8001598:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80015a2:	68fa      	ldr	r2, [r7, #12]
 80015a4:	4b51      	ldr	r3, [pc, #324]	; (80016ec <ETH_SetMACConfig+0x15c>)
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015aa:	683b      	ldr	r3, [r7, #0]
 80015ac:	7c1b      	ldrb	r3, [r3, #16]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d102      	bne.n	80015b8 <ETH_SetMACConfig+0x28>
 80015b2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80015b6:	e000      	b.n	80015ba <ETH_SetMACConfig+0x2a>
 80015b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	7c5b      	ldrb	r3, [r3, #17]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d102      	bne.n	80015c8 <ETH_SetMACConfig+0x38>
 80015c2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015c6:	e000      	b.n	80015ca <ETH_SetMACConfig+0x3a>
 80015c8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80015ca:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80015d0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	7fdb      	ldrb	r3, [r3, #31]
 80015d6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80015d8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80015de:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	7f92      	ldrb	r2, [r2, #30]
 80015e4:	2a00      	cmp	r2, #0
 80015e6:	d102      	bne.n	80015ee <ETH_SetMACConfig+0x5e>
 80015e8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015ec:	e000      	b.n	80015f0 <ETH_SetMACConfig+0x60>
 80015ee:	2200      	movs	r2, #0
                        macconf->Speed |
 80015f0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	7f1b      	ldrb	r3, [r3, #28]
 80015f6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80015f8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80015fa:	683b      	ldr	r3, [r7, #0]
 80015fc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80015fe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	791b      	ldrb	r3, [r3, #4]
 8001604:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001606:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800160e:	2a00      	cmp	r2, #0
 8001610:	d102      	bne.n	8001618 <ETH_SetMACConfig+0x88>
 8001612:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001616:	e000      	b.n	800161a <ETH_SetMACConfig+0x8a>
 8001618:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800161a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800161c:	683b      	ldr	r3, [r7, #0]
 800161e:	7bdb      	ldrb	r3, [r3, #15]
 8001620:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001622:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001628:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800162a:	683b      	ldr	r3, [r7, #0]
 800162c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001630:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001632:	4313      	orrs	r3, r2
 8001634:	68fa      	ldr	r2, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800164a:	2001      	movs	r0, #1
 800164c:	f7ff fe1a 	bl	8001284 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	699b      	ldr	r3, [r3, #24]
 800165e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001660:	68fa      	ldr	r2, [r7, #12]
 8001662:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001666:	4013      	ands	r3, r2
 8001668:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001676:	2a00      	cmp	r2, #0
 8001678:	d101      	bne.n	800167e <ETH_SetMACConfig+0xee>
 800167a:	2280      	movs	r2, #128	; 0x80
 800167c:	e000      	b.n	8001680 <ETH_SetMACConfig+0xf0>
 800167e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001680:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001686:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001688:	683a      	ldr	r2, [r7, #0]
 800168a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800168e:	2a01      	cmp	r2, #1
 8001690:	d101      	bne.n	8001696 <ETH_SetMACConfig+0x106>
 8001692:	2208      	movs	r2, #8
 8001694:	e000      	b.n	8001698 <ETH_SetMACConfig+0x108>
 8001696:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001698:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800169a:	683a      	ldr	r2, [r7, #0]
 800169c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80016a0:	2a01      	cmp	r2, #1
 80016a2:	d101      	bne.n	80016a8 <ETH_SetMACConfig+0x118>
 80016a4:	2204      	movs	r2, #4
 80016a6:	e000      	b.n	80016aa <ETH_SetMACConfig+0x11a>
 80016a8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80016aa:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80016ac:	683a      	ldr	r2, [r7, #0]
 80016ae:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80016b2:	2a01      	cmp	r2, #1
 80016b4:	d101      	bne.n	80016ba <ETH_SetMACConfig+0x12a>
 80016b6:	2202      	movs	r2, #2
 80016b8:	e000      	b.n	80016bc <ETH_SetMACConfig+0x12c>
 80016ba:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80016bc:	4313      	orrs	r3, r2
 80016be:	68fa      	ldr	r2, [r7, #12]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	68fa      	ldr	r2, [r7, #12]
 80016ca:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	699b      	ldr	r3, [r3, #24]
 80016d2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80016d4:	2001      	movs	r0, #1
 80016d6:	f7ff fdd5 	bl	8001284 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	619a      	str	r2, [r3, #24]
}
 80016e2:	bf00      	nop
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	ff20810f 	.word	0xff20810f

080016f0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	4b3d      	ldr	r3, [pc, #244]	; (8001800 <ETH_SetDMAConfig+0x110>)
 800170a:	4013      	ands	r3, r2
 800170c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800170e:	683b      	ldr	r3, [r7, #0]
 8001710:	7b1b      	ldrb	r3, [r3, #12]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d102      	bne.n	800171c <ETH_SetDMAConfig+0x2c>
 8001716:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800171a:	e000      	b.n	800171e <ETH_SetDMAConfig+0x2e>
 800171c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	7b5b      	ldrb	r3, [r3, #13]
 8001722:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001724:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001726:	683a      	ldr	r2, [r7, #0]
 8001728:	7f52      	ldrb	r2, [r2, #29]
 800172a:	2a00      	cmp	r2, #0
 800172c:	d102      	bne.n	8001734 <ETH_SetDMAConfig+0x44>
 800172e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001732:	e000      	b.n	8001736 <ETH_SetDMAConfig+0x46>
 8001734:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001736:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	7b9b      	ldrb	r3, [r3, #14]
 800173c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800173e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001740:	683b      	ldr	r3, [r7, #0]
 8001742:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001744:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	7f1b      	ldrb	r3, [r3, #28]
 800174a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800174c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	7f9b      	ldrb	r3, [r3, #30]
 8001752:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001754:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800175a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001762:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001764:	4313      	orrs	r3, r2
 8001766:	68fa      	ldr	r2, [r7, #12]
 8001768:	4313      	orrs	r3, r2
 800176a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001774:	461a      	mov	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001786:	2001      	movs	r0, #1
 8001788:	f7ff fd7c 	bl	8001284 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001794:	461a      	mov	r2, r3
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	791b      	ldrb	r3, [r3, #4]
 800179e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017a4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80017aa:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80017b0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017b2:	683b      	ldr	r3, [r7, #0]
 80017b4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80017b8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80017ba:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017c0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80017c2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80017c8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80017ca:	687a      	ldr	r2, [r7, #4]
 80017cc:	6812      	ldr	r2, [r2, #0]
 80017ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80017d2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017d6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f7ff fd4d 	bl	8001284 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017f2:	461a      	mov	r2, r3
 80017f4:	68fb      	ldr	r3, [r7, #12]
 80017f6:	6013      	str	r3, [r2, #0]
}
 80017f8:	bf00      	nop
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	f8de3f23 	.word	0xf8de3f23

08001804 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b0a6      	sub	sp, #152	; 0x98
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800180c:	2301      	movs	r3, #1
 800180e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001812:	2301      	movs	r3, #1
 8001814:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001818:	2300      	movs	r3, #0
 800181a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800181c:	2300      	movs	r3, #0
 800181e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001822:	2301      	movs	r3, #1
 8001824:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001828:	2300      	movs	r3, #0
 800182a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800182e:	2301      	movs	r3, #1
 8001830:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800183a:	2300      	movs	r3, #0
 800183c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001840:	2300      	movs	r3, #0
 8001842:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001844:	2300      	movs	r3, #0
 8001846:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800184a:	2300      	movs	r3, #0
 800184c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800184e:	2300      	movs	r3, #0
 8001850:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001854:	2300      	movs	r3, #0
 8001856:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800185a:	2300      	movs	r3, #0
 800185c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001860:	2300      	movs	r3, #0
 8001862:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001866:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800186a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800186c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001870:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001872:	2300      	movs	r3, #0
 8001874:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001878:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800187c:	4619      	mov	r1, r3
 800187e:	6878      	ldr	r0, [r7, #4]
 8001880:	f7ff fe86 	bl	8001590 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001884:	2301      	movs	r3, #1
 8001886:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001888:	2301      	movs	r3, #1
 800188a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800188c:	2301      	movs	r3, #1
 800188e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001892:	2301      	movs	r3, #1
 8001894:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001896:	2300      	movs	r3, #0
 8001898:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800189a:	2300      	movs	r3, #0
 800189c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80018a0:	2300      	movs	r3, #0
 80018a2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80018aa:	2301      	movs	r3, #1
 80018ac:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80018b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80018b8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80018ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018be:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80018c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018c4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80018c6:	2301      	movs	r3, #1
 80018c8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80018cc:	2300      	movs	r3, #0
 80018ce:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80018d0:	2300      	movs	r3, #0
 80018d2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80018d4:	f107 0308 	add.w	r3, r7, #8
 80018d8:	4619      	mov	r1, r3
 80018da:	6878      	ldr	r0, [r7, #4]
 80018dc:	f7ff ff08 	bl	80016f0 <ETH_SetDMAConfig>
}
 80018e0:	bf00      	nop
 80018e2:	3798      	adds	r7, #152	; 0x98
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b087      	sub	sp, #28
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	60b9      	str	r1, [r7, #8]
 80018f2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	3305      	adds	r3, #5
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	021b      	lsls	r3, r3, #8
 80018fc:	687a      	ldr	r2, [r7, #4]
 80018fe:	3204      	adds	r2, #4
 8001900:	7812      	ldrb	r2, [r2, #0]
 8001902:	4313      	orrs	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001906:	68ba      	ldr	r2, [r7, #8]
 8001908:	4b11      	ldr	r3, [pc, #68]	; (8001950 <ETH_MACAddressConfig+0x68>)
 800190a:	4413      	add	r3, r2
 800190c:	461a      	mov	r2, r3
 800190e:	697b      	ldr	r3, [r7, #20]
 8001910:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3303      	adds	r3, #3
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	061a      	lsls	r2, r3, #24
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	3302      	adds	r3, #2
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	041b      	lsls	r3, r3, #16
 8001922:	431a      	orrs	r2, r3
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3301      	adds	r3, #1
 8001928:	781b      	ldrb	r3, [r3, #0]
 800192a:	021b      	lsls	r3, r3, #8
 800192c:	4313      	orrs	r3, r2
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	7812      	ldrb	r2, [r2, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8001936:	68ba      	ldr	r2, [r7, #8]
 8001938:	4b06      	ldr	r3, [pc, #24]	; (8001954 <ETH_MACAddressConfig+0x6c>)
 800193a:	4413      	add	r3, r2
 800193c:	461a      	mov	r2, r3
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6013      	str	r3, [r2, #0]
}
 8001942:	bf00      	nop
 8001944:	371c      	adds	r7, #28
 8001946:	46bd      	mov	sp, r7
 8001948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194c:	4770      	bx	lr
 800194e:	bf00      	nop
 8001950:	40028040 	.word	0x40028040
 8001954:	40028044 	.word	0x40028044

08001958 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8001958:	b480      	push	{r7}
 800195a:	b085      	sub	sp, #20
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001960:	2300      	movs	r3, #0
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	e03e      	b.n	80019e4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	68d9      	ldr	r1, [r3, #12]
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	4613      	mov	r3, r2
 800196e:	009b      	lsls	r3, r3, #2
 8001970:	4413      	add	r3, r2
 8001972:	00db      	lsls	r3, r3, #3
 8001974:	440b      	add	r3, r1
 8001976:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	2200      	movs	r2, #0
 800197c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800197e:	68bb      	ldr	r3, [r7, #8]
 8001980:	2200      	movs	r2, #0
 8001982:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	2200      	movs	r2, #0
 8001988:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800198a:	68bb      	ldr	r3, [r7, #8]
 800198c:	2200      	movs	r2, #0
 800198e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	68fa      	ldr	r2, [r7, #12]
 8001996:	3206      	adds	r2, #6
 8001998:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800199c:	68bb      	ldr	r3, [r7, #8]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	2b02      	cmp	r3, #2
 80019ac:	d80c      	bhi.n	80019c8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	68d9      	ldr	r1, [r3, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	4613      	mov	r3, r2
 80019b8:	009b      	lsls	r3, r3, #2
 80019ba:	4413      	add	r3, r2
 80019bc:	00db      	lsls	r3, r3, #3
 80019be:	440b      	add	r3, r1
 80019c0:	461a      	mov	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	60da      	str	r2, [r3, #12]
 80019c6:	e004      	b.n	80019d2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	68db      	ldr	r3, [r3, #12]
 80019cc:	461a      	mov	r2, r3
 80019ce:	68bb      	ldr	r3, [r7, #8]
 80019d0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	3301      	adds	r3, #1
 80019e2:	60fb      	str	r3, [r7, #12]
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	2b03      	cmp	r3, #3
 80019e8:	d9bd      	bls.n	8001966 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2200      	movs	r2, #0
 80019ee:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	68da      	ldr	r2, [r3, #12]
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019fc:	611a      	str	r2, [r3, #16]
}
 80019fe:	bf00      	nop
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr

08001a0a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a0a:	b480      	push	{r7}
 8001a0c:	b085      	sub	sp, #20
 8001a0e:	af00      	add	r7, sp, #0
 8001a10:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a12:	2300      	movs	r3, #0
 8001a14:	60fb      	str	r3, [r7, #12]
 8001a16:	e046      	b.n	8001aa6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6919      	ldr	r1, [r3, #16]
 8001a1c:	68fa      	ldr	r2, [r7, #12]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	4413      	add	r3, r2
 8001a24:	00db      	lsls	r3, r3, #3
 8001a26:	440b      	add	r3, r1
 8001a28:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	2200      	movs	r2, #0
 8001a34:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	2200      	movs	r2, #0
 8001a3a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8001a3c:	68bb      	ldr	r3, [r7, #8]
 8001a3e:	2200      	movs	r2, #0
 8001a40:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8001a42:	68bb      	ldr	r3, [r7, #8]
 8001a44:	2200      	movs	r2, #0
 8001a46:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001a54:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8001a56:	68bb      	ldr	r3, [r7, #8]
 8001a58:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8001a5c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001a6a:	68b9      	ldr	r1, [r7, #8]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	3212      	adds	r2, #18
 8001a72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d80c      	bhi.n	8001a96 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	6919      	ldr	r1, [r3, #16]
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	1c5a      	adds	r2, r3, #1
 8001a84:	4613      	mov	r3, r2
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	461a      	mov	r2, r3
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	60da      	str	r2, [r3, #12]
 8001a94:	e004      	b.n	8001aa0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	461a      	mov	r2, r3
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	3301      	adds	r3, #1
 8001aa4:	60fb      	str	r3, [r7, #12]
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	2b03      	cmp	r3, #3
 8001aaa:	d9b5      	bls.n	8001a18 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2200      	movs	r2, #0
 8001abc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	691a      	ldr	r2, [r3, #16]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	60da      	str	r2, [r3, #12]
}
 8001ad8:	bf00      	nop
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b089      	sub	sp, #36	; 0x24
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
 8001aec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001aee:	2300      	movs	r3, #0
 8001af0:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001af2:	2300      	movs	r3, #0
 8001af4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001afa:	2300      	movs	r3, #0
 8001afc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001afe:	2300      	movs	r3, #0
 8001b00:	61fb      	str	r3, [r7, #28]
 8001b02:	e175      	b.n	8001df0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001b04:	2201      	movs	r2, #1
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	697a      	ldr	r2, [r7, #20]
 8001b14:	4013      	ands	r3, r2
 8001b16:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	429a      	cmp	r2, r3
 8001b1e:	f040 8164 	bne.w	8001dea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b22:	683b      	ldr	r3, [r7, #0]
 8001b24:	685b      	ldr	r3, [r3, #4]
 8001b26:	f003 0303 	and.w	r3, r3, #3
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d005      	beq.n	8001b3a <HAL_GPIO_Init+0x56>
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	f003 0303 	and.w	r3, r3, #3
 8001b36:	2b02      	cmp	r3, #2
 8001b38:	d130      	bne.n	8001b9c <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	689b      	ldr	r3, [r3, #8]
 8001b3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001b40:	69fb      	ldr	r3, [r7, #28]
 8001b42:	005b      	lsls	r3, r3, #1
 8001b44:	2203      	movs	r2, #3
 8001b46:	fa02 f303 	lsl.w	r3, r2, r3
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	69ba      	ldr	r2, [r7, #24]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	68da      	ldr	r2, [r3, #12]
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	4313      	orrs	r3, r2
 8001b62:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	69ba      	ldr	r2, [r7, #24]
 8001b68:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b70:	2201      	movs	r2, #1
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	fa02 f303 	lsl.w	r3, r2, r3
 8001b78:	43db      	mvns	r3, r3
 8001b7a:	69ba      	ldr	r2, [r7, #24]
 8001b7c:	4013      	ands	r3, r2
 8001b7e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b80:	683b      	ldr	r3, [r7, #0]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	091b      	lsrs	r3, r3, #4
 8001b86:	f003 0201 	and.w	r2, r3, #1
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	4313      	orrs	r3, r2
 8001b94:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	69ba      	ldr	r2, [r7, #24]
 8001b9a:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f003 0303 	and.w	r3, r3, #3
 8001ba4:	2b03      	cmp	r3, #3
 8001ba6:	d017      	beq.n	8001bd8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	68db      	ldr	r3, [r3, #12]
 8001bac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	2203      	movs	r2, #3
 8001bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb8:	43db      	mvns	r3, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8001bc0:	683b      	ldr	r3, [r7, #0]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	69ba      	ldr	r2, [r7, #24]
 8001bd6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	685b      	ldr	r3, [r3, #4]
 8001bdc:	f003 0303 	and.w	r3, r3, #3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d123      	bne.n	8001c2c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	3208      	adds	r2, #8
 8001bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	009b      	lsls	r3, r3, #2
 8001bfa:	220f      	movs	r2, #15
 8001bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8001c00:	43db      	mvns	r3, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4013      	ands	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	691a      	ldr	r2, [r3, #16]
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	009b      	lsls	r3, r3, #2
 8001c14:	fa02 f303 	lsl.w	r3, r2, r3
 8001c18:	69ba      	ldr	r2, [r7, #24]
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	08da      	lsrs	r2, r3, #3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	3208      	adds	r2, #8
 8001c26:	69b9      	ldr	r1, [r7, #24]
 8001c28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	2203      	movs	r2, #3
 8001c38:	fa02 f303 	lsl.w	r3, r2, r3
 8001c3c:	43db      	mvns	r3, r3
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	4013      	ands	r3, r2
 8001c42:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 0203 	and.w	r2, r3, #3
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	005b      	lsls	r3, r3, #1
 8001c50:	fa02 f303 	lsl.w	r3, r2, r3
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	4313      	orrs	r3, r2
 8001c58:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001c60:	683b      	ldr	r3, [r7, #0]
 8001c62:	685b      	ldr	r3, [r3, #4]
 8001c64:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f000 80be 	beq.w	8001dea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c6e:	4b66      	ldr	r3, [pc, #408]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c72:	4a65      	ldr	r2, [pc, #404]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001c74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c78:	6453      	str	r3, [r2, #68]	; 0x44
 8001c7a:	4b63      	ldr	r3, [pc, #396]	; (8001e08 <HAL_GPIO_Init+0x324>)
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001c86:	4a61      	ldr	r2, [pc, #388]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	089b      	lsrs	r3, r3, #2
 8001c8c:	3302      	adds	r3, #2
 8001c8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001c94:	69fb      	ldr	r3, [r7, #28]
 8001c96:	f003 0303 	and.w	r3, r3, #3
 8001c9a:	009b      	lsls	r3, r3, #2
 8001c9c:	220f      	movs	r2, #15
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	4a58      	ldr	r2, [pc, #352]	; (8001e10 <HAL_GPIO_Init+0x32c>)
 8001cae:	4293      	cmp	r3, r2
 8001cb0:	d037      	beq.n	8001d22 <HAL_GPIO_Init+0x23e>
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	4a57      	ldr	r2, [pc, #348]	; (8001e14 <HAL_GPIO_Init+0x330>)
 8001cb6:	4293      	cmp	r3, r2
 8001cb8:	d031      	beq.n	8001d1e <HAL_GPIO_Init+0x23a>
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	4a56      	ldr	r2, [pc, #344]	; (8001e18 <HAL_GPIO_Init+0x334>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d02b      	beq.n	8001d1a <HAL_GPIO_Init+0x236>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	4a55      	ldr	r2, [pc, #340]	; (8001e1c <HAL_GPIO_Init+0x338>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d025      	beq.n	8001d16 <HAL_GPIO_Init+0x232>
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	4a54      	ldr	r2, [pc, #336]	; (8001e20 <HAL_GPIO_Init+0x33c>)
 8001cce:	4293      	cmp	r3, r2
 8001cd0:	d01f      	beq.n	8001d12 <HAL_GPIO_Init+0x22e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	4a53      	ldr	r2, [pc, #332]	; (8001e24 <HAL_GPIO_Init+0x340>)
 8001cd6:	4293      	cmp	r3, r2
 8001cd8:	d019      	beq.n	8001d0e <HAL_GPIO_Init+0x22a>
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	4a52      	ldr	r2, [pc, #328]	; (8001e28 <HAL_GPIO_Init+0x344>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d013      	beq.n	8001d0a <HAL_GPIO_Init+0x226>
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	4a51      	ldr	r2, [pc, #324]	; (8001e2c <HAL_GPIO_Init+0x348>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d00d      	beq.n	8001d06 <HAL_GPIO_Init+0x222>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4a50      	ldr	r2, [pc, #320]	; (8001e30 <HAL_GPIO_Init+0x34c>)
 8001cee:	4293      	cmp	r3, r2
 8001cf0:	d007      	beq.n	8001d02 <HAL_GPIO_Init+0x21e>
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4a4f      	ldr	r2, [pc, #316]	; (8001e34 <HAL_GPIO_Init+0x350>)
 8001cf6:	4293      	cmp	r3, r2
 8001cf8:	d101      	bne.n	8001cfe <HAL_GPIO_Init+0x21a>
 8001cfa:	2309      	movs	r3, #9
 8001cfc:	e012      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001cfe:	230a      	movs	r3, #10
 8001d00:	e010      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d02:	2308      	movs	r3, #8
 8001d04:	e00e      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d06:	2307      	movs	r3, #7
 8001d08:	e00c      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d0a:	2306      	movs	r3, #6
 8001d0c:	e00a      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d0e:	2305      	movs	r3, #5
 8001d10:	e008      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d12:	2304      	movs	r3, #4
 8001d14:	e006      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d16:	2303      	movs	r3, #3
 8001d18:	e004      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d1a:	2302      	movs	r3, #2
 8001d1c:	e002      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e000      	b.n	8001d24 <HAL_GPIO_Init+0x240>
 8001d22:	2300      	movs	r3, #0
 8001d24:	69fa      	ldr	r2, [r7, #28]
 8001d26:	f002 0203 	and.w	r2, r2, #3
 8001d2a:	0092      	lsls	r2, r2, #2
 8001d2c:	4093      	lsls	r3, r2
 8001d2e:	69ba      	ldr	r2, [r7, #24]
 8001d30:	4313      	orrs	r3, r2
 8001d32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001d34:	4935      	ldr	r1, [pc, #212]	; (8001e0c <HAL_GPIO_Init+0x328>)
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	089b      	lsrs	r3, r3, #2
 8001d3a:	3302      	adds	r3, #2
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d42:	4b3d      	ldr	r3, [pc, #244]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d003      	beq.n	8001d66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001d5e:	69ba      	ldr	r2, [r7, #24]
 8001d60:	693b      	ldr	r3, [r7, #16]
 8001d62:	4313      	orrs	r3, r2
 8001d64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d66:	4a34      	ldr	r2, [pc, #208]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d68:	69bb      	ldr	r3, [r7, #24]
 8001d6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d6c:	4b32      	ldr	r3, [pc, #200]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69ba      	ldr	r2, [r7, #24]
 8001d78:	4013      	ands	r3, r2
 8001d7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d003      	beq.n	8001d90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	693b      	ldr	r3, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d90:	4a29      	ldr	r2, [pc, #164]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d92:	69bb      	ldr	r3, [r7, #24]
 8001d94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d96:	4b28      	ldr	r3, [pc, #160]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	43db      	mvns	r3, r3
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4013      	ands	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d003      	beq.n	8001dba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	693b      	ldr	r3, [r7, #16]
 8001db6:	4313      	orrs	r3, r2
 8001db8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001dba:	4a1f      	ldr	r2, [pc, #124]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dc0:	4b1d      	ldr	r3, [pc, #116]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4013      	ands	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d003      	beq.n	8001de4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	693b      	ldr	r3, [r7, #16]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001de4:	4a14      	ldr	r2, [pc, #80]	; (8001e38 <HAL_GPIO_Init+0x354>)
 8001de6:	69bb      	ldr	r3, [r7, #24]
 8001de8:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	3301      	adds	r3, #1
 8001dee:	61fb      	str	r3, [r7, #28]
 8001df0:	69fb      	ldr	r3, [r7, #28]
 8001df2:	2b0f      	cmp	r3, #15
 8001df4:	f67f ae86 	bls.w	8001b04 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001df8:	bf00      	nop
 8001dfa:	bf00      	nop
 8001dfc:	3724      	adds	r7, #36	; 0x24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40013800 	.word	0x40013800
 8001e10:	40020000 	.word	0x40020000
 8001e14:	40020400 	.word	0x40020400
 8001e18:	40020800 	.word	0x40020800
 8001e1c:	40020c00 	.word	0x40020c00
 8001e20:	40021000 	.word	0x40021000
 8001e24:	40021400 	.word	0x40021400
 8001e28:	40021800 	.word	0x40021800
 8001e2c:	40021c00 	.word	0x40021c00
 8001e30:	40022000 	.word	0x40022000
 8001e34:	40022400 	.word	0x40022400
 8001e38:	40013c00 	.word	0x40013c00

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	b083      	sub	sp, #12
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	460b      	mov	r3, r1
 8001e46:	807b      	strh	r3, [r7, #2]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e4c:	787b      	ldrb	r3, [r7, #1]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001e58:	e003      	b.n	8001e62 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001e5a:	887b      	ldrh	r3, [r7, #2]
 8001e5c:	041a      	lsls	r2, r3, #16
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	619a      	str	r2, [r3, #24]
}
 8001e62:	bf00      	nop
 8001e64:	370c      	adds	r7, #12
 8001e66:	46bd      	mov	sp, r7
 8001e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6c:	4770      	bx	lr

08001e6e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001e6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001e70:	b08f      	sub	sp, #60	; 0x3c
 8001e72:	af0a      	add	r7, sp, #40	; 0x28
 8001e74:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e116      	b.n	80020ae <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d106      	bne.n	8001ea0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	2200      	movs	r2, #0
 8001e96:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f7ff f8b6 	bl	800100c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	2203      	movs	r2, #3
 8001ea4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d102      	bne.n	8001eba <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f003 f8de 	bl	8005080 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	687e      	ldr	r6, [r7, #4]
 8001ecc:	466d      	mov	r5, sp
 8001ece:	f106 0410 	add.w	r4, r6, #16
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ede:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ee2:	1d33      	adds	r3, r6, #4
 8001ee4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ee6:	6838      	ldr	r0, [r7, #0]
 8001ee8:	f003 f872 	bl	8004fd0 <USB_CoreInit>
 8001eec:	4603      	mov	r3, r0
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d005      	beq.n	8001efe <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2202      	movs	r2, #2
 8001ef6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e0d7      	b.n	80020ae <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	2100      	movs	r1, #0
 8001f04:	4618      	mov	r0, r3
 8001f06:	f003 f8cc 	bl	80050a2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	73fb      	strb	r3, [r7, #15]
 8001f0e:	e04a      	b.n	8001fa6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f10:	7bfa      	ldrb	r2, [r7, #15]
 8001f12:	6879      	ldr	r1, [r7, #4]
 8001f14:	4613      	mov	r3, r2
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	4413      	add	r3, r2
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	440b      	add	r3, r1
 8001f1e:	333d      	adds	r3, #61	; 0x3d
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f24:	7bfa      	ldrb	r2, [r7, #15]
 8001f26:	6879      	ldr	r1, [r7, #4]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	00db      	lsls	r3, r3, #3
 8001f2c:	4413      	add	r3, r2
 8001f2e:	009b      	lsls	r3, r3, #2
 8001f30:	440b      	add	r3, r1
 8001f32:	333c      	adds	r3, #60	; 0x3c
 8001f34:	7bfa      	ldrb	r2, [r7, #15]
 8001f36:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f38:	7bfa      	ldrb	r2, [r7, #15]
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	b298      	uxth	r0, r3
 8001f3e:	6879      	ldr	r1, [r7, #4]
 8001f40:	4613      	mov	r3, r2
 8001f42:	00db      	lsls	r3, r3, #3
 8001f44:	4413      	add	r3, r2
 8001f46:	009b      	lsls	r3, r3, #2
 8001f48:	440b      	add	r3, r1
 8001f4a:	3344      	adds	r3, #68	; 0x44
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001f50:	7bfa      	ldrb	r2, [r7, #15]
 8001f52:	6879      	ldr	r1, [r7, #4]
 8001f54:	4613      	mov	r3, r2
 8001f56:	00db      	lsls	r3, r3, #3
 8001f58:	4413      	add	r3, r2
 8001f5a:	009b      	lsls	r3, r3, #2
 8001f5c:	440b      	add	r3, r1
 8001f5e:	3340      	adds	r3, #64	; 0x40
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001f64:	7bfa      	ldrb	r2, [r7, #15]
 8001f66:	6879      	ldr	r1, [r7, #4]
 8001f68:	4613      	mov	r3, r2
 8001f6a:	00db      	lsls	r3, r3, #3
 8001f6c:	4413      	add	r3, r2
 8001f6e:	009b      	lsls	r3, r3, #2
 8001f70:	440b      	add	r3, r1
 8001f72:	3348      	adds	r3, #72	; 0x48
 8001f74:	2200      	movs	r2, #0
 8001f76:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001f78:	7bfa      	ldrb	r2, [r7, #15]
 8001f7a:	6879      	ldr	r1, [r7, #4]
 8001f7c:	4613      	mov	r3, r2
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	440b      	add	r3, r1
 8001f86:	334c      	adds	r3, #76	; 0x4c
 8001f88:	2200      	movs	r2, #0
 8001f8a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001f8c:	7bfa      	ldrb	r2, [r7, #15]
 8001f8e:	6879      	ldr	r1, [r7, #4]
 8001f90:	4613      	mov	r3, r2
 8001f92:	00db      	lsls	r3, r3, #3
 8001f94:	4413      	add	r3, r2
 8001f96:	009b      	lsls	r3, r3, #2
 8001f98:	440b      	add	r3, r1
 8001f9a:	3354      	adds	r3, #84	; 0x54
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa0:	7bfb      	ldrb	r3, [r7, #15]
 8001fa2:	3301      	adds	r3, #1
 8001fa4:	73fb      	strb	r3, [r7, #15]
 8001fa6:	7bfa      	ldrb	r2, [r7, #15]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	429a      	cmp	r2, r3
 8001fae:	d3af      	bcc.n	8001f10 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	73fb      	strb	r3, [r7, #15]
 8001fb4:	e044      	b.n	8002040 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001fb6:	7bfa      	ldrb	r2, [r7, #15]
 8001fb8:	6879      	ldr	r1, [r7, #4]
 8001fba:	4613      	mov	r3, r2
 8001fbc:	00db      	lsls	r3, r3, #3
 8001fbe:	4413      	add	r3, r2
 8001fc0:	009b      	lsls	r3, r3, #2
 8001fc2:	440b      	add	r3, r1
 8001fc4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001fc8:	2200      	movs	r2, #0
 8001fca:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001fcc:	7bfa      	ldrb	r2, [r7, #15]
 8001fce:	6879      	ldr	r1, [r7, #4]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	00db      	lsls	r3, r3, #3
 8001fd4:	4413      	add	r3, r2
 8001fd6:	009b      	lsls	r3, r3, #2
 8001fd8:	440b      	add	r3, r1
 8001fda:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001fde:	7bfa      	ldrb	r2, [r7, #15]
 8001fe0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001fe2:	7bfa      	ldrb	r2, [r7, #15]
 8001fe4:	6879      	ldr	r1, [r7, #4]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	00db      	lsls	r3, r3, #3
 8001fea:	4413      	add	r3, r2
 8001fec:	009b      	lsls	r3, r3, #2
 8001fee:	440b      	add	r3, r1
 8001ff0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001ff8:	7bfa      	ldrb	r2, [r7, #15]
 8001ffa:	6879      	ldr	r1, [r7, #4]
 8001ffc:	4613      	mov	r3, r2
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	440b      	add	r3, r1
 8002006:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800200a:	2200      	movs	r2, #0
 800200c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800200e:	7bfa      	ldrb	r2, [r7, #15]
 8002010:	6879      	ldr	r1, [r7, #4]
 8002012:	4613      	mov	r3, r2
 8002014:	00db      	lsls	r3, r3, #3
 8002016:	4413      	add	r3, r2
 8002018:	009b      	lsls	r3, r3, #2
 800201a:	440b      	add	r3, r1
 800201c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002024:	7bfa      	ldrb	r2, [r7, #15]
 8002026:	6879      	ldr	r1, [r7, #4]
 8002028:	4613      	mov	r3, r2
 800202a:	00db      	lsls	r3, r3, #3
 800202c:	4413      	add	r3, r2
 800202e:	009b      	lsls	r3, r3, #2
 8002030:	440b      	add	r3, r1
 8002032:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002036:	2200      	movs	r2, #0
 8002038:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203a:	7bfb      	ldrb	r3, [r7, #15]
 800203c:	3301      	adds	r3, #1
 800203e:	73fb      	strb	r3, [r7, #15]
 8002040:	7bfa      	ldrb	r2, [r7, #15]
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	429a      	cmp	r2, r3
 8002048:	d3b5      	bcc.n	8001fb6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	603b      	str	r3, [r7, #0]
 8002050:	687e      	ldr	r6, [r7, #4]
 8002052:	466d      	mov	r5, sp
 8002054:	f106 0410 	add.w	r4, r6, #16
 8002058:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800205c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800205e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002060:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002064:	e885 0003 	stmia.w	r5, {r0, r1}
 8002068:	1d33      	adds	r3, r6, #4
 800206a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f003 f865 	bl	800513c <USB_DevInit>
 8002072:	4603      	mov	r3, r0
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2202      	movs	r2, #2
 800207c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002080:	2301      	movs	r3, #1
 8002082:	e014      	b.n	80020ae <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2200      	movs	r2, #0
 8002088:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2201      	movs	r2, #1
 8002090:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f80b 	bl	80020b8 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4618      	mov	r0, r3
 80020a8:	f003 fa23 	bl	80054f2 <USB_DevDisconnect>

  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	3714      	adds	r7, #20
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080020b8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80020b8:	b480      	push	{r7}
 80020ba:	b085      	sub	sp, #20
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	2201      	movs	r2, #1
 80020ca:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	699b      	ldr	r3, [r3, #24]
 80020da:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80020e6:	4b05      	ldr	r3, [pc, #20]	; (80020fc <HAL_PCDEx_ActivateLPM+0x44>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	68fa      	ldr	r2, [r7, #12]
 80020ec:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80020ee:	2300      	movs	r3, #0
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3714      	adds	r7, #20
 80020f4:	46bd      	mov	sp, r7
 80020f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fa:	4770      	bx	lr
 80020fc:	10000003 	.word	0x10000003

08002100 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002100:	b480      	push	{r7}
 8002102:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002104:	4b05      	ldr	r3, [pc, #20]	; (800211c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	4a04      	ldr	r2, [pc, #16]	; (800211c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800210a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800210e:	6013      	str	r3, [r2, #0]
}
 8002110:	bf00      	nop
 8002112:	46bd      	mov	sp, r7
 8002114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002118:	4770      	bx	lr
 800211a:	bf00      	nop
 800211c:	40007000 	.word	0x40007000

08002120 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800212a:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_PWREx_EnableOverDrive+0x98>)
 800212c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800212e:	4a22      	ldr	r2, [pc, #136]	; (80021b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002134:	6413      	str	r3, [r2, #64]	; 0x40
 8002136:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <HAL_PWREx_EnableOverDrive+0x98>)
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800213e:	603b      	str	r3, [r7, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002142:	4b1e      	ldr	r3, [pc, #120]	; (80021bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a1d      	ldr	r2, [pc, #116]	; (80021bc <HAL_PWREx_EnableOverDrive+0x9c>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800214e:	f7ff f88d 	bl	800126c <HAL_GetTick>
 8002152:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002154:	e009      	b.n	800216a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002156:	f7ff f889 	bl	800126c <HAL_GetTick>
 800215a:	4602      	mov	r2, r0
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002164:	d901      	bls.n	800216a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e022      	b.n	80021b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800216a:	4b14      	ldr	r3, [pc, #80]	; (80021bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002172:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002176:	d1ee      	bne.n	8002156 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002178:	4b10      	ldr	r3, [pc, #64]	; (80021bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a0f      	ldr	r2, [pc, #60]	; (80021bc <HAL_PWREx_EnableOverDrive+0x9c>)
 800217e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002182:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002184:	f7ff f872 	bl	800126c <HAL_GetTick>
 8002188:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800218a:	e009      	b.n	80021a0 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800218c:	f7ff f86e 	bl	800126c <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800219a:	d901      	bls.n	80021a0 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e007      	b.n	80021b0 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80021a0:	4b06      	ldr	r3, [pc, #24]	; (80021bc <HAL_PWREx_EnableOverDrive+0x9c>)
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80021ac:	d1ee      	bne.n	800218c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80021ae:	2300      	movs	r3, #0
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	40023800 	.word	0x40023800
 80021bc:	40007000 	.word	0x40007000

080021c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b086      	sub	sp, #24
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021c8:	2300      	movs	r3, #0
 80021ca:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e29b      	b.n	800270e <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	2b00      	cmp	r3, #0
 80021e0:	f000 8087 	beq.w	80022f2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e4:	4b96      	ldr	r3, [pc, #600]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	f003 030c 	and.w	r3, r3, #12
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d00c      	beq.n	800220a <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021f0:	4b93      	ldr	r3, [pc, #588]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	f003 030c 	and.w	r3, r3, #12
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d112      	bne.n	8002222 <HAL_RCC_OscConfig+0x62>
 80021fc:	4b90      	ldr	r3, [pc, #576]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80021fe:	685b      	ldr	r3, [r3, #4]
 8002200:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002204:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002208:	d10b      	bne.n	8002222 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800220a:	4b8d      	ldr	r3, [pc, #564]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002212:	2b00      	cmp	r3, #0
 8002214:	d06c      	beq.n	80022f0 <HAL_RCC_OscConfig+0x130>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	2b00      	cmp	r3, #0
 800221c:	d168      	bne.n	80022f0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e275      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800222a:	d106      	bne.n	800223a <HAL_RCC_OscConfig+0x7a>
 800222c:	4b84      	ldr	r3, [pc, #528]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	4a83      	ldr	r2, [pc, #524]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002232:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002236:	6013      	str	r3, [r2, #0]
 8002238:	e02e      	b.n	8002298 <HAL_RCC_OscConfig+0xd8>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	685b      	ldr	r3, [r3, #4]
 800223e:	2b00      	cmp	r3, #0
 8002240:	d10c      	bne.n	800225c <HAL_RCC_OscConfig+0x9c>
 8002242:	4b7f      	ldr	r3, [pc, #508]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a7e      	ldr	r2, [pc, #504]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002248:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800224c:	6013      	str	r3, [r2, #0]
 800224e:	4b7c      	ldr	r3, [pc, #496]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	4a7b      	ldr	r2, [pc, #492]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002254:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002258:	6013      	str	r3, [r2, #0]
 800225a:	e01d      	b.n	8002298 <HAL_RCC_OscConfig+0xd8>
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002264:	d10c      	bne.n	8002280 <HAL_RCC_OscConfig+0xc0>
 8002266:	4b76      	ldr	r3, [pc, #472]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a75      	ldr	r2, [pc, #468]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800226c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002270:	6013      	str	r3, [r2, #0]
 8002272:	4b73      	ldr	r3, [pc, #460]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a72      	ldr	r2, [pc, #456]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002278:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	e00b      	b.n	8002298 <HAL_RCC_OscConfig+0xd8>
 8002280:	4b6f      	ldr	r3, [pc, #444]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a6e      	ldr	r2, [pc, #440]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002286:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800228a:	6013      	str	r3, [r2, #0]
 800228c:	4b6c      	ldr	r3, [pc, #432]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	4a6b      	ldr	r2, [pc, #428]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002292:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002296:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d013      	beq.n	80022c8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ffe4 	bl	800126c <HAL_GetTick>
 80022a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a6:	e008      	b.n	80022ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a8:	f7fe ffe0 	bl	800126c <HAL_GetTick>
 80022ac:	4602      	mov	r2, r0
 80022ae:	693b      	ldr	r3, [r7, #16]
 80022b0:	1ad3      	subs	r3, r2, r3
 80022b2:	2b64      	cmp	r3, #100	; 0x64
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e229      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022ba:	4b61      	ldr	r3, [pc, #388]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d0f0      	beq.n	80022a8 <HAL_RCC_OscConfig+0xe8>
 80022c6:	e014      	b.n	80022f2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c8:	f7fe ffd0 	bl	800126c <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022d0:	f7fe ffcc 	bl	800126c <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b64      	cmp	r3, #100	; 0x64
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e215      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022e2:	4b57      	ldr	r3, [pc, #348]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d1f0      	bne.n	80022d0 <HAL_RCC_OscConfig+0x110>
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0302 	and.w	r3, r3, #2
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d069      	beq.n	80023d2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fe:	4b50      	ldr	r3, [pc, #320]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b00      	cmp	r3, #0
 8002308:	d00b      	beq.n	8002322 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800230a:	4b4d      	ldr	r3, [pc, #308]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b08      	cmp	r3, #8
 8002314:	d11c      	bne.n	8002350 <HAL_RCC_OscConfig+0x190>
 8002316:	4b4a      	ldr	r3, [pc, #296]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d116      	bne.n	8002350 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002322:	4b47      	ldr	r3, [pc, #284]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f003 0302 	and.w	r3, r3, #2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d005      	beq.n	800233a <HAL_RCC_OscConfig+0x17a>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b01      	cmp	r3, #1
 8002334:	d001      	beq.n	800233a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002336:	2301      	movs	r3, #1
 8002338:	e1e9      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800233a:	4b41      	ldr	r3, [pc, #260]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	691b      	ldr	r3, [r3, #16]
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	493d      	ldr	r1, [pc, #244]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800234a:	4313      	orrs	r3, r2
 800234c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234e:	e040      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d023      	beq.n	80023a0 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002358:	4b39      	ldr	r3, [pc, #228]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a38      	ldr	r2, [pc, #224]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800235e:	f043 0301 	orr.w	r3, r3, #1
 8002362:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002364:	f7fe ff82 	bl	800126c <HAL_GetTick>
 8002368:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800236a:	e008      	b.n	800237e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800236c:	f7fe ff7e 	bl	800126c <HAL_GetTick>
 8002370:	4602      	mov	r2, r0
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	1ad3      	subs	r3, r2, r3
 8002376:	2b02      	cmp	r3, #2
 8002378:	d901      	bls.n	800237e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e1c7      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237e:	4b30      	ldr	r3, [pc, #192]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0302 	and.w	r3, r3, #2
 8002386:	2b00      	cmp	r3, #0
 8002388:	d0f0      	beq.n	800236c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800238a:	4b2d      	ldr	r3, [pc, #180]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	691b      	ldr	r3, [r3, #16]
 8002396:	00db      	lsls	r3, r3, #3
 8002398:	4929      	ldr	r1, [pc, #164]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800239a:	4313      	orrs	r3, r2
 800239c:	600b      	str	r3, [r1, #0]
 800239e:	e018      	b.n	80023d2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023a0:	4b27      	ldr	r3, [pc, #156]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	4a26      	ldr	r2, [pc, #152]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023a6:	f023 0301 	bic.w	r3, r3, #1
 80023aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe ff5e 	bl	800126c <HAL_GetTick>
 80023b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7fe ff5a 	bl	800126c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e1a3      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c6:	4b1e      	ldr	r3, [pc, #120]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0302 	and.w	r3, r3, #2
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d1f0      	bne.n	80023b4 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f003 0308 	and.w	r3, r3, #8
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d038      	beq.n	8002450 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	695b      	ldr	r3, [r3, #20]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d019      	beq.n	800241a <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e6:	4b16      	ldr	r3, [pc, #88]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023ea:	4a15      	ldr	r2, [pc, #84]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023f2:	f7fe ff3b 	bl	800126c <HAL_GetTick>
 80023f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f8:	e008      	b.n	800240c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023fa:	f7fe ff37 	bl	800126c <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	1ad3      	subs	r3, r2, r3
 8002404:	2b02      	cmp	r3, #2
 8002406:	d901      	bls.n	800240c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002408:	2303      	movs	r3, #3
 800240a:	e180      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800240c:	4b0c      	ldr	r3, [pc, #48]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800240e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002410:	f003 0302 	and.w	r3, r3, #2
 8002414:	2b00      	cmp	r3, #0
 8002416:	d0f0      	beq.n	80023fa <HAL_RCC_OscConfig+0x23a>
 8002418:	e01a      	b.n	8002450 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800241a:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 800241c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241e:	4a08      	ldr	r2, [pc, #32]	; (8002440 <HAL_RCC_OscConfig+0x280>)
 8002420:	f023 0301 	bic.w	r3, r3, #1
 8002424:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002426:	f7fe ff21 	bl	800126c <HAL_GetTick>
 800242a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800242c:	e00a      	b.n	8002444 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242e:	f7fe ff1d 	bl	800126c <HAL_GetTick>
 8002432:	4602      	mov	r2, r0
 8002434:	693b      	ldr	r3, [r7, #16]
 8002436:	1ad3      	subs	r3, r2, r3
 8002438:	2b02      	cmp	r3, #2
 800243a:	d903      	bls.n	8002444 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800243c:	2303      	movs	r3, #3
 800243e:	e166      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
 8002440:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002444:	4b92      	ldr	r3, [pc, #584]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002446:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002448:	f003 0302 	and.w	r3, r3, #2
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1ee      	bne.n	800242e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0304 	and.w	r3, r3, #4
 8002458:	2b00      	cmp	r3, #0
 800245a:	f000 80a4 	beq.w	80025a6 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245e:	4b8c      	ldr	r3, [pc, #560]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002460:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002462:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d10d      	bne.n	8002486 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800246a:	4b89      	ldr	r3, [pc, #548]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800246c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246e:	4a88      	ldr	r2, [pc, #544]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002470:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002474:	6413      	str	r3, [r2, #64]	; 0x40
 8002476:	4b86      	ldr	r3, [pc, #536]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247e:	60bb      	str	r3, [r7, #8]
 8002480:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002482:	2301      	movs	r3, #1
 8002484:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002486:	4b83      	ldr	r3, [pc, #524]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248e:	2b00      	cmp	r3, #0
 8002490:	d118      	bne.n	80024c4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002492:	4b80      	ldr	r3, [pc, #512]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a7f      	ldr	r2, [pc, #508]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 8002498:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249e:	f7fe fee5 	bl	800126c <HAL_GetTick>
 80024a2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a4:	e008      	b.n	80024b8 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a6:	f7fe fee1 	bl	800126c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b64      	cmp	r3, #100	; 0x64
 80024b2:	d901      	bls.n	80024b8 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	e12a      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b8:	4b76      	ldr	r3, [pc, #472]	; (8002694 <HAL_RCC_OscConfig+0x4d4>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0f0      	beq.n	80024a6 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	2b01      	cmp	r3, #1
 80024ca:	d106      	bne.n	80024da <HAL_RCC_OscConfig+0x31a>
 80024cc:	4b70      	ldr	r3, [pc, #448]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4a6f      	ldr	r2, [pc, #444]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024d2:	f043 0301 	orr.w	r3, r3, #1
 80024d6:	6713      	str	r3, [r2, #112]	; 0x70
 80024d8:	e02d      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0x33c>
 80024e2:	4b6b      	ldr	r3, [pc, #428]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e6:	4a6a      	ldr	r2, [pc, #424]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024e8:	f023 0301 	bic.w	r3, r3, #1
 80024ec:	6713      	str	r3, [r2, #112]	; 0x70
 80024ee:	4b68      	ldr	r3, [pc, #416]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a67      	ldr	r2, [pc, #412]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80024f4:	f023 0304 	bic.w	r3, r3, #4
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
 80024fa:	e01c      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	2b05      	cmp	r3, #5
 8002502:	d10c      	bne.n	800251e <HAL_RCC_OscConfig+0x35e>
 8002504:	4b62      	ldr	r3, [pc, #392]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002506:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002508:	4a61      	ldr	r2, [pc, #388]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800250a:	f043 0304 	orr.w	r3, r3, #4
 800250e:	6713      	str	r3, [r2, #112]	; 0x70
 8002510:	4b5f      	ldr	r3, [pc, #380]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002512:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002514:	4a5e      	ldr	r2, [pc, #376]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002516:	f043 0301 	orr.w	r3, r3, #1
 800251a:	6713      	str	r3, [r2, #112]	; 0x70
 800251c:	e00b      	b.n	8002536 <HAL_RCC_OscConfig+0x376>
 800251e:	4b5c      	ldr	r3, [pc, #368]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002520:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002522:	4a5b      	ldr	r2, [pc, #364]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002524:	f023 0301 	bic.w	r3, r3, #1
 8002528:	6713      	str	r3, [r2, #112]	; 0x70
 800252a:	4b59      	ldr	r3, [pc, #356]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800252c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252e:	4a58      	ldr	r2, [pc, #352]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002530:	f023 0304 	bic.w	r3, r3, #4
 8002534:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d015      	beq.n	800256a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253e:	f7fe fe95 	bl	800126c <HAL_GetTick>
 8002542:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002544:	e00a      	b.n	800255c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002546:	f7fe fe91 	bl	800126c <HAL_GetTick>
 800254a:	4602      	mov	r2, r0
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	1ad3      	subs	r3, r2, r3
 8002550:	f241 3288 	movw	r2, #5000	; 0x1388
 8002554:	4293      	cmp	r3, r2
 8002556:	d901      	bls.n	800255c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002558:	2303      	movs	r3, #3
 800255a:	e0d8      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800255c:	4b4c      	ldr	r3, [pc, #304]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	f003 0302 	and.w	r3, r3, #2
 8002564:	2b00      	cmp	r3, #0
 8002566:	d0ee      	beq.n	8002546 <HAL_RCC_OscConfig+0x386>
 8002568:	e014      	b.n	8002594 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800256a:	f7fe fe7f 	bl	800126c <HAL_GetTick>
 800256e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002570:	e00a      	b.n	8002588 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002572:	f7fe fe7b 	bl	800126c <HAL_GetTick>
 8002576:	4602      	mov	r2, r0
 8002578:	693b      	ldr	r3, [r7, #16]
 800257a:	1ad3      	subs	r3, r2, r3
 800257c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002580:	4293      	cmp	r3, r2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e0c2      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002588:	4b41      	ldr	r3, [pc, #260]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800258a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d1ee      	bne.n	8002572 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002594:	7dfb      	ldrb	r3, [r7, #23]
 8002596:	2b01      	cmp	r3, #1
 8002598:	d105      	bne.n	80025a6 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800259a:	4b3d      	ldr	r3, [pc, #244]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800259c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259e:	4a3c      	ldr	r2, [pc, #240]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025a0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	699b      	ldr	r3, [r3, #24]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f000 80ae 	beq.w	800270c <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025b0:	4b37      	ldr	r3, [pc, #220]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	f003 030c 	and.w	r3, r3, #12
 80025b8:	2b08      	cmp	r3, #8
 80025ba:	d06d      	beq.n	8002698 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699b      	ldr	r3, [r3, #24]
 80025c0:	2b02      	cmp	r3, #2
 80025c2:	d14b      	bne.n	800265c <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c4:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a31      	ldr	r2, [pc, #196]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025ca:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d0:	f7fe fe4c 	bl	800126c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d6:	e008      	b.n	80025ea <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d8:	f7fe fe48 	bl	800126c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d901      	bls.n	80025ea <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e091      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025ea:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d1f0      	bne.n	80025d8 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	69da      	ldr	r2, [r3, #28]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	431a      	orrs	r2, r3
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002604:	019b      	lsls	r3, r3, #6
 8002606:	431a      	orrs	r2, r3
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800260c:	085b      	lsrs	r3, r3, #1
 800260e:	3b01      	subs	r3, #1
 8002610:	041b      	lsls	r3, r3, #16
 8002612:	431a      	orrs	r2, r3
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002618:	061b      	lsls	r3, r3, #24
 800261a:	431a      	orrs	r2, r3
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002620:	071b      	lsls	r3, r3, #28
 8002622:	491b      	ldr	r1, [pc, #108]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002624:	4313      	orrs	r3, r2
 8002626:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002628:	4b19      	ldr	r3, [pc, #100]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	4a18      	ldr	r2, [pc, #96]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800262e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002632:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002634:	f7fe fe1a 	bl	800126c <HAL_GetTick>
 8002638:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800263a:	e008      	b.n	800264e <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800263c:	f7fe fe16 	bl	800126c <HAL_GetTick>
 8002640:	4602      	mov	r2, r0
 8002642:	693b      	ldr	r3, [r7, #16]
 8002644:	1ad3      	subs	r3, r2, r3
 8002646:	2b02      	cmp	r3, #2
 8002648:	d901      	bls.n	800264e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800264a:	2303      	movs	r3, #3
 800264c:	e05f      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800264e:	4b10      	ldr	r3, [pc, #64]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d0f0      	beq.n	800263c <HAL_RCC_OscConfig+0x47c>
 800265a:	e057      	b.n	800270c <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800265c:	4b0c      	ldr	r3, [pc, #48]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a0b      	ldr	r2, [pc, #44]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002662:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002666:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002668:	f7fe fe00 	bl	800126c <HAL_GetTick>
 800266c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800266e:	e008      	b.n	8002682 <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002670:	f7fe fdfc 	bl	800126c <HAL_GetTick>
 8002674:	4602      	mov	r2, r0
 8002676:	693b      	ldr	r3, [r7, #16]
 8002678:	1ad3      	subs	r3, r2, r3
 800267a:	2b02      	cmp	r3, #2
 800267c:	d901      	bls.n	8002682 <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	e045      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002682:	4b03      	ldr	r3, [pc, #12]	; (8002690 <HAL_RCC_OscConfig+0x4d0>)
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d1f0      	bne.n	8002670 <HAL_RCC_OscConfig+0x4b0>
 800268e:	e03d      	b.n	800270c <HAL_RCC_OscConfig+0x54c>
 8002690:	40023800 	.word	0x40023800
 8002694:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002698:	4b1f      	ldr	r3, [pc, #124]	; (8002718 <HAL_RCC_OscConfig+0x558>)
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	2b01      	cmp	r3, #1
 80026a4:	d030      	beq.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026a6:	68fb      	ldr	r3, [r7, #12]
 80026a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026b0:	429a      	cmp	r2, r3
 80026b2:	d129      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026be:	429a      	cmp	r2, r3
 80026c0:	d122      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026c2:	68fa      	ldr	r2, [r7, #12]
 80026c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c8:	4013      	ands	r3, r2
 80026ca:	687a      	ldr	r2, [r7, #4]
 80026cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026ce:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d119      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026de:	085b      	lsrs	r3, r3, #1
 80026e0:	3b01      	subs	r3, #1
 80026e2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d10f      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026f2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026f4:	429a      	cmp	r2, r3
 80026f6:	d107      	bne.n	8002708 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002702:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002704:	429a      	cmp	r2, r3
 8002706:	d001      	beq.n	800270c <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8002708:	2301      	movs	r3, #1
 800270a:	e000      	b.n	800270e <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3718      	adds	r7, #24
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	40023800 	.word	0x40023800

0800271c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002726:	2300      	movs	r3, #0
 8002728:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d101      	bne.n	8002734 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002730:	2301      	movs	r3, #1
 8002732:	e0d0      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002734:	4b6a      	ldr	r3, [pc, #424]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f003 030f 	and.w	r3, r3, #15
 800273c:	683a      	ldr	r2, [r7, #0]
 800273e:	429a      	cmp	r2, r3
 8002740:	d910      	bls.n	8002764 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002742:	4b67      	ldr	r3, [pc, #412]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f023 020f 	bic.w	r2, r3, #15
 800274a:	4965      	ldr	r1, [pc, #404]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	4313      	orrs	r3, r2
 8002750:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002752:	4b63      	ldr	r3, [pc, #396]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f003 030f 	and.w	r3, r3, #15
 800275a:	683a      	ldr	r2, [r7, #0]
 800275c:	429a      	cmp	r2, r3
 800275e:	d001      	beq.n	8002764 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0b8      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f003 0302 	and.w	r3, r3, #2
 800276c:	2b00      	cmp	r3, #0
 800276e:	d020      	beq.n	80027b2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0304 	and.w	r3, r3, #4
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800277c:	4b59      	ldr	r3, [pc, #356]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a58      	ldr	r2, [pc, #352]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002782:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002786:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0308 	and.w	r3, r3, #8
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002794:	4b53      	ldr	r3, [pc, #332]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a52      	ldr	r2, [pc, #328]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800279a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800279e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027a0:	4b50      	ldr	r3, [pc, #320]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	494d      	ldr	r1, [pc, #308]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027ae:	4313      	orrs	r3, r2
 80027b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d040      	beq.n	8002840 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b01      	cmp	r3, #1
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027c6:	4b47      	ldr	r3, [pc, #284]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d115      	bne.n	80027fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e07f      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b02      	cmp	r3, #2
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027de:	4b41      	ldr	r3, [pc, #260]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d109      	bne.n	80027fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e073      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027ee:	4b3d      	ldr	r3, [pc, #244]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f003 0302 	and.w	r3, r3, #2
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027fa:	2301      	movs	r3, #1
 80027fc:	e06b      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027fe:	4b39      	ldr	r3, [pc, #228]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f023 0203 	bic.w	r2, r3, #3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	685b      	ldr	r3, [r3, #4]
 800280a:	4936      	ldr	r1, [pc, #216]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800280c:	4313      	orrs	r3, r2
 800280e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002810:	f7fe fd2c 	bl	800126c <HAL_GetTick>
 8002814:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	e00a      	b.n	800282e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002818:	f7fe fd28 	bl	800126c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	f241 3288 	movw	r2, #5000	; 0x1388
 8002826:	4293      	cmp	r3, r2
 8002828:	d901      	bls.n	800282e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e053      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800282e:	4b2d      	ldr	r3, [pc, #180]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f003 020c 	and.w	r2, r3, #12
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	685b      	ldr	r3, [r3, #4]
 800283a:	009b      	lsls	r3, r3, #2
 800283c:	429a      	cmp	r2, r3
 800283e:	d1eb      	bne.n	8002818 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002840:	4b27      	ldr	r3, [pc, #156]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 030f 	and.w	r3, r3, #15
 8002848:	683a      	ldr	r2, [r7, #0]
 800284a:	429a      	cmp	r2, r3
 800284c:	d210      	bcs.n	8002870 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800284e:	4b24      	ldr	r3, [pc, #144]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f023 020f 	bic.w	r2, r3, #15
 8002856:	4922      	ldr	r1, [pc, #136]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800285e:	4b20      	ldr	r3, [pc, #128]	; (80028e0 <HAL_RCC_ClockConfig+0x1c4>)
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 030f 	and.w	r3, r3, #15
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	429a      	cmp	r2, r3
 800286a:	d001      	beq.n	8002870 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800286c:	2301      	movs	r3, #1
 800286e:	e032      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f003 0304 	and.w	r3, r3, #4
 8002878:	2b00      	cmp	r3, #0
 800287a:	d008      	beq.n	800288e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800287c:	4b19      	ldr	r3, [pc, #100]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	4916      	ldr	r1, [pc, #88]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800288a:	4313      	orrs	r3, r2
 800288c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	f003 0308 	and.w	r3, r3, #8
 8002896:	2b00      	cmp	r3, #0
 8002898:	d009      	beq.n	80028ae <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800289a:	4b12      	ldr	r3, [pc, #72]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	691b      	ldr	r3, [r3, #16]
 80028a6:	00db      	lsls	r3, r3, #3
 80028a8:	490e      	ldr	r1, [pc, #56]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028aa:	4313      	orrs	r3, r2
 80028ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80028ae:	f000 f821 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 80028b2:	4602      	mov	r2, r0
 80028b4:	4b0b      	ldr	r3, [pc, #44]	; (80028e4 <HAL_RCC_ClockConfig+0x1c8>)
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	091b      	lsrs	r3, r3, #4
 80028ba:	f003 030f 	and.w	r3, r3, #15
 80028be:	490a      	ldr	r1, [pc, #40]	; (80028e8 <HAL_RCC_ClockConfig+0x1cc>)
 80028c0:	5ccb      	ldrb	r3, [r1, r3]
 80028c2:	fa22 f303 	lsr.w	r3, r2, r3
 80028c6:	4a09      	ldr	r2, [pc, #36]	; (80028ec <HAL_RCC_ClockConfig+0x1d0>)
 80028c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028ca:	4b09      	ldr	r3, [pc, #36]	; (80028f0 <HAL_RCC_ClockConfig+0x1d4>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7fe fc88 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40023c00 	.word	0x40023c00
 80028e4:	40023800 	.word	0x40023800
 80028e8:	0800563c 	.word	0x0800563c
 80028ec:	20000000 	.word	0x20000000
 80028f0:	20000004 	.word	0x20000004

080028f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028f8:	b094      	sub	sp, #80	; 0x50
 80028fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028fc:	2300      	movs	r3, #0
 80028fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002900:	2300      	movs	r3, #0
 8002902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002904:	2300      	movs	r3, #0
 8002906:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800290c:	4b79      	ldr	r3, [pc, #484]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	f003 030c 	and.w	r3, r3, #12
 8002914:	2b08      	cmp	r3, #8
 8002916:	d00d      	beq.n	8002934 <HAL_RCC_GetSysClockFreq+0x40>
 8002918:	2b08      	cmp	r3, #8
 800291a:	f200 80e1 	bhi.w	8002ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800291e:	2b00      	cmp	r3, #0
 8002920:	d002      	beq.n	8002928 <HAL_RCC_GetSysClockFreq+0x34>
 8002922:	2b04      	cmp	r3, #4
 8002924:	d003      	beq.n	800292e <HAL_RCC_GetSysClockFreq+0x3a>
 8002926:	e0db      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002928:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x204>)
 800292a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800292c:	e0db      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800292e:	4b73      	ldr	r3, [pc, #460]	; (8002afc <HAL_RCC_GetSysClockFreq+0x208>)
 8002930:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002932:	e0d8      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002934:	4b6f      	ldr	r3, [pc, #444]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002936:	685b      	ldr	r3, [r3, #4]
 8002938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800293c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800293e:	4b6d      	ldr	r3, [pc, #436]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002940:	685b      	ldr	r3, [r3, #4]
 8002942:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002946:	2b00      	cmp	r3, #0
 8002948:	d063      	beq.n	8002a12 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800294a:	4b6a      	ldr	r3, [pc, #424]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 800294c:	685b      	ldr	r3, [r3, #4]
 800294e:	099b      	lsrs	r3, r3, #6
 8002950:	2200      	movs	r2, #0
 8002952:	63bb      	str	r3, [r7, #56]	; 0x38
 8002954:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002956:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002958:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800295c:	633b      	str	r3, [r7, #48]	; 0x30
 800295e:	2300      	movs	r3, #0
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
 8002962:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002966:	4622      	mov	r2, r4
 8002968:	462b      	mov	r3, r5
 800296a:	f04f 0000 	mov.w	r0, #0
 800296e:	f04f 0100 	mov.w	r1, #0
 8002972:	0159      	lsls	r1, r3, #5
 8002974:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002978:	0150      	lsls	r0, r2, #5
 800297a:	4602      	mov	r2, r0
 800297c:	460b      	mov	r3, r1
 800297e:	4621      	mov	r1, r4
 8002980:	1a51      	subs	r1, r2, r1
 8002982:	6139      	str	r1, [r7, #16]
 8002984:	4629      	mov	r1, r5
 8002986:	eb63 0301 	sbc.w	r3, r3, r1
 800298a:	617b      	str	r3, [r7, #20]
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002998:	4659      	mov	r1, fp
 800299a:	018b      	lsls	r3, r1, #6
 800299c:	4651      	mov	r1, sl
 800299e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029a2:	4651      	mov	r1, sl
 80029a4:	018a      	lsls	r2, r1, #6
 80029a6:	4651      	mov	r1, sl
 80029a8:	ebb2 0801 	subs.w	r8, r2, r1
 80029ac:	4659      	mov	r1, fp
 80029ae:	eb63 0901 	sbc.w	r9, r3, r1
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029c6:	4690      	mov	r8, r2
 80029c8:	4699      	mov	r9, r3
 80029ca:	4623      	mov	r3, r4
 80029cc:	eb18 0303 	adds.w	r3, r8, r3
 80029d0:	60bb      	str	r3, [r7, #8]
 80029d2:	462b      	mov	r3, r5
 80029d4:	eb49 0303 	adc.w	r3, r9, r3
 80029d8:	60fb      	str	r3, [r7, #12]
 80029da:	f04f 0200 	mov.w	r2, #0
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029e6:	4629      	mov	r1, r5
 80029e8:	024b      	lsls	r3, r1, #9
 80029ea:	4621      	mov	r1, r4
 80029ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029f0:	4621      	mov	r1, r4
 80029f2:	024a      	lsls	r2, r1, #9
 80029f4:	4610      	mov	r0, r2
 80029f6:	4619      	mov	r1, r3
 80029f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80029fa:	2200      	movs	r2, #0
 80029fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80029fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a00:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a04:	f7fd fc20 	bl	8000248 <__aeabi_uldivmod>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	460b      	mov	r3, r1
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a10:	e058      	b.n	8002ac4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a12:	4b38      	ldr	r3, [pc, #224]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002a14:	685b      	ldr	r3, [r3, #4]
 8002a16:	099b      	lsrs	r3, r3, #6
 8002a18:	2200      	movs	r2, #0
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a22:	623b      	str	r3, [r7, #32]
 8002a24:	2300      	movs	r3, #0
 8002a26:	627b      	str	r3, [r7, #36]	; 0x24
 8002a28:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a2c:	4642      	mov	r2, r8
 8002a2e:	464b      	mov	r3, r9
 8002a30:	f04f 0000 	mov.w	r0, #0
 8002a34:	f04f 0100 	mov.w	r1, #0
 8002a38:	0159      	lsls	r1, r3, #5
 8002a3a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3e:	0150      	lsls	r0, r2, #5
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4641      	mov	r1, r8
 8002a46:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a4a:	4649      	mov	r1, r9
 8002a4c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a5c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a60:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a64:	ebb2 040a 	subs.w	r4, r2, sl
 8002a68:	eb63 050b 	sbc.w	r5, r3, fp
 8002a6c:	f04f 0200 	mov.w	r2, #0
 8002a70:	f04f 0300 	mov.w	r3, #0
 8002a74:	00eb      	lsls	r3, r5, #3
 8002a76:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a7a:	00e2      	lsls	r2, r4, #3
 8002a7c:	4614      	mov	r4, r2
 8002a7e:	461d      	mov	r5, r3
 8002a80:	4643      	mov	r3, r8
 8002a82:	18e3      	adds	r3, r4, r3
 8002a84:	603b      	str	r3, [r7, #0]
 8002a86:	464b      	mov	r3, r9
 8002a88:	eb45 0303 	adc.w	r3, r5, r3
 8002a8c:	607b      	str	r3, [r7, #4]
 8002a8e:	f04f 0200 	mov.w	r2, #0
 8002a92:	f04f 0300 	mov.w	r3, #0
 8002a96:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	028b      	lsls	r3, r1, #10
 8002a9e:	4621      	mov	r1, r4
 8002aa0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aa4:	4621      	mov	r1, r4
 8002aa6:	028a      	lsls	r2, r1, #10
 8002aa8:	4610      	mov	r0, r2
 8002aaa:	4619      	mov	r1, r3
 8002aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002aae:	2200      	movs	r2, #0
 8002ab0:	61bb      	str	r3, [r7, #24]
 8002ab2:	61fa      	str	r2, [r7, #28]
 8002ab4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ab8:	f7fd fbc6 	bl	8000248 <__aeabi_uldivmod>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4613      	mov	r3, r2
 8002ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002ac4:	4b0b      	ldr	r3, [pc, #44]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	0c1b      	lsrs	r3, r3, #16
 8002aca:	f003 0303 	and.w	r3, r3, #3
 8002ace:	3301      	adds	r3, #1
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8002ad4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002ad6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ad8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002adc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ade:	e002      	b.n	8002ae6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ae2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ae4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3750      	adds	r7, #80	; 0x50
 8002aec:	46bd      	mov	sp, r7
 8002aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	00f42400 	.word	0x00f42400
 8002afc:	007a1200 	.word	0x007a1200

08002b00 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b04:	4b03      	ldr	r3, [pc, #12]	; (8002b14 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	20000000 	.word	0x20000000

08002b18 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b1c:	f7ff fff0 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4b05      	ldr	r3, [pc, #20]	; (8002b38 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b24:	689b      	ldr	r3, [r3, #8]
 8002b26:	0a9b      	lsrs	r3, r3, #10
 8002b28:	f003 0307 	and.w	r3, r3, #7
 8002b2c:	4903      	ldr	r1, [pc, #12]	; (8002b3c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2e:	5ccb      	ldrb	r3, [r1, r3]
 8002b30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	0800564c 	.word	0x0800564c

08002b40 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b44:	f7ff ffdc 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b4c:	689b      	ldr	r3, [r3, #8]
 8002b4e:	0b5b      	lsrs	r3, r3, #13
 8002b50:	f003 0307 	and.w	r3, r3, #7
 8002b54:	4903      	ldr	r1, [pc, #12]	; (8002b64 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b56:	5ccb      	ldrb	r3, [r1, r3]
 8002b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40023800 	.word	0x40023800
 8002b64:	0800564c 	.word	0x0800564c

08002b68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b70:	2300      	movs	r3, #0
 8002b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b74:	2300      	movs	r3, #0
 8002b76:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	d012      	beq.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b90:	4b69      	ldr	r3, [pc, #420]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b92:	689b      	ldr	r3, [r3, #8]
 8002b94:	4a68      	ldr	r2, [pc, #416]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b96:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b9a:	6093      	str	r3, [r2, #8]
 8002b9c:	4b66      	ldr	r3, [pc, #408]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b9e:	689a      	ldr	r2, [r3, #8]
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ba4:	4964      	ldr	r1, [pc, #400]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba6:	4313      	orrs	r3, r2
 8002ba8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d101      	bne.n	8002bb6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d017      	beq.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002bc2:	4b5d      	ldr	r3, [pc, #372]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002bc8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bd0:	4959      	ldr	r1, [pc, #356]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bd2:	4313      	orrs	r3, r2
 8002bd4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bdc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002be0:	d101      	bne.n	8002be6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002be2:	2301      	movs	r3, #1
 8002be4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d101      	bne.n	8002bf2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d017      	beq.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002bfe:	4b4e      	ldr	r3, [pc, #312]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002c04:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	494a      	ldr	r1, [pc, #296]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c18:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002c1c:	d101      	bne.n	8002c22 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d101      	bne.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d001      	beq.n	8002c3e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0320 	and.w	r3, r3, #32
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	f000 808b 	beq.w	8002d62 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c4c:	4b3a      	ldr	r3, [pc, #232]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	4a39      	ldr	r2, [pc, #228]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c52:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c56:	6413      	str	r3, [r2, #64]	; 0x40
 8002c58:	4b37      	ldr	r3, [pc, #220]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c64:	4b35      	ldr	r3, [pc, #212]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a34      	ldr	r2, [pc, #208]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c6a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c70:	f7fe fafc 	bl	800126c <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c76:	e008      	b.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c78:	f7fe faf8 	bl	800126c <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	697b      	ldr	r3, [r7, #20]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	2b64      	cmp	r3, #100	; 0x64
 8002c84:	d901      	bls.n	8002c8a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c86:	2303      	movs	r3, #3
 8002c88:	e38f      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c8a:	4b2c      	ldr	r3, [pc, #176]	; (8002d3c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d0f0      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c96:	4b28      	ldr	r3, [pc, #160]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002ca0:	693b      	ldr	r3, [r7, #16]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d035      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002caa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cae:	693a      	ldr	r2, [r7, #16]
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d02e      	beq.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002cb4:	4b20      	ldr	r3, [pc, #128]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cb8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cbc:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002cbe:	4b1e      	ldr	r3, [pc, #120]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	4a1d      	ldr	r2, [pc, #116]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cc8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002cca:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ccc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cce:	4a1a      	ldr	r2, [pc, #104]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002cd4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002cd6:	4a18      	ldr	r2, [pc, #96]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd8:	693b      	ldr	r3, [r7, #16]
 8002cda:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce0:	f003 0301 	and.w	r3, r3, #1
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d114      	bne.n	8002d12 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fac0 	bl	800126c <HAL_GetTick>
 8002cec:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cee:	e00a      	b.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cf0:	f7fe fabc 	bl	800126c <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	697b      	ldr	r3, [r7, #20]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d901      	bls.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002d02:	2303      	movs	r3, #3
 8002d04:	e351      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002d0a:	f003 0302 	and.w	r3, r3, #2
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d0ee      	beq.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002d1e:	d111      	bne.n	8002d44 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002d20:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d22:	689b      	ldr	r3, [r3, #8]
 8002d24:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d2c:	4b04      	ldr	r3, [pc, #16]	; (8002d40 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002d2e:	400b      	ands	r3, r1
 8002d30:	4901      	ldr	r1, [pc, #4]	; (8002d38 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002d32:	4313      	orrs	r3, r2
 8002d34:	608b      	str	r3, [r1, #8]
 8002d36:	e00b      	b.n	8002d50 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002d38:	40023800 	.word	0x40023800
 8002d3c:	40007000 	.word	0x40007000
 8002d40:	0ffffcff 	.word	0x0ffffcff
 8002d44:	4bac      	ldr	r3, [pc, #688]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	4aab      	ldr	r2, [pc, #684]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d4a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002d4e:	6093      	str	r3, [r2, #8]
 8002d50:	4ba9      	ldr	r3, [pc, #676]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d52:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002d5c:	49a6      	ldr	r1, [pc, #664]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d010      	beq.n	8002d90 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d6e:	4ba2      	ldr	r3, [pc, #648]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d74:	4aa0      	ldr	r2, [pc, #640]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d7a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d7e:	4b9e      	ldr	r3, [pc, #632]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d80:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d88:	499b      	ldr	r1, [pc, #620]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d00a      	beq.n	8002db2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d9c:	4b96      	ldr	r3, [pc, #600]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002daa:	4993      	ldr	r1, [pc, #588]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dac:	4313      	orrs	r3, r2
 8002dae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d00a      	beq.n	8002dd4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002dbe:	4b8e      	ldr	r3, [pc, #568]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002dcc:	498a      	ldr	r1, [pc, #552]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00a      	beq.n	8002df6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002de0:	4b85      	ldr	r3, [pc, #532]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002de6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002dee:	4982      	ldr	r1, [pc, #520]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002df0:	4313      	orrs	r3, r2
 8002df2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d00a      	beq.n	8002e18 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002e02:	4b7d      	ldr	r3, [pc, #500]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4979      	ldr	r1, [pc, #484]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d00a      	beq.n	8002e3a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e24:	4b74      	ldr	r3, [pc, #464]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2a:	f023 0203 	bic.w	r2, r3, #3
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	4971      	ldr	r1, [pc, #452]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d00a      	beq.n	8002e5c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002e46:	4b6c      	ldr	r3, [pc, #432]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e4c:	f023 020c 	bic.w	r2, r3, #12
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e54:	4968      	ldr	r1, [pc, #416]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00a      	beq.n	8002e7e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e68:	4b63      	ldr	r3, [pc, #396]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e76:	4960      	ldr	r1, [pc, #384]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e78:	4313      	orrs	r3, r2
 8002e7a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d00a      	beq.n	8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e8a:	4b5b      	ldr	r3, [pc, #364]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e90:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e98:	4957      	ldr	r1, [pc, #348]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d00a      	beq.n	8002ec2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002eac:	4b52      	ldr	r3, [pc, #328]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002eae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eba:	494f      	ldr	r1, [pc, #316]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d00a      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002ece:	4b4a      	ldr	r3, [pc, #296]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ed4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002edc:	4946      	ldr	r1, [pc, #280]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ede:	4313      	orrs	r3, r2
 8002ee0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d00a      	beq.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002ef0:	4b41      	ldr	r3, [pc, #260]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002ef2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002efe:	493e      	ldr	r1, [pc, #248]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f00:	4313      	orrs	r3, r2
 8002f02:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d00a      	beq.n	8002f28 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002f12:	4b39      	ldr	r3, [pc, #228]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f18:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f20:	4935      	ldr	r1, [pc, #212]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f22:	4313      	orrs	r3, r2
 8002f24:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d00a      	beq.n	8002f4a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002f34:	4b30      	ldr	r3, [pc, #192]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f42:	492d      	ldr	r1, [pc, #180]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f44:	4313      	orrs	r3, r2
 8002f46:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d011      	beq.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002f56:	4b28      	ldr	r3, [pc, #160]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f64:	4924      	ldr	r1, [pc, #144]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f66:	4313      	orrs	r3, r2
 8002f68:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f70:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f74:	d101      	bne.n	8002f7a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f76:	2301      	movs	r3, #1
 8002f78:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f003 0308 	and.w	r3, r3, #8
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d001      	beq.n	8002f8a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f86:	2301      	movs	r3, #1
 8002f88:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00a      	beq.n	8002fac <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f96:	4b18      	ldr	r3, [pc, #96]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002f98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f9c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fa4:	4914      	ldr	r1, [pc, #80]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fa6:	4313      	orrs	r3, r2
 8002fa8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d00b      	beq.n	8002fd0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002fb8:	4b0f      	ldr	r3, [pc, #60]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fbe:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002fc8:	490b      	ldr	r1, [pc, #44]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fca:	4313      	orrs	r3, r2
 8002fcc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d00f      	beq.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8002fdc:	4b06      	ldr	r3, [pc, #24]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fe2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fec:	4902      	ldr	r1, [pc, #8]	; (8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002ff4:	e002      	b.n	8002ffc <HAL_RCCEx_PeriphCLKConfig+0x494>
 8002ff6:	bf00      	nop
 8002ff8:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003004:	2b00      	cmp	r3, #0
 8003006:	d00b      	beq.n	8003020 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003008:	4b8a      	ldr	r3, [pc, #552]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800300a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800300e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	4986      	ldr	r1, [pc, #536]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800301a:	4313      	orrs	r3, r2
 800301c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d00b      	beq.n	8003044 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800302c:	4b81      	ldr	r3, [pc, #516]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800302e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003032:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800303c:	497d      	ldr	r1, [pc, #500]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800303e:	4313      	orrs	r3, r2
 8003040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	2b01      	cmp	r3, #1
 8003048:	d006      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003052:	2b00      	cmp	r3, #0
 8003054:	f000 80d6 	beq.w	8003204 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003058:	4b76      	ldr	r3, [pc, #472]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a75      	ldr	r2, [pc, #468]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800305e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003062:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003064:	f7fe f902 	bl	800126c <HAL_GetTick>
 8003068:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800306a:	e008      	b.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800306c:	f7fe f8fe 	bl	800126c <HAL_GetTick>
 8003070:	4602      	mov	r2, r0
 8003072:	697b      	ldr	r3, [r7, #20]
 8003074:	1ad3      	subs	r3, r2, r3
 8003076:	2b64      	cmp	r3, #100	; 0x64
 8003078:	d901      	bls.n	800307e <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800307a:	2303      	movs	r3, #3
 800307c:	e195      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800307e:	4b6d      	ldr	r3, [pc, #436]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1f0      	bne.n	800306c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f003 0301 	and.w	r3, r3, #1
 8003092:	2b00      	cmp	r3, #0
 8003094:	d021      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800309a:	2b00      	cmp	r3, #0
 800309c:	d11d      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800309e:	4b65      	ldr	r3, [pc, #404]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a4:	0c1b      	lsrs	r3, r3, #16
 80030a6:	f003 0303 	and.w	r3, r3, #3
 80030aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80030ac:	4b61      	ldr	r3, [pc, #388]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030b2:	0e1b      	lsrs	r3, r3, #24
 80030b4:	f003 030f 	and.w	r3, r3, #15
 80030b8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	019a      	lsls	r2, r3, #6
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	041b      	lsls	r3, r3, #16
 80030c4:	431a      	orrs	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	061b      	lsls	r3, r3, #24
 80030ca:	431a      	orrs	r2, r3
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	071b      	lsls	r3, r3, #28
 80030d2:	4958      	ldr	r1, [pc, #352]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d004      	beq.n	80030f0 <HAL_RCCEx_PeriphCLKConfig+0x588>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80030ee:	d00a      	beq.n	8003106 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d02e      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003100:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003104:	d129      	bne.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003106:	4b4b      	ldr	r3, [pc, #300]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003108:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800310c:	0c1b      	lsrs	r3, r3, #16
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003114:	4b47      	ldr	r3, [pc, #284]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003116:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800311a:	0f1b      	lsrs	r3, r3, #28
 800311c:	f003 0307 	and.w	r3, r3, #7
 8003120:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	019a      	lsls	r2, r3, #6
 8003128:	693b      	ldr	r3, [r7, #16]
 800312a:	041b      	lsls	r3, r3, #16
 800312c:	431a      	orrs	r2, r3
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	061b      	lsls	r3, r3, #24
 8003134:	431a      	orrs	r2, r3
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	071b      	lsls	r3, r3, #28
 800313a:	493e      	ldr	r1, [pc, #248]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800313c:	4313      	orrs	r3, r2
 800313e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003142:	4b3c      	ldr	r3, [pc, #240]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003144:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003148:	f023 021f 	bic.w	r2, r3, #31
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003150:	3b01      	subs	r3, #1
 8003152:	4938      	ldr	r1, [pc, #224]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003154:	4313      	orrs	r3, r2
 8003156:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003162:	2b00      	cmp	r3, #0
 8003164:	d01d      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003166:	4b33      	ldr	r3, [pc, #204]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003168:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800316c:	0e1b      	lsrs	r3, r3, #24
 800316e:	f003 030f 	and.w	r3, r3, #15
 8003172:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003174:	4b2f      	ldr	r3, [pc, #188]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003176:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800317a:	0f1b      	lsrs	r3, r3, #28
 800317c:	f003 0307 	and.w	r3, r3, #7
 8003180:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	019a      	lsls	r2, r3, #6
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	691b      	ldr	r3, [r3, #16]
 800318c:	041b      	lsls	r3, r3, #16
 800318e:	431a      	orrs	r2, r3
 8003190:	693b      	ldr	r3, [r7, #16]
 8003192:	061b      	lsls	r3, r3, #24
 8003194:	431a      	orrs	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	071b      	lsls	r3, r3, #28
 800319a:	4926      	ldr	r1, [pc, #152]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800319c:	4313      	orrs	r3, r2
 800319e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d011      	beq.n	80031d2 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	019a      	lsls	r2, r3, #6
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	691b      	ldr	r3, [r3, #16]
 80031b8:	041b      	lsls	r3, r3, #16
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	061b      	lsls	r3, r3, #24
 80031c2:	431a      	orrs	r2, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	689b      	ldr	r3, [r3, #8]
 80031c8:	071b      	lsls	r3, r3, #28
 80031ca:	491a      	ldr	r1, [pc, #104]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031cc:	4313      	orrs	r3, r2
 80031ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80031d2:	4b18      	ldr	r3, [pc, #96]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	4a17      	ldr	r2, [pc, #92]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80031dc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031de:	f7fe f845 	bl	800126c <HAL_GetTick>
 80031e2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80031e6:	f7fe f841 	bl	800126c <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b64      	cmp	r3, #100	; 0x64
 80031f2:	d901      	bls.n	80031f8 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e0d8      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80031f8:	4b0e      	ldr	r3, [pc, #56]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003204:	69bb      	ldr	r3, [r7, #24]
 8003206:	2b01      	cmp	r3, #1
 8003208:	f040 80ce 	bne.w	80033a8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800320c:	4b09      	ldr	r3, [pc, #36]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a08      	ldr	r2, [pc, #32]	; (8003234 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003216:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003218:	f7fe f828 	bl	800126c <HAL_GetTick>
 800321c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800321e:	e00b      	b.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003220:	f7fe f824 	bl	800126c <HAL_GetTick>
 8003224:	4602      	mov	r2, r0
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	1ad3      	subs	r3, r2, r3
 800322a:	2b64      	cmp	r3, #100	; 0x64
 800322c:	d904      	bls.n	8003238 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800322e:	2303      	movs	r3, #3
 8003230:	e0bb      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003238:	4b5e      	ldr	r3, [pc, #376]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003240:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003244:	d0ec      	beq.n	8003220 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003256:	2b00      	cmp	r3, #0
 8003258:	d009      	beq.n	800326e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003262:	2b00      	cmp	r3, #0
 8003264:	d02e      	beq.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800326a:	2b00      	cmp	r3, #0
 800326c:	d12a      	bne.n	80032c4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800326e:	4b51      	ldr	r3, [pc, #324]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003270:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003274:	0c1b      	lsrs	r3, r3, #16
 8003276:	f003 0303 	and.w	r3, r3, #3
 800327a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800327c:	4b4d      	ldr	r3, [pc, #308]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800327e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003282:	0f1b      	lsrs	r3, r3, #28
 8003284:	f003 0307 	and.w	r3, r3, #7
 8003288:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	695b      	ldr	r3, [r3, #20]
 800328e:	019a      	lsls	r2, r3, #6
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	041b      	lsls	r3, r3, #16
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	699b      	ldr	r3, [r3, #24]
 800329a:	061b      	lsls	r3, r3, #24
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	071b      	lsls	r3, r3, #28
 80032a2:	4944      	ldr	r1, [pc, #272]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032a4:	4313      	orrs	r3, r2
 80032a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80032aa:	4b42      	ldr	r3, [pc, #264]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032b0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b8:	3b01      	subs	r3, #1
 80032ba:	021b      	lsls	r3, r3, #8
 80032bc:	493d      	ldr	r1, [pc, #244]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032be:	4313      	orrs	r3, r2
 80032c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d022      	beq.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80032d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80032d8:	d11d      	bne.n	8003316 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80032da:	4b36      	ldr	r3, [pc, #216]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032e0:	0e1b      	lsrs	r3, r3, #24
 80032e2:	f003 030f 	and.w	r3, r3, #15
 80032e6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80032e8:	4b32      	ldr	r3, [pc, #200]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80032ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032ee:	0f1b      	lsrs	r3, r3, #28
 80032f0:	f003 0307 	and.w	r3, r3, #7
 80032f4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	019a      	lsls	r2, r3, #6
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a1b      	ldr	r3, [r3, #32]
 8003300:	041b      	lsls	r3, r3, #16
 8003302:	431a      	orrs	r2, r3
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	061b      	lsls	r3, r3, #24
 8003308:	431a      	orrs	r2, r3
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	071b      	lsls	r3, r3, #28
 800330e:	4929      	ldr	r1, [pc, #164]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003310:	4313      	orrs	r3, r2
 8003312:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0308 	and.w	r3, r3, #8
 800331e:	2b00      	cmp	r3, #0
 8003320:	d028      	beq.n	8003374 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003322:	4b24      	ldr	r3, [pc, #144]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003324:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003328:	0e1b      	lsrs	r3, r3, #24
 800332a:	f003 030f 	and.w	r3, r3, #15
 800332e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003330:	4b20      	ldr	r3, [pc, #128]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003332:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003336:	0c1b      	lsrs	r3, r3, #16
 8003338:	f003 0303 	and.w	r3, r3, #3
 800333c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	019a      	lsls	r2, r3, #6
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	041b      	lsls	r3, r3, #16
 8003348:	431a      	orrs	r2, r3
 800334a:	693b      	ldr	r3, [r7, #16]
 800334c:	061b      	lsls	r3, r3, #24
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	69db      	ldr	r3, [r3, #28]
 8003354:	071b      	lsls	r3, r3, #28
 8003356:	4917      	ldr	r1, [pc, #92]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800335e:	4b15      	ldr	r3, [pc, #84]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003360:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003364:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800336c:	4911      	ldr	r1, [pc, #68]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800336e:	4313      	orrs	r3, r2
 8003370:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003374:	4b0f      	ldr	r3, [pc, #60]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	4a0e      	ldr	r2, [pc, #56]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800337a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800337e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003380:	f7fd ff74 	bl	800126c <HAL_GetTick>
 8003384:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003388:	f7fd ff70 	bl	800126c <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	697b      	ldr	r3, [r7, #20]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e007      	b.n	80033aa <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80033a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80033a6:	d1ef      	bne.n	8003388 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3720      	adds	r7, #32
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	bf00      	nop
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d101      	bne.n	80033ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033c6:	2301      	movs	r3, #1
 80033c8:	e049      	b.n	800345e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033d0:	b2db      	uxtb	r3, r3
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d106      	bne.n	80033e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80033de:	6878      	ldr	r0, [r7, #4]
 80033e0:	f7fd fd42 	bl	8000e68 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	2202      	movs	r2, #2
 80033e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	3304      	adds	r3, #4
 80033f4:	4619      	mov	r1, r3
 80033f6:	4610      	mov	r0, r2
 80033f8:	f000 fbee 	bl	8003bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2201      	movs	r2, #1
 8003408:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}

08003466 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003466:	b580      	push	{r7, lr}
 8003468:	b082      	sub	sp, #8
 800346a:	af00      	add	r7, sp, #0
 800346c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b00      	cmp	r3, #0
 8003472:	d101      	bne.n	8003478 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	e049      	b.n	800350c <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b00      	cmp	r3, #0
 8003482:	d106      	bne.n	8003492 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2200      	movs	r2, #0
 8003488:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 f841 	bl	8003514 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681a      	ldr	r2, [r3, #0]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	3304      	adds	r3, #4
 80034a2:	4619      	mov	r1, r3
 80034a4:	4610      	mov	r0, r2
 80034a6:	f000 fb97 	bl	8003bd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2201      	movs	r2, #1
 80034b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2201      	movs	r2, #1
 80034d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2201      	movs	r2, #1
 80034e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2201      	movs	r2, #1
 80034ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2201      	movs	r2, #1
 80034f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2201      	movs	r2, #1
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800350a:	2300      	movs	r3, #0
}
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}

08003514 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003514:	b480      	push	{r7}
 8003516:	b083      	sub	sp, #12
 8003518:	af00      	add	r7, sp, #0
 800351a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800351c:	bf00      	nop
 800351e:	370c      	adds	r7, #12
 8003520:	46bd      	mov	sp, r7
 8003522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003526:	4770      	bx	lr

08003528 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d109      	bne.n	800354c <HAL_TIM_PWM_Start+0x24>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800353e:	b2db      	uxtb	r3, r3
 8003540:	2b01      	cmp	r3, #1
 8003542:	bf14      	ite	ne
 8003544:	2301      	movne	r3, #1
 8003546:	2300      	moveq	r3, #0
 8003548:	b2db      	uxtb	r3, r3
 800354a:	e03c      	b.n	80035c6 <HAL_TIM_PWM_Start+0x9e>
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	2b04      	cmp	r3, #4
 8003550:	d109      	bne.n	8003566 <HAL_TIM_PWM_Start+0x3e>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b01      	cmp	r3, #1
 800355c:	bf14      	ite	ne
 800355e:	2301      	movne	r3, #1
 8003560:	2300      	moveq	r3, #0
 8003562:	b2db      	uxtb	r3, r3
 8003564:	e02f      	b.n	80035c6 <HAL_TIM_PWM_Start+0x9e>
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	2b08      	cmp	r3, #8
 800356a:	d109      	bne.n	8003580 <HAL_TIM_PWM_Start+0x58>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	bf14      	ite	ne
 8003578:	2301      	movne	r3, #1
 800357a:	2300      	moveq	r3, #0
 800357c:	b2db      	uxtb	r3, r3
 800357e:	e022      	b.n	80035c6 <HAL_TIM_PWM_Start+0x9e>
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	2b0c      	cmp	r3, #12
 8003584:	d109      	bne.n	800359a <HAL_TIM_PWM_Start+0x72>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800358c:	b2db      	uxtb	r3, r3
 800358e:	2b01      	cmp	r3, #1
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e015      	b.n	80035c6 <HAL_TIM_PWM_Start+0x9e>
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	2b10      	cmp	r3, #16
 800359e:	d109      	bne.n	80035b4 <HAL_TIM_PWM_Start+0x8c>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80035a6:	b2db      	uxtb	r3, r3
 80035a8:	2b01      	cmp	r3, #1
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	e008      	b.n	80035c6 <HAL_TIM_PWM_Start+0x9e>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	2b01      	cmp	r3, #1
 80035be:	bf14      	ite	ne
 80035c0:	2301      	movne	r3, #1
 80035c2:	2300      	moveq	r3, #0
 80035c4:	b2db      	uxtb	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80035ca:	2301      	movs	r3, #1
 80035cc:	e092      	b.n	80036f4 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Start+0xb6>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035dc:	e023      	b.n	8003626 <HAL_TIM_PWM_Start+0xfe>
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d104      	bne.n	80035ee <HAL_TIM_PWM_Start+0xc6>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	2202      	movs	r2, #2
 80035e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035ec:	e01b      	b.n	8003626 <HAL_TIM_PWM_Start+0xfe>
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	2b08      	cmp	r3, #8
 80035f2:	d104      	bne.n	80035fe <HAL_TIM_PWM_Start+0xd6>
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035fc:	e013      	b.n	8003626 <HAL_TIM_PWM_Start+0xfe>
 80035fe:	683b      	ldr	r3, [r7, #0]
 8003600:	2b0c      	cmp	r3, #12
 8003602:	d104      	bne.n	800360e <HAL_TIM_PWM_Start+0xe6>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2202      	movs	r2, #2
 8003608:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800360c:	e00b      	b.n	8003626 <HAL_TIM_PWM_Start+0xfe>
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	2b10      	cmp	r3, #16
 8003612:	d104      	bne.n	800361e <HAL_TIM_PWM_Start+0xf6>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2202      	movs	r2, #2
 8003618:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800361c:	e003      	b.n	8003626 <HAL_TIM_PWM_Start+0xfe>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	2202      	movs	r2, #2
 8003622:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	2201      	movs	r2, #1
 800362c:	6839      	ldr	r1, [r7, #0]
 800362e:	4618      	mov	r0, r3
 8003630:	f000 fe6a 	bl	8004308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a30      	ldr	r2, [pc, #192]	; (80036fc <HAL_TIM_PWM_Start+0x1d4>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d004      	beq.n	8003648 <HAL_TIM_PWM_Start+0x120>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4a2f      	ldr	r2, [pc, #188]	; (8003700 <HAL_TIM_PWM_Start+0x1d8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d101      	bne.n	800364c <HAL_TIM_PWM_Start+0x124>
 8003648:	2301      	movs	r3, #1
 800364a:	e000      	b.n	800364e <HAL_TIM_PWM_Start+0x126>
 800364c:	2300      	movs	r3, #0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003660:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a25      	ldr	r2, [pc, #148]	; (80036fc <HAL_TIM_PWM_Start+0x1d4>)
 8003668:	4293      	cmp	r3, r2
 800366a:	d022      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x18a>
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003674:	d01d      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x18a>
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4a22      	ldr	r2, [pc, #136]	; (8003704 <HAL_TIM_PWM_Start+0x1dc>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d018      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x18a>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	4a20      	ldr	r2, [pc, #128]	; (8003708 <HAL_TIM_PWM_Start+0x1e0>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d013      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x18a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a1f      	ldr	r2, [pc, #124]	; (800370c <HAL_TIM_PWM_Start+0x1e4>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d00e      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x18a>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	4a19      	ldr	r2, [pc, #100]	; (8003700 <HAL_TIM_PWM_Start+0x1d8>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d009      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x18a>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	4a1b      	ldr	r2, [pc, #108]	; (8003710 <HAL_TIM_PWM_Start+0x1e8>)
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d004      	beq.n	80036b2 <HAL_TIM_PWM_Start+0x18a>
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	4a19      	ldr	r2, [pc, #100]	; (8003714 <HAL_TIM_PWM_Start+0x1ec>)
 80036ae:	4293      	cmp	r3, r2
 80036b0:	d115      	bne.n	80036de <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689a      	ldr	r2, [r3, #8]
 80036b8:	4b17      	ldr	r3, [pc, #92]	; (8003718 <HAL_TIM_PWM_Start+0x1f0>)
 80036ba:	4013      	ands	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2b06      	cmp	r3, #6
 80036c2:	d015      	beq.n	80036f0 <HAL_TIM_PWM_Start+0x1c8>
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80036ca:	d011      	beq.n	80036f0 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f042 0201 	orr.w	r2, r2, #1
 80036da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036dc:	e008      	b.n	80036f0 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	681a      	ldr	r2, [r3, #0]
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f042 0201 	orr.w	r2, r2, #1
 80036ec:	601a      	str	r2, [r3, #0]
 80036ee:	e000      	b.n	80036f2 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036f0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80036f2:	2300      	movs	r3, #0
}
 80036f4:	4618      	mov	r0, r3
 80036f6:	3710      	adds	r7, #16
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bd80      	pop	{r7, pc}
 80036fc:	40010000 	.word	0x40010000
 8003700:	40010400 	.word	0x40010400
 8003704:	40000400 	.word	0x40000400
 8003708:	40000800 	.word	0x40000800
 800370c:	40000c00 	.word	0x40000c00
 8003710:	40014000 	.word	0x40014000
 8003714:	40001800 	.word	0x40001800
 8003718:	00010007 	.word	0x00010007

0800371c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800371c:	b580      	push	{r7, lr}
 800371e:	b082      	sub	sp, #8
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
 8003724:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	2200      	movs	r2, #0
 800372c:	6839      	ldr	r1, [r7, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fdea 	bl	8004308 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4a36      	ldr	r2, [pc, #216]	; (8003814 <HAL_TIM_PWM_Stop+0xf8>)
 800373a:	4293      	cmp	r3, r2
 800373c:	d004      	beq.n	8003748 <HAL_TIM_PWM_Stop+0x2c>
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	4a35      	ldr	r2, [pc, #212]	; (8003818 <HAL_TIM_PWM_Stop+0xfc>)
 8003744:	4293      	cmp	r3, r2
 8003746:	d101      	bne.n	800374c <HAL_TIM_PWM_Stop+0x30>
 8003748:	2301      	movs	r3, #1
 800374a:	e000      	b.n	800374e <HAL_TIM_PWM_Stop+0x32>
 800374c:	2300      	movs	r3, #0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	6a1a      	ldr	r2, [r3, #32]
 8003758:	f241 1311 	movw	r3, #4369	; 0x1111
 800375c:	4013      	ands	r3, r2
 800375e:	2b00      	cmp	r3, #0
 8003760:	d10f      	bne.n	8003782 <HAL_TIM_PWM_Stop+0x66>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	6a1a      	ldr	r2, [r3, #32]
 8003768:	f240 4344 	movw	r3, #1092	; 0x444
 800376c:	4013      	ands	r3, r2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d107      	bne.n	8003782 <HAL_TIM_PWM_Stop+0x66>
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003780:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6a1a      	ldr	r2, [r3, #32]
 8003788:	f241 1311 	movw	r3, #4369	; 0x1111
 800378c:	4013      	ands	r3, r2
 800378e:	2b00      	cmp	r3, #0
 8003790:	d10f      	bne.n	80037b2 <HAL_TIM_PWM_Stop+0x96>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	6a1a      	ldr	r2, [r3, #32]
 8003798:	f240 4344 	movw	r3, #1092	; 0x444
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d107      	bne.n	80037b2 <HAL_TIM_PWM_Stop+0x96>
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0201 	bic.w	r2, r2, #1
 80037b0:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d104      	bne.n	80037c2 <HAL_TIM_PWM_Stop+0xa6>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2201      	movs	r2, #1
 80037bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037c0:	e023      	b.n	800380a <HAL_TIM_PWM_Stop+0xee>
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	2b04      	cmp	r3, #4
 80037c6:	d104      	bne.n	80037d2 <HAL_TIM_PWM_Stop+0xb6>
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037d0:	e01b      	b.n	800380a <HAL_TIM_PWM_Stop+0xee>
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	2b08      	cmp	r3, #8
 80037d6:	d104      	bne.n	80037e2 <HAL_TIM_PWM_Stop+0xc6>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037e0:	e013      	b.n	800380a <HAL_TIM_PWM_Stop+0xee>
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	2b0c      	cmp	r3, #12
 80037e6:	d104      	bne.n	80037f2 <HAL_TIM_PWM_Stop+0xd6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80037f0:	e00b      	b.n	800380a <HAL_TIM_PWM_Stop+0xee>
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	2b10      	cmp	r3, #16
 80037f6:	d104      	bne.n	8003802 <HAL_TIM_PWM_Stop+0xe6>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003800:	e003      	b.n	800380a <HAL_TIM_PWM_Stop+0xee>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2201      	movs	r2, #1
 8003806:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 800380a:	2300      	movs	r3, #0
}
 800380c:	4618      	mov	r0, r3
 800380e:	3708      	adds	r7, #8
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}
 8003814:	40010000 	.word	0x40010000
 8003818:	40010400 	.word	0x40010400

0800381c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b086      	sub	sp, #24
 8003820:	af00      	add	r7, sp, #0
 8003822:	60f8      	str	r0, [r7, #12]
 8003824:	60b9      	str	r1, [r7, #8]
 8003826:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003828:	2300      	movs	r3, #0
 800382a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003832:	2b01      	cmp	r3, #1
 8003834:	d101      	bne.n	800383a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003836:	2302      	movs	r3, #2
 8003838:	e0ff      	b.n	8003a3a <HAL_TIM_PWM_ConfigChannel+0x21e>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2201      	movs	r2, #1
 800383e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b14      	cmp	r3, #20
 8003846:	f200 80f0 	bhi.w	8003a2a <HAL_TIM_PWM_ConfigChannel+0x20e>
 800384a:	a201      	add	r2, pc, #4	; (adr r2, 8003850 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800384c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003850:	080038a5 	.word	0x080038a5
 8003854:	08003a2b 	.word	0x08003a2b
 8003858:	08003a2b 	.word	0x08003a2b
 800385c:	08003a2b 	.word	0x08003a2b
 8003860:	080038e5 	.word	0x080038e5
 8003864:	08003a2b 	.word	0x08003a2b
 8003868:	08003a2b 	.word	0x08003a2b
 800386c:	08003a2b 	.word	0x08003a2b
 8003870:	08003927 	.word	0x08003927
 8003874:	08003a2b 	.word	0x08003a2b
 8003878:	08003a2b 	.word	0x08003a2b
 800387c:	08003a2b 	.word	0x08003a2b
 8003880:	08003967 	.word	0x08003967
 8003884:	08003a2b 	.word	0x08003a2b
 8003888:	08003a2b 	.word	0x08003a2b
 800388c:	08003a2b 	.word	0x08003a2b
 8003890:	080039a9 	.word	0x080039a9
 8003894:	08003a2b 	.word	0x08003a2b
 8003898:	08003a2b 	.word	0x08003a2b
 800389c:	08003a2b 	.word	0x08003a2b
 80038a0:	080039e9 	.word	0x080039e9
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68b9      	ldr	r1, [r7, #8]
 80038aa:	4618      	mov	r0, r3
 80038ac:	f000 fa34 	bl	8003d18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	699a      	ldr	r2, [r3, #24]
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	f042 0208 	orr.w	r2, r2, #8
 80038be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	699a      	ldr	r2, [r3, #24]
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f022 0204 	bic.w	r2, r2, #4
 80038ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	6999      	ldr	r1, [r3, #24]
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	430a      	orrs	r2, r1
 80038e0:	619a      	str	r2, [r3, #24]
      break;
 80038e2:	e0a5      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68b9      	ldr	r1, [r7, #8]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f000 fa86 	bl	8003dfc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	699a      	ldr	r2, [r3, #24]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80038fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	699a      	ldr	r2, [r3, #24]
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800390e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	6999      	ldr	r1, [r3, #24]
 8003916:	68bb      	ldr	r3, [r7, #8]
 8003918:	691b      	ldr	r3, [r3, #16]
 800391a:	021a      	lsls	r2, r3, #8
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	619a      	str	r2, [r3, #24]
      break;
 8003924:	e084      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	4618      	mov	r0, r3
 800392e:	f000 fadd 	bl	8003eec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	69da      	ldr	r2, [r3, #28]
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f042 0208 	orr.w	r2, r2, #8
 8003940:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	69da      	ldr	r2, [r3, #28]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f022 0204 	bic.w	r2, r2, #4
 8003950:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	69d9      	ldr	r1, [r3, #28]
 8003958:	68bb      	ldr	r3, [r7, #8]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	430a      	orrs	r2, r1
 8003962:	61da      	str	r2, [r3, #28]
      break;
 8003964:	e064      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	68b9      	ldr	r1, [r7, #8]
 800396c:	4618      	mov	r0, r3
 800396e:	f000 fb33 	bl	8003fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	69da      	ldr	r2, [r3, #28]
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003980:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	69da      	ldr	r2, [r3, #28]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003990:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	69d9      	ldr	r1, [r3, #28]
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	691b      	ldr	r3, [r3, #16]
 800399c:	021a      	lsls	r2, r3, #8
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	430a      	orrs	r2, r1
 80039a4:	61da      	str	r2, [r3, #28]
      break;
 80039a6:	e043      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	68b9      	ldr	r1, [r7, #8]
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fb6a 	bl	8004088 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f042 0208 	orr.w	r2, r2, #8
 80039c2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f022 0204 	bic.w	r2, r2, #4
 80039d2:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	691a      	ldr	r2, [r3, #16]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80039e6:	e023      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68b9      	ldr	r1, [r7, #8]
 80039ee:	4618      	mov	r0, r3
 80039f0:	f000 fb9c 	bl	800412c <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003a02:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003a12:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	021a      	lsls	r2, r3, #8
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	430a      	orrs	r2, r1
 8003a26:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003a28:	e002      	b.n	8003a30 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	75fb      	strb	r3, [r7, #23]
      break;
 8003a2e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a38:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	3718      	adds	r7, #24
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop

08003a44 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b084      	sub	sp, #16
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a58:	2b01      	cmp	r3, #1
 8003a5a:	d101      	bne.n	8003a60 <HAL_TIM_ConfigClockSource+0x1c>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	e0b4      	b.n	8003bca <HAL_TIM_ConfigClockSource+0x186>
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003a78:	68ba      	ldr	r2, [r7, #8]
 8003a7a:	4b56      	ldr	r3, [pc, #344]	; (8003bd4 <HAL_TIM_ConfigClockSource+0x190>)
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003a86:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68ba      	ldr	r2, [r7, #8]
 8003a8e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a98:	d03e      	beq.n	8003b18 <HAL_TIM_ConfigClockSource+0xd4>
 8003a9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a9e:	f200 8087 	bhi.w	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003aa2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aa6:	f000 8086 	beq.w	8003bb6 <HAL_TIM_ConfigClockSource+0x172>
 8003aaa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003aae:	d87f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab0:	2b70      	cmp	r3, #112	; 0x70
 8003ab2:	d01a      	beq.n	8003aea <HAL_TIM_ConfigClockSource+0xa6>
 8003ab4:	2b70      	cmp	r3, #112	; 0x70
 8003ab6:	d87b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ab8:	2b60      	cmp	r3, #96	; 0x60
 8003aba:	d050      	beq.n	8003b5e <HAL_TIM_ConfigClockSource+0x11a>
 8003abc:	2b60      	cmp	r3, #96	; 0x60
 8003abe:	d877      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac0:	2b50      	cmp	r3, #80	; 0x50
 8003ac2:	d03c      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xfa>
 8003ac4:	2b50      	cmp	r3, #80	; 0x50
 8003ac6:	d873      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ac8:	2b40      	cmp	r3, #64	; 0x40
 8003aca:	d058      	beq.n	8003b7e <HAL_TIM_ConfigClockSource+0x13a>
 8003acc:	2b40      	cmp	r3, #64	; 0x40
 8003ace:	d86f      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad0:	2b30      	cmp	r3, #48	; 0x30
 8003ad2:	d064      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ad4:	2b30      	cmp	r3, #48	; 0x30
 8003ad6:	d86b      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ad8:	2b20      	cmp	r3, #32
 8003ada:	d060      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003adc:	2b20      	cmp	r3, #32
 8003ade:	d867      	bhi.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d05c      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae4:	2b10      	cmp	r3, #16
 8003ae6:	d05a      	beq.n	8003b9e <HAL_TIM_ConfigClockSource+0x15a>
 8003ae8:	e062      	b.n	8003bb0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6818      	ldr	r0, [r3, #0]
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	6899      	ldr	r1, [r3, #8]
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	685a      	ldr	r2, [r3, #4]
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	68db      	ldr	r3, [r3, #12]
 8003afa:	f000 fbe5 	bl	80042c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	689b      	ldr	r3, [r3, #8]
 8003b04:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003b0c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	609a      	str	r2, [r3, #8]
      break;
 8003b16:	e04f      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6818      	ldr	r0, [r3, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	6899      	ldr	r1, [r3, #8]
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	685a      	ldr	r2, [r3, #4]
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	f000 fbce 	bl	80042c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003b3a:	609a      	str	r2, [r3, #8]
      break;
 8003b3c:	e03c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6859      	ldr	r1, [r3, #4]
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	68db      	ldr	r3, [r3, #12]
 8003b4a:	461a      	mov	r2, r3
 8003b4c:	f000 fb42 	bl	80041d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	2150      	movs	r1, #80	; 0x50
 8003b56:	4618      	mov	r0, r3
 8003b58:	f000 fb9b 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003b5c:	e02c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6818      	ldr	r0, [r3, #0]
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	6859      	ldr	r1, [r3, #4]
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	68db      	ldr	r3, [r3, #12]
 8003b6a:	461a      	mov	r2, r3
 8003b6c:	f000 fb61 	bl	8004232 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2160      	movs	r1, #96	; 0x60
 8003b76:	4618      	mov	r0, r3
 8003b78:	f000 fb8b 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003b7c:	e01c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6818      	ldr	r0, [r3, #0]
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	6859      	ldr	r1, [r3, #4]
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	461a      	mov	r2, r3
 8003b8c:	f000 fb22 	bl	80041d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	2140      	movs	r1, #64	; 0x40
 8003b96:	4618      	mov	r0, r3
 8003b98:	f000 fb7b 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003b9c:	e00c      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681a      	ldr	r2, [r3, #0]
 8003ba2:	683b      	ldr	r3, [r7, #0]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4619      	mov	r1, r3
 8003ba8:	4610      	mov	r0, r2
 8003baa:	f000 fb72 	bl	8004292 <TIM_ITRx_SetConfig>
      break;
 8003bae:	e003      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003bb0:	2301      	movs	r3, #1
 8003bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8003bb4:	e000      	b.n	8003bb8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003bb6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3710      	adds	r7, #16
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	fffeff88 	.word	0xfffeff88

08003bd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	4a40      	ldr	r2, [pc, #256]	; (8003cec <TIM_Base_SetConfig+0x114>)
 8003bec:	4293      	cmp	r3, r2
 8003bee:	d013      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bf6:	d00f      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	4a3d      	ldr	r2, [pc, #244]	; (8003cf0 <TIM_Base_SetConfig+0x118>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d00b      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	4a3c      	ldr	r2, [pc, #240]	; (8003cf4 <TIM_Base_SetConfig+0x11c>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d007      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	4a3b      	ldr	r2, [pc, #236]	; (8003cf8 <TIM_Base_SetConfig+0x120>)
 8003c0c:	4293      	cmp	r3, r2
 8003c0e:	d003      	beq.n	8003c18 <TIM_Base_SetConfig+0x40>
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a3a      	ldr	r2, [pc, #232]	; (8003cfc <TIM_Base_SetConfig+0x124>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d108      	bne.n	8003c2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c20:	683b      	ldr	r3, [r7, #0]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	68fa      	ldr	r2, [r7, #12]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a2f      	ldr	r2, [pc, #188]	; (8003cec <TIM_Base_SetConfig+0x114>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d02b      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c38:	d027      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a2c      	ldr	r2, [pc, #176]	; (8003cf0 <TIM_Base_SetConfig+0x118>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d023      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a2b      	ldr	r2, [pc, #172]	; (8003cf4 <TIM_Base_SetConfig+0x11c>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d01f      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a2a      	ldr	r2, [pc, #168]	; (8003cf8 <TIM_Base_SetConfig+0x120>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d01b      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a29      	ldr	r2, [pc, #164]	; (8003cfc <TIM_Base_SetConfig+0x124>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d017      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	4a28      	ldr	r2, [pc, #160]	; (8003d00 <TIM_Base_SetConfig+0x128>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d013      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	4a27      	ldr	r2, [pc, #156]	; (8003d04 <TIM_Base_SetConfig+0x12c>)
 8003c66:	4293      	cmp	r3, r2
 8003c68:	d00f      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	4a26      	ldr	r2, [pc, #152]	; (8003d08 <TIM_Base_SetConfig+0x130>)
 8003c6e:	4293      	cmp	r3, r2
 8003c70:	d00b      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a25      	ldr	r2, [pc, #148]	; (8003d0c <TIM_Base_SetConfig+0x134>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d007      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4a24      	ldr	r2, [pc, #144]	; (8003d10 <TIM_Base_SetConfig+0x138>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d003      	beq.n	8003c8a <TIM_Base_SetConfig+0xb2>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a23      	ldr	r2, [pc, #140]	; (8003d14 <TIM_Base_SetConfig+0x13c>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d108      	bne.n	8003c9c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c90:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	68fa      	ldr	r2, [r7, #12]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	4313      	orrs	r3, r2
 8003ca8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	681a      	ldr	r2, [r3, #0]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	4a0a      	ldr	r2, [pc, #40]	; (8003cec <TIM_Base_SetConfig+0x114>)
 8003cc4:	4293      	cmp	r3, r2
 8003cc6:	d003      	beq.n	8003cd0 <TIM_Base_SetConfig+0xf8>
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <TIM_Base_SetConfig+0x124>)
 8003ccc:	4293      	cmp	r3, r2
 8003cce:	d103      	bne.n	8003cd8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cd0:	683b      	ldr	r3, [r7, #0]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2201      	movs	r2, #1
 8003cdc:	615a      	str	r2, [r3, #20]
}
 8003cde:	bf00      	nop
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
 8003cea:	bf00      	nop
 8003cec:	40010000 	.word	0x40010000
 8003cf0:	40000400 	.word	0x40000400
 8003cf4:	40000800 	.word	0x40000800
 8003cf8:	40000c00 	.word	0x40000c00
 8003cfc:	40010400 	.word	0x40010400
 8003d00:	40014000 	.word	0x40014000
 8003d04:	40014400 	.word	0x40014400
 8003d08:	40014800 	.word	0x40014800
 8003d0c:	40001800 	.word	0x40001800
 8003d10:	40001c00 	.word	0x40001c00
 8003d14:	40002000 	.word	0x40002000

08003d18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b087      	sub	sp, #28
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
 8003d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a1b      	ldr	r3, [r3, #32]
 8003d26:	f023 0201 	bic.w	r2, r3, #1
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	6a1b      	ldr	r3, [r3, #32]
 8003d32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4b2b      	ldr	r3, [pc, #172]	; (8003df0 <TIM_OC1_SetConfig+0xd8>)
 8003d44:	4013      	ands	r3, r2
 8003d46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	f023 0303 	bic.w	r3, r3, #3
 8003d4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68fa      	ldr	r2, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f023 0302 	bic.w	r3, r3, #2
 8003d60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	697a      	ldr	r2, [r7, #20]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a21      	ldr	r2, [pc, #132]	; (8003df4 <TIM_OC1_SetConfig+0xdc>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d003      	beq.n	8003d7c <TIM_OC1_SetConfig+0x64>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a20      	ldr	r2, [pc, #128]	; (8003df8 <TIM_OC1_SetConfig+0xe0>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d10c      	bne.n	8003d96 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	f023 0308 	bic.w	r3, r3, #8
 8003d82:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	697a      	ldr	r2, [r7, #20]
 8003d8a:	4313      	orrs	r3, r2
 8003d8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003d8e:	697b      	ldr	r3, [r7, #20]
 8003d90:	f023 0304 	bic.w	r3, r3, #4
 8003d94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	4a16      	ldr	r2, [pc, #88]	; (8003df4 <TIM_OC1_SetConfig+0xdc>)
 8003d9a:	4293      	cmp	r3, r2
 8003d9c:	d003      	beq.n	8003da6 <TIM_OC1_SetConfig+0x8e>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	4a15      	ldr	r2, [pc, #84]	; (8003df8 <TIM_OC1_SetConfig+0xe0>)
 8003da2:	4293      	cmp	r3, r2
 8003da4:	d111      	bne.n	8003dca <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003dac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dae:	693b      	ldr	r3, [r7, #16]
 8003db0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003db4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	699b      	ldr	r3, [r3, #24]
 8003dc4:	693a      	ldr	r2, [r7, #16]
 8003dc6:	4313      	orrs	r3, r2
 8003dc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	685a      	ldr	r2, [r3, #4]
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	697a      	ldr	r2, [r7, #20]
 8003de2:	621a      	str	r2, [r3, #32]
}
 8003de4:	bf00      	nop
 8003de6:	371c      	adds	r7, #28
 8003de8:	46bd      	mov	sp, r7
 8003dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dee:	4770      	bx	lr
 8003df0:	fffeff8f 	.word	0xfffeff8f
 8003df4:	40010000 	.word	0x40010000
 8003df8:	40010400 	.word	0x40010400

08003dfc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b087      	sub	sp, #28
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	6a1b      	ldr	r3, [r3, #32]
 8003e0a:	f023 0210 	bic.w	r2, r3, #16
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a1b      	ldr	r3, [r3, #32]
 8003e16:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	699b      	ldr	r3, [r3, #24]
 8003e22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	4b2e      	ldr	r3, [pc, #184]	; (8003ee0 <TIM_OC2_SetConfig+0xe4>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e34:	683b      	ldr	r3, [r7, #0]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	021b      	lsls	r3, r3, #8
 8003e3a:	68fa      	ldr	r2, [r7, #12]
 8003e3c:	4313      	orrs	r3, r2
 8003e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	f023 0320 	bic.w	r3, r3, #32
 8003e46:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689b      	ldr	r3, [r3, #8]
 8003e4c:	011b      	lsls	r3, r3, #4
 8003e4e:	697a      	ldr	r2, [r7, #20]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	4a23      	ldr	r2, [pc, #140]	; (8003ee4 <TIM_OC2_SetConfig+0xe8>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d003      	beq.n	8003e64 <TIM_OC2_SetConfig+0x68>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	4a22      	ldr	r2, [pc, #136]	; (8003ee8 <TIM_OC2_SetConfig+0xec>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d10d      	bne.n	8003e80 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e64:	697b      	ldr	r3, [r7, #20]
 8003e66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e6a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	68db      	ldr	r3, [r3, #12]
 8003e70:	011b      	lsls	r3, r3, #4
 8003e72:	697a      	ldr	r2, [r7, #20]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e7e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	4a18      	ldr	r2, [pc, #96]	; (8003ee4 <TIM_OC2_SetConfig+0xe8>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d003      	beq.n	8003e90 <TIM_OC2_SetConfig+0x94>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a17      	ldr	r2, [pc, #92]	; (8003ee8 <TIM_OC2_SetConfig+0xec>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d113      	bne.n	8003eb8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003e96:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	695b      	ldr	r3, [r3, #20]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	699b      	ldr	r3, [r3, #24]
 8003eb0:	009b      	lsls	r3, r3, #2
 8003eb2:	693a      	ldr	r2, [r7, #16]
 8003eb4:	4313      	orrs	r3, r2
 8003eb6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	693a      	ldr	r2, [r7, #16]
 8003ebc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	685a      	ldr	r2, [r3, #4]
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	621a      	str	r2, [r3, #32]
}
 8003ed2:	bf00      	nop
 8003ed4:	371c      	adds	r7, #28
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003edc:	4770      	bx	lr
 8003ede:	bf00      	nop
 8003ee0:	feff8fff 	.word	0xfeff8fff
 8003ee4:	40010000 	.word	0x40010000
 8003ee8:	40010400 	.word	0x40010400

08003eec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
 8003ef4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	6a1b      	ldr	r3, [r3, #32]
 8003efa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	685b      	ldr	r3, [r3, #4]
 8003f0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	69db      	ldr	r3, [r3, #28]
 8003f12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4b2d      	ldr	r3, [pc, #180]	; (8003fcc <TIM_OC3_SetConfig+0xe0>)
 8003f18:	4013      	ands	r3, r2
 8003f1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f023 0303 	bic.w	r3, r3, #3
 8003f22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f24:	683b      	ldr	r3, [r7, #0]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	68fa      	ldr	r2, [r7, #12]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f2e:	697b      	ldr	r3, [r7, #20]
 8003f30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003f34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	689b      	ldr	r3, [r3, #8]
 8003f3a:	021b      	lsls	r3, r3, #8
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	4313      	orrs	r3, r2
 8003f40:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	4a22      	ldr	r2, [pc, #136]	; (8003fd0 <TIM_OC3_SetConfig+0xe4>)
 8003f46:	4293      	cmp	r3, r2
 8003f48:	d003      	beq.n	8003f52 <TIM_OC3_SetConfig+0x66>
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	4a21      	ldr	r2, [pc, #132]	; (8003fd4 <TIM_OC3_SetConfig+0xe8>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d10d      	bne.n	8003f6e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f52:	697b      	ldr	r3, [r7, #20]
 8003f54:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003f58:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f5a:	683b      	ldr	r3, [r7, #0]
 8003f5c:	68db      	ldr	r3, [r3, #12]
 8003f5e:	021b      	lsls	r3, r3, #8
 8003f60:	697a      	ldr	r2, [r7, #20]
 8003f62:	4313      	orrs	r3, r2
 8003f64:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003f6c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a17      	ldr	r2, [pc, #92]	; (8003fd0 <TIM_OC3_SetConfig+0xe4>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d003      	beq.n	8003f7e <TIM_OC3_SetConfig+0x92>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a16      	ldr	r2, [pc, #88]	; (8003fd4 <TIM_OC3_SetConfig+0xe8>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d113      	bne.n	8003fa6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003f84:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f86:	693b      	ldr	r3, [r7, #16]
 8003f88:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003f8c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	011b      	lsls	r3, r3, #4
 8003f94:	693a      	ldr	r2, [r7, #16]
 8003f96:	4313      	orrs	r3, r2
 8003f98:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	699b      	ldr	r3, [r3, #24]
 8003f9e:	011b      	lsls	r3, r3, #4
 8003fa0:	693a      	ldr	r2, [r7, #16]
 8003fa2:	4313      	orrs	r3, r2
 8003fa4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	693a      	ldr	r2, [r7, #16]
 8003faa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68fa      	ldr	r2, [r7, #12]
 8003fb0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685a      	ldr	r2, [r3, #4]
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	697a      	ldr	r2, [r7, #20]
 8003fbe:	621a      	str	r2, [r3, #32]
}
 8003fc0:	bf00      	nop
 8003fc2:	371c      	adds	r7, #28
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr
 8003fcc:	fffeff8f 	.word	0xfffeff8f
 8003fd0:	40010000 	.word	0x40010000
 8003fd4:	40010400 	.word	0x40010400

08003fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fd8:	b480      	push	{r7}
 8003fda:	b087      	sub	sp, #28
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
 8003fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	6a1b      	ldr	r3, [r3, #32]
 8003fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	6a1b      	ldr	r3, [r3, #32]
 8003ff2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	69db      	ldr	r3, [r3, #28]
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	4b1e      	ldr	r3, [pc, #120]	; (800407c <TIM_OC4_SetConfig+0xa4>)
 8004004:	4013      	ands	r3, r2
 8004006:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800400e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	021b      	lsls	r3, r3, #8
 8004016:	68fa      	ldr	r2, [r7, #12]
 8004018:	4313      	orrs	r3, r2
 800401a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800401c:	693b      	ldr	r3, [r7, #16]
 800401e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004022:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004024:	683b      	ldr	r3, [r7, #0]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	031b      	lsls	r3, r3, #12
 800402a:	693a      	ldr	r2, [r7, #16]
 800402c:	4313      	orrs	r3, r2
 800402e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a13      	ldr	r2, [pc, #76]	; (8004080 <TIM_OC4_SetConfig+0xa8>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_OC4_SetConfig+0x68>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a12      	ldr	r2, [pc, #72]	; (8004084 <TIM_OC4_SetConfig+0xac>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d109      	bne.n	8004054 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004040:	697b      	ldr	r3, [r7, #20]
 8004042:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004046:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	695b      	ldr	r3, [r3, #20]
 800404c:	019b      	lsls	r3, r3, #6
 800404e:	697a      	ldr	r2, [r7, #20]
 8004050:	4313      	orrs	r3, r2
 8004052:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	697a      	ldr	r2, [r7, #20]
 8004058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	68fa      	ldr	r2, [r7, #12]
 800405e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	685a      	ldr	r2, [r3, #4]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	693a      	ldr	r2, [r7, #16]
 800406c:	621a      	str	r2, [r3, #32]
}
 800406e:	bf00      	nop
 8004070:	371c      	adds	r7, #28
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	feff8fff 	.word	0xfeff8fff
 8004080:	40010000 	.word	0x40010000
 8004084:	40010400 	.word	0x40010400

08004088 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
 8004090:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a1b      	ldr	r3, [r3, #32]
 8004096:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	685b      	ldr	r3, [r3, #4]
 80040a8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80040b0:	68fa      	ldr	r2, [r7, #12]
 80040b2:	4b1b      	ldr	r3, [pc, #108]	; (8004120 <TIM_OC5_SetConfig+0x98>)
 80040b4:	4013      	ands	r3, r2
 80040b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	68fa      	ldr	r2, [r7, #12]
 80040be:	4313      	orrs	r3, r2
 80040c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80040c2:	693b      	ldr	r3, [r7, #16]
 80040c4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80040c8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	041b      	lsls	r3, r3, #16
 80040d0:	693a      	ldr	r2, [r7, #16]
 80040d2:	4313      	orrs	r3, r2
 80040d4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a12      	ldr	r2, [pc, #72]	; (8004124 <TIM_OC5_SetConfig+0x9c>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d003      	beq.n	80040e6 <TIM_OC5_SetConfig+0x5e>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a11      	ldr	r2, [pc, #68]	; (8004128 <TIM_OC5_SetConfig+0xa0>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d109      	bne.n	80040fa <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040ec:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	695b      	ldr	r3, [r3, #20]
 80040f2:	021b      	lsls	r3, r3, #8
 80040f4:	697a      	ldr	r2, [r7, #20]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	697a      	ldr	r2, [r7, #20]
 80040fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	68fa      	ldr	r2, [r7, #12]
 8004104:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	685a      	ldr	r2, [r3, #4]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	693a      	ldr	r2, [r7, #16]
 8004112:	621a      	str	r2, [r3, #32]
}
 8004114:	bf00      	nop
 8004116:	371c      	adds	r7, #28
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr
 8004120:	fffeff8f 	.word	0xfffeff8f
 8004124:	40010000 	.word	0x40010000
 8004128:	40010400 	.word	0x40010400

0800412c <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800412c:	b480      	push	{r7}
 800412e:	b087      	sub	sp, #28
 8004130:	af00      	add	r7, sp, #0
 8004132:	6078      	str	r0, [r7, #4]
 8004134:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6a1b      	ldr	r3, [r3, #32]
 800413a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6a1b      	ldr	r3, [r3, #32]
 8004146:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	685b      	ldr	r3, [r3, #4]
 800414c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004152:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004154:	68fa      	ldr	r2, [r7, #12]
 8004156:	4b1c      	ldr	r3, [pc, #112]	; (80041c8 <TIM_OC6_SetConfig+0x9c>)
 8004158:	4013      	ands	r3, r2
 800415a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	021b      	lsls	r3, r3, #8
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	4313      	orrs	r3, r2
 8004166:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800416e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	051b      	lsls	r3, r3, #20
 8004176:	693a      	ldr	r2, [r7, #16]
 8004178:	4313      	orrs	r3, r2
 800417a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	4a13      	ldr	r2, [pc, #76]	; (80041cc <TIM_OC6_SetConfig+0xa0>)
 8004180:	4293      	cmp	r3, r2
 8004182:	d003      	beq.n	800418c <TIM_OC6_SetConfig+0x60>
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	4a12      	ldr	r2, [pc, #72]	; (80041d0 <TIM_OC6_SetConfig+0xa4>)
 8004188:	4293      	cmp	r3, r2
 800418a:	d109      	bne.n	80041a0 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004192:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	029b      	lsls	r3, r3, #10
 800419a:	697a      	ldr	r2, [r7, #20]
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	68fa      	ldr	r2, [r7, #12]
 80041aa:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	685a      	ldr	r2, [r3, #4]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	693a      	ldr	r2, [r7, #16]
 80041b8:	621a      	str	r2, [r3, #32]
}
 80041ba:	bf00      	nop
 80041bc:	371c      	adds	r7, #28
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	feff8fff 	.word	0xfeff8fff
 80041cc:	40010000 	.word	0x40010000
 80041d0:	40010400 	.word	0x40010400

080041d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b087      	sub	sp, #28
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
 80041e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	6a1b      	ldr	r3, [r3, #32]
 80041ea:	f023 0201 	bic.w	r2, r3, #1
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	699b      	ldr	r3, [r3, #24]
 80041f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80041fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	011b      	lsls	r3, r3, #4
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	f023 030a 	bic.w	r3, r3, #10
 8004210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004212:	697a      	ldr	r2, [r7, #20]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	693a      	ldr	r2, [r7, #16]
 800421e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	697a      	ldr	r2, [r7, #20]
 8004224:	621a      	str	r2, [r3, #32]
}
 8004226:	bf00      	nop
 8004228:	371c      	adds	r7, #28
 800422a:	46bd      	mov	sp, r7
 800422c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004230:	4770      	bx	lr

08004232 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004232:	b480      	push	{r7}
 8004234:	b087      	sub	sp, #28
 8004236:	af00      	add	r7, sp, #0
 8004238:	60f8      	str	r0, [r7, #12]
 800423a:	60b9      	str	r1, [r7, #8]
 800423c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	6a1b      	ldr	r3, [r3, #32]
 8004242:	f023 0210 	bic.w	r2, r3, #16
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	699b      	ldr	r3, [r3, #24]
 800424e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a1b      	ldr	r3, [r3, #32]
 8004254:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800425c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	031b      	lsls	r3, r3, #12
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	4313      	orrs	r3, r2
 8004266:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800426e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	011b      	lsls	r3, r3, #4
 8004274:	693a      	ldr	r2, [r7, #16]
 8004276:	4313      	orrs	r3, r2
 8004278:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	621a      	str	r2, [r3, #32]
}
 8004286:	bf00      	nop
 8004288:	371c      	adds	r7, #28
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr

08004292 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004292:	b480      	push	{r7}
 8004294:	b085      	sub	sp, #20
 8004296:	af00      	add	r7, sp, #0
 8004298:	6078      	str	r0, [r7, #4]
 800429a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	f043 0307 	orr.w	r3, r3, #7
 80042b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	609a      	str	r2, [r3, #8]
}
 80042bc:	bf00      	nop
 80042be:	3714      	adds	r7, #20
 80042c0:	46bd      	mov	sp, r7
 80042c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c6:	4770      	bx	lr

080042c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b087      	sub	sp, #28
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	60f8      	str	r0, [r7, #12]
 80042d0:	60b9      	str	r1, [r7, #8]
 80042d2:	607a      	str	r2, [r7, #4]
 80042d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80042e4:	683b      	ldr	r3, [r7, #0]
 80042e6:	021a      	lsls	r2, r3, #8
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	431a      	orrs	r2, r3
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	697a      	ldr	r2, [r7, #20]
 80042fa:	609a      	str	r2, [r3, #8]
}
 80042fc:	bf00      	nop
 80042fe:	371c      	adds	r7, #28
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	60f8      	str	r0, [r7, #12]
 8004310:	60b9      	str	r1, [r7, #8]
 8004312:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	f003 031f 	and.w	r3, r3, #31
 800431a:	2201      	movs	r2, #1
 800431c:	fa02 f303 	lsl.w	r3, r2, r3
 8004320:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	6a1a      	ldr	r2, [r3, #32]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	43db      	mvns	r3, r3
 800432a:	401a      	ands	r2, r3
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	6a1a      	ldr	r2, [r3, #32]
 8004334:	68bb      	ldr	r3, [r7, #8]
 8004336:	f003 031f 	and.w	r3, r3, #31
 800433a:	6879      	ldr	r1, [r7, #4]
 800433c:	fa01 f303 	lsl.w	r3, r1, r3
 8004340:	431a      	orrs	r2, r3
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	621a      	str	r2, [r3, #32]
}
 8004346:	bf00      	nop
 8004348:	371c      	adds	r7, #28
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr
	...

08004354 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004354:	b480      	push	{r7}
 8004356:	b085      	sub	sp, #20
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004364:	2b01      	cmp	r3, #1
 8004366:	d101      	bne.n	800436c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004368:	2302      	movs	r3, #2
 800436a:	e06d      	b.n	8004448 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2202      	movs	r2, #2
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685b      	ldr	r3, [r3, #4]
 8004382:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	4a30      	ldr	r2, [pc, #192]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d004      	beq.n	80043a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d108      	bne.n	80043b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80043a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	68fa      	ldr	r2, [r7, #12]
 80043c0:	4313      	orrs	r3, r2
 80043c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	4a20      	ldr	r2, [pc, #128]	; (8004454 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d022      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043de:	d01d      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a1d      	ldr	r2, [pc, #116]	; (800445c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d018      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	4a1c      	ldr	r2, [pc, #112]	; (8004460 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043f0:	4293      	cmp	r3, r2
 80043f2:	d013      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	4a1a      	ldr	r2, [pc, #104]	; (8004464 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d00e      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4a15      	ldr	r2, [pc, #84]	; (8004458 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004404:	4293      	cmp	r3, r2
 8004406:	d009      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a16      	ldr	r2, [pc, #88]	; (8004468 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d004      	beq.n	800441c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a15      	ldr	r2, [pc, #84]	; (800446c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d10c      	bne.n	8004436 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004422:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	4313      	orrs	r3, r2
 800442c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	68ba      	ldr	r2, [r7, #8]
 8004434:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2201      	movs	r2, #1
 800443a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3714      	adds	r7, #20
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	40010000 	.word	0x40010000
 8004458:	40010400 	.word	0x40010400
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40014000 	.word	0x40014000
 800446c:	40001800 	.word	0x40001800

08004470 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2b00      	cmp	r3, #0
 800447c:	d101      	bne.n	8004482 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800447e:	2301      	movs	r3, #1
 8004480:	e040      	b.n	8004504 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004486:	2b00      	cmp	r3, #0
 8004488:	d106      	bne.n	8004498 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7fc fd5a 	bl	8000f4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2224      	movs	r2, #36	; 0x24
 800449c:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	681a      	ldr	r2, [r3, #0]
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	f022 0201 	bic.w	r2, r2, #1
 80044ac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 f974 	bl	800479c <UART_SetConfig>
 80044b4:	4603      	mov	r3, r0
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80044ba:	2301      	movs	r3, #1
 80044bc:	e022      	b.n	8004504 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d002      	beq.n	80044cc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f000 fbcc 	bl	8004c64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	685a      	ldr	r2, [r3, #4]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689a      	ldr	r2, [r3, #8]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044fc:	6878      	ldr	r0, [r7, #4]
 80044fe:	f000 fc53 	bl	8004da8 <UART_CheckIdleState>
 8004502:	4603      	mov	r3, r0
}
 8004504:	4618      	mov	r0, r3
 8004506:	3708      	adds	r7, #8
 8004508:	46bd      	mov	sp, r7
 800450a:	bd80      	pop	{r7, pc}

0800450c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b08a      	sub	sp, #40	; 0x28
 8004510:	af02      	add	r7, sp, #8
 8004512:	60f8      	str	r0, [r7, #12]
 8004514:	60b9      	str	r1, [r7, #8]
 8004516:	603b      	str	r3, [r7, #0]
 8004518:	4613      	mov	r3, r2
 800451a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004520:	2b20      	cmp	r3, #32
 8004522:	d171      	bne.n	8004608 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d002      	beq.n	8004530 <HAL_UART_Transmit+0x24>
 800452a:	88fb      	ldrh	r3, [r7, #6]
 800452c:	2b00      	cmp	r3, #0
 800452e:	d101      	bne.n	8004534 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	e06a      	b.n	800460a <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	2200      	movs	r2, #0
 8004538:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	2221      	movs	r2, #33	; 0x21
 8004540:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004542:	f7fc fe93 	bl	800126c <HAL_GetTick>
 8004546:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	88fa      	ldrh	r2, [r7, #6]
 800454c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	88fa      	ldrh	r2, [r7, #6]
 8004554:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004560:	d108      	bne.n	8004574 <HAL_UART_Transmit+0x68>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	691b      	ldr	r3, [r3, #16]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d104      	bne.n	8004574 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800456e:	68bb      	ldr	r3, [r7, #8]
 8004570:	61bb      	str	r3, [r7, #24]
 8004572:	e003      	b.n	800457c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004578:	2300      	movs	r3, #0
 800457a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800457c:	e02c      	b.n	80045d8 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800457e:	683b      	ldr	r3, [r7, #0]
 8004580:	9300      	str	r3, [sp, #0]
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	2200      	movs	r2, #0
 8004586:	2180      	movs	r1, #128	; 0x80
 8004588:	68f8      	ldr	r0, [r7, #12]
 800458a:	f000 fc5a 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 800458e:	4603      	mov	r3, r0
 8004590:	2b00      	cmp	r3, #0
 8004592:	d001      	beq.n	8004598 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8004594:	2303      	movs	r3, #3
 8004596:	e038      	b.n	800460a <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d10b      	bne.n	80045b6 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800459e:	69bb      	ldr	r3, [r7, #24]
 80045a0:	881b      	ldrh	r3, [r3, #0]
 80045a2:	461a      	mov	r2, r3
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80045ac:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80045ae:	69bb      	ldr	r3, [r7, #24]
 80045b0:	3302      	adds	r3, #2
 80045b2:	61bb      	str	r3, [r7, #24]
 80045b4:	e007      	b.n	80045c6 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80045b6:	69fb      	ldr	r3, [r7, #28]
 80045b8:	781a      	ldrb	r2, [r3, #0]
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80045c0:	69fb      	ldr	r3, [r7, #28]
 80045c2:	3301      	adds	r3, #1
 80045c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	3b01      	subs	r3, #1
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80045de:	b29b      	uxth	r3, r3
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d1cc      	bne.n	800457e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	9300      	str	r3, [sp, #0]
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	2200      	movs	r2, #0
 80045ec:	2140      	movs	r1, #64	; 0x40
 80045ee:	68f8      	ldr	r0, [r7, #12]
 80045f0:	f000 fc27 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 80045f4:	4603      	mov	r3, r0
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d001      	beq.n	80045fe <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80045fa:	2303      	movs	r3, #3
 80045fc:	e005      	b.n	800460a <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004604:	2300      	movs	r3, #0
 8004606:	e000      	b.n	800460a <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004608:	2302      	movs	r3, #2
  }
}
 800460a:	4618      	mov	r0, r3
 800460c:	3720      	adds	r7, #32
 800460e:	46bd      	mov	sp, r7
 8004610:	bd80      	pop	{r7, pc}

08004612 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004612:	b580      	push	{r7, lr}
 8004614:	b08a      	sub	sp, #40	; 0x28
 8004616:	af02      	add	r7, sp, #8
 8004618:	60f8      	str	r0, [r7, #12]
 800461a:	60b9      	str	r1, [r7, #8]
 800461c:	603b      	str	r3, [r7, #0]
 800461e:	4613      	mov	r3, r2
 8004620:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004628:	2b20      	cmp	r3, #32
 800462a:	f040 80b1 	bne.w	8004790 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d002      	beq.n	800463a <HAL_UART_Receive+0x28>
 8004634:	88fb      	ldrh	r3, [r7, #6]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d101      	bne.n	800463e <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e0a9      	b.n	8004792 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	2200      	movs	r2, #0
 8004642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2222      	movs	r2, #34	; 0x22
 800464a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	2200      	movs	r2, #0
 8004652:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004654:	f7fc fe0a 	bl	800126c <HAL_GetTick>
 8004658:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	88fa      	ldrh	r2, [r7, #6]
 800465e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	88fa      	ldrh	r2, [r7, #6]
 8004666:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004672:	d10e      	bne.n	8004692 <HAL_UART_Receive+0x80>
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	691b      	ldr	r3, [r3, #16]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d105      	bne.n	8004688 <HAL_UART_Receive+0x76>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8004682:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004686:	e02d      	b.n	80046e4 <HAL_UART_Receive+0xd2>
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	22ff      	movs	r2, #255	; 0xff
 800468c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004690:	e028      	b.n	80046e4 <HAL_UART_Receive+0xd2>
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	689b      	ldr	r3, [r3, #8]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d10d      	bne.n	80046b6 <HAL_UART_Receive+0xa4>
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	691b      	ldr	r3, [r3, #16]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d104      	bne.n	80046ac <HAL_UART_Receive+0x9a>
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	22ff      	movs	r2, #255	; 0xff
 80046a6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046aa:	e01b      	b.n	80046e4 <HAL_UART_Receive+0xd2>
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	227f      	movs	r2, #127	; 0x7f
 80046b0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046b4:	e016      	b.n	80046e4 <HAL_UART_Receive+0xd2>
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	689b      	ldr	r3, [r3, #8]
 80046ba:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80046be:	d10d      	bne.n	80046dc <HAL_UART_Receive+0xca>
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d104      	bne.n	80046d2 <HAL_UART_Receive+0xc0>
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	227f      	movs	r2, #127	; 0x7f
 80046cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046d0:	e008      	b.n	80046e4 <HAL_UART_Receive+0xd2>
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	223f      	movs	r2, #63	; 0x3f
 80046d6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80046da:	e003      	b.n	80046e4 <HAL_UART_Receive+0xd2>
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	2200      	movs	r2, #0
 80046e0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046ea:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	689b      	ldr	r3, [r3, #8]
 80046f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046f4:	d108      	bne.n	8004708 <HAL_UART_Receive+0xf6>
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	691b      	ldr	r3, [r3, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d104      	bne.n	8004708 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 80046fe:	2300      	movs	r3, #0
 8004700:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	61bb      	str	r3, [r7, #24]
 8004706:	e003      	b.n	8004710 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800470c:	2300      	movs	r3, #0
 800470e:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8004710:	e032      	b.n	8004778 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	9300      	str	r3, [sp, #0]
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2200      	movs	r2, #0
 800471a:	2120      	movs	r1, #32
 800471c:	68f8      	ldr	r0, [r7, #12]
 800471e:	f000 fb90 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 8004722:	4603      	mov	r3, r0
 8004724:	2b00      	cmp	r3, #0
 8004726:	d001      	beq.n	800472c <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8004728:	2303      	movs	r3, #3
 800472a:	e032      	b.n	8004792 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800472c:	69fb      	ldr	r3, [r7, #28]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d10c      	bne.n	800474c <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004738:	b29a      	uxth	r2, r3
 800473a:	8a7b      	ldrh	r3, [r7, #18]
 800473c:	4013      	ands	r3, r2
 800473e:	b29a      	uxth	r2, r3
 8004740:	69bb      	ldr	r3, [r7, #24]
 8004742:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004744:	69bb      	ldr	r3, [r7, #24]
 8004746:	3302      	adds	r3, #2
 8004748:	61bb      	str	r3, [r7, #24]
 800474a:	e00c      	b.n	8004766 <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004752:	b2da      	uxtb	r2, r3
 8004754:	8a7b      	ldrh	r3, [r7, #18]
 8004756:	b2db      	uxtb	r3, r3
 8004758:	4013      	ands	r3, r2
 800475a:	b2da      	uxtb	r2, r3
 800475c:	69fb      	ldr	r3, [r7, #28]
 800475e:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8004760:	69fb      	ldr	r3, [r7, #28]
 8004762:	3301      	adds	r3, #1
 8004764:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800476c:	b29b      	uxth	r3, r3
 800476e:	3b01      	subs	r3, #1
 8004770:	b29a      	uxth	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800477e:	b29b      	uxth	r3, r3
 8004780:	2b00      	cmp	r3, #0
 8004782:	d1c6      	bne.n	8004712 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2220      	movs	r2, #32
 8004788:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800478c:	2300      	movs	r3, #0
 800478e:	e000      	b.n	8004792 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004790:	2302      	movs	r3, #2
  }
}
 8004792:	4618      	mov	r0, r3
 8004794:	3720      	adds	r7, #32
 8004796:	46bd      	mov	sp, r7
 8004798:	bd80      	pop	{r7, pc}
	...

0800479c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800479c:	b580      	push	{r7, lr}
 800479e:	b088      	sub	sp, #32
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80047a4:	2300      	movs	r3, #0
 80047a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	689a      	ldr	r2, [r3, #8]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	431a      	orrs	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	431a      	orrs	r2, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	69db      	ldr	r3, [r3, #28]
 80047bc:	4313      	orrs	r3, r2
 80047be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	681a      	ldr	r2, [r3, #0]
 80047c6:	4ba6      	ldr	r3, [pc, #664]	; (8004a60 <UART_SetConfig+0x2c4>)
 80047c8:	4013      	ands	r3, r2
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	6812      	ldr	r2, [r2, #0]
 80047ce:	6979      	ldr	r1, [r7, #20]
 80047d0:	430b      	orrs	r3, r1
 80047d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	685b      	ldr	r3, [r3, #4]
 80047da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	68da      	ldr	r2, [r3, #12]
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	430a      	orrs	r2, r1
 80047e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	697a      	ldr	r2, [r7, #20]
 80047f6:	4313      	orrs	r3, r2
 80047f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	689b      	ldr	r3, [r3, #8]
 8004800:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	430a      	orrs	r2, r1
 800480c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	4a94      	ldr	r2, [pc, #592]	; (8004a64 <UART_SetConfig+0x2c8>)
 8004814:	4293      	cmp	r3, r2
 8004816:	d120      	bne.n	800485a <UART_SetConfig+0xbe>
 8004818:	4b93      	ldr	r3, [pc, #588]	; (8004a68 <UART_SetConfig+0x2cc>)
 800481a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481e:	f003 0303 	and.w	r3, r3, #3
 8004822:	2b03      	cmp	r3, #3
 8004824:	d816      	bhi.n	8004854 <UART_SetConfig+0xb8>
 8004826:	a201      	add	r2, pc, #4	; (adr r2, 800482c <UART_SetConfig+0x90>)
 8004828:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800482c:	0800483d 	.word	0x0800483d
 8004830:	08004849 	.word	0x08004849
 8004834:	08004843 	.word	0x08004843
 8004838:	0800484f 	.word	0x0800484f
 800483c:	2301      	movs	r3, #1
 800483e:	77fb      	strb	r3, [r7, #31]
 8004840:	e150      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004842:	2302      	movs	r3, #2
 8004844:	77fb      	strb	r3, [r7, #31]
 8004846:	e14d      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004848:	2304      	movs	r3, #4
 800484a:	77fb      	strb	r3, [r7, #31]
 800484c:	e14a      	b.n	8004ae4 <UART_SetConfig+0x348>
 800484e:	2308      	movs	r3, #8
 8004850:	77fb      	strb	r3, [r7, #31]
 8004852:	e147      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004854:	2310      	movs	r3, #16
 8004856:	77fb      	strb	r3, [r7, #31]
 8004858:	e144      	b.n	8004ae4 <UART_SetConfig+0x348>
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	4a83      	ldr	r2, [pc, #524]	; (8004a6c <UART_SetConfig+0x2d0>)
 8004860:	4293      	cmp	r3, r2
 8004862:	d132      	bne.n	80048ca <UART_SetConfig+0x12e>
 8004864:	4b80      	ldr	r3, [pc, #512]	; (8004a68 <UART_SetConfig+0x2cc>)
 8004866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800486a:	f003 030c 	and.w	r3, r3, #12
 800486e:	2b0c      	cmp	r3, #12
 8004870:	d828      	bhi.n	80048c4 <UART_SetConfig+0x128>
 8004872:	a201      	add	r2, pc, #4	; (adr r2, 8004878 <UART_SetConfig+0xdc>)
 8004874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004878:	080048ad 	.word	0x080048ad
 800487c:	080048c5 	.word	0x080048c5
 8004880:	080048c5 	.word	0x080048c5
 8004884:	080048c5 	.word	0x080048c5
 8004888:	080048b9 	.word	0x080048b9
 800488c:	080048c5 	.word	0x080048c5
 8004890:	080048c5 	.word	0x080048c5
 8004894:	080048c5 	.word	0x080048c5
 8004898:	080048b3 	.word	0x080048b3
 800489c:	080048c5 	.word	0x080048c5
 80048a0:	080048c5 	.word	0x080048c5
 80048a4:	080048c5 	.word	0x080048c5
 80048a8:	080048bf 	.word	0x080048bf
 80048ac:	2300      	movs	r3, #0
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e118      	b.n	8004ae4 <UART_SetConfig+0x348>
 80048b2:	2302      	movs	r3, #2
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e115      	b.n	8004ae4 <UART_SetConfig+0x348>
 80048b8:	2304      	movs	r3, #4
 80048ba:	77fb      	strb	r3, [r7, #31]
 80048bc:	e112      	b.n	8004ae4 <UART_SetConfig+0x348>
 80048be:	2308      	movs	r3, #8
 80048c0:	77fb      	strb	r3, [r7, #31]
 80048c2:	e10f      	b.n	8004ae4 <UART_SetConfig+0x348>
 80048c4:	2310      	movs	r3, #16
 80048c6:	77fb      	strb	r3, [r7, #31]
 80048c8:	e10c      	b.n	8004ae4 <UART_SetConfig+0x348>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	4a68      	ldr	r2, [pc, #416]	; (8004a70 <UART_SetConfig+0x2d4>)
 80048d0:	4293      	cmp	r3, r2
 80048d2:	d120      	bne.n	8004916 <UART_SetConfig+0x17a>
 80048d4:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <UART_SetConfig+0x2cc>)
 80048d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80048de:	2b30      	cmp	r3, #48	; 0x30
 80048e0:	d013      	beq.n	800490a <UART_SetConfig+0x16e>
 80048e2:	2b30      	cmp	r3, #48	; 0x30
 80048e4:	d814      	bhi.n	8004910 <UART_SetConfig+0x174>
 80048e6:	2b20      	cmp	r3, #32
 80048e8:	d009      	beq.n	80048fe <UART_SetConfig+0x162>
 80048ea:	2b20      	cmp	r3, #32
 80048ec:	d810      	bhi.n	8004910 <UART_SetConfig+0x174>
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d002      	beq.n	80048f8 <UART_SetConfig+0x15c>
 80048f2:	2b10      	cmp	r3, #16
 80048f4:	d006      	beq.n	8004904 <UART_SetConfig+0x168>
 80048f6:	e00b      	b.n	8004910 <UART_SetConfig+0x174>
 80048f8:	2300      	movs	r3, #0
 80048fa:	77fb      	strb	r3, [r7, #31]
 80048fc:	e0f2      	b.n	8004ae4 <UART_SetConfig+0x348>
 80048fe:	2302      	movs	r3, #2
 8004900:	77fb      	strb	r3, [r7, #31]
 8004902:	e0ef      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004904:	2304      	movs	r3, #4
 8004906:	77fb      	strb	r3, [r7, #31]
 8004908:	e0ec      	b.n	8004ae4 <UART_SetConfig+0x348>
 800490a:	2308      	movs	r3, #8
 800490c:	77fb      	strb	r3, [r7, #31]
 800490e:	e0e9      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004910:	2310      	movs	r3, #16
 8004912:	77fb      	strb	r3, [r7, #31]
 8004914:	e0e6      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	4a56      	ldr	r2, [pc, #344]	; (8004a74 <UART_SetConfig+0x2d8>)
 800491c:	4293      	cmp	r3, r2
 800491e:	d120      	bne.n	8004962 <UART_SetConfig+0x1c6>
 8004920:	4b51      	ldr	r3, [pc, #324]	; (8004a68 <UART_SetConfig+0x2cc>)
 8004922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004926:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800492a:	2bc0      	cmp	r3, #192	; 0xc0
 800492c:	d013      	beq.n	8004956 <UART_SetConfig+0x1ba>
 800492e:	2bc0      	cmp	r3, #192	; 0xc0
 8004930:	d814      	bhi.n	800495c <UART_SetConfig+0x1c0>
 8004932:	2b80      	cmp	r3, #128	; 0x80
 8004934:	d009      	beq.n	800494a <UART_SetConfig+0x1ae>
 8004936:	2b80      	cmp	r3, #128	; 0x80
 8004938:	d810      	bhi.n	800495c <UART_SetConfig+0x1c0>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d002      	beq.n	8004944 <UART_SetConfig+0x1a8>
 800493e:	2b40      	cmp	r3, #64	; 0x40
 8004940:	d006      	beq.n	8004950 <UART_SetConfig+0x1b4>
 8004942:	e00b      	b.n	800495c <UART_SetConfig+0x1c0>
 8004944:	2300      	movs	r3, #0
 8004946:	77fb      	strb	r3, [r7, #31]
 8004948:	e0cc      	b.n	8004ae4 <UART_SetConfig+0x348>
 800494a:	2302      	movs	r3, #2
 800494c:	77fb      	strb	r3, [r7, #31]
 800494e:	e0c9      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004950:	2304      	movs	r3, #4
 8004952:	77fb      	strb	r3, [r7, #31]
 8004954:	e0c6      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004956:	2308      	movs	r3, #8
 8004958:	77fb      	strb	r3, [r7, #31]
 800495a:	e0c3      	b.n	8004ae4 <UART_SetConfig+0x348>
 800495c:	2310      	movs	r3, #16
 800495e:	77fb      	strb	r3, [r7, #31]
 8004960:	e0c0      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	4a44      	ldr	r2, [pc, #272]	; (8004a78 <UART_SetConfig+0x2dc>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d125      	bne.n	80049b8 <UART_SetConfig+0x21c>
 800496c:	4b3e      	ldr	r3, [pc, #248]	; (8004a68 <UART_SetConfig+0x2cc>)
 800496e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004976:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800497a:	d017      	beq.n	80049ac <UART_SetConfig+0x210>
 800497c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004980:	d817      	bhi.n	80049b2 <UART_SetConfig+0x216>
 8004982:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004986:	d00b      	beq.n	80049a0 <UART_SetConfig+0x204>
 8004988:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800498c:	d811      	bhi.n	80049b2 <UART_SetConfig+0x216>
 800498e:	2b00      	cmp	r3, #0
 8004990:	d003      	beq.n	800499a <UART_SetConfig+0x1fe>
 8004992:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004996:	d006      	beq.n	80049a6 <UART_SetConfig+0x20a>
 8004998:	e00b      	b.n	80049b2 <UART_SetConfig+0x216>
 800499a:	2300      	movs	r3, #0
 800499c:	77fb      	strb	r3, [r7, #31]
 800499e:	e0a1      	b.n	8004ae4 <UART_SetConfig+0x348>
 80049a0:	2302      	movs	r3, #2
 80049a2:	77fb      	strb	r3, [r7, #31]
 80049a4:	e09e      	b.n	8004ae4 <UART_SetConfig+0x348>
 80049a6:	2304      	movs	r3, #4
 80049a8:	77fb      	strb	r3, [r7, #31]
 80049aa:	e09b      	b.n	8004ae4 <UART_SetConfig+0x348>
 80049ac:	2308      	movs	r3, #8
 80049ae:	77fb      	strb	r3, [r7, #31]
 80049b0:	e098      	b.n	8004ae4 <UART_SetConfig+0x348>
 80049b2:	2310      	movs	r3, #16
 80049b4:	77fb      	strb	r3, [r7, #31]
 80049b6:	e095      	b.n	8004ae4 <UART_SetConfig+0x348>
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	4a2f      	ldr	r2, [pc, #188]	; (8004a7c <UART_SetConfig+0x2e0>)
 80049be:	4293      	cmp	r3, r2
 80049c0:	d125      	bne.n	8004a0e <UART_SetConfig+0x272>
 80049c2:	4b29      	ldr	r3, [pc, #164]	; (8004a68 <UART_SetConfig+0x2cc>)
 80049c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80049cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d0:	d017      	beq.n	8004a02 <UART_SetConfig+0x266>
 80049d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80049d6:	d817      	bhi.n	8004a08 <UART_SetConfig+0x26c>
 80049d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049dc:	d00b      	beq.n	80049f6 <UART_SetConfig+0x25a>
 80049de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049e2:	d811      	bhi.n	8004a08 <UART_SetConfig+0x26c>
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d003      	beq.n	80049f0 <UART_SetConfig+0x254>
 80049e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80049ec:	d006      	beq.n	80049fc <UART_SetConfig+0x260>
 80049ee:	e00b      	b.n	8004a08 <UART_SetConfig+0x26c>
 80049f0:	2301      	movs	r3, #1
 80049f2:	77fb      	strb	r3, [r7, #31]
 80049f4:	e076      	b.n	8004ae4 <UART_SetConfig+0x348>
 80049f6:	2302      	movs	r3, #2
 80049f8:	77fb      	strb	r3, [r7, #31]
 80049fa:	e073      	b.n	8004ae4 <UART_SetConfig+0x348>
 80049fc:	2304      	movs	r3, #4
 80049fe:	77fb      	strb	r3, [r7, #31]
 8004a00:	e070      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a02:	2308      	movs	r3, #8
 8004a04:	77fb      	strb	r3, [r7, #31]
 8004a06:	e06d      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a08:	2310      	movs	r3, #16
 8004a0a:	77fb      	strb	r3, [r7, #31]
 8004a0c:	e06a      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a1b      	ldr	r2, [pc, #108]	; (8004a80 <UART_SetConfig+0x2e4>)
 8004a14:	4293      	cmp	r3, r2
 8004a16:	d138      	bne.n	8004a8a <UART_SetConfig+0x2ee>
 8004a18:	4b13      	ldr	r3, [pc, #76]	; (8004a68 <UART_SetConfig+0x2cc>)
 8004a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a1e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004a22:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a26:	d017      	beq.n	8004a58 <UART_SetConfig+0x2bc>
 8004a28:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004a2c:	d82a      	bhi.n	8004a84 <UART_SetConfig+0x2e8>
 8004a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a32:	d00b      	beq.n	8004a4c <UART_SetConfig+0x2b0>
 8004a34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004a38:	d824      	bhi.n	8004a84 <UART_SetConfig+0x2e8>
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d003      	beq.n	8004a46 <UART_SetConfig+0x2aa>
 8004a3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a42:	d006      	beq.n	8004a52 <UART_SetConfig+0x2b6>
 8004a44:	e01e      	b.n	8004a84 <UART_SetConfig+0x2e8>
 8004a46:	2300      	movs	r3, #0
 8004a48:	77fb      	strb	r3, [r7, #31]
 8004a4a:	e04b      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a4c:	2302      	movs	r3, #2
 8004a4e:	77fb      	strb	r3, [r7, #31]
 8004a50:	e048      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a52:	2304      	movs	r3, #4
 8004a54:	77fb      	strb	r3, [r7, #31]
 8004a56:	e045      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a58:	2308      	movs	r3, #8
 8004a5a:	77fb      	strb	r3, [r7, #31]
 8004a5c:	e042      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a5e:	bf00      	nop
 8004a60:	efff69f3 	.word	0xefff69f3
 8004a64:	40011000 	.word	0x40011000
 8004a68:	40023800 	.word	0x40023800
 8004a6c:	40004400 	.word	0x40004400
 8004a70:	40004800 	.word	0x40004800
 8004a74:	40004c00 	.word	0x40004c00
 8004a78:	40005000 	.word	0x40005000
 8004a7c:	40011400 	.word	0x40011400
 8004a80:	40007800 	.word	0x40007800
 8004a84:	2310      	movs	r3, #16
 8004a86:	77fb      	strb	r3, [r7, #31]
 8004a88:	e02c      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	4a72      	ldr	r2, [pc, #456]	; (8004c58 <UART_SetConfig+0x4bc>)
 8004a90:	4293      	cmp	r3, r2
 8004a92:	d125      	bne.n	8004ae0 <UART_SetConfig+0x344>
 8004a94:	4b71      	ldr	r3, [pc, #452]	; (8004c5c <UART_SetConfig+0x4c0>)
 8004a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004a9a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004a9e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004aa2:	d017      	beq.n	8004ad4 <UART_SetConfig+0x338>
 8004aa4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004aa8:	d817      	bhi.n	8004ada <UART_SetConfig+0x33e>
 8004aaa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aae:	d00b      	beq.n	8004ac8 <UART_SetConfig+0x32c>
 8004ab0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ab4:	d811      	bhi.n	8004ada <UART_SetConfig+0x33e>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <UART_SetConfig+0x326>
 8004aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004abe:	d006      	beq.n	8004ace <UART_SetConfig+0x332>
 8004ac0:	e00b      	b.n	8004ada <UART_SetConfig+0x33e>
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	77fb      	strb	r3, [r7, #31]
 8004ac6:	e00d      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004ac8:	2302      	movs	r3, #2
 8004aca:	77fb      	strb	r3, [r7, #31]
 8004acc:	e00a      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004ace:	2304      	movs	r3, #4
 8004ad0:	77fb      	strb	r3, [r7, #31]
 8004ad2:	e007      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004ad4:	2308      	movs	r3, #8
 8004ad6:	77fb      	strb	r3, [r7, #31]
 8004ad8:	e004      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004ada:	2310      	movs	r3, #16
 8004adc:	77fb      	strb	r3, [r7, #31]
 8004ade:	e001      	b.n	8004ae4 <UART_SetConfig+0x348>
 8004ae0:	2310      	movs	r3, #16
 8004ae2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	69db      	ldr	r3, [r3, #28]
 8004ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aec:	d15b      	bne.n	8004ba6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004aee:	7ffb      	ldrb	r3, [r7, #31]
 8004af0:	2b08      	cmp	r3, #8
 8004af2:	d828      	bhi.n	8004b46 <UART_SetConfig+0x3aa>
 8004af4:	a201      	add	r2, pc, #4	; (adr r2, 8004afc <UART_SetConfig+0x360>)
 8004af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004afa:	bf00      	nop
 8004afc:	08004b21 	.word	0x08004b21
 8004b00:	08004b29 	.word	0x08004b29
 8004b04:	08004b31 	.word	0x08004b31
 8004b08:	08004b47 	.word	0x08004b47
 8004b0c:	08004b37 	.word	0x08004b37
 8004b10:	08004b47 	.word	0x08004b47
 8004b14:	08004b47 	.word	0x08004b47
 8004b18:	08004b47 	.word	0x08004b47
 8004b1c:	08004b3f 	.word	0x08004b3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b20:	f7fd fffa 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 8004b24:	61b8      	str	r0, [r7, #24]
        break;
 8004b26:	e013      	b.n	8004b50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004b28:	f7fe f80a 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8004b2c:	61b8      	str	r0, [r7, #24]
        break;
 8004b2e:	e00f      	b.n	8004b50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b30:	4b4b      	ldr	r3, [pc, #300]	; (8004c60 <UART_SetConfig+0x4c4>)
 8004b32:	61bb      	str	r3, [r7, #24]
        break;
 8004b34:	e00c      	b.n	8004b50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b36:	f7fd fedd 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8004b3a:	61b8      	str	r0, [r7, #24]
        break;
 8004b3c:	e008      	b.n	8004b50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004b42:	61bb      	str	r3, [r7, #24]
        break;
 8004b44:	e004      	b.n	8004b50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004b46:	2300      	movs	r3, #0
 8004b48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b4a:	2301      	movs	r3, #1
 8004b4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004b4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d074      	beq.n	8004c40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004b56:	69bb      	ldr	r3, [r7, #24]
 8004b58:	005a      	lsls	r2, r3, #1
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	085b      	lsrs	r3, r3, #1
 8004b60:	441a      	add	r2, r3
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	2b0f      	cmp	r3, #15
 8004b70:	d916      	bls.n	8004ba0 <UART_SetConfig+0x404>
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b78:	d212      	bcs.n	8004ba0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004b7a:	693b      	ldr	r3, [r7, #16]
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	f023 030f 	bic.w	r3, r3, #15
 8004b82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	085b      	lsrs	r3, r3, #1
 8004b88:	b29b      	uxth	r3, r3
 8004b8a:	f003 0307 	and.w	r3, r3, #7
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	89fb      	ldrh	r3, [r7, #14]
 8004b92:	4313      	orrs	r3, r2
 8004b94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	89fa      	ldrh	r2, [r7, #14]
 8004b9c:	60da      	str	r2, [r3, #12]
 8004b9e:	e04f      	b.n	8004c40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	77bb      	strb	r3, [r7, #30]
 8004ba4:	e04c      	b.n	8004c40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004ba6:	7ffb      	ldrb	r3, [r7, #31]
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d828      	bhi.n	8004bfe <UART_SetConfig+0x462>
 8004bac:	a201      	add	r2, pc, #4	; (adr r2, 8004bb4 <UART_SetConfig+0x418>)
 8004bae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bb2:	bf00      	nop
 8004bb4:	08004bd9 	.word	0x08004bd9
 8004bb8:	08004be1 	.word	0x08004be1
 8004bbc:	08004be9 	.word	0x08004be9
 8004bc0:	08004bff 	.word	0x08004bff
 8004bc4:	08004bef 	.word	0x08004bef
 8004bc8:	08004bff 	.word	0x08004bff
 8004bcc:	08004bff 	.word	0x08004bff
 8004bd0:	08004bff 	.word	0x08004bff
 8004bd4:	08004bf7 	.word	0x08004bf7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004bd8:	f7fd ff9e 	bl	8002b18 <HAL_RCC_GetPCLK1Freq>
 8004bdc:	61b8      	str	r0, [r7, #24]
        break;
 8004bde:	e013      	b.n	8004c08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004be0:	f7fd ffae 	bl	8002b40 <HAL_RCC_GetPCLK2Freq>
 8004be4:	61b8      	str	r0, [r7, #24]
        break;
 8004be6:	e00f      	b.n	8004c08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004be8:	4b1d      	ldr	r3, [pc, #116]	; (8004c60 <UART_SetConfig+0x4c4>)
 8004bea:	61bb      	str	r3, [r7, #24]
        break;
 8004bec:	e00c      	b.n	8004c08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bee:	f7fd fe81 	bl	80028f4 <HAL_RCC_GetSysClockFreq>
 8004bf2:	61b8      	str	r0, [r7, #24]
        break;
 8004bf4:	e008      	b.n	8004c08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004bf6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004bfa:	61bb      	str	r3, [r7, #24]
        break;
 8004bfc:	e004      	b.n	8004c08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004bfe:	2300      	movs	r3, #0
 8004c00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	77bb      	strb	r3, [r7, #30]
        break;
 8004c06:	bf00      	nop
    }

    if (pclk != 0U)
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d018      	beq.n	8004c40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	685b      	ldr	r3, [r3, #4]
 8004c12:	085a      	lsrs	r2, r3, #1
 8004c14:	69bb      	ldr	r3, [r7, #24]
 8004c16:	441a      	add	r2, r3
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	685b      	ldr	r3, [r3, #4]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004c22:	693b      	ldr	r3, [r7, #16]
 8004c24:	2b0f      	cmp	r3, #15
 8004c26:	d909      	bls.n	8004c3c <UART_SetConfig+0x4a0>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c2e:	d205      	bcs.n	8004c3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	b29a      	uxth	r2, r3
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	60da      	str	r2, [r3, #12]
 8004c3a:	e001      	b.n	8004c40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004c3c:	2301      	movs	r3, #1
 8004c3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2200      	movs	r2, #0
 8004c44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2200      	movs	r2, #0
 8004c4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004c4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
 8004c56:	bf00      	nop
 8004c58:	40007c00 	.word	0x40007c00
 8004c5c:	40023800 	.word	0x40023800
 8004c60:	00f42400 	.word	0x00f42400

08004c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c64:	b480      	push	{r7}
 8004c66:	b083      	sub	sp, #12
 8004c68:	af00      	add	r7, sp, #0
 8004c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c70:	f003 0301 	and.w	r3, r3, #1
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d00a      	beq.n	8004c8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	f003 0302 	and.w	r3, r3, #2
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d00a      	beq.n	8004cb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	685b      	ldr	r3, [r3, #4]
 8004ca0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	430a      	orrs	r2, r1
 8004cae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	f003 0304 	and.w	r3, r3, #4
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00a      	beq.n	8004cd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	685b      	ldr	r3, [r3, #4]
 8004cc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	430a      	orrs	r2, r1
 8004cd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00a      	beq.n	8004cf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	430a      	orrs	r2, r1
 8004cf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf8:	f003 0310 	and.w	r3, r3, #16
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d00a      	beq.n	8004d16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	430a      	orrs	r2, r1
 8004d14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d1a:	f003 0320 	and.w	r3, r3, #32
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d00a      	beq.n	8004d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	689b      	ldr	r3, [r3, #8]
 8004d28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	430a      	orrs	r2, r1
 8004d36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d01a      	beq.n	8004d7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d62:	d10a      	bne.n	8004d7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	685b      	ldr	r3, [r3, #4]
 8004d6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	430a      	orrs	r2, r1
 8004d78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d00a      	beq.n	8004d9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	685b      	ldr	r3, [r3, #4]
 8004d8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	605a      	str	r2, [r3, #4]
  }
}
 8004d9c:	bf00      	nop
 8004d9e:	370c      	adds	r7, #12
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b086      	sub	sp, #24
 8004dac:	af02      	add	r7, sp, #8
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2200      	movs	r2, #0
 8004db4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004db8:	f7fc fa58 	bl	800126c <HAL_GetTick>
 8004dbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	f003 0308 	and.w	r3, r3, #8
 8004dc8:	2b08      	cmp	r3, #8
 8004dca:	d10e      	bne.n	8004dea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004dcc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dd0:	9300      	str	r3, [sp, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 f831 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 8004de0:	4603      	mov	r3, r0
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d001      	beq.n	8004dea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004de6:	2303      	movs	r3, #3
 8004de8:	e027      	b.n	8004e3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0304 	and.w	r3, r3, #4
 8004df4:	2b04      	cmp	r3, #4
 8004df6:	d10e      	bne.n	8004e16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004df8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004dfc:	9300      	str	r3, [sp, #0]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	f000 f81b 	bl	8004e42 <UART_WaitOnFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e12:	2303      	movs	r3, #3
 8004e14:	e011      	b.n	8004e3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2220      	movs	r2, #32
 8004e1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2200      	movs	r2, #0
 8004e28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2200      	movs	r2, #0
 8004e34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004e38:	2300      	movs	r3, #0
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3710      	adds	r7, #16
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	bd80      	pop	{r7, pc}

08004e42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b09c      	sub	sp, #112	; 0x70
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	60f8      	str	r0, [r7, #12]
 8004e4a:	60b9      	str	r1, [r7, #8]
 8004e4c:	603b      	str	r3, [r7, #0]
 8004e4e:	4613      	mov	r3, r2
 8004e50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e52:	e0a7      	b.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	f000 80a3 	beq.w	8004fa4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e5e:	f7fc fa05 	bl	800126c <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004e6a:	429a      	cmp	r2, r3
 8004e6c:	d302      	bcc.n	8004e74 <UART_WaitOnFlagUntilTimeout+0x32>
 8004e6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d13f      	bne.n	8004ef4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e7c:	e853 3f00 	ldrex	r3, [r3]
 8004e80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004e82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e88:	667b      	str	r3, [r7, #100]	; 0x64
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	461a      	mov	r2, r3
 8004e90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004e92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004e94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004e98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004ea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e6      	bne.n	8004e74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3308      	adds	r3, #8
 8004eac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	663b      	str	r3, [r7, #96]	; 0x60
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	3308      	adds	r3, #8
 8004ec4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004ec6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004ec8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004ecc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004ece:	e841 2300 	strex	r3, r2, [r1]
 8004ed2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004ed4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1e5      	bne.n	8004ea6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	2220      	movs	r2, #32
 8004ede:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004ee0:	68fb      	ldr	r3, [r7, #12]
 8004ee2:	2220      	movs	r2, #32
 8004ee4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2200      	movs	r2, #0
 8004eec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004ef0:	2303      	movs	r3, #3
 8004ef2:	e068      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f003 0304 	and.w	r3, r3, #4
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d050      	beq.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f10:	d148      	bne.n	8004fa4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004f1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f24:	e853 3f00 	ldrex	r3, [r3]
 8004f28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004f30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	461a      	mov	r2, r3
 8004f38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004f3c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004f40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e6      	bne.n	8004f1c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3308      	adds	r3, #8
 8004f54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	697b      	ldr	r3, [r7, #20]
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004f5e:	693b      	ldr	r3, [r7, #16]
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	3308      	adds	r3, #8
 8004f6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f6e:	623a      	str	r2, [r7, #32]
 8004f70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f72:	69f9      	ldr	r1, [r7, #28]
 8004f74:	6a3a      	ldr	r2, [r7, #32]
 8004f76:	e841 2300 	strex	r3, r2, [r1]
 8004f7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1e5      	bne.n	8004f4e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	2220      	movs	r2, #32
 8004f86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2220      	movs	r2, #32
 8004f8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	2220      	movs	r2, #32
 8004f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	e010      	b.n	8004fc6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	69da      	ldr	r2, [r3, #28]
 8004faa:	68bb      	ldr	r3, [r7, #8]
 8004fac:	4013      	ands	r3, r2
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	429a      	cmp	r2, r3
 8004fb2:	bf0c      	ite	eq
 8004fb4:	2301      	moveq	r3, #1
 8004fb6:	2300      	movne	r3, #0
 8004fb8:	b2db      	uxtb	r3, r3
 8004fba:	461a      	mov	r2, r3
 8004fbc:	79fb      	ldrb	r3, [r7, #7]
 8004fbe:	429a      	cmp	r2, r3
 8004fc0:	f43f af48 	beq.w	8004e54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004fc4:	2300      	movs	r3, #0
}
 8004fc6:	4618      	mov	r0, r3
 8004fc8:	3770      	adds	r7, #112	; 0x70
 8004fca:	46bd      	mov	sp, r7
 8004fcc:	bd80      	pop	{r7, pc}
	...

08004fd0 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004fd0:	b084      	sub	sp, #16
 8004fd2:	b580      	push	{r7, lr}
 8004fd4:	b084      	sub	sp, #16
 8004fd6:	af00      	add	r7, sp, #0
 8004fd8:	6078      	str	r0, [r7, #4]
 8004fda:	f107 001c 	add.w	r0, r7, #28
 8004fde:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe4:	2b01      	cmp	r3, #1
 8004fe6:	d120      	bne.n	800502a <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fec:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	4b20      	ldr	r3, [pc, #128]	; (800507c <USB_CoreInit+0xac>)
 8004ffa:	4013      	ands	r3, r2
 8004ffc:	687a      	ldr	r2, [r7, #4]
 8004ffe:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	68db      	ldr	r3, [r3, #12]
 8005004:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800500c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800500e:	2b01      	cmp	r3, #1
 8005010:	d105      	bne.n	800501e <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	68db      	ldr	r3, [r3, #12]
 8005016:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fa96 	bl	8005550 <USB_CoreReset>
 8005024:	4603      	mov	r3, r0
 8005026:	73fb      	strb	r3, [r7, #15]
 8005028:	e010      	b.n	800504c <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fa8a 	bl	8005550 <USB_CoreReset>
 800503c:	4603      	mov	r3, r0
 800503e:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005044:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2b01      	cmp	r3, #1
 8005050:	d10b      	bne.n	800506a <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f043 0206 	orr.w	r2, r3, #6
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	689b      	ldr	r3, [r3, #8]
 8005062:	f043 0220 	orr.w	r2, r3, #32
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800506a:	7bfb      	ldrb	r3, [r7, #15]
}
 800506c:	4618      	mov	r0, r3
 800506e:	3710      	adds	r7, #16
 8005070:	46bd      	mov	sp, r7
 8005072:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005076:	b004      	add	sp, #16
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	ffbdffbf 	.word	0xffbdffbf

08005080 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	689b      	ldr	r3, [r3, #8]
 800508c:	f023 0201 	bic.w	r2, r3, #1
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr

080050a2 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80050a2:	b580      	push	{r7, lr}
 80050a4:	b084      	sub	sp, #16
 80050a6:	af00      	add	r7, sp, #0
 80050a8:	6078      	str	r0, [r7, #4]
 80050aa:	460b      	mov	r3, r1
 80050ac:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80050ae:	2300      	movs	r3, #0
 80050b0:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	68db      	ldr	r3, [r3, #12]
 80050b6:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80050be:	78fb      	ldrb	r3, [r7, #3]
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d115      	bne.n	80050f0 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	68db      	ldr	r3, [r3, #12]
 80050c8:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80050d0:	2001      	movs	r0, #1
 80050d2:	f7fc f8d7 	bl	8001284 <HAL_Delay>
      ms++;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	3301      	adds	r3, #1
 80050da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80050dc:	6878      	ldr	r0, [r7, #4]
 80050de:	f000 fa29 	bl	8005534 <USB_GetMode>
 80050e2:	4603      	mov	r3, r0
 80050e4:	2b01      	cmp	r3, #1
 80050e6:	d01e      	beq.n	8005126 <USB_SetCurrentMode+0x84>
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	2b31      	cmp	r3, #49	; 0x31
 80050ec:	d9f0      	bls.n	80050d0 <USB_SetCurrentMode+0x2e>
 80050ee:	e01a      	b.n	8005126 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80050f0:	78fb      	ldrb	r3, [r7, #3]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d115      	bne.n	8005122 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	68db      	ldr	r3, [r3, #12]
 80050fa:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005102:	2001      	movs	r0, #1
 8005104:	f7fc f8be 	bl	8001284 <HAL_Delay>
      ms++;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	3301      	adds	r3, #1
 800510c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800510e:	6878      	ldr	r0, [r7, #4]
 8005110:	f000 fa10 	bl	8005534 <USB_GetMode>
 8005114:	4603      	mov	r3, r0
 8005116:	2b00      	cmp	r3, #0
 8005118:	d005      	beq.n	8005126 <USB_SetCurrentMode+0x84>
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2b31      	cmp	r3, #49	; 0x31
 800511e:	d9f0      	bls.n	8005102 <USB_SetCurrentMode+0x60>
 8005120:	e001      	b.n	8005126 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e005      	b.n	8005132 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2b32      	cmp	r3, #50	; 0x32
 800512a:	d101      	bne.n	8005130 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800512c:	2301      	movs	r3, #1
 800512e:	e000      	b.n	8005132 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005130:	2300      	movs	r3, #0
}
 8005132:	4618      	mov	r0, r3
 8005134:	3710      	adds	r7, #16
 8005136:	46bd      	mov	sp, r7
 8005138:	bd80      	pop	{r7, pc}
	...

0800513c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800513c:	b084      	sub	sp, #16
 800513e:	b580      	push	{r7, lr}
 8005140:	b086      	sub	sp, #24
 8005142:	af00      	add	r7, sp, #0
 8005144:	6078      	str	r0, [r7, #4]
 8005146:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800514a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800514e:	2300      	movs	r3, #0
 8005150:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005156:	2300      	movs	r3, #0
 8005158:	613b      	str	r3, [r7, #16]
 800515a:	e009      	b.n	8005170 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 800515c:	687a      	ldr	r2, [r7, #4]
 800515e:	693b      	ldr	r3, [r7, #16]
 8005160:	3340      	adds	r3, #64	; 0x40
 8005162:	009b      	lsls	r3, r3, #2
 8005164:	4413      	add	r3, r2
 8005166:	2200      	movs	r2, #0
 8005168:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	3301      	adds	r3, #1
 800516e:	613b      	str	r3, [r7, #16]
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	2b0e      	cmp	r3, #14
 8005174:	d9f2      	bls.n	800515c <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005176:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005178:	2b00      	cmp	r3, #0
 800517a:	d11c      	bne.n	80051b6 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005182:	685b      	ldr	r3, [r3, #4]
 8005184:	68fa      	ldr	r2, [r7, #12]
 8005186:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800518a:	f043 0302 	orr.w	r3, r3, #2
 800518e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005194:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e005      	b.n	80051c2 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80051c8:	461a      	mov	r2, r3
 80051ca:	2300      	movs	r3, #0
 80051cc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051d4:	4619      	mov	r1, r3
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051dc:	461a      	mov	r2, r3
 80051de:	680b      	ldr	r3, [r1, #0]
 80051e0:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80051e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e4:	2b01      	cmp	r3, #1
 80051e6:	d10c      	bne.n	8005202 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80051e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d104      	bne.n	80051f8 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80051ee:	2100      	movs	r1, #0
 80051f0:	6878      	ldr	r0, [r7, #4]
 80051f2:	f000 f965 	bl	80054c0 <USB_SetDevSpeed>
 80051f6:	e008      	b.n	800520a <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80051f8:	2101      	movs	r1, #1
 80051fa:	6878      	ldr	r0, [r7, #4]
 80051fc:	f000 f960 	bl	80054c0 <USB_SetDevSpeed>
 8005200:	e003      	b.n	800520a <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005202:	2103      	movs	r1, #3
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 f95b 	bl	80054c0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800520a:	2110      	movs	r1, #16
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f000 f8f3 	bl	80053f8 <USB_FlushTxFifo>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 f91f 	bl	8005460 <USB_FlushRxFifo>
 8005222:	4603      	mov	r3, r0
 8005224:	2b00      	cmp	r3, #0
 8005226:	d001      	beq.n	800522c <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005232:	461a      	mov	r2, r3
 8005234:	2300      	movs	r3, #0
 8005236:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800523e:	461a      	mov	r2, r3
 8005240:	2300      	movs	r3, #0
 8005242:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800524a:	461a      	mov	r2, r3
 800524c:	2300      	movs	r3, #0
 800524e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005250:	2300      	movs	r3, #0
 8005252:	613b      	str	r3, [r7, #16]
 8005254:	e043      	b.n	80052de <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005268:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800526c:	d118      	bne.n	80052a0 <USB_DevInit+0x164>
    {
      if (i == 0U)
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	2b00      	cmp	r3, #0
 8005272:	d10a      	bne.n	800528a <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005274:	693b      	ldr	r3, [r7, #16]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005280:	461a      	mov	r2, r3
 8005282:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	e013      	b.n	80052b2 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800528a:	693b      	ldr	r3, [r7, #16]
 800528c:	015a      	lsls	r2, r3, #5
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	4413      	add	r3, r2
 8005292:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005296:	461a      	mov	r2, r3
 8005298:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800529c:	6013      	str	r3, [r2, #0]
 800529e:	e008      	b.n	80052b2 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	461a      	mov	r2, r3
 80052ae:	2300      	movs	r3, #0
 80052b0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80052b2:	693b      	ldr	r3, [r7, #16]
 80052b4:	015a      	lsls	r2, r3, #5
 80052b6:	68fb      	ldr	r3, [r7, #12]
 80052b8:	4413      	add	r3, r2
 80052ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052be:	461a      	mov	r2, r3
 80052c0:	2300      	movs	r3, #0
 80052c2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	015a      	lsls	r2, r3, #5
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	4413      	add	r3, r2
 80052cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052d0:	461a      	mov	r2, r3
 80052d2:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80052d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	3301      	adds	r3, #1
 80052dc:	613b      	str	r3, [r7, #16]
 80052de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e0:	693a      	ldr	r2, [r7, #16]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d3b7      	bcc.n	8005256 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80052e6:	2300      	movs	r3, #0
 80052e8:	613b      	str	r3, [r7, #16]
 80052ea:	e043      	b.n	8005374 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80052ec:	693b      	ldr	r3, [r7, #16]
 80052ee:	015a      	lsls	r2, r3, #5
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4413      	add	r3, r2
 80052f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80052fe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005302:	d118      	bne.n	8005336 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	2b00      	cmp	r3, #0
 8005308:	d10a      	bne.n	8005320 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	461a      	mov	r2, r3
 8005318:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800531c:	6013      	str	r3, [r2, #0]
 800531e:	e013      	b.n	8005348 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005320:	693b      	ldr	r3, [r7, #16]
 8005322:	015a      	lsls	r2, r3, #5
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4413      	add	r3, r2
 8005328:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800532c:	461a      	mov	r2, r3
 800532e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005332:	6013      	str	r3, [r2, #0]
 8005334:	e008      	b.n	8005348 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	015a      	lsls	r2, r3, #5
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005342:	461a      	mov	r2, r3
 8005344:	2300      	movs	r3, #0
 8005346:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005348:	693b      	ldr	r3, [r7, #16]
 800534a:	015a      	lsls	r2, r3, #5
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	4413      	add	r3, r2
 8005350:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005354:	461a      	mov	r2, r3
 8005356:	2300      	movs	r3, #0
 8005358:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005366:	461a      	mov	r2, r3
 8005368:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800536c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800536e:	693b      	ldr	r3, [r7, #16]
 8005370:	3301      	adds	r3, #1
 8005372:	613b      	str	r3, [r7, #16]
 8005374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	429a      	cmp	r2, r3
 800537a:	d3b7      	bcc.n	80052ec <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	691b      	ldr	r3, [r3, #16]
 8005384:	68fa      	ldr	r2, [r7, #12]
 8005386:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800538a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800538e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2200      	movs	r2, #0
 8005394:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800539c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800539e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d105      	bne.n	80053b0 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	699b      	ldr	r3, [r3, #24]
 80053a8:	f043 0210 	orr.w	r2, r3, #16
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	699a      	ldr	r2, [r3, #24]
 80053b4:	4b0e      	ldr	r3, [pc, #56]	; (80053f0 <USB_DevInit+0x2b4>)
 80053b6:	4313      	orrs	r3, r2
 80053b8:	687a      	ldr	r2, [r7, #4]
 80053ba:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80053bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d005      	beq.n	80053ce <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	699b      	ldr	r3, [r3, #24]
 80053c6:	f043 0208 	orr.w	r2, r3, #8
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80053ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80053d0:	2b01      	cmp	r3, #1
 80053d2:	d105      	bne.n	80053e0 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	699a      	ldr	r2, [r3, #24]
 80053d8:	4b06      	ldr	r3, [pc, #24]	; (80053f4 <USB_DevInit+0x2b8>)
 80053da:	4313      	orrs	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80053e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80053ec:	b004      	add	sp, #16
 80053ee:	4770      	bx	lr
 80053f0:	803c3800 	.word	0x803c3800
 80053f4:	40000004 	.word	0x40000004

080053f8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b085      	sub	sp, #20
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
 8005400:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005402:	2300      	movs	r3, #0
 8005404:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	3301      	adds	r3, #1
 800540a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	4a13      	ldr	r2, [pc, #76]	; (800545c <USB_FlushTxFifo+0x64>)
 8005410:	4293      	cmp	r3, r2
 8005412:	d901      	bls.n	8005418 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005414:	2303      	movs	r3, #3
 8005416:	e01b      	b.n	8005450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	2b00      	cmp	r3, #0
 800541e:	daf2      	bge.n	8005406 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005420:	2300      	movs	r3, #0
 8005422:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005424:	683b      	ldr	r3, [r7, #0]
 8005426:	019b      	lsls	r3, r3, #6
 8005428:	f043 0220 	orr.w	r2, r3, #32
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	3301      	adds	r3, #1
 8005434:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	4a08      	ldr	r2, [pc, #32]	; (800545c <USB_FlushTxFifo+0x64>)
 800543a:	4293      	cmp	r3, r2
 800543c:	d901      	bls.n	8005442 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800543e:	2303      	movs	r3, #3
 8005440:	e006      	b.n	8005450 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	691b      	ldr	r3, [r3, #16]
 8005446:	f003 0320 	and.w	r3, r3, #32
 800544a:	2b20      	cmp	r3, #32
 800544c:	d0f0      	beq.n	8005430 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3714      	adds	r7, #20
 8005454:	46bd      	mov	sp, r7
 8005456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545a:	4770      	bx	lr
 800545c:	00030d40 	.word	0x00030d40

08005460 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005460:	b480      	push	{r7}
 8005462:	b085      	sub	sp, #20
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	3301      	adds	r3, #1
 8005470:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	4a11      	ldr	r2, [pc, #68]	; (80054bc <USB_FlushRxFifo+0x5c>)
 8005476:	4293      	cmp	r3, r2
 8005478:	d901      	bls.n	800547e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e018      	b.n	80054b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	2b00      	cmp	r3, #0
 8005484:	daf2      	bge.n	800546c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005486:	2300      	movs	r3, #0
 8005488:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2210      	movs	r2, #16
 800548e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	3301      	adds	r3, #1
 8005494:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	4a08      	ldr	r2, [pc, #32]	; (80054bc <USB_FlushRxFifo+0x5c>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d901      	bls.n	80054a2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e006      	b.n	80054b0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	691b      	ldr	r3, [r3, #16]
 80054a6:	f003 0310 	and.w	r3, r3, #16
 80054aa:	2b10      	cmp	r3, #16
 80054ac:	d0f0      	beq.n	8005490 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80054ae:	2300      	movs	r3, #0
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3714      	adds	r7, #20
 80054b4:	46bd      	mov	sp, r7
 80054b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ba:	4770      	bx	lr
 80054bc:	00030d40 	.word	0x00030d40

080054c0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80054c0:	b480      	push	{r7}
 80054c2:	b085      	sub	sp, #20
 80054c4:	af00      	add	r7, sp, #0
 80054c6:	6078      	str	r0, [r7, #4]
 80054c8:	460b      	mov	r3, r1
 80054ca:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	78fb      	ldrb	r3, [r7, #3]
 80054da:	68f9      	ldr	r1, [r7, #12]
 80054dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80054e0:	4313      	orrs	r3, r2
 80054e2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3714      	adds	r7, #20
 80054ea:	46bd      	mov	sp, r7
 80054ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f0:	4770      	bx	lr

080054f2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80054f2:	b480      	push	{r7}
 80054f4:	b085      	sub	sp, #20
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	68fa      	ldr	r2, [r7, #12]
 8005508:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800550c:	f023 0303 	bic.w	r3, r3, #3
 8005510:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	68fa      	ldr	r2, [r7, #12]
 800551c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005520:	f043 0302 	orr.w	r3, r3, #2
 8005524:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005526:	2300      	movs	r3, #0
}
 8005528:	4618      	mov	r0, r3
 800552a:	3714      	adds	r7, #20
 800552c:	46bd      	mov	sp, r7
 800552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005532:	4770      	bx	lr

08005534 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005534:	b480      	push	{r7}
 8005536:	b083      	sub	sp, #12
 8005538:	af00      	add	r7, sp, #0
 800553a:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	695b      	ldr	r3, [r3, #20]
 8005540:	f003 0301 	and.w	r3, r3, #1
}
 8005544:	4618      	mov	r0, r3
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005550:	b480      	push	{r7}
 8005552:	b085      	sub	sp, #20
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005558:	2300      	movs	r3, #0
 800555a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	3301      	adds	r3, #1
 8005560:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	4a13      	ldr	r2, [pc, #76]	; (80055b4 <USB_CoreReset+0x64>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d901      	bls.n	800556e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800556a:	2303      	movs	r3, #3
 800556c:	e01b      	b.n	80055a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	691b      	ldr	r3, [r3, #16]
 8005572:	2b00      	cmp	r3, #0
 8005574:	daf2      	bge.n	800555c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005576:	2300      	movs	r3, #0
 8005578:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f043 0201 	orr.w	r2, r3, #1
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	3301      	adds	r3, #1
 800558a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	4a09      	ldr	r2, [pc, #36]	; (80055b4 <USB_CoreReset+0x64>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d901      	bls.n	8005598 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005594:	2303      	movs	r3, #3
 8005596:	e006      	b.n	80055a6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0301 	and.w	r3, r3, #1
 80055a0:	2b01      	cmp	r3, #1
 80055a2:	d0f0      	beq.n	8005586 <USB_CoreReset+0x36>

  return HAL_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3714      	adds	r7, #20
 80055aa:	46bd      	mov	sp, r7
 80055ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b0:	4770      	bx	lr
 80055b2:	bf00      	nop
 80055b4:	00030d40 	.word	0x00030d40

080055b8 <__libc_init_array>:
 80055b8:	b570      	push	{r4, r5, r6, lr}
 80055ba:	4d0d      	ldr	r5, [pc, #52]	; (80055f0 <__libc_init_array+0x38>)
 80055bc:	4c0d      	ldr	r4, [pc, #52]	; (80055f4 <__libc_init_array+0x3c>)
 80055be:	1b64      	subs	r4, r4, r5
 80055c0:	10a4      	asrs	r4, r4, #2
 80055c2:	2600      	movs	r6, #0
 80055c4:	42a6      	cmp	r6, r4
 80055c6:	d109      	bne.n	80055dc <__libc_init_array+0x24>
 80055c8:	4d0b      	ldr	r5, [pc, #44]	; (80055f8 <__libc_init_array+0x40>)
 80055ca:	4c0c      	ldr	r4, [pc, #48]	; (80055fc <__libc_init_array+0x44>)
 80055cc:	f000 f820 	bl	8005610 <_init>
 80055d0:	1b64      	subs	r4, r4, r5
 80055d2:	10a4      	asrs	r4, r4, #2
 80055d4:	2600      	movs	r6, #0
 80055d6:	42a6      	cmp	r6, r4
 80055d8:	d105      	bne.n	80055e6 <__libc_init_array+0x2e>
 80055da:	bd70      	pop	{r4, r5, r6, pc}
 80055dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80055e0:	4798      	blx	r3
 80055e2:	3601      	adds	r6, #1
 80055e4:	e7ee      	b.n	80055c4 <__libc_init_array+0xc>
 80055e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80055ea:	4798      	blx	r3
 80055ec:	3601      	adds	r6, #1
 80055ee:	e7f2      	b.n	80055d6 <__libc_init_array+0x1e>
 80055f0:	0800565c 	.word	0x0800565c
 80055f4:	0800565c 	.word	0x0800565c
 80055f8:	0800565c 	.word	0x0800565c
 80055fc:	08005660 	.word	0x08005660

08005600 <memset>:
 8005600:	4402      	add	r2, r0
 8005602:	4603      	mov	r3, r0
 8005604:	4293      	cmp	r3, r2
 8005606:	d100      	bne.n	800560a <memset+0xa>
 8005608:	4770      	bx	lr
 800560a:	f803 1b01 	strb.w	r1, [r3], #1
 800560e:	e7f9      	b.n	8005604 <memset+0x4>

08005610 <_init>:
 8005610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005612:	bf00      	nop
 8005614:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005616:	bc08      	pop	{r3}
 8005618:	469e      	mov	lr, r3
 800561a:	4770      	bx	lr

0800561c <_fini>:
 800561c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800561e:	bf00      	nop
 8005620:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005622:	bc08      	pop	{r3}
 8005624:	469e      	mov	lr, r3
 8005626:	4770      	bx	lr
